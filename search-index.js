var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",1,[[["acautomaton"]],["fullacautomaton"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",2,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",2,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",2,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",2,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",2,N],[10,"pattern","","Returns the pattern indexed at `i`.",2,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",3,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",3,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",3,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",3,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",3,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",3,[[["self"],["f"]]]],[11,"new","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",4,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",4,[[["self"]],["fullacautomaton"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"next_state","","",1,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",1,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",1,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",1,N],[11,"patterns","","",1,N],[11,"pattern","","",1,[[["self"],["usize"]],["p"]]],[11,"next_state","","",4,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",4,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",4,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",4,N],[11,"patterns","","",4,N],[11,"pattern","","",4,[[["self"],["usize"]],["p"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"next","","",5,[[["self"]],["option",["match"]]]],[11,"next","","",7,[[["self"]],["option",["result"]]]],[11,"next","","",6,[[["self"]],["option",["match"]]]],[11,"next","","",8,[[["self"]],["option",["result"]]]],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"clone","","",0,[[["self"]],["match"]]],[11,"clone","","",1,[[["self"]],["fullacautomaton"]]],[11,"clone","","",4,[[["self"]],["acautomaton"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"from_iter","","Create an automaton from an iterator of strings.",4,[[["t"]],["acautomaton"]]],[11,"len","","Return the number of patterns in the automaton.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",2,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",2,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",2,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",2,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Matches"],[3,"MatchesOverlapping"],[3,"StreamMatches"],[3,"StreamMatchesOverlapping"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["stream"]]]],"paths":[[4,"Stream"]]};
searchIndex["auto_impl"]={"doc":"A proc-macro attribute for automatically implementing a trait for references, some common smart pointers and closures.","items":[[23,"auto_impl","auto_impl","See crate documentation for more information.",N,N]],"paths":[]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"default","","",3,[[],["backtrace"]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]]],"paths":[[4,"backtrace_state"]]};
searchIndex["base64"]={"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"DecodeError","","Errors that can occur while decoding.",N,N],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,N],[13,"InvalidLength","","The length of the input is invalid.",0,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",1,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,N],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,N],[4,"LineEnding","","Line ending used in optional line wrapping.",N,N],[13,"LF","","Unix-style \\n",2,N],[13,"CRLF","","Windows-style \\r\\n",2,N],[4,"LineWrap","","Line wrap configuration.",N,N],[13,"NoWrap","","Don't wrap.",3,N],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",N,[[["t"],["config"],["string"]]]],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",N,N],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[5,"decode_config_slice","","Decode the input into the provided output slice.",N,N],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",N,N],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",N,N],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",N,N],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,N],[11,"with_config","","Create a `Base64Display` with the provided config.",5,N],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,N],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,N],[17,"STANDARD","base64","Standard character set with padding.",N,N],[17,"STANDARD_NO_PAD","","Standard character set without padding.",N,N],[17,"MIME","","As per standards for MIME encoded messages",N,N],[17,"URL_SAFE","","URL-safe character set with padding",N,N],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",N,N],[17,"CRYPT","","As per `crypt(3)` requirements",N,N],[11,"new","","Create a new `Config`.",6,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","base64::display","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"eq","","",4,[[["self"],["displayerror"]],["bool"]]],[11,"eq","base64","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["decodeerror"]],["bool"]]],[11,"clone","","",0,[[["self"]],["decodeerror"]]],[11,"clone","","",1,[[["self"]],["characterset"]]],[11,"clone","","",2,[[["self"]],["lineending"]]],[11,"clone","","",3,[[["self"]],["linewrap"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"fmt","base64::display","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","base64","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","base64::display","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","base64","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"default","","",4,[[],["littleendian"]]],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"new","","Creates a new `Chain` sequencing the provided values.",1,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",1,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",1,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",1,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",1,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",1,N],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",2,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",2,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",2,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",3,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",3,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",3,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",4,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",4,[[["self"],["usize"]]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",5,[[["self"]],["b"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",6,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",6,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[10,"advance","","Advance the internal cursor of the Buf",6,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",7,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",7,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",8,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",9,N],[10,"into_buf","","Creates a `Buf` from a value.",9,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",10,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",10,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",10,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",10,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",10,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",10,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",10,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",10,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",10,N],[11,"split_off","","Splits the bytes into two at the given index.",10,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",10,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",10,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",10,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",10,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",10,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",10,N],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",11,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",11,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",11,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",11,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",11,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",11,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",11,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",11,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",11,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",11,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",11,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",11,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",11,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",11,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",11,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",11,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",11,[[["self"],["bytesmut"]]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",6,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",6,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[10,"advance","bytes","Advance the internal cursor of the Buf",6,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",7,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",7,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",9,N],[10,"into_buf","","Creates a `Buf` from a value.",9,N],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","bytes::buf","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"clone","bytes","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"default","","",12,[[],["bigendian"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"remaining","bytes::buf","",1,[[["self"]],["usize"]]],[11,"bytes","","",1,N],[11,"advance","","",1,[[["self"],["usize"]]]],[11,"bytes_vec","","",1,N],[11,"remaining","","",4,[[["self"]],["usize"]]],[11,"bytes","","",4,N],[11,"advance","","",4,[[["self"],["usize"]]]],[11,"remaining_mut","","",1,[[["self"]],["usize"]]],[11,"bytes_mut","","",1,N],[11,"advance_mut","","",1,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",1,N],[11,"remaining_mut","bytes","",11,[[["self"]],["usize"]]],[11,"advance_mut","","",11,[[["self"],["usize"]]]],[11,"bytes_mut","","",11,N],[11,"put_slice","","",11,N],[11,"put_u8","","",11,[[["self"],["u8"]]]],[11,"put_i8","","",11,[[["self"],["i8"]]]],[11,"from_buf","","",10,[[["t"]],["self"]]],[11,"from_buf","","",11,[[["t"]],["self"]]],[11,"into_buf","","",10,N],[11,"into_buf","","",11,N],[11,"next","bytes::buf","",2,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",2,N],[11,"as_mut","bytes","",11,N],[11,"partial_cmp","","",10,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,N],[11,"partial_cmp","","",11,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",11,[[["self"],["t"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,N],[11,"partial_cmp","","",10,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["t"]],["option",["ordering"]]]],[11,"default","","",10,[[],["bytes"]]],[11,"default","","",11,[[],["bytesmut"]]],[11,"cmp","","",10,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["bytesmut"]],["ordering"]]],[11,"eq","","",10,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",11,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",11,N],[11,"eq","","",11,[[["self"],["str"]],["bool"]]],[11,"eq","","",11,[[["self"],["vec"]],["bool"]]],[11,"eq","","",11,[[["self"],["string"]],["bool"]]],[11,"eq","","",11,[[["self"],["t"]],["bool"]]],[11,"eq","","",10,N],[11,"eq","","",10,[[["self"],["str"]],["bool"]]],[11,"eq","","",10,[[["self"],["vec"]],["bool"]]],[11,"eq","","",10,[[["self"],["string"]],["bool"]]],[11,"eq","","",10,[[["self"],["t"]],["bool"]]],[11,"eq","","",10,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",11,[[["self"],["bytes"]],["bool"]]],[11,"from","","",10,[[["bytesmut"]],["bytes"]]],[11,"from","","",10,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",10,[[["string"]],["bytes"]]],[11,"from","","",10,N],[11,"from","","",10,[[["str"]],["bytes"]]],[11,"from","","",11,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",11,[[["string"]],["bytesmut"]]],[11,"from","","",11,N],[11,"from","","",11,[[["str"]],["bytesmut"]]],[11,"from","","",11,[[["bytes"]],["bytesmut"]]],[11,"as_ref","","",10,N],[11,"as_ref","","",11,N],[11,"clone","","",10,[[["self"]],["bytes"]]],[11,"clone","","",11,[[["self"]],["bytesmut"]]],[11,"into_iter","","",10,N],[11,"into_iter","","",11,N],[11,"extend","","",10,[[["self"],["t"]]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"deref_mut","","",11,N],[11,"deref","","",10,N],[11,"deref","","",11,N],[11,"fmt","bytes::buf","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","bytes","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"from_iter","","",11,[[["t"]],["self"]]],[11,"from_iter","","",10,[[["t"]],["self"]]],[11,"write_str","","",11,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",11,[[["self"],["arguments"]],["result"]]],[11,"borrow","","",10,N],[11,"borrow","","",11,N],[11,"read","bytes::buf","",3,N],[11,"write","","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"borrow_mut","bytes","",11,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",6,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",6,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",6,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",6,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",6,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",6,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",6,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",6,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",6,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",6,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",6,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",6,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",7,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",7,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",7,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",7,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",7,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",7,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",7,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",7,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",7,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",7,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",7,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[3,"Bytes"],[3,"BytesMut"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["cookie"]={"doc":"HTTP cookie parsing and cookie jar management.","items":[[3,"PrivateJar","cookie","A child cookie jar that provides authenticated encryption for its cookies.",N,N],[3,"SignedJar","","A child cookie jar that authenticates its cookies.",N,N],[3,"Key","","A cryptographic master key for use with `Signed` and/or `Private` jars.",N,N],[3,"CookieBuilder","","Structure that follows the builder pattern for building `Cookie` structs.",N,N],[3,"CookieJar","","A collection of cookies that tracks its modifications.",N,N],[3,"Delta","","Iterator over the changes to a cookie jar.",N,N],[3,"Iter","","Iterator over all of the cookies in a jar.",N,N],[3,"Cookie","","Representation of an HTTP cookie.",N,N],[3,"EncodedCookie","","Wrapper around `Cookie` whose `Display` implementation percent-encodes the cookie's name and value.",N,N],[4,"ParseError","","Enum corresponding to a parsing error.",N,N],[13,"MissingPair","","The cookie did not contain a name/value pair.",0,N],[13,"EmptyName","","The cookie's name was empty.",0,N],[13,"Utf8Error","","Decoding the cookie's name or value resulted in invalid UTF-8.",0,N],[4,"SameSite","","The `SameSite` cookie attribute.",N,N],[13,"Strict","","The \"Strict\" `SameSite` attribute.",1,N],[13,"Lax","","The \"Lax\" `SameSite` attribute.",1,N],[13,"None","","No `SameSite` attribute.",1,N],[11,"new","","Creates a new `CookieBuilder` instance from the given name and value.",2,[[["n"],["v"]],["cookiebuilder"]]],[11,"expires","","Sets the `expires` field in the cookie being built.",2,[[["self"],["tm"]],["cookiebuilder"]]],[11,"max_age","","Sets the `max_age` field in the cookie being built.",2,[[["self"],["duration"]],["cookiebuilder"]]],[11,"domain","","Sets the `domain` field in the cookie being built.",2,[[["self"],["d"]],["cookiebuilder"]]],[11,"path","","Sets the `path` field in the cookie being built.",2,[[["self"],["p"]],["cookiebuilder"]]],[11,"secure","","Sets the `secure` field in the cookie being built.",2,[[["self"],["bool"]],["cookiebuilder"]]],[11,"http_only","","Sets the `http_only` field in the cookie being built.",2,[[["self"],["bool"]],["cookiebuilder"]]],[11,"same_site","","Sets the `same_site` field in the cookie being built.",2,[[["self"],["samesite"]],["cookiebuilder"]]],[11,"permanent","","Makes the cookie being built 'permanent' by extending its expiration and max age 20 years into the future.",2,[[["self"]],["cookiebuilder"]]],[11,"finish","","Finishes building and returns the built `Cookie`.",2,[[["self"]],["cookie"]]],[11,"as_str","","Returns a description of this error as a string",0,[[["self"]],["str"]]],[11,"new","","Creates an empty cookie jar.",3,[[],["cookiejar"]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name`. If no such cookie exists, returns `None`.",3,[[["self"],["str"]],["option",["cookie"]]]],[11,"add_original","","Adds an \"original\" `cookie` to this jar. If an original cookie with the same name already exists, it is replaced with `cookie`. Cookies added with `add` take precedence and are not replaced by this method.",3,[[["self"],["cookie"]]]],[11,"add","","Adds `cookie` to this jar. If a cookie with the same name already exists, it is replaced with `cookie`.",3,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from this jar. If an original cookie with the same name as `cookie` is present in the jar, a removal cookie will be present in the `delta` computation. To properly generate the removal cookie, `cookie` must contain the same `path` and `domain` as the cookie that was initially set.",3,[[["self"],["cookie"]]]],[11,"force_remove","","Removes `cookie` from this jar completely. This method differs from `remove` in that no delta cookie is created under any condition. Neither the `delta` nor `iter` methods will return a cookie that is removed using this method.",3,[[["self"],["cookie"]]]],[11,"clear","","Removes all cookies from this cookie jar.",3,[[["self"]]]],[11,"delta","","Returns an iterator over cookies that represent the changes to this jar over time. These cookies can be rendered directly as `Set-Cookie` header values to affect the changes made to this jar on the client.",3,[[["self"]],["delta"]]],[11,"iter","","Returns an iterator over all of the cookies present in this jar.",3,[[["self"]],["iter"]]],[11,"private","","Returns a `PrivateJar` with `self` as its parent jar using the key `key` to sign/encrypt and verify/decrypt cookies added/retrieved from the child jar.",3,[[["self"],["key"]],["privatejar"]]],[11,"signed","","Returns a `SignedJar` with `self` as its parent jar using the key `key` to sign/verify cookies added/retrieved from the child jar.",3,[[["self"],["key"]],["signedjar"]]],[11,"is_strict","","Returns `true` if `self` is `SameSite::Strict` and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"is_lax","","Returns `true` if `self` is `SameSite::Lax` and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if `self` is `SameSite::None` and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",4,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity.",4,[[["self"],["cookie"]]]],[11,"add_original","","Adds an \"original\" `cookie` to parent jar. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity. Adding an original cookie does not affect the `CookieJar::delta()` computation. This method is intended to be used to seed the cookie jar with cookies received from a client's HTTP message.",4,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from the parent jar.",4,[[["self"],["cookie"]]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name` and verifies the authenticity and integrity of the cookie's value, returning a `Cookie` with the authenticated value. If the cookie cannot be found, or the cookie fails to verify, `None` is returned.",5,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to the parent jar. The cookie's value is signed assuring integrity and authenticity.",5,[[["self"],["cookie"]]]],[11,"add_original","","Adds an \"original\" `cookie` to this jar. The cookie's value is signed assuring integrity and authenticity. Adding an original cookie does not affect the `CookieJar::delta()` computation. This method is intended to be used to seed the cookie jar with cookies received from a client's HTTP message.",5,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from the parent jar.",5,[[["self"],["cookie"]]]],[11,"from_master","","Derives new signing/encryption keys from a master key.",6,N],[11,"generate","","Generates signing/encryption keys from a secure, random source. Keys are generated nondeterministically.",6,[[],["key"]]],[11,"try_generate","","Attempts to generate signing/encryption keys from a secure, random source. Keys are generated nondeterministically. If randomness cannot be retrieved from the underlying operating system, returns `None`.",6,[[],["option",["key"]]]],[11,"signing","","Returns the raw bytes of a key suitable for signing cookies.",6,N],[11,"encryption","","Returns the raw bytes of a key suitable for encrypting cookies.",6,N],[11,"new","","Creates a new `Cookie` with the given name and value.",7,[[["n"],["v"]],["cookie"]]],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",7,[[["n"]],["cookie"]]],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",7,[[["n"],["v"]],["cookiebuilder"]]],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",7,[[["s"]],["result",["cookie","parseerror"]]]],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",7,[[["s"]],["result",["cookie","parseerror"]]]],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",7,[[["self"]],["encodedcookie"]]],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",7,[[["self"]],["cookie"]]],[11,"name","","Returns the name of `self`.",7,[[["self"]],["str"]]],[11,"value","","Returns the value of `self`.",7,[[["self"]],["str"]]],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",7,N],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `HttpOnly`, `Some(false)` when `http_only` was manually set to `false`, and `None` otherwise.",7,[[["self"]],["option",["bool"]]]],[11,"secure","","Returns whether this cookie was marked `Secure` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `Secure`, `Some(false)` when `secure` was manually set to `false`, and `None` otherwise.",7,[[["self"]],["option",["bool"]]]],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",7,[[["self"]],["option",["samesite"]]]],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",7,[[["self"]],["option",["duration"]]]],[11,"path","","Returns the `Path` of the cookie if one was specified.",7,[[["self"]],["option",["str"]]]],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",7,[[["self"]],["option",["str"]]]],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",7,[[["self"]],["option",["tm"]]]],[11,"set_name","","Sets the name of `self` to `name`.",7,[[["self"],["n"]]]],[11,"set_value","","Sets the value of `self` to `value`.",7,[[["self"],["v"]]]],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",7,[[["self"],["bool"]]]],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",7,[[["self"],["bool"]]]],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",7,[[["self"],["samesite"]]]],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",7,[[["self"],["duration"]]]],[11,"set_path","","Sets the `path` of `self` to `path`.",7,[[["self"],["p"]]]],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",7,[[["self"],["d"]]]],[11,"set_expires","","Sets the expires field of `self` to `time`.",7,[[["self"],["tm"]]]],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",7,[[["self"]]]],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",7,[[["self"]],["option",["str"]]]],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",7,[[["self"]],["option",["str"]]]],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",7,[[["self"]],["option",["str"]]]],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",7,[[["self"]],["option",["str"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"next","","",8,[[["self"]],["option",["cookie"]]]],[11,"next","","",9,[[["self"]],["option",["cookie"]]]],[11,"default","","",3,[[],["cookiejar"]]],[11,"eq","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"eq","","",1,[[["self"],["samesite"]],["bool"]]],[11,"eq","","",7,[[["self"],["cookie"]],["bool"]]],[11,"from","","",0,[[["utf8error"]],["parseerror"]]],[11,"clone","","",2,[[["self"]],["cookiebuilder"]]],[11,"clone","","",0,[[["self"]],["parseerror"]]],[11,"clone","","",3,[[["self"]],["cookiejar"]]],[11,"clone","","",1,[[["self"]],["samesite"]]],[11,"clone","","",6,[[["self"]],["key"]]],[11,"clone","","",7,[[["self"]],["cookie"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",7,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"from_str","","",7,[[["str"]],["result",["cookie","parseerror"]]]],[11,"description","","",0,[[["self"]],["str"]]]],"paths":[[4,"ParseError"],[4,"SameSite"],[3,"CookieBuilder"],[3,"CookieJar"],[3,"PrivateJar"],[3,"SignedJar"],[3,"Key"],[3,"Cookie"],[3,"Delta"],[3,"Iter"],[3,"EncodedCookie"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[3,"CachePadded","crossbeam_utils","Pads `T` to the length of a cache line.",N,N],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[0,"thread","","",N,N],[3,"Scope","crossbeam_utils::thread","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unchecked","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unchecked","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",1,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",1,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",2,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",2,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",2,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",3,[[["self"]],["result"]]],[11,"thread","","Get the underlying thread handle.",3,[[["self"]],["thread"]]],[8,"AtomicConsume","crossbeam_utils","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",4,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","crossbeam_utils::thread","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"default","crossbeam_utils","",0,[[],["cachepadded"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"clone","","",0,[[["self"]],["cachepadded"]]],[11,"drop","crossbeam_utils::thread","",1,[[["self"]]]],[11,"deref_mut","crossbeam_utils","",0,[[["self"]],["t"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","crossbeam_utils::thread","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedThreadBuilder"],[3,"ScopedJoinHandle"],[8,"AtomicConsume"]]};
searchIndex["devise"]={"doc":"","items":[[0,"ext","devise","",N,N],[8,"PathExt","devise::ext","",N,N],[10,"is","","",0,N],[10,"is_local","","",0,N],[10,"is_global","","",0,N],[10,"generics","","",0,[[["self"]],["option",["punctuated"]]]],[8,"TypeExt","","",N,N],[10,"strip_lifetimes","","",1,N],[10,"with_stripped_lifetimes","","",1,[[["self"]],["type"]]],[4,"GenericKind","","",N,N],[13,"Lifetime","","",2,N],[13,"Type","","",2,N],[13,"Binding","","",2,N],[13,"Const","","",2,N],[13,"Constraint","","",2,N],[8,"GenericExt","","",N,N],[10,"kind","","",3,[[["self"]],["generickind"]]],[8,"Split2","","",N,N],[10,"split2","","",4,N],[8,"Split3","","",N,N],[10,"split3","","",5,N],[6,"Result","devise","",N,N],[5,"default_fields_mapper","","",N,[[["derivegenerator"],["fields"]],["result",["tokenstream","diagnostic"]]]],[3,"Field","","",N,N],[12,"parent","","",6,N],[12,"field","","",6,N],[12,"index","","",6,N],[6,"MapResult","","",N,N],[3,"DeriveGenerator","","",N,N],[12,"input","","",7,N],[12,"trait_path","","",7,N],[8,"FromMeta","","",N,N],[10,"from_meta","","",8,[[["metaitem"]],["result",["diagnostic"]]]],[11,"from_attr","","",8,[[["str"],["attribute"]],["result",["diagnostic"]]]],[11,"from_attrs","","",8,N],[11,"default","","",8,[[],["option"]]],[6,"GenericsValidatorFn","","",N,N],[6,"FieldsValidatorFn","","",N,N],[3,"MetaItemList","","",N,N],[12,"ident","","",9,N],[12,"iter","","",9,N],[3,"DataSupport","","",N,N],[5,"null_enum_mapper","","",N,[[["derivegenerator"],["derived",["dataenum"]]],["result",["tokenstream","diagnostic"]]]],[5,"default_variant_mapper","","",N,[[["derivegenerator"],["derived",["variant"]]],["result",["tokenstream","diagnostic"]]]],[6,"Variant","","",N,N],[8,"ToTokens","devise::quote","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",10,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",10,[[["self"]],["tokenstream"]]],[8,"TokenStreamExt","","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",11,N],[10,"append_all","","",11,N],[10,"append_separated","","",11,N],[10,"append_terminated","","",11,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[14,"quote","","The whole point.",N,N],[0,"token","devise::syn","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[8,"Token","devise::syn::token","Marker trait for types that represent single tokens.",N,N],[3,"Underscore","","`_`",N,N],[12,"spans","","",12,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",13,N],[3,"As","","`as`",N,N],[12,"span","","",14,N],[3,"Async","","`async`",N,N],[12,"span","","",15,N],[3,"Auto","","`auto`",N,N],[12,"span","","",16,N],[3,"Become","","`become`",N,N],[12,"span","","",17,N],[3,"Box","","`box`",N,N],[12,"span","","",18,N],[3,"Break","","`break`",N,N],[12,"span","","",19,N],[3,"Const","","`const`",N,N],[12,"span","","",20,N],[3,"Continue","","`continue`",N,N],[12,"span","","",21,N],[3,"Crate","","`crate`",N,N],[12,"span","","",22,N],[3,"Default","","`default`",N,N],[12,"span","","",23,N],[3,"Do","","`do`",N,N],[12,"span","","",24,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",25,N],[3,"Else","","`else`",N,N],[12,"span","","",26,N],[3,"Enum","","`enum`",N,N],[12,"span","","",27,N],[3,"Existential","","`existential`",N,N],[12,"span","","",28,N],[3,"Extern","","`extern`",N,N],[12,"span","","",29,N],[3,"Final","","`final`",N,N],[12,"span","","",30,N],[3,"Fn","","`fn`",N,N],[12,"span","","",31,N],[3,"For","","`for`",N,N],[12,"span","","",32,N],[3,"If","","`if`",N,N],[12,"span","","",33,N],[3,"Impl","","`impl`",N,N],[12,"span","","",34,N],[3,"In","","`in`",N,N],[12,"span","","",35,N],[3,"Let","","`let`",N,N],[12,"span","","",36,N],[3,"Loop","","`loop`",N,N],[12,"span","","",37,N],[3,"Macro","","`macro`",N,N],[12,"span","","",38,N],[3,"Match","","`match`",N,N],[12,"span","","",39,N],[3,"Mod","","`mod`",N,N],[12,"span","","",40,N],[3,"Move","","`move`",N,N],[12,"span","","",41,N],[3,"Mut","","`mut`",N,N],[12,"span","","",42,N],[3,"Override","","`override`",N,N],[12,"span","","",43,N],[3,"Priv","","`priv`",N,N],[12,"span","","",44,N],[3,"Pub","","`pub`",N,N],[12,"span","","",45,N],[3,"Ref","","`ref`",N,N],[12,"span","","",46,N],[3,"Return","","`return`",N,N],[12,"span","","",47,N],[3,"SelfType","","`Self`",N,N],[12,"span","","",48,N],[3,"SelfValue","","`self`",N,N],[12,"span","","",49,N],[3,"Static","","`static`",N,N],[12,"span","","",50,N],[3,"Struct","","`struct`",N,N],[12,"span","","",51,N],[3,"Super","","`super`",N,N],[12,"span","","",52,N],[3,"Trait","","`trait`",N,N],[12,"span","","",53,N],[3,"Try","","`try`",N,N],[12,"span","","",54,N],[3,"Type","","`type`",N,N],[12,"span","","",55,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",56,N],[3,"Union","","`union`",N,N],[12,"span","","",57,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",58,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",59,N],[3,"Use","","`use`",N,N],[12,"span","","",60,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",61,N],[3,"Where","","`where`",N,N],[12,"span","","",62,N],[3,"While","","`while`",N,N],[12,"span","","",63,N],[3,"Yield","","`yield`",N,N],[12,"span","","",64,N],[3,"Add","","`+`",N,N],[12,"spans","","",65,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",66,N],[3,"And","","`&`",N,N],[12,"spans","","",67,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",68,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",69,N],[3,"At","","`@`",N,N],[12,"spans","","",70,N],[3,"Bang","","`!`",N,N],[12,"spans","","",71,N],[3,"Caret","","`^`",N,N],[12,"spans","","",72,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",73,N],[3,"Colon","","`:`",N,N],[12,"spans","","",74,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",75,N],[3,"Comma","","`,`",N,N],[12,"spans","","",76,N],[3,"Div","","`/`",N,N],[12,"spans","","",77,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",78,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",79,N],[3,"Dot","","`.`",N,N],[12,"spans","","",80,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",81,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",82,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",83,N],[3,"Eq","","`=`",N,N],[12,"spans","","",84,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",85,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",86,N],[3,"Gt","","`>`",N,N],[12,"spans","","",87,N],[3,"Le","","`<=`",N,N],[12,"spans","","",88,N],[3,"Lt","","`<`",N,N],[12,"spans","","",89,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",90,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",91,N],[3,"Or","","`|`",N,N],[12,"spans","","",92,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",93,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",94,N],[3,"Pound","","`#`",N,N],[12,"spans","","",95,N],[3,"Question","","`?`",N,N],[12,"spans","","",96,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",97,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",98,N],[3,"Rem","","`%`",N,N],[12,"spans","","",99,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",100,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",101,N],[3,"Semi","","`;`",N,N],[12,"spans","","",102,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",103,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",104,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",105,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",106,N],[3,"Star","","`*`",N,N],[12,"spans","","",107,N],[3,"Sub","","`-`",N,N],[12,"spans","","",108,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",109,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",110,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",111,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",112,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",113,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",114,N],[0,"buffer","devise::syn","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","devise::syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[0,"ext","devise::syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","devise::syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",115,[[["parsebuffer"]],["result",["error"]]]],[0,"punctuated","devise::syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","devise::syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",116,N],[13,"End","","",116,N],[0,"spanned","devise::syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","devise::syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",117,[[["self"]],["span"]]],[0,"parse","devise::syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[8,"Parse","devise::syn::parse","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",118,[[["parsebuffer"]],["result",["error"]]]],[6,"ParseStream","","Input to a Syn parser function.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",119,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",119,[[["self"],["tokenstream"]],["result",["error"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",119,[[["self"],["tokenstream"]],["result",["error"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",119,[[["self"],["str"]],["result",["error"]]]],[3,"Error","","Error returned when a Syn parser cannot parse the input tokens.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[5,"parse","devise::syn","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",N,[[["str"]],["result",["file","error"]]]],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",120,N],[12,"ty","","",120,N],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",N,N],[12,"ident","","",121,N],[12,"colon2_token","","",121,N],[12,"tree","","",121,N],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",N,N],[12,"by_ref","","",122,N],[12,"mutability","","",122,N],[12,"ident","","",122,N],[12,"subpat","","",122,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",123,N],[12,"lit","","",123,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",124,N],[12,"elem","","",124,N],[12,"semi_token","","",124,N],[12,"len","","",124,N],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",N,N],[12,"attrs","","",125,N],[12,"vis","","",125,N],[12,"const_token","","",125,N],[12,"ident","","",125,N],[12,"colon_token","","",125,N],[12,"ty","","",125,N],[12,"eq_token","","",125,N],[12,"expr","","",125,N],[12,"semi_token","","",125,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[12,"attrs","","",126,N],[12,"yield_token","","",126,N],[12,"expr","","",126,N],[3,"PatRange","","A range pattern: `1..=2`.",N,N],[12,"lo","","",127,N],[12,"limits","","",127,N],[12,"hi","","",127,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",128,N],[12,"named","","",128,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",129,N],[13,"F64","","",129,N],[13,"None","","",129,N],[3,"ForeignItemMacro","","A macro invocation within an extern block.",N,N],[12,"attrs","","",130,N],[12,"mac","","",130,N],[12,"semi_token","","",130,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[12,"attrs","","",131,N],[12,"box_token","","",131,N],[12,"expr","","",131,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",132,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",132,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",132,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",133,N],[12,"bounds","","",133,N],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",N,N],[12,"attrs","","",134,N],[12,"vis","","",134,N],[12,"extern_token","","",134,N],[12,"crate_token","","",134,N],[12,"ident","","",134,N],[12,"rename","","",134,N],[12,"semi_token","","",134,N],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",N,N],[12,"attrs","","",135,N],[12,"leading_vert","","",135,N],[12,"pats","","",135,N],[12,"guard","","",135,N],[12,"fat_arrow_token","","",135,N],[12,"body","","",135,N],[12,"comma","","",135,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",136,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",137,N],[12,"span","","",137,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",138,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[12,"attrs","","",139,N],[12,"path","","",139,N],[12,"brace_token","","",139,N],[12,"fields","","",139,N],[12,"dot2_token","","",139,N],[12,"rest","","",139,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",N,N],[12,"brace_token","","",140,N],[12,"items","","",140,N],[3,"ImplItemConst","","An associated constant within an impl block.",N,N],[12,"attrs","","",141,N],[12,"vis","","",141,N],[12,"defaultness","","",141,N],[12,"const_token","","",141,N],[12,"ident","","",141,N],[12,"colon_token","","",141,N],[12,"ty","","",141,N],[12,"eq_token","","",141,N],[12,"expr","","",141,N],[12,"semi_token","","",141,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",142,N],[12,"expr","","",142,N],[12,"bracket_token","","",142,N],[12,"index","","",142,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",143,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",143,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",143,N],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",N,N],[12,"ident","","",144,N],[12,"as_token","","",144,N],[12,"rename","","",144,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",145,N],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",N,N],[12,"pat","","",146,N],[12,"colon_token","","",146,N],[12,"ty","","",146,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",147,N],[3,"ImplItemMethod","","A method within an impl block.",N,N],[12,"attrs","","",148,N],[12,"vis","","",148,N],[12,"defaultness","","",148,N],[12,"sig","","",148,N],[12,"block","","",148,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",149,N],[12,"op","","",149,N],[12,"expr","","",149,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",150,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",150,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",151,N],[12,"lt_token","","",151,N],[12,"args","","",151,N],[12,"gt_token","","",151,N],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",N,N],[12,"attrs","","",152,N],[12,"vis","","",152,N],[12,"use_token","","",152,N],[12,"leading_colon","","",152,N],[12,"tree","","",152,N],[12,"semi_token","","",152,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",153,N],[12,"eq_token","","",153,N],[12,"rhs_ty","","",153,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[12,"attrs","","",154,N],[12,"break_token","","",154,N],[12,"label","","",154,N],[12,"expr","","",154,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",155,N],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",N,N],[12,"attrs","","",156,N],[12,"vis","","",156,N],[12,"constness","","",156,N],[12,"unsafety","","",156,N],[12,"asyncness","","",156,N],[12,"abi","","",156,N],[12,"ident","","",156,N],[12,"decl","","",156,N],[12,"block","","",156,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",157,N],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",N,N],[12,"bracket_token","","",158,N],[12,"front","","",158,N],[12,"middle","","",158,N],[12,"dot2_token","","",158,N],[12,"comma_token","","",158,N],[12,"back","","",158,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",159,N],[12,"modifier","","",159,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",159,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",159,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[12,"attrs","","",160,N],[12,"asyncness","","",160,N],[12,"movability","","",160,N],[12,"capture","","",160,N],[12,"or1_token","","",160,N],[12,"inputs","","",160,N],[12,"or2_token","","",160,N],[12,"output","","",160,N],[12,"body","","",160,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",161,N],[12,"vis","","Visibility of the struct or enum.",161,N],[12,"ident","","Name of the struct or enum.",161,N],[12,"generics","","Generics required to complete the definition.",161,N],[12,"data","","Data within the struct or enum.",161,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",162,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",162,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",162,N],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",N,N],[12,"attrs","","",163,N],[12,"ident","","The `example` in `macro_rules! example { ... }`.",163,N],[12,"mac","","",163,N],[12,"semi_token","","",163,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",164,N],[13,"Lifetime","","",164,N],[3,"ImplItemExistential","","An existential type within an impl block.",N,N],[12,"attrs","","",165,N],[12,"existential_token","","",165,N],[12,"type_token","","",165,N],[12,"ident","","",165,N],[12,"generics","","",165,N],[12,"colon_token","","",165,N],[12,"bounds","","",165,N],[12,"semi_token","","",165,N],[0,"visit_mut","","Syntax tree traversal to mutate an exclusive borrow of a syntax tree in place.",N,N],[8,"VisitMut","devise::syn::visit_mut","Syntax tree traversal to mutate an exclusive borrow of a syntax tree in place.",N,N],[11,"visit_abi_mut","","",166,N],[11,"visit_angle_bracketed_generic_arguments_mut","","",166,N],[11,"visit_arg_captured_mut","","",166,N],[11,"visit_arg_self_mut","","",166,N],[11,"visit_arg_self_ref_mut","","",166,N],[11,"visit_arm_mut","","",166,N],[11,"visit_attr_style_mut","","",166,N],[11,"visit_attribute_mut","","",166,N],[11,"visit_bare_fn_arg_mut","","",166,N],[11,"visit_bare_fn_arg_name_mut","","",166,N],[11,"visit_bin_op_mut","","",166,N],[11,"visit_binding_mut","","",166,N],[11,"visit_block_mut","","",166,N],[11,"visit_bound_lifetimes_mut","","",166,N],[11,"visit_const_param_mut","","",166,N],[11,"visit_constraint_mut","","",166,N],[11,"visit_data_mut","","",166,N],[11,"visit_data_enum_mut","","",166,N],[11,"visit_data_struct_mut","","",166,N],[11,"visit_data_union_mut","","",166,N],[11,"visit_derive_input_mut","","",166,N],[11,"visit_expr_mut","","",166,N],[11,"visit_expr_array_mut","","",166,N],[11,"visit_expr_assign_mut","","",166,N],[11,"visit_expr_assign_op_mut","","",166,N],[11,"visit_expr_async_mut","","",166,N],[11,"visit_expr_binary_mut","","",166,N],[11,"visit_expr_block_mut","","",166,N],[11,"visit_expr_box_mut","","",166,N],[11,"visit_expr_break_mut","","",166,N],[11,"visit_expr_call_mut","","",166,N],[11,"visit_expr_cast_mut","","",166,N],[11,"visit_expr_closure_mut","","",166,N],[11,"visit_expr_continue_mut","","",166,N],[11,"visit_expr_field_mut","","",166,N],[11,"visit_expr_for_loop_mut","","",166,N],[11,"visit_expr_group_mut","","",166,N],[11,"visit_expr_if_mut","","",166,N],[11,"visit_expr_in_place_mut","","",166,N],[11,"visit_expr_index_mut","","",166,N],[11,"visit_expr_let_mut","","",166,N],[11,"visit_expr_lit_mut","","",166,N],[11,"visit_expr_loop_mut","","",166,N],[11,"visit_expr_macro_mut","","",166,N],[11,"visit_expr_match_mut","","",166,N],[11,"visit_expr_method_call_mut","","",166,N],[11,"visit_expr_paren_mut","","",166,N],[11,"visit_expr_path_mut","","",166,N],[11,"visit_expr_range_mut","","",166,N],[11,"visit_expr_reference_mut","","",166,N],[11,"visit_expr_repeat_mut","","",166,N],[11,"visit_expr_return_mut","","",166,N],[11,"visit_expr_struct_mut","","",166,N],[11,"visit_expr_try_mut","","",166,N],[11,"visit_expr_try_block_mut","","",166,N],[11,"visit_expr_tuple_mut","","",166,N],[11,"visit_expr_type_mut","","",166,N],[11,"visit_expr_unary_mut","","",166,N],[11,"visit_expr_unsafe_mut","","",166,N],[11,"visit_expr_verbatim_mut","","",166,N],[11,"visit_expr_while_mut","","",166,N],[11,"visit_expr_yield_mut","","",166,N],[11,"visit_field_mut","","",166,N],[11,"visit_field_pat_mut","","",166,N],[11,"visit_field_value_mut","","",166,N],[11,"visit_fields_mut","","",166,N],[11,"visit_fields_named_mut","","",166,N],[11,"visit_fields_unnamed_mut","","",166,N],[11,"visit_file_mut","","",166,N],[11,"visit_fn_arg_mut","","",166,N],[11,"visit_fn_decl_mut","","",166,N],[11,"visit_foreign_item_mut","","",166,N],[11,"visit_foreign_item_fn_mut","","",166,N],[11,"visit_foreign_item_macro_mut","","",166,N],[11,"visit_foreign_item_static_mut","","",166,N],[11,"visit_foreign_item_type_mut","","",166,N],[11,"visit_foreign_item_verbatim_mut","","",166,N],[11,"visit_generic_argument_mut","","",166,N],[11,"visit_generic_method_argument_mut","","",166,N],[11,"visit_generic_param_mut","","",166,N],[11,"visit_generics_mut","","",166,N],[11,"visit_ident_mut","","",166,N],[11,"visit_impl_item_mut","","",166,N],[11,"visit_impl_item_const_mut","","",166,N],[11,"visit_impl_item_existential_mut","","",166,N],[11,"visit_impl_item_macro_mut","","",166,N],[11,"visit_impl_item_method_mut","","",166,N],[11,"visit_impl_item_type_mut","","",166,N],[11,"visit_impl_item_verbatim_mut","","",166,N],[11,"visit_index_mut","","",166,N],[11,"visit_item_mut","","",166,N],[11,"visit_item_const_mut","","",166,N],[11,"visit_item_enum_mut","","",166,N],[11,"visit_item_existential_mut","","",166,N],[11,"visit_item_extern_crate_mut","","",166,N],[11,"visit_item_fn_mut","","",166,N],[11,"visit_item_foreign_mod_mut","","",166,N],[11,"visit_item_impl_mut","","",166,N],[11,"visit_item_macro_mut","","",166,N],[11,"visit_item_macro2_mut","","",166,N],[11,"visit_item_mod_mut","","",166,N],[11,"visit_item_static_mut","","",166,N],[11,"visit_item_struct_mut","","",166,N],[11,"visit_item_trait_mut","","",166,N],[11,"visit_item_trait_alias_mut","","",166,N],[11,"visit_item_type_mut","","",166,N],[11,"visit_item_union_mut","","",166,N],[11,"visit_item_use_mut","","",166,N],[11,"visit_item_verbatim_mut","","",166,N],[11,"visit_label_mut","","",166,N],[11,"visit_lifetime_mut","","",166,N],[11,"visit_lifetime_def_mut","","",166,N],[11,"visit_lit_mut","","",166,N],[11,"visit_lit_bool_mut","","",166,N],[11,"visit_lit_byte_mut","","",166,N],[11,"visit_lit_byte_str_mut","","",166,N],[11,"visit_lit_char_mut","","",166,N],[11,"visit_lit_float_mut","","",166,N],[11,"visit_lit_int_mut","","",166,N],[11,"visit_lit_str_mut","","",166,N],[11,"visit_lit_verbatim_mut","","",166,N],[11,"visit_local_mut","","",166,N],[11,"visit_macro_mut","","",166,N],[11,"visit_macro_delimiter_mut","","",166,N],[11,"visit_member_mut","","",166,N],[11,"visit_meta_mut","","",166,N],[11,"visit_meta_list_mut","","",166,N],[11,"visit_meta_name_value_mut","","",166,N],[11,"visit_method_sig_mut","","",166,N],[11,"visit_method_turbofish_mut","","",166,N],[11,"visit_nested_meta_mut","","",166,N],[11,"visit_parenthesized_generic_arguments_mut","","",166,N],[11,"visit_pat_mut","","",166,N],[11,"visit_pat_box_mut","","",166,N],[11,"visit_pat_ident_mut","","",166,N],[11,"visit_pat_lit_mut","","",166,N],[11,"visit_pat_macro_mut","","",166,N],[11,"visit_pat_path_mut","","",166,N],[11,"visit_pat_range_mut","","",166,N],[11,"visit_pat_ref_mut","","",166,N],[11,"visit_pat_slice_mut","","",166,N],[11,"visit_pat_struct_mut","","",166,N],[11,"visit_pat_tuple_mut","","",166,N],[11,"visit_pat_tuple_struct_mut","","",166,N],[11,"visit_pat_verbatim_mut","","",166,N],[11,"visit_pat_wild_mut","","",166,N],[11,"visit_path_mut","","",166,N],[11,"visit_path_arguments_mut","","",166,N],[11,"visit_path_segment_mut","","",166,N],[11,"visit_predicate_eq_mut","","",166,N],[11,"visit_predicate_lifetime_mut","","",166,N],[11,"visit_predicate_type_mut","","",166,N],[11,"visit_qself_mut","","",166,N],[11,"visit_range_limits_mut","","",166,N],[11,"visit_return_type_mut","","",166,N],[11,"visit_span_mut","","",166,N],[11,"visit_stmt_mut","","",166,N],[11,"visit_trait_bound_mut","","",166,N],[11,"visit_trait_bound_modifier_mut","","",166,N],[11,"visit_trait_item_mut","","",166,N],[11,"visit_trait_item_const_mut","","",166,N],[11,"visit_trait_item_macro_mut","","",166,N],[11,"visit_trait_item_method_mut","","",166,N],[11,"visit_trait_item_type_mut","","",166,N],[11,"visit_trait_item_verbatim_mut","","",166,N],[11,"visit_type_mut","","",166,N],[11,"visit_type_array_mut","","",166,N],[11,"visit_type_bare_fn_mut","","",166,N],[11,"visit_type_group_mut","","",166,N],[11,"visit_type_impl_trait_mut","","",166,N],[11,"visit_type_infer_mut","","",166,N],[11,"visit_type_macro_mut","","",166,N],[11,"visit_type_never_mut","","",166,N],[11,"visit_type_param_mut","","",166,N],[11,"visit_type_param_bound_mut","","",166,N],[11,"visit_type_paren_mut","","",166,N],[11,"visit_type_path_mut","","",166,N],[11,"visit_type_ptr_mut","","",166,N],[11,"visit_type_reference_mut","","",166,N],[11,"visit_type_slice_mut","","",166,N],[11,"visit_type_trait_object_mut","","",166,N],[11,"visit_type_tuple_mut","","",166,N],[11,"visit_type_verbatim_mut","","",166,N],[11,"visit_un_op_mut","","",166,N],[11,"visit_use_glob_mut","","",166,N],[11,"visit_use_group_mut","","",166,N],[11,"visit_use_name_mut","","",166,N],[11,"visit_use_path_mut","","",166,N],[11,"visit_use_rename_mut","","",166,N],[11,"visit_use_tree_mut","","",166,N],[11,"visit_variant_mut","","",166,N],[11,"visit_vis_crate_mut","","",166,N],[11,"visit_vis_public_mut","","",166,N],[11,"visit_vis_restricted_mut","","",166,N],[11,"visit_visibility_mut","","",166,N],[11,"visit_where_clause_mut","","",166,N],[11,"visit_where_predicate_mut","","",166,N],[5,"visit_abi_mut","","",N,N],[5,"visit_angle_bracketed_generic_arguments_mut","","",N,N],[5,"visit_arg_captured_mut","","",N,N],[5,"visit_arg_self_mut","","",N,N],[5,"visit_arg_self_ref_mut","","",N,N],[5,"visit_arm_mut","","",N,N],[5,"visit_attr_style_mut","","",N,N],[5,"visit_attribute_mut","","",N,N],[5,"visit_bare_fn_arg_mut","","",N,N],[5,"visit_bare_fn_arg_name_mut","","",N,N],[5,"visit_bin_op_mut","","",N,N],[5,"visit_binding_mut","","",N,N],[5,"visit_block_mut","","",N,N],[5,"visit_bound_lifetimes_mut","","",N,N],[5,"visit_const_param_mut","","",N,N],[5,"visit_constraint_mut","","",N,N],[5,"visit_data_mut","","",N,N],[5,"visit_data_enum_mut","","",N,N],[5,"visit_data_struct_mut","","",N,N],[5,"visit_data_union_mut","","",N,N],[5,"visit_derive_input_mut","","",N,N],[5,"visit_expr_mut","","",N,N],[5,"visit_expr_array_mut","","",N,N],[5,"visit_expr_assign_mut","","",N,N],[5,"visit_expr_assign_op_mut","","",N,N],[5,"visit_expr_async_mut","","",N,N],[5,"visit_expr_binary_mut","","",N,N],[5,"visit_expr_block_mut","","",N,N],[5,"visit_expr_box_mut","","",N,N],[5,"visit_expr_break_mut","","",N,N],[5,"visit_expr_call_mut","","",N,N],[5,"visit_expr_cast_mut","","",N,N],[5,"visit_expr_closure_mut","","",N,N],[5,"visit_expr_continue_mut","","",N,N],[5,"visit_expr_field_mut","","",N,N],[5,"visit_expr_for_loop_mut","","",N,N],[5,"visit_expr_group_mut","","",N,N],[5,"visit_expr_if_mut","","",N,N],[5,"visit_expr_in_place_mut","","",N,N],[5,"visit_expr_index_mut","","",N,N],[5,"visit_expr_let_mut","","",N,N],[5,"visit_expr_lit_mut","","",N,N],[5,"visit_expr_loop_mut","","",N,N],[5,"visit_expr_macro_mut","","",N,N],[5,"visit_expr_match_mut","","",N,N],[5,"visit_expr_method_call_mut","","",N,N],[5,"visit_expr_paren_mut","","",N,N],[5,"visit_expr_path_mut","","",N,N],[5,"visit_expr_range_mut","","",N,N],[5,"visit_expr_reference_mut","","",N,N],[5,"visit_expr_repeat_mut","","",N,N],[5,"visit_expr_return_mut","","",N,N],[5,"visit_expr_struct_mut","","",N,N],[5,"visit_expr_try_mut","","",N,N],[5,"visit_expr_try_block_mut","","",N,N],[5,"visit_expr_tuple_mut","","",N,N],[5,"visit_expr_type_mut","","",N,N],[5,"visit_expr_unary_mut","","",N,N],[5,"visit_expr_unsafe_mut","","",N,N],[5,"visit_expr_verbatim_mut","","",N,N],[5,"visit_expr_while_mut","","",N,N],[5,"visit_expr_yield_mut","","",N,N],[5,"visit_field_mut","","",N,N],[5,"visit_field_pat_mut","","",N,N],[5,"visit_field_value_mut","","",N,N],[5,"visit_fields_mut","","",N,N],[5,"visit_fields_named_mut","","",N,N],[5,"visit_fields_unnamed_mut","","",N,N],[5,"visit_file_mut","","",N,N],[5,"visit_fn_arg_mut","","",N,N],[5,"visit_fn_decl_mut","","",N,N],[5,"visit_foreign_item_mut","","",N,N],[5,"visit_foreign_item_fn_mut","","",N,N],[5,"visit_foreign_item_macro_mut","","",N,N],[5,"visit_foreign_item_static_mut","","",N,N],[5,"visit_foreign_item_type_mut","","",N,N],[5,"visit_foreign_item_verbatim_mut","","",N,N],[5,"visit_generic_argument_mut","","",N,N],[5,"visit_generic_method_argument_mut","","",N,N],[5,"visit_generic_param_mut","","",N,N],[5,"visit_generics_mut","","",N,N],[5,"visit_ident_mut","","",N,N],[5,"visit_impl_item_mut","","",N,N],[5,"visit_impl_item_const_mut","","",N,N],[5,"visit_impl_item_existential_mut","","",N,N],[5,"visit_impl_item_macro_mut","","",N,N],[5,"visit_impl_item_method_mut","","",N,N],[5,"visit_impl_item_type_mut","","",N,N],[5,"visit_impl_item_verbatim_mut","","",N,N],[5,"visit_index_mut","","",N,N],[5,"visit_item_mut","","",N,N],[5,"visit_item_const_mut","","",N,N],[5,"visit_item_enum_mut","","",N,N],[5,"visit_item_existential_mut","","",N,N],[5,"visit_item_extern_crate_mut","","",N,N],[5,"visit_item_fn_mut","","",N,N],[5,"visit_item_foreign_mod_mut","","",N,N],[5,"visit_item_impl_mut","","",N,N],[5,"visit_item_macro_mut","","",N,N],[5,"visit_item_macro2_mut","","",N,N],[5,"visit_item_mod_mut","","",N,N],[5,"visit_item_static_mut","","",N,N],[5,"visit_item_struct_mut","","",N,N],[5,"visit_item_trait_mut","","",N,N],[5,"visit_item_trait_alias_mut","","",N,N],[5,"visit_item_type_mut","","",N,N],[5,"visit_item_union_mut","","",N,N],[5,"visit_item_use_mut","","",N,N],[5,"visit_item_verbatim_mut","","",N,N],[5,"visit_label_mut","","",N,N],[5,"visit_lifetime_mut","","",N,N],[5,"visit_lifetime_def_mut","","",N,N],[5,"visit_lit_mut","","",N,N],[5,"visit_lit_bool_mut","","",N,N],[5,"visit_lit_byte_mut","","",N,N],[5,"visit_lit_byte_str_mut","","",N,N],[5,"visit_lit_char_mut","","",N,N],[5,"visit_lit_float_mut","","",N,N],[5,"visit_lit_int_mut","","",N,N],[5,"visit_lit_str_mut","","",N,N],[5,"visit_lit_verbatim_mut","","",N,N],[5,"visit_local_mut","","",N,N],[5,"visit_macro_mut","","",N,N],[5,"visit_macro_delimiter_mut","","",N,N],[5,"visit_member_mut","","",N,N],[5,"visit_meta_mut","","",N,N],[5,"visit_meta_list_mut","","",N,N],[5,"visit_meta_name_value_mut","","",N,N],[5,"visit_method_sig_mut","","",N,N],[5,"visit_method_turbofish_mut","","",N,N],[5,"visit_nested_meta_mut","","",N,N],[5,"visit_parenthesized_generic_arguments_mut","","",N,N],[5,"visit_pat_mut","","",N,N],[5,"visit_pat_box_mut","","",N,N],[5,"visit_pat_ident_mut","","",N,N],[5,"visit_pat_lit_mut","","",N,N],[5,"visit_pat_macro_mut","","",N,N],[5,"visit_pat_path_mut","","",N,N],[5,"visit_pat_range_mut","","",N,N],[5,"visit_pat_ref_mut","","",N,N],[5,"visit_pat_slice_mut","","",N,N],[5,"visit_pat_struct_mut","","",N,N],[5,"visit_pat_tuple_mut","","",N,N],[5,"visit_pat_tuple_struct_mut","","",N,N],[5,"visit_pat_verbatim_mut","","",N,N],[5,"visit_pat_wild_mut","","",N,N],[5,"visit_path_mut","","",N,N],[5,"visit_path_arguments_mut","","",N,N],[5,"visit_path_segment_mut","","",N,N],[5,"visit_predicate_eq_mut","","",N,N],[5,"visit_predicate_lifetime_mut","","",N,N],[5,"visit_predicate_type_mut","","",N,N],[5,"visit_qself_mut","","",N,N],[5,"visit_range_limits_mut","","",N,N],[5,"visit_return_type_mut","","",N,N],[5,"visit_span_mut","","",N,N],[5,"visit_stmt_mut","","",N,N],[5,"visit_trait_bound_mut","","",N,N],[5,"visit_trait_bound_modifier_mut","","",N,N],[5,"visit_trait_item_mut","","",N,N],[5,"visit_trait_item_const_mut","","",N,N],[5,"visit_trait_item_macro_mut","","",N,N],[5,"visit_trait_item_method_mut","","",N,N],[5,"visit_trait_item_type_mut","","",N,N],[5,"visit_trait_item_verbatim_mut","","",N,N],[5,"visit_type_mut","","",N,N],[5,"visit_type_array_mut","","",N,N],[5,"visit_type_bare_fn_mut","","",N,N],[5,"visit_type_group_mut","","",N,N],[5,"visit_type_impl_trait_mut","","",N,N],[5,"visit_type_infer_mut","","",N,N],[5,"visit_type_macro_mut","","",N,N],[5,"visit_type_never_mut","","",N,N],[5,"visit_type_param_mut","","",N,N],[5,"visit_type_param_bound_mut","","",N,N],[5,"visit_type_paren_mut","","",N,N],[5,"visit_type_path_mut","","",N,N],[5,"visit_type_ptr_mut","","",N,N],[5,"visit_type_reference_mut","","",N,N],[5,"visit_type_slice_mut","","",N,N],[5,"visit_type_trait_object_mut","","",N,N],[5,"visit_type_tuple_mut","","",N,N],[5,"visit_type_verbatim_mut","","",N,N],[5,"visit_un_op_mut","","",N,N],[5,"visit_use_glob_mut","","",N,N],[5,"visit_use_group_mut","","",N,N],[5,"visit_use_name_mut","","",N,N],[5,"visit_use_path_mut","","",N,N],[5,"visit_use_rename_mut","","",N,N],[5,"visit_use_tree_mut","","",N,N],[5,"visit_variant_mut","","",N,N],[5,"visit_vis_crate_mut","","",N,N],[5,"visit_vis_public_mut","","",N,N],[5,"visit_vis_restricted_mut","","",N,N],[5,"visit_visibility_mut","","",N,N],[5,"visit_where_clause_mut","","",N,N],[5,"visit_where_predicate_mut","","",N,N],[4,"Pat","devise::syn","A pattern in a local binding, function signature, match expression, or various other places.",N,N],[13,"Wild","","A pattern that matches any value: `_`.",167,N],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",167,N],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",167,N],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",167,N],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",167,N],[13,"Tuple","","A tuple pattern: `(a, b)`.",167,N],[13,"Box","","A box pattern: `box v`.",167,N],[13,"Ref","","A reference pattern: `&mut (first, second)`.",167,N],[13,"Lit","","A literal pattern: `0`.",167,N],[13,"Range","","A range pattern: `1..=2`.",167,N],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",167,N],[13,"Macro","","A macro in expression position.",167,N],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",167,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",168,N],[12,"paren_token","","",168,N],[12,"nested","","",168,N],[4,"Stmt","","A statement, usually ending in a semicolon.",N,N],[13,"Local","","A local (let) binding.",169,N],[13,"Item","","An item definition.",169,N],[13,"Expr","","Expr without trailing semicolon.",169,N],[13,"Semi","","Expression with trailing semicolon.",169,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[12,"attrs","","",170,N],[12,"bracket_token","","",170,N],[12,"elems","","",170,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",171,N],[13,"Wild","","Argument not given a name, matched with `_`.",171,N],[3,"ImplItemType","","An associated type within an impl block.",N,N],[12,"attrs","","",172,N],[12,"vis","","",172,N],[12,"defaultness","","",172,N],[12,"type_token","","",172,N],[12,"ident","","",172,N],[12,"generics","","",172,N],[12,"eq_token","","",172,N],[12,"ty","","",172,N],[12,"semi_token","","",172,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[12,"attrs","","",173,N],[12,"unsafe_token","","",173,N],[12,"block","","",173,N],[3,"PatLit","","A literal pattern: `0`.",N,N],[12,"expr","","",174,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[12,"attrs","","",175,N],[12,"async_token","","",175,N],[12,"capture","","",175,N],[12,"block","","",175,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",176,N],[12,"inputs","","`(A, B)`",176,N],[12,"output","","`C`",176,N],[3,"TraitItemConst","","An associated constant within the definition of a trait.",N,N],[12,"attrs","","",177,N],[12,"const_token","","",177,N],[12,"ident","","",177,N],[12,"colon_token","","",177,N],[12,"ty","","",177,N],[12,"default","","",177,N],[12,"semi_token","","",177,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",178,N],[12,"brace_token","","",178,N],[12,"variants","","",178,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",179,N],[13,"Maybe","","",179,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[12,"attrs","","",180,N],[12,"continue_token","","",180,N],[12,"label","","",180,N],[3,"Block","","A braced block containing Rust statements.",N,N],[12,"brace_token","","",181,N],[12,"stmts","","Statements in a block",181,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",182,N],[12,"arguments","","",182,N],[3,"TraitItemType","","An associated type within the definition of a trait.",N,N],[12,"attrs","","",183,N],[12,"type_token","","",183,N],[12,"ident","","",183,N],[12,"generics","","",183,N],[12,"colon_token","","",183,N],[12,"bounds","","",183,N],[12,"default","","",183,N],[12,"semi_token","","",183,N],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",N,N],[12,"attrs","","",184,N],[12,"vis","","",184,N],[12,"type_token","","",184,N],[12,"ident","","",184,N],[12,"semi_token","","",184,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[12,"attrs","","",185,N],[12,"group_token","","",185,N],[12,"expr","","",185,N],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",N,N],[13,"Type","","A type argument.",186,N],[13,"Const","","A const expression. Must be inside of a block.",186,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",187,N],[13,"Inner","","",187,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",188,N],[12,"lifetime","","",188,N],[12,"mutability","","",188,N],[12,"elem","","",188,N],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",N,N],[12,"ident","","",189,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[12,"attrs","","",190,N],[12,"left","","",190,N],[12,"eq_token","","",190,N],[12,"right","","",190,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[12,"attrs","","",191,N],[12,"let_token","","",191,N],[12,"pats","","",191,N],[12,"eq_token","","",191,N],[12,"expr","","",191,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",192,N],[13,"Type","","A particular type is returned.",192,N],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",N,N],[12,"tts","","",193,N],[3,"PatMacro","","A macro in expression position.",N,N],[12,"mac","","",194,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",195,N],[12,"elems","","",195,N],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",N,N],[12,"attrs","","",196,N],[12,"vis","","",196,N],[12,"trait_token","","",196,N],[12,"ident","","",196,N],[12,"generics","","",196,N],[12,"eq_token","","",196,N],[12,"bounds","","",196,N],[12,"semi_token","","",196,N],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",N,N],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",197,N],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",197,N],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",197,N],[13,"Glob","","A glob import in a `use` item: `*`.",197,N],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",197,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",198,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",198,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",198,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",199,N],[12,"left","","",199,N],[12,"op","","",199,N],[12,"right","","",199,N],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",N,N],[12,"attrs","","",200,N],[12,"vis","","",200,N],[12,"enum_token","","",200,N],[12,"ident","","",200,N],[12,"generics","","",200,N],[12,"brace_token","","",200,N],[12,"variants","","",200,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",201,N],[12,"unnamed","","",201,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",202,N],[12,"segments","","",202,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",203,N],[12,"fields","","",203,N],[12,"semi_token","","",203,N],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",N,N],[12,"attrs","","",204,N],[12,"abi","","",204,N],[12,"brace_token","","",204,N],[12,"items","","",204,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[12,"attrs","","",205,N],[12,"and_token","","",205,N],[12,"mutability","","",205,N],[12,"expr","","",205,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",N,N],[12,"path","","",206,N],[12,"brace_token","","",206,N],[12,"fields","","",206,N],[12,"dot2_token","","",206,N],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",N,N],[12,"tts","","",207,N],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",N,N],[12,"attrs","","",208,N],[12,"vis","","",208,N],[12,"macro_token","","",208,N],[12,"ident","","",208,N],[12,"paren_token","","",208,N],[12,"args","","",208,N],[12,"brace_token","","",208,N],[12,"body","","",208,N],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",N,N],[12,"name","","",209,N],[12,"colon_token","","",209,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",210,N],[12,"style","","",210,N],[12,"bracket_token","","",210,N],[12,"path","","",210,N],[12,"tts","","",210,N],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",N,N],[12,"attrs","","",211,N],[12,"vis","","",211,N],[12,"struct_token","","",211,N],[12,"ident","","",211,N],[12,"generics","","",211,N],[12,"fields","","",211,N],[12,"semi_token","","",211,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",212,N],[12,"lt_token","","",212,N],[12,"lifetimes","","",212,N],[12,"gt_token","","",212,N],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",N,N],[12,"tts","","",213,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[12,"attrs","","",214,N],[12,"left","","",214,N],[12,"op","","",214,N],[12,"right","","",214,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[12,"attrs","","",215,N],[12,"expr","","",215,N],[12,"colon_token","","",215,N],[12,"ty","","",215,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",216,N],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",N,N],[12,"attrs","","",217,N],[12,"vis","","",217,N],[12,"type_token","","",217,N],[12,"ident","","",217,N],[12,"generics","","",217,N],[12,"eq_token","","",217,N],[12,"ty","","",217,N],[12,"semi_token","","",217,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",218,N],[12,"params","","",218,N],[12,"gt_token","","",218,N],[12,"where_clause","","",218,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[12,"attrs","","",219,N],[12,"label","","",219,N],[12,"block","","",219,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[12,"attrs","","",220,N],[12,"label","","",220,N],[12,"loop_token","","",220,N],[12,"body","","",220,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",221,N],[12,"eq_token","","",221,N],[12,"ty","","",221,N],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",N,N],[12,"tts","","",222,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",223,N],[12,"func","","",223,N],[12,"paren_token","","",223,N],[12,"args","","",223,N],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",N,N],[12,"attrs","","",224,N],[12,"vis","","",224,N],[12,"static_token","","",224,N],[12,"mutability","","",224,N],[12,"ident","","",224,N],[12,"colon_token","","",224,N],[12,"ty","","",224,N],[12,"semi_token","","",224,N],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",N,N],[12,"attrs","","",225,N],[12,"mac","","",225,N],[12,"semi_token","","",225,N],[3,"PatTuple","","A tuple pattern: `(a, b)`.",N,N],[12,"paren_token","","",226,N],[12,"front","","",226,N],[12,"dot2_token","","",226,N],[12,"comma_token","","",226,N],[12,"back","","",226,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",227,N],[12,"base","","",227,N],[12,"dot_token","","",227,N],[12,"member","","",227,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",228,N],[12,"elem","","",228,N],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",N,N],[12,"tts","","",229,N],[3,"PatWild","","A pattern that matches any value: `_`.",N,N],[12,"underscore_token","","",230,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[12,"attrs","","",231,N],[12,"if_token","","",231,N],[12,"cond","","",231,N],[12,"then_branch","","",231,N],[12,"else_branch","","",231,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",232,N],[12,"name","","",232,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"PatBox","","A box pattern: `box v`.",N,N],[12,"box_token","","",233,N],[12,"pat","","",233,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",234,N],[12,"lifetime","","",234,N],[12,"colon_token","","",234,N],[12,"bounds","","",234,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",235,N],[13,"Raw","","A raw string like `r##\"data\"##`.",235,N],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",N,N],[12,"mutability","","",236,N],[12,"self_token","","",236,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",237,N],[12,"colon_token","","",237,N],[12,"bounds","","",237,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",238,N],[13,"Brace","","",238,N],[13,"Bracket","","",238,N],[3,"ItemExistential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",N,N],[12,"attrs","","",239,N],[12,"vis","","",239,N],[12,"existential_token","","",239,N],[12,"type_token","","",239,N],[12,"ident","","",239,N],[12,"generics","","",239,N],[12,"colon_token","","",239,N],[12,"bounds","","",239,N],[12,"semi_token","","",239,N],[14,"parenthesized","","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",240,N],[3,"FnDecl","","Header of a function declaration, without including the body.",N,N],[12,"fn_token","","",241,N],[12,"generics","","",241,N],[12,"paren_token","","",241,N],[12,"inputs","","",241,N],[12,"variadic","","",241,N],[12,"output","","",241,N],[3,"TraitItemMethod","","A trait method within the definition of a trait.",N,N],[12,"attrs","","",242,N],[12,"sig","","",242,N],[12,"default","","",242,N],[12,"semi_token","","",242,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",243,N],[13,"I16","","",243,N],[13,"I32","","",243,N],[13,"I64","","",243,N],[13,"I128","","",243,N],[13,"Isize","","",243,N],[13,"U8","","",243,N],[13,"U16","","",243,N],[13,"U32","","",243,N],[13,"U64","","",243,N],[13,"U128","","",243,N],[13,"Usize","","",243,N],[13,"None","","",243,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[12,"attrs","","",244,N],[12,"bracket_token","","",244,N],[12,"expr","","",244,N],[12,"semi_token","","",244,N],[12,"len","","",244,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",245,N],[12,"path","","",245,N],[3,"UseGlob","","A glob import in a `use` item: `*`.",N,N],[12,"star_token","","",246,N],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",N,N],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",247,N],[13,"Closed","","Inclusive at the beginning and end.",247,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[12,"attrs","","",248,N],[12,"place","","",248,N],[12,"arrow_token","","",248,N],[12,"value","","",248,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",249,N],[12,"predicates","","",249,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[12,"attrs","","",250,N],[12,"expr","","",250,N],[12,"question_token","","",250,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",251,N],[12,"elem","","",251,N],[3,"ImplItemMacro","","A macro invocation within an impl block.",N,N],[12,"attrs","","",252,N],[12,"mac","","",252,N],[12,"semi_token","","",252,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",253,N],[12,"eq_token","","",253,N],[12,"lit","","",253,N],[0,"visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[8,"Visit","devise::syn::visit","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",254,N],[11,"visit_angle_bracketed_generic_arguments","","",254,N],[11,"visit_arg_captured","","",254,N],[11,"visit_arg_self","","",254,N],[11,"visit_arg_self_ref","","",254,N],[11,"visit_arm","","",254,N],[11,"visit_attr_style","","",254,N],[11,"visit_attribute","","",254,N],[11,"visit_bare_fn_arg","","",254,N],[11,"visit_bare_fn_arg_name","","",254,N],[11,"visit_bin_op","","",254,N],[11,"visit_binding","","",254,N],[11,"visit_block","","",254,N],[11,"visit_bound_lifetimes","","",254,N],[11,"visit_const_param","","",254,N],[11,"visit_constraint","","",254,N],[11,"visit_data","","",254,N],[11,"visit_data_enum","","",254,N],[11,"visit_data_struct","","",254,N],[11,"visit_data_union","","",254,N],[11,"visit_derive_input","","",254,N],[11,"visit_expr","","",254,N],[11,"visit_expr_array","","",254,N],[11,"visit_expr_assign","","",254,N],[11,"visit_expr_assign_op","","",254,N],[11,"visit_expr_async","","",254,N],[11,"visit_expr_binary","","",254,N],[11,"visit_expr_block","","",254,N],[11,"visit_expr_box","","",254,N],[11,"visit_expr_break","","",254,N],[11,"visit_expr_call","","",254,N],[11,"visit_expr_cast","","",254,N],[11,"visit_expr_closure","","",254,N],[11,"visit_expr_continue","","",254,N],[11,"visit_expr_field","","",254,N],[11,"visit_expr_for_loop","","",254,N],[11,"visit_expr_group","","",254,N],[11,"visit_expr_if","","",254,N],[11,"visit_expr_in_place","","",254,N],[11,"visit_expr_index","","",254,N],[11,"visit_expr_let","","",254,N],[11,"visit_expr_lit","","",254,N],[11,"visit_expr_loop","","",254,N],[11,"visit_expr_macro","","",254,N],[11,"visit_expr_match","","",254,N],[11,"visit_expr_method_call","","",254,N],[11,"visit_expr_paren","","",254,N],[11,"visit_expr_path","","",254,N],[11,"visit_expr_range","","",254,N],[11,"visit_expr_reference","","",254,N],[11,"visit_expr_repeat","","",254,N],[11,"visit_expr_return","","",254,N],[11,"visit_expr_struct","","",254,N],[11,"visit_expr_try","","",254,N],[11,"visit_expr_try_block","","",254,N],[11,"visit_expr_tuple","","",254,N],[11,"visit_expr_type","","",254,N],[11,"visit_expr_unary","","",254,N],[11,"visit_expr_unsafe","","",254,N],[11,"visit_expr_verbatim","","",254,N],[11,"visit_expr_while","","",254,N],[11,"visit_expr_yield","","",254,N],[11,"visit_field","","",254,N],[11,"visit_field_pat","","",254,N],[11,"visit_field_value","","",254,N],[11,"visit_fields","","",254,N],[11,"visit_fields_named","","",254,N],[11,"visit_fields_unnamed","","",254,N],[11,"visit_file","","",254,N],[11,"visit_fn_arg","","",254,N],[11,"visit_fn_decl","","",254,N],[11,"visit_foreign_item","","",254,N],[11,"visit_foreign_item_fn","","",254,N],[11,"visit_foreign_item_macro","","",254,N],[11,"visit_foreign_item_static","","",254,N],[11,"visit_foreign_item_type","","",254,N],[11,"visit_foreign_item_verbatim","","",254,N],[11,"visit_generic_argument","","",254,N],[11,"visit_generic_method_argument","","",254,N],[11,"visit_generic_param","","",254,N],[11,"visit_generics","","",254,N],[11,"visit_ident","","",254,N],[11,"visit_impl_item","","",254,N],[11,"visit_impl_item_const","","",254,N],[11,"visit_impl_item_existential","","",254,N],[11,"visit_impl_item_macro","","",254,N],[11,"visit_impl_item_method","","",254,N],[11,"visit_impl_item_type","","",254,N],[11,"visit_impl_item_verbatim","","",254,N],[11,"visit_index","","",254,N],[11,"visit_item","","",254,N],[11,"visit_item_const","","",254,N],[11,"visit_item_enum","","",254,N],[11,"visit_item_existential","","",254,N],[11,"visit_item_extern_crate","","",254,N],[11,"visit_item_fn","","",254,N],[11,"visit_item_foreign_mod","","",254,N],[11,"visit_item_impl","","",254,N],[11,"visit_item_macro","","",254,N],[11,"visit_item_macro2","","",254,N],[11,"visit_item_mod","","",254,N],[11,"visit_item_static","","",254,N],[11,"visit_item_struct","","",254,N],[11,"visit_item_trait","","",254,N],[11,"visit_item_trait_alias","","",254,N],[11,"visit_item_type","","",254,N],[11,"visit_item_union","","",254,N],[11,"visit_item_use","","",254,N],[11,"visit_item_verbatim","","",254,N],[11,"visit_label","","",254,N],[11,"visit_lifetime","","",254,N],[11,"visit_lifetime_def","","",254,N],[11,"visit_lit","","",254,N],[11,"visit_lit_bool","","",254,N],[11,"visit_lit_byte","","",254,N],[11,"visit_lit_byte_str","","",254,N],[11,"visit_lit_char","","",254,N],[11,"visit_lit_float","","",254,N],[11,"visit_lit_int","","",254,N],[11,"visit_lit_str","","",254,N],[11,"visit_lit_verbatim","","",254,N],[11,"visit_local","","",254,N],[11,"visit_macro","","",254,N],[11,"visit_macro_delimiter","","",254,N],[11,"visit_member","","",254,N],[11,"visit_meta","","",254,N],[11,"visit_meta_list","","",254,N],[11,"visit_meta_name_value","","",254,N],[11,"visit_method_sig","","",254,N],[11,"visit_method_turbofish","","",254,N],[11,"visit_nested_meta","","",254,N],[11,"visit_parenthesized_generic_arguments","","",254,N],[11,"visit_pat","","",254,N],[11,"visit_pat_box","","",254,N],[11,"visit_pat_ident","","",254,N],[11,"visit_pat_lit","","",254,N],[11,"visit_pat_macro","","",254,N],[11,"visit_pat_path","","",254,N],[11,"visit_pat_range","","",254,N],[11,"visit_pat_ref","","",254,N],[11,"visit_pat_slice","","",254,N],[11,"visit_pat_struct","","",254,N],[11,"visit_pat_tuple","","",254,N],[11,"visit_pat_tuple_struct","","",254,N],[11,"visit_pat_verbatim","","",254,N],[11,"visit_pat_wild","","",254,N],[11,"visit_path","","",254,N],[11,"visit_path_arguments","","",254,N],[11,"visit_path_segment","","",254,N],[11,"visit_predicate_eq","","",254,N],[11,"visit_predicate_lifetime","","",254,N],[11,"visit_predicate_type","","",254,N],[11,"visit_qself","","",254,N],[11,"visit_range_limits","","",254,N],[11,"visit_return_type","","",254,N],[11,"visit_span","","",254,N],[11,"visit_stmt","","",254,N],[11,"visit_trait_bound","","",254,N],[11,"visit_trait_bound_modifier","","",254,N],[11,"visit_trait_item","","",254,N],[11,"visit_trait_item_const","","",254,N],[11,"visit_trait_item_macro","","",254,N],[11,"visit_trait_item_method","","",254,N],[11,"visit_trait_item_type","","",254,N],[11,"visit_trait_item_verbatim","","",254,N],[11,"visit_type","","",254,N],[11,"visit_type_array","","",254,N],[11,"visit_type_bare_fn","","",254,N],[11,"visit_type_group","","",254,N],[11,"visit_type_impl_trait","","",254,N],[11,"visit_type_infer","","",254,N],[11,"visit_type_macro","","",254,N],[11,"visit_type_never","","",254,N],[11,"visit_type_param","","",254,N],[11,"visit_type_param_bound","","",254,N],[11,"visit_type_paren","","",254,N],[11,"visit_type_path","","",254,N],[11,"visit_type_ptr","","",254,N],[11,"visit_type_reference","","",254,N],[11,"visit_type_slice","","",254,N],[11,"visit_type_trait_object","","",254,N],[11,"visit_type_tuple","","",254,N],[11,"visit_type_verbatim","","",254,N],[11,"visit_un_op","","",254,N],[11,"visit_use_glob","","",254,N],[11,"visit_use_group","","",254,N],[11,"visit_use_name","","",254,N],[11,"visit_use_path","","",254,N],[11,"visit_use_rename","","",254,N],[11,"visit_use_tree","","",254,N],[11,"visit_variant","","",254,N],[11,"visit_vis_crate","","",254,N],[11,"visit_vis_public","","",254,N],[11,"visit_vis_restricted","","",254,N],[11,"visit_visibility","","",254,N],[11,"visit_where_clause","","",254,N],[11,"visit_where_predicate","","",254,N],[5,"visit_abi","","",N,N],[5,"visit_angle_bracketed_generic_arguments","","",N,N],[5,"visit_arg_captured","","",N,N],[5,"visit_arg_self","","",N,N],[5,"visit_arg_self_ref","","",N,N],[5,"visit_arm","","",N,N],[5,"visit_attr_style","","",N,N],[5,"visit_attribute","","",N,N],[5,"visit_bare_fn_arg","","",N,N],[5,"visit_bare_fn_arg_name","","",N,N],[5,"visit_bin_op","","",N,N],[5,"visit_binding","","",N,N],[5,"visit_block","","",N,N],[5,"visit_bound_lifetimes","","",N,N],[5,"visit_const_param","","",N,N],[5,"visit_constraint","","",N,N],[5,"visit_data","","",N,N],[5,"visit_data_enum","","",N,N],[5,"visit_data_struct","","",N,N],[5,"visit_data_union","","",N,N],[5,"visit_derive_input","","",N,N],[5,"visit_expr","","",N,N],[5,"visit_expr_array","","",N,N],[5,"visit_expr_assign","","",N,N],[5,"visit_expr_assign_op","","",N,N],[5,"visit_expr_async","","",N,N],[5,"visit_expr_binary","","",N,N],[5,"visit_expr_block","","",N,N],[5,"visit_expr_box","","",N,N],[5,"visit_expr_break","","",N,N],[5,"visit_expr_call","","",N,N],[5,"visit_expr_cast","","",N,N],[5,"visit_expr_closure","","",N,N],[5,"visit_expr_continue","","",N,N],[5,"visit_expr_field","","",N,N],[5,"visit_expr_for_loop","","",N,N],[5,"visit_expr_group","","",N,N],[5,"visit_expr_if","","",N,N],[5,"visit_expr_in_place","","",N,N],[5,"visit_expr_index","","",N,N],[5,"visit_expr_let","","",N,N],[5,"visit_expr_lit","","",N,N],[5,"visit_expr_loop","","",N,N],[5,"visit_expr_macro","","",N,N],[5,"visit_expr_match","","",N,N],[5,"visit_expr_method_call","","",N,N],[5,"visit_expr_paren","","",N,N],[5,"visit_expr_path","","",N,N],[5,"visit_expr_range","","",N,N],[5,"visit_expr_reference","","",N,N],[5,"visit_expr_repeat","","",N,N],[5,"visit_expr_return","","",N,N],[5,"visit_expr_struct","","",N,N],[5,"visit_expr_try","","",N,N],[5,"visit_expr_try_block","","",N,N],[5,"visit_expr_tuple","","",N,N],[5,"visit_expr_type","","",N,N],[5,"visit_expr_unary","","",N,N],[5,"visit_expr_unsafe","","",N,N],[5,"visit_expr_verbatim","","",N,N],[5,"visit_expr_while","","",N,N],[5,"visit_expr_yield","","",N,N],[5,"visit_field","","",N,N],[5,"visit_field_pat","","",N,N],[5,"visit_field_value","","",N,N],[5,"visit_fields","","",N,N],[5,"visit_fields_named","","",N,N],[5,"visit_fields_unnamed","","",N,N],[5,"visit_file","","",N,N],[5,"visit_fn_arg","","",N,N],[5,"visit_fn_decl","","",N,N],[5,"visit_foreign_item","","",N,N],[5,"visit_foreign_item_fn","","",N,N],[5,"visit_foreign_item_macro","","",N,N],[5,"visit_foreign_item_static","","",N,N],[5,"visit_foreign_item_type","","",N,N],[5,"visit_foreign_item_verbatim","","",N,N],[5,"visit_generic_argument","","",N,N],[5,"visit_generic_method_argument","","",N,N],[5,"visit_generic_param","","",N,N],[5,"visit_generics","","",N,N],[5,"visit_ident","","",N,N],[5,"visit_impl_item","","",N,N],[5,"visit_impl_item_const","","",N,N],[5,"visit_impl_item_existential","","",N,N],[5,"visit_impl_item_macro","","",N,N],[5,"visit_impl_item_method","","",N,N],[5,"visit_impl_item_type","","",N,N],[5,"visit_impl_item_verbatim","","",N,N],[5,"visit_index","","",N,N],[5,"visit_item","","",N,N],[5,"visit_item_const","","",N,N],[5,"visit_item_enum","","",N,N],[5,"visit_item_existential","","",N,N],[5,"visit_item_extern_crate","","",N,N],[5,"visit_item_fn","","",N,N],[5,"visit_item_foreign_mod","","",N,N],[5,"visit_item_impl","","",N,N],[5,"visit_item_macro","","",N,N],[5,"visit_item_macro2","","",N,N],[5,"visit_item_mod","","",N,N],[5,"visit_item_static","","",N,N],[5,"visit_item_struct","","",N,N],[5,"visit_item_trait","","",N,N],[5,"visit_item_trait_alias","","",N,N],[5,"visit_item_type","","",N,N],[5,"visit_item_union","","",N,N],[5,"visit_item_use","","",N,N],[5,"visit_item_verbatim","","",N,N],[5,"visit_label","","",N,N],[5,"visit_lifetime","","",N,N],[5,"visit_lifetime_def","","",N,N],[5,"visit_lit","","",N,N],[5,"visit_lit_bool","","",N,N],[5,"visit_lit_byte","","",N,N],[5,"visit_lit_byte_str","","",N,N],[5,"visit_lit_char","","",N,N],[5,"visit_lit_float","","",N,N],[5,"visit_lit_int","","",N,N],[5,"visit_lit_str","","",N,N],[5,"visit_lit_verbatim","","",N,N],[5,"visit_local","","",N,N],[5,"visit_macro","","",N,N],[5,"visit_macro_delimiter","","",N,N],[5,"visit_member","","",N,N],[5,"visit_meta","","",N,N],[5,"visit_meta_list","","",N,N],[5,"visit_meta_name_value","","",N,N],[5,"visit_method_sig","","",N,N],[5,"visit_method_turbofish","","",N,N],[5,"visit_nested_meta","","",N,N],[5,"visit_parenthesized_generic_arguments","","",N,N],[5,"visit_pat","","",N,N],[5,"visit_pat_box","","",N,N],[5,"visit_pat_ident","","",N,N],[5,"visit_pat_lit","","",N,N],[5,"visit_pat_macro","","",N,N],[5,"visit_pat_path","","",N,N],[5,"visit_pat_range","","",N,N],[5,"visit_pat_ref","","",N,N],[5,"visit_pat_slice","","",N,N],[5,"visit_pat_struct","","",N,N],[5,"visit_pat_tuple","","",N,N],[5,"visit_pat_tuple_struct","","",N,N],[5,"visit_pat_verbatim","","",N,N],[5,"visit_pat_wild","","",N,N],[5,"visit_path","","",N,N],[5,"visit_path_arguments","","",N,N],[5,"visit_path_segment","","",N,N],[5,"visit_predicate_eq","","",N,N],[5,"visit_predicate_lifetime","","",N,N],[5,"visit_predicate_type","","",N,N],[5,"visit_qself","","",N,N],[5,"visit_range_limits","","",N,N],[5,"visit_return_type","","",N,N],[5,"visit_span","","",N,N],[5,"visit_stmt","","",N,N],[5,"visit_trait_bound","","",N,N],[5,"visit_trait_bound_modifier","","",N,N],[5,"visit_trait_item","","",N,N],[5,"visit_trait_item_const","","",N,N],[5,"visit_trait_item_macro","","",N,N],[5,"visit_trait_item_method","","",N,N],[5,"visit_trait_item_type","","",N,N],[5,"visit_trait_item_verbatim","","",N,N],[5,"visit_type","","",N,N],[5,"visit_type_array","","",N,N],[5,"visit_type_bare_fn","","",N,N],[5,"visit_type_group","","",N,N],[5,"visit_type_impl_trait","","",N,N],[5,"visit_type_infer","","",N,N],[5,"visit_type_macro","","",N,N],[5,"visit_type_never","","",N,N],[5,"visit_type_param","","",N,N],[5,"visit_type_param_bound","","",N,N],[5,"visit_type_paren","","",N,N],[5,"visit_type_path","","",N,N],[5,"visit_type_ptr","","",N,N],[5,"visit_type_reference","","",N,N],[5,"visit_type_slice","","",N,N],[5,"visit_type_trait_object","","",N,N],[5,"visit_type_tuple","","",N,N],[5,"visit_type_verbatim","","",N,N],[5,"visit_un_op","","",N,N],[5,"visit_use_glob","","",N,N],[5,"visit_use_group","","",N,N],[5,"visit_use_name","","",N,N],[5,"visit_use_path","","",N,N],[5,"visit_use_rename","","",N,N],[5,"visit_use_tree","","",N,N],[5,"visit_variant","","",N,N],[5,"visit_vis_crate","","",N,N],[5,"visit_vis_public","","",N,N],[5,"visit_vis_restricted","","",N,N],[5,"visit_visibility","","",N,N],[5,"visit_where_clause","","",N,N],[5,"visit_where_predicate","","",N,N],[3,"ItemUnion","devise::syn","A union definition: `union Foo<A, B> { x: A, y: B }`.",N,N],[12,"attrs","","",255,N],[12,"vis","","",255,N],[12,"union_token","","",255,N],[12,"ident","","",255,N],[12,"generics","","",255,N],[12,"fields","","",255,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",256,N],[12,"vis","","Visibility of the field.",256,N],[12,"ident","","Name of the field, if any.",256,N],[12,"colon_token","","",256,N],[12,"ty","","Type of the field.",256,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[12,"attrs","","",257,N],[12,"mac","","",257,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",258,N],[12,"unsafety","","",258,N],[12,"abi","","",258,N],[12,"fn_token","","",258,N],[12,"paren_token","","",258,N],[12,"inputs","","",258,N],[12,"variadic","","",258,N],[12,"output","","",258,N],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",N,N],[12,"constness","","",259,N],[12,"unsafety","","",259,N],[12,"asyncness","","",259,N],[12,"abi","","",259,N],[12,"ident","","",259,N],[12,"decl","","",259,N],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",N,N],[12,"and_token","","",260,N],[12,"mutability","","",260,N],[12,"pat","","",260,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",261,N],[12,"expr","","",261,N],[12,"as_token","","",261,N],[12,"ty","","",261,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",262,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",262,N],[13,"Byte","","A byte literal: `b'f'`.",262,N],[13,"Char","","A character literal: `'a'`.",262,N],[13,"Int","","An integer literal: `1` or `1u16`.",262,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",262,N],[13,"Bool","","A boolean literal: `true` or `false`.",262,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",262,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",263,N],[12,"ident","","",263,N],[12,"colon_token","","",263,N],[12,"bounds","","",263,N],[12,"eq_token","","",263,N],[12,"default","","",263,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[12,"attrs","","",264,N],[12,"return_token","","",264,N],[12,"expr","","",264,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",265,N],[12,"paren_token","","",265,N],[12,"expr","","",265,N],[3,"FieldPat","","A single field in a struct pattern.",N,N],[12,"attrs","","",266,N],[12,"member","","",266,N],[12,"colon_token","","",266,N],[12,"pat","","",266,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",267,N],[12,"ty","","",267,N],[12,"position","","",267,N],[12,"as_token","","",267,N],[12,"gt_token","","",267,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",268,N],[12,"paren_token","","",268,N],[12,"in_token","","",268,N],[12,"path","","",268,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",269,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",269,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",269,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[12,"attrs","","",270,N],[12,"try_token","","",270,N],[12,"block","","",270,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",271,N],[12,"bounds","","",271,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",272,N],[13,"InPlace","","A placement expression: `place <- value`.",272,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",272,N],[13,"Call","","A function call expression: `invoke(a, b)`.",272,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",272,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",272,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",272,N],[13,"Unary","","A unary operation: `!x`, `*x`.",272,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",272,N],[13,"Cast","","A cast expression: `foo as f64`.",272,N],[13,"Type","","A type ascription expression: `foo: f64`.",272,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",272,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",272,N],[13,"While","","A while loop: `while expr { ... }`.",272,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",272,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",272,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",272,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",272,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",272,N],[13,"Block","","A blocked scope: `{ ... }`.",272,N],[13,"Assign","","An assignment expression: `a = compute()`.",272,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",272,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",272,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",272,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",272,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",272,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",272,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",272,N],[13,"Continue","","A `continue`, with an optional label.",272,N],[13,"Return","","A `return`, with an optional value to be returned.",272,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",272,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",272,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",272,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",272,N],[13,"Group","","An expression contained within invisible delimiters.",272,N],[13,"Try","","A try-expression: `expr?`.",272,N],[13,"Async","","An async block: `async { ... }`.",272,N],[13,"TryBlock","","A try block: `try { ... }`.",272,N],[13,"Yield","","A yield expression: `yield expr`.",272,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",272,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",273,N],[13,"Array","","A fixed size array type: `[T; n]`.",273,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",273,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",273,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",273,N],[13,"Never","","The never type: `!`.",273,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",273,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",273,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",273,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",273,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",273,N],[13,"Group","","A type contained within invisible delimiters.",273,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",273,N],[13,"Macro","","A macro in the type position.",273,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",273,N],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",N,N],[12,"qself","","",274,N],[12,"path","","",274,N],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",N,N],[12,"and_token","","",275,N],[12,"lifetime","","",275,N],[12,"mutability","","",275,N],[12,"self_token","","",275,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[12,"attrs","","",276,N],[12,"match_token","","",276,N],[12,"expr","","",276,N],[12,"brace_token","","",276,N],[12,"arms","","",276,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",277,N],[12,"elem","","",277,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",278,N],[13,"Type","","A type argument.",278,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",278,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",278,N],[13,"Const","","A const expression. Must be inside of a block.",278,N],[4,"TraitItem","","An item declaration within the definition of a trait.",N,N],[13,"Const","","An associated constant within the definition of a trait.",279,N],[13,"Method","","A trait method within the definition of a trait.",279,N],[13,"Type","","An associated type within the definition of a trait.",279,N],[13,"Macro","","A macro invocation within the definition of a trait.",279,N],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",279,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",280,N],[12,"ident","","",280,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",281,N],[12,"colon_token","","",281,N],[12,"bounds","","",281,N],[4,"ForeignItem","","An item within an `extern` block.",N,N],[13,"Fn","","A foreign function in an `extern` block.",282,N],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",282,N],[13,"Type","","A foreign type in an `extern` block: `type void`.",282,N],[13,"Macro","","A macro invocation within an extern block.",282,N],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",282,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",283,N],[12,"qself","","",283,N],[12,"path","","",283,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",284,N],[12,"fields","","",284,N],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",N,N],[12,"attrs","","",285,N],[12,"defaultness","","",285,N],[12,"unsafety","","",285,N],[12,"impl_token","","",285,N],[12,"generics","","",285,N],[12,"trait_","","Trait this impl implements.",285,N],[12,"self_ty","","The Self type of the impl.",285,N],[12,"brace_token","","",285,N],[12,"items","","",285,N],[3,"FieldValue","","A field-value pair in a struct literal.",N,N],[12,"attrs","","Attributes tagged on the field.",286,N],[12,"member","","Name or index of the field.",286,N],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",286,N],[12,"expr","","Value of the field.",286,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",287,N],[13,"Crate","","A crate-level visibility: `crate`.",287,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",287,N],[13,"Inherited","","An inherited visibility, which usually means private.",287,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",288,N],[12,"const_token","","",288,N],[12,"mutability","","",288,N],[12,"elem","","",288,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[12,"attrs","","",289,N],[12,"paren_token","","",289,N],[12,"elems","","",289,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",290,N],[13,"Sub","","The `-` operator (subtraction)",290,N],[13,"Mul","","The `*` operator (multiplication)",290,N],[13,"Div","","The `/` operator (division)",290,N],[13,"Rem","","The `%` operator (modulus)",290,N],[13,"And","","The `&&` operator (logical and)",290,N],[13,"Or","","The `||` operator (logical or)",290,N],[13,"BitXor","","The `^` operator (bitwise xor)",290,N],[13,"BitAnd","","The `&` operator (bitwise and)",290,N],[13,"BitOr","","The `|` operator (bitwise or)",290,N],[13,"Shl","","The `<<` operator (shift left)",290,N],[13,"Shr","","The `>>` operator (shift right)",290,N],[13,"Eq","","The `==` operator (equality)",290,N],[13,"Lt","","The `<` operator (less than)",290,N],[13,"Le","","The `<=` operator (less than or equal to)",290,N],[13,"Ne","","The `!=` operator (not equal to)",290,N],[13,"Ge","","The `>=` operator (greater than or equal to)",290,N],[13,"Gt","","The `>` operator (greater than)",290,N],[13,"AddEq","","The `+=` operator",290,N],[13,"SubEq","","The `-=` operator",290,N],[13,"MulEq","","The `*=` operator",290,N],[13,"DivEq","","The `/=` operator",290,N],[13,"RemEq","","The `%=` operator",290,N],[13,"BitXorEq","","The `^=` operator",290,N],[13,"BitAndEq","","The `&=` operator",290,N],[13,"BitOrEq","","The `|=` operator",290,N],[13,"ShlEq","","The `<<=` operator",290,N],[13,"ShrEq","","The `>>=` operator",290,N],[4,"ImplItem","","An item within an impl block.",N,N],[13,"Const","","An associated constant within an impl block.",291,N],[13,"Method","","A method within an impl block.",291,N],[13,"Type","","An associated type within an impl block.",291,N],[13,"Existential","","An existential type within an impl block.",291,N],[13,"Macro","","A macro invocation within an impl block.",291,N],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",291,N],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs","","",292,N],[12,"vis","","",292,N],[12,"mod_token","","",292,N],[12,"ident","","",292,N],[12,"content","","",292,N],[12,"semi","","",292,N],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",N,N],[12,"attrs","","",293,N],[12,"let_token","","",293,N],[12,"pats","","",293,N],[12,"ty","","",293,N],[12,"init","","",293,N],[12,"semi_token","","",293,N],[6,"AttributeArgs","","Conventional argument type associated with an invocation of an attribute macro.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",N,N],[12,"attrs","","",294,N],[12,"vis","","",294,N],[12,"unsafety","","",294,N],[12,"auto_token","","",294,N],[12,"trait_token","","",294,N],[12,"ident","","",294,N],[12,"generics","","",294,N],[12,"colon_token","","",294,N],[12,"supertraits","","",294,N],[12,"brace_token","","",294,N],[12,"items","","",294,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",295,N],[12,"const_token","","",295,N],[12,"ident","","",295,N],[12,"colon_token","","",295,N],[12,"ty","","",295,N],[12,"eq_token","","",295,N],[12,"default","","",295,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[3,"File","","A complete file of Rust source code.",N,N],[12,"shebang","","",296,N],[12,"attrs","","",296,N],[12,"items","","",296,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",297,N],[12,"bang_token","","",297,N],[12,"delimiter","","",297,N],[12,"tts","","",297,N],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",N,N],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",298,N],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",298,N],[13,"Captured","","An explicitly typed pattern captured by a function signature.",298,N],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",298,N],[13,"Ignored","","A type not bound to any pattern in a function signature.",298,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[12,"attrs","","",299,N],[12,"receiver","","",299,N],[12,"dot_token","","",299,N],[12,"method","","",299,N],[12,"turbofish","","",299,N],[12,"paren_token","","",299,N],[12,"args","","",299,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",300,N],[12,"span","","",300,N],[4,"Item","","Things that can appear directly inside of a module or scope.",N,N],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",301,N],[13,"Use","","A use declaration: `use std::collections::HashMap`.",301,N],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",301,N],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",301,N],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",301,N],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",301,N],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",301,N],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",301,N],[13,"Existential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",301,N],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",301,N],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",301,N],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",301,N],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",301,N],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",301,N],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",301,N],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",301,N],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",301,N],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",301,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[12,"attrs","","",302,N],[12,"label","","",302,N],[12,"while_token","","",302,N],[12,"cond","","",302,N],[12,"body","","",302,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",303,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",303,N],[13,"Unit","","Unit struct or unit variant such as `None`.",303,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",304,N],[12,"bounded_ty","","The type being bounded",304,N],[12,"colon_token","","",304,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",304,N],[3,"ForeignItemFn","","A foreign function in an `extern` block.",N,N],[12,"attrs","","",305,N],[12,"vis","","",305,N],[12,"ident","","",305,N],[12,"decl","","",305,N],[12,"semi_token","","",305,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[12,"attrs","","",306,N],[12,"from","","",306,N],[12,"limits","","",306,N],[12,"to","","",306,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",307,N],[13,"Unnamed","","An unnamed field like `self.0`.",307,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",308,N],[12,"ident","","Name of the variant.",308,N],[12,"fields","","Content stored in the variant.",308,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",308,N],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",N,N],[12,"path","","",309,N],[12,"pat","","",309,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[12,"attrs","","",310,N],[12,"label","","",310,N],[12,"for_token","","",310,N],[12,"pat","","",310,N],[12,"in_token","","",310,N],[12,"expr","","",310,N],[12,"body","","",310,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",311,N],[13,"Not","","The `!` operator for logical inversion",311,N],[13,"Neg","","The `-` operator for negation",311,N],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",N,N],[12,"attrs","","",312,N],[12,"vis","","",312,N],[12,"static_token","","",312,N],[12,"mutability","","",312,N],[12,"ident","","",312,N],[12,"colon_token","","",312,N],[12,"ty","","",312,N],[12,"eq_token","","",312,N],[12,"expr","","",312,N],[12,"semi_token","","",312,N],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",N,N],[12,"colon2_token","","",313,N],[12,"lt_token","","",313,N],[12,"args","","",313,N],[12,"gt_token","","",313,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Derived","devise","",N,N],[12,"derive_input","","",314,N],[12,"value","","",314,N],[3,"Fields","","",N,N],[4,"MetaItem","","",N,N],[13,"Ident","","",315,N],[13,"Literal","","",315,N],[13,"KeyValue","","",315,N],[13,"List","","",315,N],[6,"TypeGenericMapFn","","",N,N],[3,"GenericSupport","","",N,N],[6,"Struct","","",N,N],[6,"Enum","","",N,N],[6,"EnumValidatorFn","","",N,N],[6,"StructValidatorFn","","",N,N],[5,"default_enum_mapper","","",N,[[["derivegenerator"],["derived",["dataenum"]]],["result",["tokenstream","diagnostic"]]]],[6,"FunctionFn","","",N,N],[3,"SpanWrapped","","",N,N],[12,"span","","",316,N],[12,"full_span","","",316,N],[12,"value","","",316,N],[8,"Spanned","","",N,N],[10,"span","","",317,[[["self"]],["span"]]],[5,"default_field_mapper","","",N,[[["derivegenerator"],["field"]],["result",["tokenstream","diagnostic"]]]],[5,"default_struct_mapper","","",N,[[["derivegenerator"],["derived",["datastruct"]]],["result",["tokenstream","diagnostic"]]]],[4,"FieldParent","","",N,N],[13,"Variant","","",318,N],[13,"Struct","","",318,N],[13,"Union","","",318,N],[11,"into","devise::ext","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","devise","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"into","","",319,[[["self"]],["u"]]],[11,"to_owned","","",319,[[["self"]],["t"]]],[11,"clone_into","","",319,N],[11,"from","","",319,[[["t"]],["t"]]],[11,"try_from","","",319,[[["u"]],["result"]]],[11,"borrow","","",319,[[["self"]],["t"]]],[11,"get_type_id","","",319,[[["self"]],["typeid"]]],[11,"borrow_mut","","",319,[[["self"]],["t"]]],[11,"try_into","","",319,[[["self"]],["result"]]],[11,"not_found","","",319,[[["str"],["str"]],["e"]]],[11,"into","devise::syn::token","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"peek","","",12,[[["cursor"]],["bool"]]],[11,"display","","",12,[[],["str"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"peek","","",13,[[["cursor"]],["bool"]]],[11,"display","","",13,[[],["str"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"peek","","",14,[[["cursor"]],["bool"]]],[11,"display","","",14,[[],["str"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"peek","","",15,[[["cursor"]],["bool"]]],[11,"display","","",15,[[],["str"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"peek","","",16,[[["cursor"]],["bool"]]],[11,"display","","",16,[[],["str"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"peek","","",17,[[["cursor"]],["bool"]]],[11,"display","","",17,[[],["str"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"peek","","",18,[[["cursor"]],["bool"]]],[11,"display","","",18,[[],["str"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"peek","","",19,[[["cursor"]],["bool"]]],[11,"display","","",19,[[],["str"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"peek","","",20,[[["cursor"]],["bool"]]],[11,"display","","",20,[[],["str"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"peek","","",21,[[["cursor"]],["bool"]]],[11,"display","","",21,[[],["str"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"peek","","",22,[[["cursor"]],["bool"]]],[11,"display","","",22,[[],["str"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"peek","","",23,[[["cursor"]],["bool"]]],[11,"display","","",23,[[],["str"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"peek","","",24,[[["cursor"]],["bool"]]],[11,"display","","",24,[[],["str"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"peek","","",25,[[["cursor"]],["bool"]]],[11,"display","","",25,[[],["str"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"peek","","",26,[[["cursor"]],["bool"]]],[11,"display","","",26,[[],["str"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"peek","","",27,[[["cursor"]],["bool"]]],[11,"display","","",27,[[],["str"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"peek","","",28,[[["cursor"]],["bool"]]],[11,"display","","",28,[[],["str"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"peek","","",29,[[["cursor"]],["bool"]]],[11,"display","","",29,[[],["str"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"peek","","",30,[[["cursor"]],["bool"]]],[11,"display","","",30,[[],["str"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"peek","","",31,[[["cursor"]],["bool"]]],[11,"display","","",31,[[],["str"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"peek","","",32,[[["cursor"]],["bool"]]],[11,"display","","",32,[[],["str"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"peek","","",33,[[["cursor"]],["bool"]]],[11,"display","","",33,[[],["str"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"peek","","",34,[[["cursor"]],["bool"]]],[11,"display","","",34,[[],["str"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"peek","","",35,[[["cursor"]],["bool"]]],[11,"display","","",35,[[],["str"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"peek","","",36,[[["cursor"]],["bool"]]],[11,"display","","",36,[[],["str"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"peek","","",37,[[["cursor"]],["bool"]]],[11,"display","","",37,[[],["str"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"peek","","",38,[[["cursor"]],["bool"]]],[11,"display","","",38,[[],["str"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"peek","","",39,[[["cursor"]],["bool"]]],[11,"display","","",39,[[],["str"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"peek","","",40,[[["cursor"]],["bool"]]],[11,"display","","",40,[[],["str"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"peek","","",41,[[["cursor"]],["bool"]]],[11,"display","","",41,[[],["str"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"peek","","",42,[[["cursor"]],["bool"]]],[11,"display","","",42,[[],["str"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"peek","","",43,[[["cursor"]],["bool"]]],[11,"display","","",43,[[],["str"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"peek","","",44,[[["cursor"]],["bool"]]],[11,"display","","",44,[[],["str"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"peek","","",45,[[["cursor"]],["bool"]]],[11,"display","","",45,[[],["str"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"peek","","",46,[[["cursor"]],["bool"]]],[11,"display","","",46,[[],["str"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"peek","","",47,[[["cursor"]],["bool"]]],[11,"display","","",47,[[],["str"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"peek","","",48,[[["cursor"]],["bool"]]],[11,"display","","",48,[[],["str"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"peek","","",49,[[["cursor"]],["bool"]]],[11,"display","","",49,[[],["str"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"peek","","",50,[[["cursor"]],["bool"]]],[11,"display","","",50,[[],["str"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"peek","","",51,[[["cursor"]],["bool"]]],[11,"display","","",51,[[],["str"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"peek","","",52,[[["cursor"]],["bool"]]],[11,"display","","",52,[[],["str"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"peek","","",53,[[["cursor"]],["bool"]]],[11,"display","","",53,[[],["str"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"peek","","",54,[[["cursor"]],["bool"]]],[11,"display","","",54,[[],["str"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"peek","","",55,[[["cursor"]],["bool"]]],[11,"display","","",55,[[],["str"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"peek","","",56,[[["cursor"]],["bool"]]],[11,"display","","",56,[[],["str"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"peek","","",57,[[["cursor"]],["bool"]]],[11,"display","","",57,[[],["str"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"peek","","",58,[[["cursor"]],["bool"]]],[11,"display","","",58,[[],["str"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"peek","","",59,[[["cursor"]],["bool"]]],[11,"display","","",59,[[],["str"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"peek","","",60,[[["cursor"]],["bool"]]],[11,"display","","",60,[[],["str"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"peek","","",61,[[["cursor"]],["bool"]]],[11,"display","","",61,[[],["str"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"peek","","",62,[[["cursor"]],["bool"]]],[11,"display","","",62,[[],["str"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"peek","","",63,[[["cursor"]],["bool"]]],[11,"display","","",63,[[],["str"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"peek","","",64,[[["cursor"]],["bool"]]],[11,"display","","",64,[[],["str"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"peek","","",65,[[["cursor"]],["bool"]]],[11,"display","","",65,[[],["str"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"peek","","",66,[[["cursor"]],["bool"]]],[11,"display","","",66,[[],["str"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"peek","","",67,[[["cursor"]],["bool"]]],[11,"display","","",67,[[],["str"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"peek","","",68,[[["cursor"]],["bool"]]],[11,"display","","",68,[[],["str"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"peek","","",69,[[["cursor"]],["bool"]]],[11,"display","","",69,[[],["str"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"peek","","",70,[[["cursor"]],["bool"]]],[11,"display","","",70,[[],["str"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"peek","","",71,[[["cursor"]],["bool"]]],[11,"display","","",71,[[],["str"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"peek","","",72,[[["cursor"]],["bool"]]],[11,"display","","",72,[[],["str"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"peek","","",73,[[["cursor"]],["bool"]]],[11,"display","","",73,[[],["str"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"peek","","",74,[[["cursor"]],["bool"]]],[11,"display","","",74,[[],["str"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"peek","","",75,[[["cursor"]],["bool"]]],[11,"display","","",75,[[],["str"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"peek","","",76,[[["cursor"]],["bool"]]],[11,"display","","",76,[[],["str"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"peek","","",77,[[["cursor"]],["bool"]]],[11,"display","","",77,[[],["str"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"peek","","",78,[[["cursor"]],["bool"]]],[11,"display","","",78,[[],["str"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"peek","","",79,[[["cursor"]],["bool"]]],[11,"display","","",79,[[],["str"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"peek","","",80,[[["cursor"]],["bool"]]],[11,"display","","",80,[[],["str"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"peek","","",81,[[["cursor"]],["bool"]]],[11,"display","","",81,[[],["str"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"peek","","",82,[[["cursor"]],["bool"]]],[11,"display","","",82,[[],["str"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"peek","","",83,[[["cursor"]],["bool"]]],[11,"display","","",83,[[],["str"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"peek","","",84,[[["cursor"]],["bool"]]],[11,"display","","",84,[[],["str"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"peek","","",85,[[["cursor"]],["bool"]]],[11,"display","","",85,[[],["str"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"peek","","",86,[[["cursor"]],["bool"]]],[11,"display","","",86,[[],["str"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"peek","","",87,[[["cursor"]],["bool"]]],[11,"display","","",87,[[],["str"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"peek","","",88,[[["cursor"]],["bool"]]],[11,"display","","",88,[[],["str"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"peek","","",89,[[["cursor"]],["bool"]]],[11,"display","","",89,[[],["str"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"peek","","",90,[[["cursor"]],["bool"]]],[11,"display","","",90,[[],["str"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"peek","","",91,[[["cursor"]],["bool"]]],[11,"display","","",91,[[],["str"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"peek","","",92,[[["cursor"]],["bool"]]],[11,"display","","",92,[[],["str"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"peek","","",93,[[["cursor"]],["bool"]]],[11,"display","","",93,[[],["str"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"peek","","",94,[[["cursor"]],["bool"]]],[11,"display","","",94,[[],["str"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"peek","","",95,[[["cursor"]],["bool"]]],[11,"display","","",95,[[],["str"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"peek","","",96,[[["cursor"]],["bool"]]],[11,"display","","",96,[[],["str"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"peek","","",97,[[["cursor"]],["bool"]]],[11,"display","","",97,[[],["str"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"peek","","",98,[[["cursor"]],["bool"]]],[11,"display","","",98,[[],["str"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"peek","","",99,[[["cursor"]],["bool"]]],[11,"display","","",99,[[],["str"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"peek","","",102,[[["cursor"]],["bool"]]],[11,"display","","",102,[[],["str"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"peek","","",103,[[["cursor"]],["bool"]]],[11,"display","","",103,[[],["str"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"peek","","",104,[[["cursor"]],["bool"]]],[11,"display","","",104,[[],["str"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"peek","","",105,[[["cursor"]],["bool"]]],[11,"display","","",105,[[],["str"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"peek","","",106,[[["cursor"]],["bool"]]],[11,"display","","",106,[[],["str"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"peek","","",107,[[["cursor"]],["bool"]]],[11,"display","","",107,[[],["str"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"peek","","",108,[[["cursor"]],["bool"]]],[11,"display","","",108,[[],["str"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"peek","","",109,[[["cursor"]],["bool"]]],[11,"display","","",109,[[],["str"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"peek","","",110,[[["cursor"]],["bool"]]],[11,"display","","",110,[[],["str"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"peek","","",111,[[["cursor"]],["bool"]]],[11,"display","","",111,[[],["str"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"peek","","",112,[[["cursor"]],["bool"]]],[11,"display","","",112,[[],["str"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"peek","","",113,[[["cursor"]],["bool"]]],[11,"display","","",113,[[],["str"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"peek","","",114,[[["cursor"]],["bool"]]],[11,"display","","",114,[[],["str"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"into","devise::syn::buffer","",320,[[["self"]],["u"]]],[11,"from","","",320,[[["t"]],["t"]]],[11,"try_from","","",320,[[["u"]],["result"]]],[11,"borrow","","",320,[[["self"]],["t"]]],[11,"get_type_id","","",320,[[["self"]],["typeid"]]],[11,"borrow_mut","","",320,[[["self"]],["t"]]],[11,"try_into","","",320,[[["self"]],["result"]]],[11,"not_found","","",320,[[["str"],["str"]],["e"]]],[11,"into","","",321,[[["self"]],["u"]]],[11,"to_owned","","",321,[[["self"]],["t"]]],[11,"clone_into","","",321,N],[11,"from","","",321,[[["t"]],["t"]]],[11,"try_from","","",321,[[["u"]],["result"]]],[11,"borrow","","",321,[[["self"]],["t"]]],[11,"get_type_id","","",321,[[["self"]],["typeid"]]],[11,"borrow_mut","","",321,[[["self"]],["t"]]],[11,"try_into","","",321,[[["self"]],["result"]]],[11,"not_found","","",321,[[["str"],["str"]],["e"]]],[11,"into","devise::syn::punctuated","",322,[[["self"]],["u"]]],[11,"to_owned","","",322,[[["self"]],["t"]]],[11,"clone_into","","",322,N],[11,"from","","",322,[[["t"]],["t"]]],[11,"into_iter","","",322,[[["self"]],["i"]]],[11,"try_from","","",322,[[["u"]],["result"]]],[11,"borrow","","",322,[[["self"]],["t"]]],[11,"get_type_id","","",322,[[["self"]],["typeid"]]],[11,"borrow_mut","","",322,[[["self"]],["t"]]],[11,"try_into","","",322,[[["self"]],["result"]]],[11,"span","","",322,[[["self"]],["span"]]],[11,"not_found","","",322,[[["str"],["str"]],["e"]]],[11,"span","","",322,[[["self"]],["span"]]],[11,"into","","",323,[[["self"]],["u"]]],[11,"from","","",323,[[["t"]],["t"]]],[11,"into_iter","","",323,[[["self"]],["i"]]],[11,"try_from","","",323,[[["u"]],["result"]]],[11,"borrow","","",323,[[["self"]],["t"]]],[11,"get_type_id","","",323,[[["self"]],["typeid"]]],[11,"borrow_mut","","",323,[[["self"]],["t"]]],[11,"try_into","","",323,[[["self"]],["result"]]],[11,"not_found","","",323,[[["str"],["str"]],["e"]]],[11,"into","","",324,[[["self"]],["u"]]],[11,"from","","",324,[[["t"]],["t"]]],[11,"into_iter","","",324,[[["self"]],["i"]]],[11,"try_from","","",324,[[["u"]],["result"]]],[11,"borrow","","",324,[[["self"]],["t"]]],[11,"get_type_id","","",324,[[["self"]],["typeid"]]],[11,"borrow_mut","","",324,[[["self"]],["t"]]],[11,"try_into","","",324,[[["self"]],["result"]]],[11,"not_found","","",324,[[["str"],["str"]],["e"]]],[11,"into","","",325,[[["self"]],["u"]]],[11,"from","","",325,[[["t"]],["t"]]],[11,"into_iter","","",325,[[["self"]],["i"]]],[11,"try_from","","",325,[[["u"]],["result"]]],[11,"borrow","","",325,[[["self"]],["t"]]],[11,"get_type_id","","",325,[[["self"]],["typeid"]]],[11,"borrow_mut","","",325,[[["self"]],["t"]]],[11,"try_into","","",325,[[["self"]],["result"]]],[11,"not_found","","",325,[[["str"],["str"]],["e"]]],[11,"into","","",326,[[["self"]],["u"]]],[11,"from","","",326,[[["t"]],["t"]]],[11,"into_iter","","",326,[[["self"]],["i"]]],[11,"try_from","","",326,[[["u"]],["result"]]],[11,"borrow","","",326,[[["self"]],["t"]]],[11,"get_type_id","","",326,[[["self"]],["typeid"]]],[11,"borrow_mut","","",326,[[["self"]],["t"]]],[11,"try_into","","",326,[[["self"]],["result"]]],[11,"not_found","","",326,[[["str"],["str"]],["e"]]],[11,"split2","","",326,N],[11,"split3","","",326,N],[11,"into","","",327,[[["self"]],["u"]]],[11,"from","","",327,[[["t"]],["t"]]],[11,"into_iter","","",327,[[["self"]],["i"]]],[11,"try_from","","",327,[[["u"]],["result"]]],[11,"borrow","","",327,[[["self"]],["t"]]],[11,"get_type_id","","",327,[[["self"]],["typeid"]]],[11,"borrow_mut","","",327,[[["self"]],["t"]]],[11,"try_into","","",327,[[["self"]],["result"]]],[11,"not_found","","",327,[[["str"],["str"]],["e"]]],[11,"into","","",328,[[["self"]],["u"]]],[11,"from","","",328,[[["t"]],["t"]]],[11,"into_iter","","",328,[[["self"]],["i"]]],[11,"try_from","","",328,[[["u"]],["result"]]],[11,"borrow","","",328,[[["self"]],["t"]]],[11,"get_type_id","","",328,[[["self"]],["typeid"]]],[11,"borrow_mut","","",328,[[["self"]],["t"]]],[11,"try_into","","",328,[[["self"]],["result"]]],[11,"not_found","","",328,[[["str"],["str"]],["e"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"into","devise::syn::parse","",329,[[["self"]],["u"]]],[11,"to_string","","",329,[[["self"]],["string"]]],[11,"from","","",329,[[["t"]],["t"]]],[11,"try_from","","",329,[[["u"]],["result"]]],[11,"borrow","","",329,[[["self"]],["t"]]],[11,"get_type_id","","",329,[[["self"]],["typeid"]]],[11,"borrow_mut","","",329,[[["self"]],["t"]]],[11,"try_into","","",329,[[["self"]],["result"]]],[11,"not_found","","",329,[[["str"],["str"]],["e"]]],[11,"into","","",330,[[["self"]],["u"]]],[11,"to_owned","","",330,[[["self"]],["t"]]],[11,"clone_into","","",330,N],[11,"from","","",330,[[["t"]],["t"]]],[11,"try_from","","",330,[[["u"]],["result"]]],[11,"borrow","","",330,[[["self"]],["t"]]],[11,"get_type_id","","",330,[[["self"]],["typeid"]]],[11,"borrow_mut","","",330,[[["self"]],["t"]]],[11,"try_into","","",330,[[["self"]],["result"]]],[11,"not_found","","",330,[[["str"],["str"]],["e"]]],[11,"into","","",331,[[["self"]],["u"]]],[11,"to_string","","",331,[[["self"]],["string"]]],[11,"to_owned","","",331,[[["self"]],["t"]]],[11,"clone_into","","",331,N],[11,"from","","",331,[[["t"]],["t"]]],[11,"try_from","","",331,[[["u"]],["result"]]],[11,"borrow","","",331,[[["self"]],["t"]]],[11,"get_type_id","","",331,[[["self"]],["typeid"]]],[11,"borrow_mut","","",331,[[["self"]],["t"]]],[11,"try_into","","",331,[[["self"]],["result"]]],[11,"not_found","","",331,[[["str"],["str"]],["e"]]],[11,"into","","",332,[[["self"]],["u"]]],[11,"from","","",332,[[["t"]],["t"]]],[11,"try_from","","",332,[[["u"]],["result"]]],[11,"borrow","","",332,[[["self"]],["t"]]],[11,"get_type_id","","",332,[[["self"]],["typeid"]]],[11,"borrow_mut","","",332,[[["self"]],["t"]]],[11,"try_into","","",332,[[["self"]],["result"]]],[11,"not_found","","",332,[[["str"],["str"]],["e"]]],[11,"into","devise::syn","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"peek","","",137,[[["cursor"]],["bool"]]],[11,"display","","",137,[[],["str"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"into","","",333,[[["self"]],["u"]]],[11,"to_owned","","",333,[[["self"]],["t"]]],[11,"clone_into","","",333,N],[11,"from","","",333,[[["t"]],["t"]]],[11,"try_from","","",333,[[["u"]],["result"]]],[11,"borrow","","",333,[[["self"]],["t"]]],[11,"get_type_id","","",333,[[["self"]],["typeid"]]],[11,"borrow_mut","","",333,[[["self"]],["t"]]],[11,"try_into","","",333,[[["self"]],["result"]]],[11,"span","","",333,[[["self"]],["span"]]],[11,"peek","","",333,[[["cursor"]],["bool"]]],[11,"display","","",333,[[],["str"]]],[11,"not_found","","",333,[[["str"],["str"]],["e"]]],[11,"span","","",333,[[["self"]],["span"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"not_found","","",187,[[["str"],["str"]],["e"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"into","","",334,[[["self"]],["u"]]],[11,"to_owned","","",334,[[["self"]],["t"]]],[11,"clone_into","","",334,N],[11,"from","","",334,[[["t"]],["t"]]],[11,"try_from","","",334,[[["u"]],["result"]]],[11,"borrow","","",334,[[["self"]],["t"]]],[11,"get_type_id","","",334,[[["self"]],["typeid"]]],[11,"borrow_mut","","",334,[[["self"]],["t"]]],[11,"try_into","","",334,[[["self"]],["result"]]],[11,"span","","",334,[[["self"]],["span"]]],[11,"not_found","","",334,[[["str"],["str"]],["e"]]],[11,"span","","",334,[[["self"]],["span"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,N],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"not_found","","",232,[[["str"],["str"]],["e"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"into","","",335,[[["self"]],["u"]]],[11,"to_owned","","",335,[[["self"]],["t"]]],[11,"clone_into","","",335,N],[11,"from","","",335,[[["t"]],["t"]]],[11,"try_from","","",335,[[["u"]],["result"]]],[11,"borrow","","",335,[[["self"]],["t"]]],[11,"get_type_id","","",335,[[["self"]],["typeid"]]],[11,"borrow_mut","","",335,[[["self"]],["t"]]],[11,"try_into","","",335,[[["self"]],["result"]]],[11,"span","","",335,[[["self"]],["span"]]],[11,"not_found","","",335,[[["str"],["str"]],["e"]]],[11,"span","","",335,[[["self"]],["span"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"not_found","","",233,[[["str"],["str"]],["e"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"not_found","","",234,[[["str"],["str"]],["e"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"not_found","","",235,[[["str"],["str"]],["e"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"not_found","","",237,[[["str"],["str"]],["e"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"not_found","","",238,[[["str"],["str"]],["e"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"not_found","","",239,[[["str"],["str"]],["e"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"not_found","","",240,[[["str"],["str"]],["e"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"not_found","","",241,[[["str"],["str"]],["e"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,N],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"not_found","","",242,[[["str"],["str"]],["e"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"not_found","","",243,[[["str"],["str"]],["e"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,N],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"not_found","","",244,[[["str"],["str"]],["e"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"not_found","","",245,[[["str"],["str"]],["e"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"not_found","","",246,[[["str"],["str"]],["e"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,N],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"not_found","","",247,[[["str"],["str"]],["e"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"not_found","","",248,[[["str"],["str"]],["e"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"into","","",336,[[["self"]],["u"]]],[11,"to_owned","","",336,[[["self"]],["t"]]],[11,"clone_into","","",336,N],[11,"from","","",336,[[["t"]],["t"]]],[11,"try_from","","",336,[[["u"]],["result"]]],[11,"borrow","","",336,[[["self"]],["t"]]],[11,"get_type_id","","",336,[[["self"]],["typeid"]]],[11,"borrow_mut","","",336,[[["self"]],["t"]]],[11,"try_into","","",336,[[["self"]],["result"]]],[11,"span","","",336,[[["self"]],["span"]]],[11,"peek","","",336,[[["cursor"]],["bool"]]],[11,"display","","",336,[[],["str"]]],[11,"not_found","","",336,[[["str"],["str"]],["e"]]],[11,"span","","",336,[[["self"]],["span"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"not_found","","",249,[[["str"],["str"]],["e"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,N],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"not_found","","",250,[[["str"],["str"]],["e"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"not_found","","",251,[[["str"],["str"]],["e"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"not_found","","",252,[[["str"],["str"]],["e"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"not_found","","",253,[[["str"],["str"]],["e"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,N],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"not_found","","",255,[[["str"],["str"]],["e"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"not_found","","",256,[[["str"],["str"]],["e"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,N],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"not_found","","",257,[[["str"],["str"]],["e"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"not_found","","",258,[[["str"],["str"]],["e"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,N],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"not_found","","",259,[[["str"],["str"]],["e"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"not_found","","",260,[[["str"],["str"]],["e"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"not_found","","",261,[[["str"],["str"]],["e"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"not_found","","",262,[[["str"],["str"]],["e"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"not_found","","",263,[[["str"],["str"]],["e"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,N],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"not_found","","",264,[[["str"],["str"]],["e"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,N],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"not_found","","",265,[[["str"],["str"]],["e"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"into","","",266,[[["self"]],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"not_found","","",266,[[["str"],["str"]],["e"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"not_found","","",267,[[["str"],["str"]],["e"]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"not_found","","",268,[[["str"],["str"]],["e"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"into","","",337,[[["self"]],["u"]]],[11,"to_owned","","",337,[[["self"]],["t"]]],[11,"clone_into","","",337,N],[11,"from","","",337,[[["t"]],["t"]]],[11,"try_from","","",337,[[["u"]],["result"]]],[11,"borrow","","",337,[[["self"]],["t"]]],[11,"get_type_id","","",337,[[["self"]],["typeid"]]],[11,"borrow_mut","","",337,[[["self"]],["t"]]],[11,"try_into","","",337,[[["self"]],["result"]]],[11,"span","","",337,[[["self"]],["span"]]],[11,"peek","","",337,[[["cursor"]],["bool"]]],[11,"display","","",337,[[],["str"]]],[11,"not_found","","",337,[[["str"],["str"]],["e"]]],[11,"span","","",337,[[["self"]],["span"]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"not_found","","",269,[[["str"],["str"]],["e"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"not_found","","",270,[[["str"],["str"]],["e"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"not_found","","",271,[[["str"],["str"]],["e"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"not_found","","",272,[[["str"],["str"]],["e"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"into","","",338,[[["self"]],["u"]]],[11,"to_owned","","",338,[[["self"]],["t"]]],[11,"clone_into","","",338,N],[11,"from","","",338,[[["t"]],["t"]]],[11,"try_from","","",338,[[["u"]],["result"]]],[11,"borrow","","",338,[[["self"]],["t"]]],[11,"get_type_id","","",338,[[["self"]],["typeid"]]],[11,"borrow_mut","","",338,[[["self"]],["t"]]],[11,"try_into","","",338,[[["self"]],["result"]]],[11,"span","","",338,[[["self"]],["span"]]],[11,"peek","","",338,[[["cursor"]],["bool"]]],[11,"display","","",338,[[],["str"]]],[11,"not_found","","",338,[[["str"],["str"]],["e"]]],[11,"span","","",338,[[["self"]],["span"]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"not_found","","",273,[[["str"],["str"]],["e"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"not_found","","",274,[[["str"],["str"]],["e"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"not_found","","",275,[[["str"],["str"]],["e"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"into","","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"not_found","","",276,[[["str"],["str"]],["e"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"not_found","","",277,[[["str"],["str"]],["e"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"not_found","","",278,[[["str"],["str"]],["e"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,N],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"span","","",279,[[["self"]],["span"]]],[11,"not_found","","",279,[[["str"],["str"]],["e"]]],[11,"span","","",279,[[["self"]],["span"]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_string","","",280,[[["self"]],["string"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"span","","",280,[[["self"]],["span"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"not_found","","",280,[[["str"],["str"]],["e"]]],[11,"span","","",280,[[["self"]],["span"]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,N],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"span","","",281,[[["self"]],["span"]]],[11,"not_found","","",281,[[["str"],["str"]],["e"]]],[11,"span","","",281,[[["self"]],["span"]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,N],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"span","","",282,[[["self"]],["span"]]],[11,"not_found","","",282,[[["str"],["str"]],["e"]]],[11,"span","","",282,[[["self"]],["span"]]],[11,"into","","",283,[[["self"]],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,N],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"get_type_id","","",283,[[["self"]],["typeid"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"try_into","","",283,[[["self"]],["result"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"not_found","","",283,[[["str"],["str"]],["e"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"into","","",284,[[["self"]],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,N],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"get_type_id","","",284,[[["self"]],["typeid"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"try_into","","",284,[[["self"]],["result"]]],[11,"not_found","","",284,[[["str"],["str"]],["e"]]],[11,"into","","",285,[[["self"]],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,N],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"get_type_id","","",285,[[["self"]],["typeid"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"try_into","","",285,[[["self"]],["result"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"not_found","","",285,[[["str"],["str"]],["e"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"into","","",286,[[["self"]],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,N],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"get_type_id","","",286,[[["self"]],["typeid"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"try_into","","",286,[[["self"]],["result"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"not_found","","",286,[[["str"],["str"]],["e"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"into","","",287,[[["self"]],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,N],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"get_type_id","","",287,[[["self"]],["typeid"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"try_into","","",287,[[["self"]],["result"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"not_found","","",287,[[["str"],["str"]],["e"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"into","","",339,[[["self"]],["u"]]],[11,"to_owned","","",339,[[["self"]],["t"]]],[11,"clone_into","","",339,N],[11,"from","","",339,[[["t"]],["t"]]],[11,"try_from","","",339,[[["u"]],["result"]]],[11,"borrow","","",339,[[["self"]],["t"]]],[11,"get_type_id","","",339,[[["self"]],["typeid"]]],[11,"borrow_mut","","",339,[[["self"]],["t"]]],[11,"try_into","","",339,[[["self"]],["result"]]],[11,"span","","",339,[[["self"]],["span"]]],[11,"peek","","",339,[[["cursor"]],["bool"]]],[11,"display","","",339,[[],["str"]]],[11,"not_found","","",339,[[["str"],["str"]],["e"]]],[11,"span","","",339,[[["self"]],["span"]]],[11,"into","","",288,[[["self"]],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,N],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"get_type_id","","",288,[[["self"]],["typeid"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"try_into","","",288,[[["self"]],["result"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"not_found","","",288,[[["str"],["str"]],["e"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"into","","",289,[[["self"]],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,N],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"get_type_id","","",289,[[["self"]],["typeid"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"try_into","","",289,[[["self"]],["result"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"not_found","","",289,[[["str"],["str"]],["e"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"into","","",290,[[["self"]],["u"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,N],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"get_type_id","","",290,[[["self"]],["typeid"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"try_into","","",290,[[["self"]],["result"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"not_found","","",290,[[["str"],["str"]],["e"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"into","","",291,[[["self"]],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,N],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"get_type_id","","",291,[[["self"]],["typeid"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"try_into","","",291,[[["self"]],["result"]]],[11,"span","","",291,[[["self"]],["span"]]],[11,"not_found","","",291,[[["str"],["str"]],["e"]]],[11,"span","","",291,[[["self"]],["span"]]],[11,"into","","",292,[[["self"]],["u"]]],[11,"to_owned","","",292,[[["self"]],["t"]]],[11,"clone_into","","",292,N],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"span","","",292,[[["self"]],["span"]]],[11,"not_found","","",292,[[["str"],["str"]],["e"]]],[11,"span","","",292,[[["self"]],["span"]]],[11,"into","","",293,[[["self"]],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,N],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"span","","",293,[[["self"]],["span"]]],[11,"not_found","","",293,[[["str"],["str"]],["e"]]],[11,"span","","",293,[[["self"]],["span"]]],[11,"into","","",340,[[["self"]],["u"]]],[11,"to_owned","","",340,[[["self"]],["t"]]],[11,"clone_into","","",340,N],[11,"from","","",340,[[["t"]],["t"]]],[11,"try_from","","",340,[[["u"]],["result"]]],[11,"borrow","","",340,[[["self"]],["t"]]],[11,"get_type_id","","",340,[[["self"]],["typeid"]]],[11,"borrow_mut","","",340,[[["self"]],["t"]]],[11,"try_into","","",340,[[["self"]],["result"]]],[11,"span","","",340,[[["self"]],["span"]]],[11,"peek","","",340,[[["cursor"]],["bool"]]],[11,"display","","",340,[[],["str"]]],[11,"not_found","","",340,[[["str"],["str"]],["e"]]],[11,"span","","",340,[[["self"]],["span"]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,N],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"span","","",294,[[["self"]],["span"]]],[11,"not_found","","",294,[[["str"],["str"]],["e"]]],[11,"span","","",294,[[["self"]],["span"]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,N],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"span","","",295,[[["self"]],["span"]]],[11,"not_found","","",295,[[["str"],["str"]],["e"]]],[11,"span","","",295,[[["self"]],["span"]]],[11,"into","","",296,[[["self"]],["u"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,N],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"span","","",296,[[["self"]],["span"]]],[11,"not_found","","",296,[[["str"],["str"]],["e"]]],[11,"span","","",296,[[["self"]],["span"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"to_owned","","",297,[[["self"]],["t"]]],[11,"clone_into","","",297,N],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"span","","",297,[[["self"]],["span"]]],[11,"not_found","","",297,[[["str"],["str"]],["e"]]],[11,"span","","",297,[[["self"]],["span"]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"to_owned","","",298,[[["self"]],["t"]]],[11,"clone_into","","",298,N],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"span","","",298,[[["self"]],["span"]]],[11,"not_found","","",298,[[["str"],["str"]],["e"]]],[11,"span","","",298,[[["self"]],["span"]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"to_owned","","",299,[[["self"]],["t"]]],[11,"clone_into","","",299,N],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"span","","",299,[[["self"]],["span"]]],[11,"not_found","","",299,[[["str"],["str"]],["e"]]],[11,"span","","",299,[[["self"]],["span"]]],[11,"into","","",300,[[["self"]],["u"]]],[11,"to_owned","","",300,[[["self"]],["t"]]],[11,"clone_into","","",300,N],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"span","","",300,[[["self"]],["span"]]],[11,"not_found","","",300,[[["str"],["str"]],["e"]]],[11,"span","","",300,[[["self"]],["span"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,N],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"span","","",301,[[["self"]],["span"]]],[11,"not_found","","",301,[[["str"],["str"]],["e"]]],[11,"span","","",301,[[["self"]],["span"]]],[11,"into","","",302,[[["self"]],["u"]]],[11,"to_owned","","",302,[[["self"]],["t"]]],[11,"clone_into","","",302,N],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"get_type_id","","",302,[[["self"]],["typeid"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"try_into","","",302,[[["self"]],["result"]]],[11,"span","","",302,[[["self"]],["span"]]],[11,"not_found","","",302,[[["str"],["str"]],["e"]]],[11,"span","","",302,[[["self"]],["span"]]],[11,"into","","",303,[[["self"]],["u"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,N],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"get_type_id","","",303,[[["self"]],["typeid"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"try_into","","",303,[[["self"]],["result"]]],[11,"span","","",303,[[["self"]],["span"]]],[11,"not_found","","",303,[[["str"],["str"]],["e"]]],[11,"span","","",303,[[["self"]],["span"]]],[11,"into","","",304,[[["self"]],["u"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,N],[11,"from","","",304,[[["t"]],["t"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"get_type_id","","",304,[[["self"]],["typeid"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"try_into","","",304,[[["self"]],["result"]]],[11,"span","","",304,[[["self"]],["span"]]],[11,"not_found","","",304,[[["str"],["str"]],["e"]]],[11,"span","","",304,[[["self"]],["span"]]],[11,"into","","",305,[[["self"]],["u"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,N],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"get_type_id","","",305,[[["self"]],["typeid"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"try_into","","",305,[[["self"]],["result"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"not_found","","",305,[[["str"],["str"]],["e"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"into","","",306,[[["self"]],["u"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,N],[11,"from","","",306,[[["t"]],["t"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"get_type_id","","",306,[[["self"]],["typeid"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"try_into","","",306,[[["self"]],["result"]]],[11,"span","","",306,[[["self"]],["span"]]],[11,"not_found","","",306,[[["str"],["str"]],["e"]]],[11,"span","","",306,[[["self"]],["span"]]],[11,"into","","",307,[[["self"]],["u"]]],[11,"to_owned","","",307,[[["self"]],["t"]]],[11,"clone_into","","",307,N],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"get_type_id","","",307,[[["self"]],["typeid"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"try_into","","",307,[[["self"]],["result"]]],[11,"span","","",307,[[["self"]],["span"]]],[11,"not_found","","",307,[[["str"],["str"]],["e"]]],[11,"span","","",307,[[["self"]],["span"]]],[11,"into","","",308,[[["self"]],["u"]]],[11,"to_owned","","",308,[[["self"]],["t"]]],[11,"clone_into","","",308,N],[11,"from","","",308,[[["t"]],["t"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"get_type_id","","",308,[[["self"]],["typeid"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"try_into","","",308,[[["self"]],["result"]]],[11,"span","","",308,[[["self"]],["span"]]],[11,"not_found","","",308,[[["str"],["str"]],["e"]]],[11,"span","","",308,[[["self"]],["span"]]],[11,"into","","",309,[[["self"]],["u"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,N],[11,"from","","",309,[[["t"]],["t"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"get_type_id","","",309,[[["self"]],["typeid"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"try_into","","",309,[[["self"]],["result"]]],[11,"span","","",309,[[["self"]],["span"]]],[11,"not_found","","",309,[[["str"],["str"]],["e"]]],[11,"span","","",309,[[["self"]],["span"]]],[11,"into","","",310,[[["self"]],["u"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,N],[11,"from","","",310,[[["t"]],["t"]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"get_type_id","","",310,[[["self"]],["typeid"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"try_into","","",310,[[["self"]],["result"]]],[11,"span","","",310,[[["self"]],["span"]]],[11,"not_found","","",310,[[["str"],["str"]],["e"]]],[11,"span","","",310,[[["self"]],["span"]]],[11,"into","","",311,[[["self"]],["u"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,N],[11,"from","","",311,[[["t"]],["t"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"get_type_id","","",311,[[["self"]],["typeid"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"try_into","","",311,[[["self"]],["result"]]],[11,"span","","",311,[[["self"]],["span"]]],[11,"not_found","","",311,[[["str"],["str"]],["e"]]],[11,"span","","",311,[[["self"]],["span"]]],[11,"into","","",312,[[["self"]],["u"]]],[11,"to_owned","","",312,[[["self"]],["t"]]],[11,"clone_into","","",312,N],[11,"from","","",312,[[["t"]],["t"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"get_type_id","","",312,[[["self"]],["typeid"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"try_into","","",312,[[["self"]],["result"]]],[11,"span","","",312,[[["self"]],["span"]]],[11,"not_found","","",312,[[["str"],["str"]],["e"]]],[11,"span","","",312,[[["self"]],["span"]]],[11,"into","","",313,[[["self"]],["u"]]],[11,"to_owned","","",313,[[["self"]],["t"]]],[11,"clone_into","","",313,N],[11,"from","","",313,[[["t"]],["t"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"get_type_id","","",313,[[["self"]],["typeid"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"try_into","","",313,[[["self"]],["result"]]],[11,"span","","",313,[[["self"]],["span"]]],[11,"not_found","","",313,[[["str"],["str"]],["e"]]],[11,"span","","",313,[[["self"]],["span"]]],[11,"into","","",341,[[["self"]],["u"]]],[11,"to_owned","","",341,[[["self"]],["t"]]],[11,"clone_into","","",341,N],[11,"from","","",341,[[["t"]],["t"]]],[11,"try_from","","",341,[[["u"]],["result"]]],[11,"borrow","","",341,[[["self"]],["t"]]],[11,"get_type_id","","",341,[[["self"]],["typeid"]]],[11,"borrow_mut","","",341,[[["self"]],["t"]]],[11,"try_into","","",341,[[["self"]],["result"]]],[11,"span","","",341,[[["self"]],["span"]]],[11,"not_found","","",341,[[["str"],["str"]],["e"]]],[11,"span","","",341,[[["self"]],["span"]]],[11,"into","devise","",314,[[["self"]],["u"]]],[11,"to_owned","","",314,[[["self"]],["t"]]],[11,"clone_into","","",314,N],[11,"from","","",314,[[["t"]],["t"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"get_type_id","","",314,[[["self"]],["typeid"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"try_into","","",314,[[["self"]],["result"]]],[11,"span","","",314,[[["self"]],["span"]]],[11,"not_found","","",314,[[["str"],["str"]],["e"]]],[11,"span","","",314,[[["self"]],["span"]]],[11,"into","","",342,[[["self"]],["u"]]],[11,"to_owned","","",342,[[["self"]],["t"]]],[11,"clone_into","","",342,N],[11,"from","","",342,[[["t"]],["t"]]],[11,"try_from","","",342,[[["u"]],["result"]]],[11,"borrow","","",342,[[["self"]],["t"]]],[11,"get_type_id","","",342,[[["self"]],["typeid"]]],[11,"borrow_mut","","",342,[[["self"]],["t"]]],[11,"try_into","","",342,[[["self"]],["result"]]],[11,"span","","",342,[[["self"]],["span"]]],[11,"not_found","","",342,[[["str"],["str"]],["e"]]],[11,"into","","",315,[[["self"]],["u"]]],[11,"to_owned","","",315,[[["self"]],["t"]]],[11,"clone_into","","",315,N],[11,"from","","",315,[[["t"]],["t"]]],[11,"try_from","","",315,[[["u"]],["result"]]],[11,"borrow","","",315,[[["self"]],["t"]]],[11,"get_type_id","","",315,[[["self"]],["typeid"]]],[11,"borrow_mut","","",315,[[["self"]],["t"]]],[11,"try_into","","",315,[[["self"]],["result"]]],[11,"span","","",315,[[["self"]],["span"]]],[11,"not_found","","",315,[[["str"],["str"]],["e"]]],[11,"into","","",343,[[["self"]],["u"]]],[11,"to_owned","","",343,[[["self"]],["t"]]],[11,"clone_into","","",343,N],[11,"from","","",343,[[["t"]],["t"]]],[11,"try_from","","",343,[[["u"]],["result"]]],[11,"borrow","","",343,[[["self"]],["t"]]],[11,"get_type_id","","",343,[[["self"]],["typeid"]]],[11,"borrow_mut","","",343,[[["self"]],["t"]]],[11,"try_into","","",343,[[["self"]],["result"]]],[11,"not_found","","",343,[[["str"],["str"]],["e"]]],[11,"into","","",316,[[["self"]],["u"]]],[11,"to_owned","","",316,[[["self"]],["t"]]],[11,"clone_into","","",316,N],[11,"from","","",316,[[["t"]],["t"]]],[11,"try_from","","",316,[[["u"]],["result"]]],[11,"borrow","","",316,[[["self"]],["t"]]],[11,"get_type_id","","",316,[[["self"]],["typeid"]]],[11,"borrow_mut","","",316,[[["self"]],["t"]]],[11,"try_into","","",316,[[["self"]],["result"]]],[11,"span","","",316,[[["self"]],["span"]]],[11,"not_found","","",316,[[["str"],["str"]],["e"]]],[11,"span","","",316,[[["self"]],["span"]]],[11,"into","","",318,[[["self"]],["u"]]],[11,"to_owned","","",318,[[["self"]],["t"]]],[11,"clone_into","","",318,N],[11,"from","","",318,[[["t"]],["t"]]],[11,"try_from","","",318,[[["u"]],["result"]]],[11,"borrow","","",318,[[["self"]],["t"]]],[11,"get_type_id","","",318,[[["self"]],["typeid"]]],[11,"borrow_mut","","",318,[[["self"]],["t"]]],[11,"try_into","","",318,[[["self"]],["result"]]],[11,"not_found","","",318,[[["str"],["str"]],["e"]]],[11,"clone","","",316,[[["self"]],["spanwrapped"]]],[11,"clone","","",9,[[["self"]],["metaitemlist"]]],[11,"clone","","",343,[[["self"]],["genericsupport"]]],[11,"clone","","",315,[[["self"]],["metaitem"]]],[11,"clone","devise::ext","",2,[[["self"]],["generickind"]]],[11,"clone","devise","",314,[[["self"]],["derived"]]],[11,"clone","","",342,[[["self"]],["fields"]]],[11,"clone","","",319,[[["self"]],["datasupport"]]],[11,"clone","","",6,[[["self"]],["field"]]],[11,"clone","","",318,[[["self"]],["fieldparent"]]],[11,"to_tokens","","",316,N],[11,"to_tokens","","",314,N],[11,"extend","","",319,N],[11,"extend","","",343,N],[11,"cmp","","",319,[[["self"],["datasupport"]],["ordering"]]],[11,"cmp","","",343,[[["self"],["genericsupport"]],["ordering"]]],[11,"kind","devise::syn","",198,[[["self"]],["generickind"]]],[11,"kind","","",278,[[["self"]],["generickind"]]],[11,"strip_lifetimes","","",273,N],[11,"with_stripped_lifetimes","","",273,[[["self"]],["type"]]],[11,"bitor_assign","devise","Adds the set of flags.",319,N],[11,"bitor_assign","","Adds the set of flags.",343,N],[11,"bitand_assign","","Disables all flags disabled in the set.",319,N],[11,"bitand_assign","","Disables all flags disabled in the set.",343,N],[11,"span","","",342,[[["self"]],["span"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"span","","",315,[[["self"]],["span"]]],[11,"bitor","","Returns the union of the two sets of flags.",319,[[["self"],["datasupport"]],["datasupport"]]],[11,"bitor","","Returns the union of the two sets of flags.",343,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"fmt","","",343,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",343,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",319,[[["self"],["datasupport"]],["datasupport"]]],[11,"deref","","",316,[[["self"]],["t"]]],[11,"deref","","",6,N],[11,"deref","","",314,[[["self"]],["t"]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",343,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",319,N],[11,"hash","","",343,N],[11,"sub_assign","","Disables all flags enabled in the set.",319,N],[11,"sub_assign","","Disables all flags enabled in the set.",343,N],[11,"fmt","","",343,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",319,[[["self"],["datasupport"]],["option",["ordering"]]]],[11,"lt","","",319,[[["self"],["datasupport"]],["bool"]]],[11,"le","","",319,[[["self"],["datasupport"]],["bool"]]],[11,"gt","","",319,[[["self"],["datasupport"]],["bool"]]],[11,"ge","","",319,[[["self"],["datasupport"]],["bool"]]],[11,"partial_cmp","","",343,[[["self"],["genericsupport"]],["option",["ordering"]]]],[11,"lt","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"le","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"gt","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"ge","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"bitxor_assign","","Toggles the set of flags.",343,N],[11,"bitxor_assign","","Toggles the set of flags.",319,N],[11,"not","","Returns the complement of this set of flags.",319,[[["self"]],["datasupport"]]],[11,"not","","Returns the complement of this set of flags.",343,[[["self"]],["genericsupport"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",319,[[["self"],["datasupport"]],["datasupport"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",343,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"from_iter","","",343,[[["t"]],["genericsupport"]]],[11,"from_iter","","",319,[[["t"]],["datasupport"]]],[11,"fmt","","",343,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",315,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",316,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",314,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",318,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",342,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",319,[[["self"],["datasupport"]],["datasupport"]]],[11,"sub","","Returns the set difference of the two sets of flags.",343,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",343,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",315,[[["meta"]],["metaitem"]]],[11,"from","","",315,[[["nestedmeta"]],["metaitem"]]],[11,"is","devise::syn","",202,N],[11,"is_local","","",202,N],[11,"is_global","","",202,N],[11,"generics","","",202,[[["self"]],["option",["punctuated"]]]],[11,"from_meta","devise","",316,[[["metaitem"]],["result",["spanwrapped","diagnostic"]]]],[11,"eq","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"ne","","",343,[[["self"],["genericsupport"]],["bool"]]],[11,"eq","devise::ext","",2,[[["self"],["generickind"]],["bool"]]],[11,"eq","devise","",319,[[["self"],["datasupport"]],["bool"]]],[11,"ne","","",319,[[["self"],["datasupport"]],["bool"]]],[11,"clone","devise::syn::token","",114,[[["self"]],["group"]]],[11,"clone","","",62,[[["self"]],["where"]]],[11,"clone","devise::syn","",140,[[["self"]],["usegroup"]]],[11,"clone","","",149,[[["self"]],["exprunary"]]],[11,"clone","","",265,[[["self"]],["exprparen"]]],[11,"clone","","",126,[[["self"]],["expryield"]]],[11,"clone","","",187,[[["self"]],["attrstyle"]]],[11,"clone","devise::syn::token","",93,[[["self"]],["oreq"]]],[11,"clone","","",97,[[["self"]],["rarrow"]]],[11,"clone","","",16,[[["self"]],["auto"]]],[11,"clone","devise::syn","",179,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",296,[[["self"]],["file"]]],[11,"clone","","",146,[[["self"]],["argcaptured"]]],[11,"clone","devise::syn::token","",67,[[["self"]],["and"]]],[11,"clone","devise::syn","",150,[[["self"]],["nestedmeta"]]],[11,"clone","","",266,[[["self"]],["fieldpat"]]],[11,"clone","","",225,[[["self"]],["traititemmacro"]]],[11,"clone","devise::syn::token","",41,[[["self"]],["move"]]],[11,"clone","","",18,[[["self"]],["box"]]],[11,"clone","devise::syn","",144,[[["self"]],["userename"]]],[11,"clone","devise::syn::token","",71,[[["self"]],["bang"]]],[11,"clone","","",51,[[["self"]],["struct"]]],[11,"clone","devise::syn","",161,[[["self"]],["deriveinput"]]],[11,"clone","devise::syn::token","",26,[[["self"]],["else"]]],[11,"clone","devise::syn","",340,[[["self"]],["litstr"]]],[11,"clone","","",178,[[["self"]],["dataenum"]]],[11,"clone","","",247,[[["self"]],["rangelimits"]]],[11,"clone","devise::syn::token","",73,[[["self"]],["careteq"]]],[11,"clone","devise::syn","",305,[[["self"]],["foreignitemfn"]]],[11,"clone","","",240,[[["self"]],["typemacro"]]],[11,"clone","devise::syn::token","",96,[[["self"]],["question"]]],[11,"clone","devise::syn","",123,[[["self"]],["exprlit"]]],[11,"clone","","",253,[[["self"]],["metanamevalue"]]],[11,"clone","","",199,[[["self"]],["exprbinary"]]],[11,"clone","devise::syn::token","",44,[[["self"]],["priv"]]],[11,"clone","devise::syn","",136,[[["self"]],["viscrate"]]],[11,"clone","","",244,[[["self"]],["exprrepeat"]]],[11,"clone","","",277,[[["self"]],["typegroup"]]],[11,"clone","","",260,[[["self"]],["patref"]]],[11,"clone","devise::syn::token","",52,[[["self"]],["super"]]],[11,"clone","devise::syn::parse","",331,[[["self"]],["error"]]],[11,"clone","devise::syn","",148,[[["self"]],["implitemmethod"]]],[11,"clone","","",181,[[["self"]],["block"]]],[11,"clone","devise::syn::token","",58,[[["self"]],["unsafe"]]],[11,"clone","devise::syn","",286,[[["self"]],["fieldvalue"]]],[11,"clone","","",294,[[["self"]],["itemtrait"]]],[11,"clone","","",255,[[["self"]],["itemunion"]]],[11,"clone","","",210,[[["self"]],["attribute"]]],[11,"clone","devise::syn::token","",95,[[["self"]],["pound"]]],[11,"clone","devise::syn","",238,[[["self"]],["macrodelimiter"]]],[11,"clone","","",183,[[["self"]],["traititemtype"]]],[11,"clone","","",311,[[["self"]],["unop"]]],[11,"clone","","",186,[[["self"]],["genericmethodargument"]]],[11,"clone","devise::syn::token","",88,[[["self"]],["le"]]],[11,"clone","devise::syn","",160,[[["self"]],["exprclosure"]]],[11,"clone","","",281,[[["self"]],["predicatelifetime"]]],[11,"clone","devise::syn::punctuated","",322,[[["self"]],["punctuated"]]],[11,"clone","devise::syn::token","",76,[[["self"]],["comma"]]],[11,"clone","devise::syn","",128,[[["self"]],["fieldsnamed"]]],[11,"clone","","",170,[[["self"]],["exprarray"]]],[11,"clone","","",176,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","devise::syn::token","",38,[[["self"]],["macro"]]],[11,"clone","","",40,[[["self"]],["mod"]]],[11,"clone","","",31,[[["self"]],["fn"]]],[11,"clone","devise::syn","",195,[[["self"]],["typetuple"]]],[11,"clone","","",201,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",198,[[["self"]],["genericparam"]]],[11,"clone","","",171,[[["self"]],["barefnargname"]]],[11,"clone","devise::syn::token","",13,[[["self"]],["abstract"]]],[11,"clone","","",103,[[["self"]],["shl"]]],[11,"clone","devise::syn","",230,[[["self"]],["patwild"]]],[11,"clone","","",312,[[["self"]],["itemstatic"]]],[11,"clone","devise::syn::token","",22,[[["self"]],["crate"]]],[11,"clone","","",112,[[["self"]],["bracket"]]],[11,"clone","","",17,[[["self"]],["become"]]],[11,"clone","","",43,[[["self"]],["override"]]],[11,"clone","devise::syn","",121,[[["self"]],["usepath"]]],[11,"clone","","",155,[[["self"]],["typeinfer"]]],[11,"clone","devise::syn::token","",102,[[["self"]],["semi"]]],[11,"clone","devise::syn","",242,[[["self"]],["traititemmethod"]]],[11,"clone","","",182,[[["self"]],["pathsegment"]]],[11,"clone","","",246,[[["self"]],["useglob"]]],[11,"clone","","",226,[[["self"]],["pattuple"]]],[11,"clone","","",202,[[["self"]],["path"]]],[11,"clone","","",220,[[["self"]],["exprloop"]]],[11,"clone","devise::syn::token","",20,[[["self"]],["const"]]],[11,"clone","devise::syn","",227,[[["self"]],["exprfield"]]],[11,"clone","devise::syn::token","",113,[[["self"]],["paren"]]],[11,"clone","devise::syn","",206,[[["self"]],["patstruct"]]],[11,"clone","devise::syn::token","",79,[[["self"]],["dollar"]]],[11,"clone","devise::syn","",289,[[["self"]],["exprtuple"]]],[11,"clone","","",188,[[["self"]],["typereference"]]],[11,"clone","","",285,[[["self"]],["itemimpl"]]],[11,"clone","","",278,[[["self"]],["genericargument"]]],[11,"clone","devise::syn::token","",57,[[["self"]],["union"]]],[11,"clone","devise::syn","",212,[[["self"]],["boundlifetimes"]]],[11,"clone","","",270,[[["self"]],["exprtryblock"]]],[11,"clone","","",288,[[["self"]],["typeptr"]]],[11,"clone","","",268,[[["self"]],["visrestricted"]]],[11,"clone","","",256,[[["self"]],["field"]]],[11,"clone","","",263,[[["self"]],["typeparam"]]],[11,"clone","devise::syn::token","",21,[[["self"]],["continue"]]],[11,"clone","devise::syn","",196,[[["self"]],["itemtraitalias"]]],[11,"clone","devise::syn::token","",87,[[["self"]],["gt"]]],[11,"clone","","",59,[[["self"]],["unsized"]]],[11,"clone","devise::syn","",142,[[["self"]],["exprindex"]]],[11,"clone","","",251,[[["self"]],["typeslice"]]],[11,"clone","","",133,[[["self"]],["typeimpltrait"]]],[11,"clone","devise::syn::token","",63,[[["self"]],["while"]]],[11,"clone","","",110,[[["self"]],["tilde"]]],[11,"clone","devise::syn","",180,[[["self"]],["exprcontinue"]]],[11,"clone","","",250,[[["self"]],["exprtry"]]],[11,"clone","","",337,[[["self"]],["litbytestr"]]],[11,"clone","devise::syn::token","",78,[[["self"]],["diveq"]]],[11,"clone","devise::syn","",309,[[["self"]],["pattuplestruct"]]],[11,"clone","","",291,[[["self"]],["implitem"]]],[11,"clone","devise::syn::token","",33,[[["self"]],["if"]]],[11,"clone","devise::syn","",200,[[["self"]],["itemenum"]]],[11,"clone","devise::syn::parse","",330,[[["self"]],["stepcursor"]]],[11,"clone","devise::syn","",221,[[["self"]],["binding"]]],[11,"clone","devise::syn::token","",107,[[["self"]],["star"]]],[11,"clone","devise::syn","",295,[[["self"]],["constparam"]]],[11,"clone","","",145,[[["self"]],["litverbatim"]]],[11,"clone","","",163,[[["self"]],["itemmacro"]]],[11,"clone","","",243,[[["self"]],["intsuffix"]]],[11,"clone","","",164,[[["self"]],["typeparambound"]]],[11,"clone","","",174,[[["self"]],["patlit"]]],[11,"clone","","",208,[[["self"]],["itemmacro2"]]],[11,"clone","devise::syn::token","",104,[[["self"]],["shleq"]]],[11,"clone","","",72,[[["self"]],["caret"]]],[11,"clone","devise::syn","",211,[[["self"]],["itemstruct"]]],[11,"clone","","",282,[[["self"]],["foreignitem"]]],[11,"clone","","",216,[[["self"]],["typeverbatim"]]],[11,"clone","devise::syn::token","",70,[[["self"]],["at"]]],[11,"clone","","",65,[[["self"]],["add"]]],[11,"clone","devise::syn","",177,[[["self"]],["traititemconst"]]],[11,"clone","","",158,[[["self"]],["patslice"]]],[11,"clone","devise::syn::token","",55,[[["self"]],["type"]]],[11,"clone","","",28,[[["self"]],["existential"]]],[11,"clone","devise::syn","",122,[[["self"]],["patident"]]],[11,"clone","","",333,[[["self"]],["litfloat"]]],[11,"clone","","",156,[[["self"]],["itemfn"]]],[11,"clone","","",168,[[["self"]],["metalist"]]],[11,"clone","devise::syn::token","",36,[[["self"]],["let"]]],[11,"clone","devise::syn","",280,[[["self"]],["lifetime"]]],[11,"clone","","",214,[[["self"]],["exprassignop"]]],[11,"clone","","",293,[[["self"]],["local"]]],[11,"clone","","",217,[[["self"]],["itemtype"]]],[11,"clone","","",218,[[["self"]],["generics"]]],[11,"clone","","",194,[[["self"]],["patmacro"]]],[11,"clone","devise::syn::token","",12,[[["self"]],["underscore"]]],[11,"clone","devise::syn","",152,[[["self"]],["itemuse"]]],[11,"clone","","",334,[[["self"]],["turbofish"]]],[11,"clone","","",237,[[["self"]],["constraint"]]],[11,"clone","","",299,[[["self"]],["exprmethodcall"]]],[11,"clone","","",252,[[["self"]],["implitemmacro"]]],[11,"clone","","",241,[[["self"]],["fndecl"]]],[11,"clone","","",267,[[["self"]],["qself"]]],[11,"clone","devise::syn::token","",84,[[["self"]],["eq"]]],[11,"clone","devise::syn","",272,[[["self"]],["expr"]]],[11,"clone","devise::syn::token","",14,[[["self"]],["as"]]],[11,"clone","devise::syn","",147,[[["self"]],["exprverbatim"]]],[11,"clone","devise::syn::token","",34,[[["self"]],["impl"]]],[11,"clone","devise::syn","",173,[[["self"]],["exprunsafe"]]],[11,"clone","","",259,[[["self"]],["methodsig"]]],[11,"clone","","",264,[[["self"]],["exprreturn"]]],[11,"clone","","",175,[[["self"]],["exprasync"]]],[11,"clone","devise::syn::token","",30,[[["self"]],["final"]]],[11,"clone","devise::syn","",137,[[["self"]],["litbool"]]],[11,"clone","devise::syn::token","",35,[[["self"]],["in"]]],[11,"clone","","",108,[[["self"]],["sub"]]],[11,"clone","","",50,[[["self"]],["static"]]],[11,"clone","devise::syn","",302,[[["self"]],["exprwhile"]]],[11,"clone","","",275,[[["self"]],["argselfref"]]],[11,"clone","","",209,[[["self"]],["label"]]],[11,"clone","devise::syn::buffer","",321,[[["self"]],["cursor"]]],[11,"clone","devise::syn::token","",69,[[["self"]],["andeq"]]],[11,"clone","","",27,[[["self"]],["enum"]]],[11,"clone","","",24,[[["self"]],["do"]]],[11,"clone","devise::syn","",204,[[["self"]],["itemforeignmod"]]],[11,"clone","","",219,[[["self"]],["exprblock"]]],[11,"clone","","",162,[[["self"]],["patharguments"]]],[11,"clone","devise::syn::token","",80,[[["self"]],["dot"]]],[11,"clone","devise::syn","",297,[[["self"]],["macro"]]],[11,"clone","devise::syn::token","",109,[[["self"]],["subeq"]]],[11,"clone","devise::syn","",261,[[["self"]],["exprcast"]]],[11,"clone","devise::syn::token","",91,[[["self"]],["ne"]]],[11,"clone","devise::syn","",151,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",235,[[["self"]],["strstyle"]]],[11,"clone","","",134,[[["self"]],["itemexterncrate"]]],[11,"clone","","",239,[[["self"]],["itemexistential"]]],[11,"clone","","",245,[[["self"]],["typepath"]]],[11,"clone","","",124,[[["self"]],["typearray"]]],[11,"clone","","",130,[[["self"]],["foreignitemmacro"]]],[11,"clone","","",203,[[["self"]],["datastruct"]]],[11,"clone","","",249,[[["self"]],["whereclause"]]],[11,"clone","","",205,[[["self"]],["exprreference"]]],[11,"clone","","",135,[[["self"]],["arm"]]],[11,"clone","","",207,[[["self"]],["foreignitemverbatim"]]],[11,"clone","devise::syn::token","",42,[[["self"]],["mut"]]],[11,"clone","","",99,[[["self"]],["rem"]]],[11,"clone","","",101,[[["self"]],["fatarrow"]]],[11,"clone","","",49,[[["self"]],["selfvalue"]]],[11,"clone","","",60,[[["self"]],["use"]]],[11,"clone","devise::syn","",167,[[["self"]],["pat"]]],[11,"clone","devise::syn::token","",90,[[["self"]],["muleq"]]],[11,"clone","devise::syn","",307,[[["self"]],["member"]]],[11,"clone","","",153,[[["self"]],["predicateeq"]]],[11,"clone","","",184,[[["self"]],["foreignitemtype"]]],[11,"clone","devise::syn::token","",83,[[["self"]],["dotdoteq"]]],[11,"clone","devise::syn","",287,[[["self"]],["visibility"]]],[11,"clone","devise::syn::token","",45,[[["self"]],["pub"]]],[11,"clone","","",19,[[["self"]],["break"]]],[11,"clone","","",25,[[["self"]],["dyn"]]],[11,"clone","devise::syn","",231,[[["self"]],["exprif"]]],[11,"clone","devise::syn::token","",75,[[["self"]],["colon2"]]],[11,"clone","devise::syn","",248,[[["self"]],["exprinplace"]]],[11,"clone","devise::syn::token","",105,[[["self"]],["shr"]]],[11,"clone","devise::syn","",283,[[["self"]],["exprpath"]]],[11,"clone","","",127,[[["self"]],["patrange"]]],[11,"clone","devise::syn::token","",98,[[["self"]],["larrow"]]],[11,"clone","devise::syn","",222,[[["self"]],["itemverbatim"]]],[11,"clone","","",335,[[["self"]],["typegenerics"]]],[11,"clone","devise::syn::token","",92,[[["self"]],["or"]]],[11,"clone","devise::syn","",132,[[["self"]],["data"]]],[11,"clone","","",141,[[["self"]],["implitemconst"]]],[11,"clone","","",338,[[["self"]],["litint"]]],[11,"clone","","",339,[[["self"]],["litchar"]]],[11,"clone","","",189,[[["self"]],["usename"]]],[11,"clone","","",279,[[["self"]],["traititem"]]],[11,"clone","devise::syn::token","",86,[[["self"]],["ge"]]],[11,"clone","","",77,[[["self"]],["div"]]],[11,"clone","","",37,[[["self"]],["loop"]]],[11,"clone","devise::syn","",159,[[["self"]],["traitbound"]]],[11,"clone","","",306,[[["self"]],["exprrange"]]],[11,"clone","devise::syn::token","",68,[[["self"]],["andand"]]],[11,"clone","devise::syn","",192,[[["self"]],["returntype"]]],[11,"clone","","",157,[[["self"]],["vispublic"]]],[11,"clone","devise::syn::token","",61,[[["self"]],["virtual"]]],[11,"clone","devise::syn","",313,[[["self"]],["methodturbofish"]]],[11,"clone","devise::syn::token","",54,[[["self"]],["try"]]],[11,"clone","devise::syn","",125,[[["self"]],["itemconst"]]],[11,"clone","","",341,[[["self"]],["implgenerics"]]],[11,"clone","devise::syn::token","",29,[[["self"]],["extern"]]],[11,"clone","","",66,[[["self"]],["addeq"]]],[11,"clone","devise::syn","",131,[[["self"]],["exprbox"]]],[11,"clone","","",139,[[["self"]],["exprstruct"]]],[11,"clone","devise::syn::token","",48,[[["self"]],["selftype"]]],[11,"clone","devise::syn","",269,[[["self"]],["wherepredicate"]]],[11,"clone","","",234,[[["self"]],["lifetimedef"]]],[11,"clone","devise::syn::token","",74,[[["self"]],["colon"]]],[11,"clone","devise::syn","",228,[[["self"]],["typeparen"]]],[11,"clone","devise::syn::token","",23,[[["self"]],["default"]]],[11,"clone","devise::syn","",271,[[["self"]],["typetraitobject"]]],[11,"clone","","",273,[[["self"]],["type"]]],[11,"clone","","",185,[[["self"]],["exprgroup"]]],[11,"clone","","",274,[[["self"]],["patpath"]]],[11,"clone","devise::syn::token","",46,[[["self"]],["ref"]]],[11,"clone","devise::syn","",300,[[["self"]],["index"]]],[11,"clone","","",257,[[["self"]],["exprmacro"]]],[11,"clone","","",120,[[["self"]],["barefnarg"]]],[11,"clone","","",258,[[["self"]],["typebarefn"]]],[11,"clone","devise::syn::token","",106,[[["self"]],["shreq"]]],[11,"clone","devise::syn","",233,[[["self"]],["patbox"]]],[11,"clone","","",298,[[["self"]],["fnarg"]]],[11,"clone","","",308,[[["self"]],["variant"]]],[11,"clone","devise::syn::token","",100,[[["self"]],["remeq"]]],[11,"clone","devise::syn","",310,[[["self"]],["exprforloop"]]],[11,"clone","","",213,[[["self"]],["patverbatim"]]],[11,"clone","devise::syn::token","",111,[[["self"]],["brace"]]],[11,"clone","","",89,[[["self"]],["lt"]]],[11,"clone","devise::syn","",190,[[["self"]],["exprassign"]]],[11,"clone","","",336,[[["self"]],["litbyte"]]],[11,"clone","","",301,[[["self"]],["item"]]],[11,"clone","","",276,[[["self"]],["exprmatch"]]],[11,"clone","devise::syn::token","",85,[[["self"]],["eqeq"]]],[11,"clone","devise::syn","",193,[[["self"]],["implitemverbatim"]]],[11,"clone","","",229,[[["self"]],["traititemverbatim"]]],[11,"clone","","",224,[[["self"]],["foreignitemstatic"]]],[11,"clone","","",262,[[["self"]],["lit"]]],[11,"clone","devise::syn::token","",47,[[["self"]],["return"]]],[11,"clone","devise::syn","",197,[[["self"]],["usetree"]]],[11,"clone","devise::syn::token","",39,[[["self"]],["match"]]],[11,"clone","","",82,[[["self"]],["dot3"]]],[11,"clone","devise::syn","",169,[[["self"]],["stmt"]]],[11,"clone","devise::syn::token","",94,[[["self"]],["oror"]]],[11,"clone","devise::syn","",191,[[["self"]],["exprlet"]]],[11,"clone","","",232,[[["self"]],["abi"]]],[11,"clone","","",303,[[["self"]],["fields"]]],[11,"clone","","",215,[[["self"]],["exprtype"]]],[11,"clone","","",138,[[["self"]],["typenever"]]],[11,"clone","","",292,[[["self"]],["itemmod"]]],[11,"clone","","",284,[[["self"]],["dataunion"]]],[11,"clone","devise::syn::token","",81,[[["self"]],["dot2"]]],[11,"clone","","",64,[[["self"]],["yield"]]],[11,"clone","devise::syn","",154,[[["self"]],["exprbreak"]]],[11,"clone","","",165,[[["self"]],["implitemexistential"]]],[11,"clone","devise::syn::token","",15,[[["self"]],["async"]]],[11,"clone","devise::syn","",143,[[["self"]],["meta"]]],[11,"clone","devise::syn::token","",56,[[["self"]],["typeof"]]],[11,"clone","devise::syn","",236,[[["self"]],["argself"]]],[11,"clone","","",129,[[["self"]],["floatsuffix"]]],[11,"clone","","",304,[[["self"]],["predicatetype"]]],[11,"clone","devise::syn::token","",32,[[["self"]],["for"]]],[11,"clone","","",53,[[["self"]],["trait"]]],[11,"clone","devise::syn","",172,[[["self"]],["implitemtype"]]],[11,"clone","","",223,[[["self"]],["exprcall"]]],[11,"clone","","",290,[[["self"]],["binop"]]],[11,"extend","devise::syn::punctuated","",322,N],[11,"extend","","",322,N],[11,"cmp","devise::syn","",280,[[["self"],["lifetime"]],["ordering"]]],[11,"default","devise::syn::token","",42,[[],["mut"]]],[11,"default","","",41,[[],["move"]]],[11,"default","","",52,[[],["super"]]],[11,"default","","",67,[[],["and"]]],[11,"default","","",110,[[],["tilde"]]],[11,"default","","",93,[[],["oreq"]]],[11,"default","","",102,[[],["semi"]]],[11,"default","","",24,[[],["do"]]],[11,"default","","",82,[[],["dot3"]]],[11,"default","","",92,[[],["or"]]],[11,"default","","",113,[[],["paren"]]],[11,"default","","",13,[[],["abstract"]]],[11,"default","devise::syn","",218,[[],["generics"]]],[11,"default","devise::syn::token","",106,[[],["shreq"]]],[11,"default","","",77,[[],["div"]]],[11,"default","","",28,[[],["existential"]]],[11,"default","","",103,[[],["shl"]]],[11,"default","devise::syn","",162,[[],["patharguments"]]],[11,"default","devise::syn::token","",16,[[],["auto"]]],[11,"default","","",90,[[],["muleq"]]],[11,"default","","",95,[[],["pound"]]],[11,"default","","",87,[[],["gt"]]],[11,"default","","",91,[[],["ne"]]],[11,"default","devise::syn","",212,[[],["boundlifetimes"]]],[11,"default","devise::syn::token","",29,[[],["extern"]]],[11,"default","","",71,[[],["bang"]]],[11,"default","","",55,[[],["type"]]],[11,"default","","",74,[[],["colon"]]],[11,"default","","",104,[[],["shleq"]]],[11,"default","","",46,[[],["ref"]]],[11,"default","","",12,[[],["underscore"]]],[11,"default","","",18,[[],["box"]]],[11,"default","","",81,[[],["dot2"]]],[11,"default","","",32,[[],["for"]]],[11,"default","","",43,[[],["override"]]],[11,"default","","",97,[[],["rarrow"]]],[11,"default","","",112,[[],["bracket"]]],[11,"default","","",61,[[],["virtual"]]],[11,"default","","",34,[[],["impl"]]],[11,"default","","",47,[[],["return"]]],[11,"default","","",72,[[],["caret"]]],[11,"default","","",65,[[],["add"]]],[11,"default","","",40,[[],["mod"]]],[11,"default","","",51,[[],["struct"]]],[11,"default","","",56,[[],["typeof"]]],[11,"default","","",31,[[],["fn"]]],[11,"default","","",44,[[],["priv"]]],[11,"default","","",15,[[],["async"]]],[11,"default","","",36,[[],["let"]]],[11,"default","","",107,[[],["star"]]],[11,"default","","",33,[[],["if"]]],[11,"default","","",14,[[],["as"]]],[11,"default","","",86,[[],["ge"]]],[11,"default","","",25,[[],["dyn"]]],[11,"default","","",98,[[],["larrow"]]],[11,"default","","",20,[[],["const"]]],[11,"default","","",85,[[],["eqeq"]]],[11,"default","","",45,[[],["pub"]]],[11,"default","","",70,[[],["at"]]],[11,"default","","",89,[[],["lt"]]],[11,"default","","",114,[[],["group"]]],[11,"default","","",88,[[],["le"]]],[11,"default","","",101,[[],["fatarrow"]]],[11,"default","","",105,[[],["shr"]]],[11,"default","","",80,[[],["dot"]]],[11,"default","","",38,[[],["macro"]]],[11,"default","","",54,[[],["try"]]],[11,"default","","",100,[[],["remeq"]]],[11,"default","","",73,[[],["careteq"]]],[11,"default","","",109,[[],["subeq"]]],[11,"default","","",60,[[],["use"]]],[11,"default","","",48,[[],["selftype"]]],[11,"default","","",23,[[],["default"]]],[11,"default","","",68,[[],["andand"]]],[11,"default","","",35,[[],["in"]]],[11,"default","","",59,[[],["unsized"]]],[11,"default","","",111,[[],["brace"]]],[11,"default","","",99,[[],["rem"]]],[11,"default","","",17,[[],["become"]]],[11,"default","","",49,[[],["selfvalue"]]],[11,"default","","",57,[[],["union"]]],[11,"default","","",66,[[],["addeq"]]],[11,"default","","",50,[[],["static"]]],[11,"default","","",58,[[],["unsafe"]]],[11,"default","","",69,[[],["andeq"]]],[11,"default","","",78,[[],["diveq"]]],[11,"default","devise::syn::punctuated","",322,[[],["punctuated"]]],[11,"default","devise::syn::token","",21,[[],["continue"]]],[11,"default","","",76,[[],["comma"]]],[11,"default","","",83,[[],["dotdoteq"]]],[11,"default","","",75,[[],["colon2"]]],[11,"default","","",27,[[],["enum"]]],[11,"default","","",26,[[],["else"]]],[11,"default","","",30,[[],["final"]]],[11,"default","","",94,[[],["oror"]]],[11,"default","","",84,[[],["eq"]]],[11,"default","","",96,[[],["question"]]],[11,"default","","",108,[[],["sub"]]],[11,"default","","",62,[[],["where"]]],[11,"default","","",19,[[],["break"]]],[11,"default","","",63,[[],["while"]]],[11,"default","","",37,[[],["loop"]]],[11,"default","","",22,[[],["crate"]]],[11,"default","","",53,[[],["trait"]]],[11,"default","","",79,[[],["dollar"]]],[11,"default","","",64,[[],["yield"]]],[11,"default","","",39,[[],["match"]]],[11,"drop","devise::syn::parse","",329,N],[11,"to_tokens","devise::syn::token","",90,N],[11,"to_tokens","","",80,N],[11,"to_tokens","devise::syn","",173,N],[11,"to_tokens","","",210,N],[11,"to_tokens","","",232,N],[11,"to_tokens","","",339,N],[11,"to_tokens","devise::syn::token","",67,N],[11,"to_tokens","devise::syn","",312,N],[11,"to_tokens","devise::syn::token","",91,N],[11,"to_tokens","","",36,N],[11,"to_tokens","devise::syn","",130,N],[11,"to_tokens","","",148,N],[11,"to_tokens","","",294,N],[11,"to_tokens","devise::syn::token","",44,N],[11,"to_tokens","devise::syn","",272,N],[11,"to_tokens","","",239,N],[11,"to_tokens","","",213,N],[11,"to_tokens","devise::syn::token","",78,N],[11,"to_tokens","","",18,N],[11,"to_tokens","devise::syn","",188,N],[11,"to_tokens","","",120,N],[11,"to_tokens","","",300,N],[11,"to_tokens","","",170,N],[11,"to_tokens","","",281,N],[11,"to_tokens","devise::syn::token","",85,N],[11,"to_tokens","devise::syn","",307,N],[11,"to_tokens","","",237,N],[11,"to_tokens","devise::syn::token","",74,N],[11,"to_tokens","devise::syn","",212,N],[11,"to_tokens","devise::syn::token","",68,N],[11,"to_tokens","devise::syn","",338,N],[11,"to_tokens","","",177,N],[11,"to_tokens","","",269,N],[11,"to_tokens","devise::syn::token","",34,N],[11,"to_tokens","","",23,N],[11,"to_tokens","","",19,N],[11,"to_tokens","","",60,N],[11,"to_tokens","devise::syn","",122,N],[11,"to_tokens","","",198,N],[11,"to_tokens","","",263,N],[11,"to_tokens","","",172,N],[11,"to_tokens","","",199,N],[11,"to_tokens","","",341,N],[11,"to_tokens","","",291,N],[11,"to_tokens","","",244,N],[11,"to_tokens","","",179,N],[11,"to_tokens","devise::syn::token","",30,N],[11,"to_tokens","","",59,N],[11,"to_tokens","devise::syn","",214,N],[11,"to_tokens","","",165,N],[11,"to_tokens","","",228,N],[11,"to_tokens","","",308,N],[11,"to_tokens","devise::syn::token","",39,N],[11,"to_tokens","","",16,N],[11,"to_tokens","","",98,N],[11,"to_tokens","devise::syn","",290,N],[11,"to_tokens","devise::syn::token","",99,N],[11,"to_tokens","","",110,N],[11,"to_tokens","","",66,N],[11,"to_tokens","devise::syn","",282,N],[11,"to_tokens","devise::syn::token","",58,N],[11,"to_tokens","devise::syn","",256,N],[11,"to_tokens","","",204,N],[11,"to_tokens","devise::syn::token","",28,N],[11,"to_tokens","devise::syn","",220,N],[11,"to_tokens","","",260,N],[11,"to_tokens","","",249,N],[11,"to_tokens","","",215,N],[11,"to_tokens","","",208,N],[11,"to_tokens","devise::syn::token","",51,N],[11,"to_tokens","devise::syn","",176,N],[11,"to_tokens","","",209,N],[11,"to_tokens","","",242,N],[11,"to_tokens","devise::syn::token","",84,N],[11,"to_tokens","devise::syn","",207,N],[11,"to_tokens","","",156,N],[11,"to_tokens","","",124,N],[11,"to_tokens","","",127,N],[11,"to_tokens","devise::syn::token","",48,N],[11,"to_tokens","devise::syn","",128,N],[11,"to_tokens","","",264,N],[11,"to_tokens","devise::syn::token","",17,N],[11,"to_tokens","devise::syn","",279,N],[11,"to_tokens","","",151,N],[11,"to_tokens","devise::syn::token","",50,N],[11,"to_tokens","","",53,N],[11,"to_tokens","","",70,N],[11,"to_tokens","","",77,N],[11,"to_tokens","devise::syn","",195,N],[11,"to_tokens","devise::syn::token","",94,N],[11,"to_tokens","devise::syn","",183,N],[11,"to_tokens","devise::syn::token","",61,N],[11,"to_tokens","devise::syn","",185,N],[11,"to_tokens","","",144,N],[11,"to_tokens","","",288,N],[11,"to_tokens","","",234,N],[11,"to_tokens","","",135,N],[11,"to_tokens","","",233,N],[11,"to_tokens","devise::syn::token","",72,N],[11,"to_tokens","","",81,N],[11,"to_tokens","devise::syn","",143,N],[11,"to_tokens","","",313,N],[11,"to_tokens","devise::syn::token","",24,N],[11,"to_tokens","","",107,N],[11,"to_tokens","","",57,N],[11,"to_tokens","devise::syn","",246,N],[11,"to_tokens","","",231,N],[11,"to_tokens","devise::syn::token","",12,N],[11,"to_tokens","","",75,N],[11,"to_tokens","devise::syn","",276,N],[11,"to_tokens","devise::syn::token","",101,N],[11,"to_tokens","","",14,N],[11,"to_tokens","devise::syn","",153,N],[11,"to_tokens","","",167,N],[11,"to_tokens","","",271,N],[11,"to_tokens","","",306,N],[11,"to_tokens","","",171,N],[11,"to_tokens","devise::syn::token","",54,N],[11,"to_tokens","devise::syn","",175,N],[11,"to_tokens","","",158,N],[11,"to_tokens","","",286,N],[11,"to_tokens","devise::syn::token","",108,N],[11,"to_tokens","devise::syn","",293,N],[11,"to_tokens","devise::syn::token","",40,N],[11,"to_tokens","devise::syn","",186,N],[11,"to_tokens","","",259,N],[11,"to_tokens","devise::syn::token","",65,N],[11,"to_tokens","devise::syn","",180,N],[11,"to_tokens","","",224,N],[11,"to_tokens","","",226,N],[11,"to_tokens","devise::syn::token","",89,N],[11,"to_tokens","devise::syn","",160,N],[11,"to_tokens","","",289,N],[11,"to_tokens","","",184,N],[11,"to_tokens","","",222,N],[11,"to_tokens","devise::syn::token","",25,N],[11,"to_tokens","devise::syn","",253,N],[11,"to_tokens","","",225,N],[11,"to_tokens","","",147,N],[11,"to_tokens","","",245,N],[11,"to_tokens","","",174,N],[11,"to_tokens","","",157,N],[11,"to_tokens","devise::syn::token","",37,N],[11,"to_tokens","devise::syn","",191,N],[11,"to_tokens","","",202,N],[11,"to_tokens","devise::syn::token","",33,N],[11,"to_tokens","devise::syn","",150,N],[11,"to_tokens","devise::syn::token","",100,N],[11,"to_tokens","devise::syn","",334,N],[11,"to_tokens","","",310,N],[11,"to_tokens","devise::syn::token","",43,N],[11,"to_tokens","devise::syn","",250,N],[11,"to_tokens","","",138,N],[11,"to_tokens","devise::syn::token","",27,N],[11,"to_tokens","devise::syn","",219,N],[11,"to_tokens","devise::syn::token","",73,N],[11,"to_tokens","devise::syn::punctuated","",116,N],[11,"to_tokens","devise::syn::token","",86,N],[11,"to_tokens","devise::syn","",205,N],[11,"to_tokens","devise::syn::token","",93,N],[11,"to_tokens","","",41,N],[11,"to_tokens","","",62,N],[11,"to_tokens","","",106,N],[11,"to_tokens","","",46,N],[11,"to_tokens","devise::syn","",164,N],[11,"to_tokens","","",194,N],[11,"to_tokens","","",221,N],[11,"to_tokens","","",125,N],[11,"to_tokens","devise::syn::token","",38,N],[11,"to_tokens","","",83,N],[11,"to_tokens","devise::syn","",278,N],[11,"to_tokens","devise::syn::token","",105,N],[11,"to_tokens","","",97,N],[11,"to_tokens","","",79,N],[11,"to_tokens","","",42,N],[11,"to_tokens","devise::syn","",182,N],[11,"to_tokens","","",275,N],[11,"to_tokens","devise::syn::token","",109,N],[11,"to_tokens","devise::syn","",295,N],[11,"to_tokens","","",265,N],[11,"to_tokens","","",218,N],[11,"to_tokens","","",333,N],[11,"to_tokens","devise::syn::token","",13,N],[11,"to_tokens","devise::syn","",251,N],[11,"to_tokens","","",336,N],[11,"to_tokens","devise::syn::token","",49,N],[11,"to_tokens","devise::syn","",190,N],[11,"to_tokens","","",206,N],[11,"to_tokens","","",142,N],[11,"to_tokens","","",305,N],[11,"to_tokens","","",154,N],[11,"to_tokens","","",149,N],[11,"to_tokens","","",193,N],[11,"to_tokens","","",270,N],[11,"to_tokens","","",335,N],[11,"to_tokens","","",200,N],[11,"to_tokens","","",248,N],[11,"to_tokens","devise::syn::token","",21,N],[11,"to_tokens","devise::syn","",258,N],[11,"to_tokens","devise::syn::token","",63,N],[11,"to_tokens","","",88,N],[11,"to_tokens","devise::syn","",302,N],[11,"to_tokens","","",141,N],[11,"to_tokens","devise::syn::token","",31,N],[11,"to_tokens","devise::syn","",280,N],[11,"to_tokens","devise::syn::token","",29,N],[11,"to_tokens","devise::syn","",303,N],[11,"to_tokens","","",297,N],[11,"to_tokens","devise::syn::token","",103,N],[11,"to_tokens","devise::syn","",273,N],[11,"to_tokens","","",296,N],[11,"to_tokens","","",261,N],[11,"to_tokens","devise::syn::token","",56,N],[11,"to_tokens","devise::syn","",285,N],[11,"to_tokens","","",227,N],[11,"to_tokens","devise::syn::token","",52,N],[11,"to_tokens","devise::syn","",309,N],[11,"to_tokens","","",163,N],[11,"to_tokens","","",137,N],[11,"to_tokens","","",301,N],[11,"to_tokens","","",169,N],[11,"to_tokens","devise::syn::token","",96,N],[11,"to_tokens","","",102,N],[11,"to_tokens","devise::syn","",255,N],[11,"to_tokens","devise::syn::token","",32,N],[11,"to_tokens","","",22,N],[11,"to_tokens","devise::syn","",277,N],[11,"to_tokens","","",340,N],[11,"to_tokens","","",126,N],[11,"to_tokens","","",121,N],[11,"to_tokens","devise::syn::token","",104,N],[11,"to_tokens","devise::syn","",133,N],[11,"to_tokens","","",146,N],[11,"to_tokens","","",216,N],[11,"to_tokens","","",311,N],[11,"to_tokens","devise::syn::token","",26,N],[11,"to_tokens","devise::syn","",230,N],[11,"to_tokens","","",140,N],[11,"to_tokens","","",299,N],[11,"to_tokens","","",266,N],[11,"to_tokens","","",136,N],[11,"to_tokens","devise::syn::punctuated","",322,N],[11,"to_tokens","devise::syn::token","",95,N],[11,"to_tokens","devise::syn","",168,N],[11,"to_tokens","","",287,N],[11,"to_tokens","","",123,N],[11,"to_tokens","","",196,N],[11,"to_tokens","","",283,N],[11,"to_tokens","","",298,N],[11,"to_tokens","","",139,N],[11,"to_tokens","devise::syn::token","",20,N],[11,"to_tokens","","",45,N],[11,"to_tokens","devise::syn","",197,N],[11,"to_tokens","","",229,N],[11,"to_tokens","","",201,N],[11,"to_tokens","","",268,N],[11,"to_tokens","devise::syn::token","",15,N],[11,"to_tokens","devise::syn","",134,N],[11,"to_tokens","devise::syn::token","",47,N],[11,"to_tokens","","",55,N],[11,"to_tokens","devise::syn","",223,N],[11,"to_tokens","","",181,N],[11,"to_tokens","","",159,N],[11,"to_tokens","","",217,N],[11,"to_tokens","devise::syn::token","",69,N],[11,"to_tokens","devise::syn","",337,N],[11,"to_tokens","","",292,N],[11,"to_tokens","","",304,N],[11,"to_tokens","devise::syn::token","",64,N],[11,"to_tokens","devise::syn","",211,N],[11,"to_tokens","","",192,N],[11,"to_tokens","","",161,N],[11,"to_tokens","","",152,N],[11,"to_tokens","","",162,N],[11,"to_tokens","","",240,N],[11,"to_tokens","","",155,N],[11,"to_tokens","","",131,N],[11,"to_tokens","","",145,N],[11,"to_tokens","","",252,N],[11,"to_tokens","devise::syn::token","",35,N],[11,"to_tokens","","",71,N],[11,"to_tokens","","",92,N],[11,"to_tokens","devise::syn","",236,N],[11,"to_tokens","","",274,N],[11,"to_tokens","","",257,N],[11,"to_tokens","","",189,N],[11,"to_tokens","","",262,N],[11,"to_tokens","devise::syn::token","",82,N],[11,"to_tokens","","",87,N],[11,"to_tokens","","",76,N],[11,"next","devise::syn::punctuated","",328,[[["self"]],["option"]]],[11,"next","","",325,[[["self"]],["option"]]],[11,"next","","",324,[[["self"]],["option"]]],[11,"next","","",326,[[["self"]],["option"]]],[11,"next","","",327,[[["self"]],["option"]]],[11,"next","","",323,[[["self"]],["option"]]],[11,"index","","",322,N],[11,"into_iter","","",322,N],[11,"deref","devise::syn::parse","",330,N],[11,"hash","devise::syn::token","",93,N],[11,"hash","","",65,N],[11,"hash","devise::syn","",298,N],[11,"hash","","",148,N],[11,"hash","devise::syn::token","",98,N],[11,"hash","devise::syn","",307,N],[11,"hash","devise::syn::token","",56,N],[11,"hash","devise::syn","",125,N],[11,"hash","devise::syn::token","",18,N],[11,"hash","devise::syn","",246,N],[11,"hash","devise::syn::token","",68,N],[11,"hash","","",13,N],[11,"hash","devise::syn","",217,N],[11,"hash","devise::syn::token","",114,N],[11,"hash","devise::syn","",212,N],[11,"hash","devise::syn::token","",99,N],[11,"hash","","",66,N],[11,"hash","devise::syn","",238,N],[11,"hash","","",132,N],[11,"hash","","",288,N],[11,"hash","","",277,N],[11,"hash","devise::syn::token","",51,N],[11,"hash","devise::syn","",174,N],[11,"hash","","",282,N],[11,"hash","","",123,N],[11,"hash","","",188,N],[11,"hash","","",191,N],[11,"hash","","",264,N],[11,"hash","","",239,N],[11,"hash","devise::syn::token","",29,N],[11,"hash","","",40,N],[11,"hash","devise::syn","",129,N],[11,"hash","","",276,N],[11,"hash","","",299,N],[11,"hash","devise::syn::token","",111,N],[11,"hash","devise::syn","",335,N],[11,"hash","","",313,N],[11,"hash","","",171,N],[11,"hash","","",200,N],[11,"hash","","",216,N],[11,"hash","","",261,N],[11,"hash","devise::syn::token","",112,N],[11,"hash","devise::syn","",240,N],[11,"hash","","",251,N],[11,"hash","","",228,N],[11,"hash","","",302,N],[11,"hash","","",293,N],[11,"hash","","",270,N],[11,"hash","","",286,N],[11,"hash","","",194,N],[11,"hash","","",206,N],[11,"hash","","",237,N],[11,"hash","","",180,N],[11,"hash","","",190,N],[11,"hash","devise::syn::token","",54,N],[11,"hash","devise::syn","",262,N],[11,"hash","","",203,N],[11,"hash","devise::syn::token","",15,N],[11,"hash","devise::syn","",226,N],[11,"hash","","",202,N],[11,"hash","","",234,N],[11,"hash","","",207,N],[11,"hash","","",242,N],[11,"hash","","",222,N],[11,"hash","","",176,N],[11,"hash","","",146,N],[11,"hash","","",229,N],[11,"hash","devise::syn::token","",14,N],[11,"hash","devise::syn","",336,N],[11,"hash","devise::syn::token","",37,N],[11,"hash","devise::syn","",137,N],[11,"hash","","",334,N],[11,"hash","devise::syn::token","",105,N],[11,"hash","devise::syn","",210,N],[11,"hash","","",223,N],[11,"hash","","",305,N],[11,"hash","devise::syn::token","",69,N],[11,"hash","devise::syn","",297,N],[11,"hash","devise::syn::token","",25,N],[11,"hash","devise::syn","",133,N],[11,"hash","","",157,N],[11,"hash","","",310,N],[11,"hash","","",120,N],[11,"hash","","",231,N],[11,"hash","devise::syn::token","",27,N],[11,"hash","devise::syn","",193,N],[11,"hash","","",259,N],[11,"hash","devise::syn::token","",50,N],[11,"hash","","",48,N],[11,"hash","devise::syn","",224,N],[11,"hash","","",185,N],[11,"hash","","",150,N],[11,"hash","","",121,N],[11,"hash","devise::syn::token","",75,N],[11,"hash","devise::syn","",181,N],[11,"hash","","",255,N],[11,"hash","","",337,N],[11,"hash","","",141,N],[11,"hash","","",136,N],[11,"hash","devise::syn::punctuated","",322,N],[11,"hash","devise::syn","",281,N],[11,"hash","","",127,N],[11,"hash","","",179,N],[11,"hash","","",273,N],[11,"hash","devise::syn::token","",59,N],[11,"hash","","",33,N],[11,"hash","devise::syn","",269,N],[11,"hash","devise::syn::token","",44,N],[11,"hash","devise::syn","",169,N],[11,"hash","","",152,N],[11,"hash","","",126,N],[11,"hash","","",221,N],[11,"hash","devise::syn::token","",41,N],[11,"hash","devise::syn","",205,N],[11,"hash","devise::syn::token","",46,N],[11,"hash","devise::syn","",284,N],[11,"hash","","",156,N],[11,"hash","devise::syn::token","",94,N],[11,"hash","","",63,N],[11,"hash","","",95,N],[11,"hash","","",57,N],[11,"hash","devise::syn","",165,N],[11,"hash","","",199,N],[11,"hash","","",285,N],[11,"hash","","",145,N],[11,"hash","devise::syn::token","",21,N],[11,"hash","","",20,N],[11,"hash","","",47,N],[11,"hash","","",23,N],[11,"hash","devise::syn","",184,N],[11,"hash","devise::syn::token","",76,N],[11,"hash","devise::syn","",143,N],[11,"hash","devise::syn::token","",16,N],[11,"hash","devise::syn","",341,N],[11,"hash","","",164,N],[11,"hash","","",303,N],[11,"hash","","",139,N],[11,"hash","devise::syn::token","",43,N],[11,"hash","devise::syn","",291,N],[11,"hash","","",272,N],[11,"hash","devise::syn::token","",58,N],[11,"hash","","",113,N],[11,"hash","devise::syn","",218,N],[11,"hash","","",182,N],[11,"hash","devise::syn::token","",80,N],[11,"hash","","",38,N],[11,"hash","","",74,N],[11,"hash","","",109,N],[11,"hash","devise::syn","",274,N],[11,"hash","devise::syn::token","",88,N],[11,"hash","devise::syn","",278,N],[11,"hash","","",290,N],[11,"hash","devise::syn::token","",103,N],[11,"hash","devise::syn","",263,N],[11,"hash","","",177,N],[11,"hash","devise::syn::token","",19,N],[11,"hash","","",28,N],[11,"hash","devise::syn","",266,N],[11,"hash","","",275,N],[11,"hash","","",219,N],[11,"hash","devise::syn::token","",101,N],[11,"hash","devise::syn","",301,N],[11,"hash","","",292,N],[11,"hash","devise::syn::token","",64,N],[11,"hash","","",34,N],[11,"hash","","",30,N],[11,"hash","","",22,N],[11,"hash","devise::syn","",249,N],[11,"hash","devise::syn::token","",53,N],[11,"hash","devise::syn","",142,N],[11,"hash","","",258,N],[11,"hash","devise::syn::token","",61,N],[11,"hash","devise::syn","",232,N],[11,"hash","","",248,N],[11,"hash","","",135,N],[11,"hash","","",306,N],[11,"hash","","",140,N],[11,"hash","","",168,N],[11,"hash","","",196,N],[11,"hash","devise::syn::token","",78,N],[11,"hash","devise::syn","",170,N],[11,"hash","","",144,N],[11,"hash","devise::syn::token","",49,N],[11,"hash","","",96,N],[11,"hash","devise::syn","",163,N],[11,"hash","","",279,N],[11,"hash","devise::syn::token","",89,N],[11,"hash","","",42,N],[11,"hash","devise::syn","",178,N],[11,"hash","","",312,N],[11,"hash","","",204,N],[11,"hash","","",214,N],[11,"hash","","",155,N],[11,"hash","","",134,N],[11,"hash","devise::syn::token","",77,N],[11,"hash","","",91,N],[11,"hash","devise::syn","",339,N],[11,"hash","","",287,N],[11,"hash","","",128,N],[11,"hash","","",151,N],[11,"hash","","",187,N],[11,"hash","","",340,N],[11,"hash","devise::syn::token","",31,N],[11,"hash","","",82,N],[11,"hash","","",73,N],[11,"hash","devise::syn","",241,N],[11,"hash","","",201,N],[11,"hash","devise::syn::token","",60,N],[11,"hash","devise::syn","",160,N],[11,"hash","","",215,N],[11,"hash","","",252,N],[11,"hash","","",309,N],[11,"hash","","",167,N],[11,"hash","devise::syn::token","",84,N],[11,"hash","devise::syn","",250,N],[11,"hash","devise::syn::token","",86,N],[11,"hash","devise::syn","",267,N],[11,"hash","","",296,N],[11,"hash","devise::syn::token","",110,N],[11,"hash","devise::syn","",283,N],[11,"hash","","",220,N],[11,"hash","","",198,N],[11,"hash","","",311,N],[11,"hash","devise::syn::token","",52,N],[11,"hash","devise::syn","",162,N],[11,"hash","","",149,N],[11,"hash","","",235,N],[11,"hash","","",173,N],[11,"hash","devise::syn::token","",102,N],[11,"hash","","",83,N],[11,"hash","","",106,N],[11,"hash","devise::syn","",130,N],[11,"hash","","",161,N],[11,"hash","devise::syn::token","",67,N],[11,"hash","devise::syn","",172,N],[11,"hash","","",131,N],[11,"hash","devise::syn::token","",97,N],[11,"hash","","",79,N],[11,"hash","devise::syn","",244,N],[11,"hash","","",153,N],[11,"hash","","",333,N],[11,"hash","devise::syn::token","",90,N],[11,"hash","","",70,N],[11,"hash","","",55,N],[11,"hash","devise::syn","",227,N],[11,"hash","","",154,N],[11,"hash","","",268,N],[11,"hash","","",192,N],[11,"hash","devise::syn::token","",72,N],[11,"hash","","",24,N],[11,"hash","devise::syn","",175,N],[11,"hash","","",225,N],[11,"hash","devise::syn::token","",107,N],[11,"hash","devise::syn","",236,N],[11,"hash","","",265,N],[11,"hash","","",158,N],[11,"hash","devise::syn::token","",100,N],[11,"hash","devise::syn","",213,N],[11,"hash","","",197,N],[11,"hash","","",308,N],[11,"hash","","",294,N],[11,"hash","","",304,N],[11,"hash","","",233,N],[11,"hash","devise::syn::token","",85,N],[11,"hash","","",108,N],[11,"hash","devise::syn","",211,N],[11,"hash","devise::syn::token","",104,N],[11,"hash","devise::syn","",209,N],[11,"hash","devise::syn::token","",39,N],[11,"hash","devise::syn","",260,N],[11,"hash","devise::syn::token","",26,N],[11,"hash","devise::syn","",245,N],[11,"hash","","",289,N],[11,"hash","devise::syn::token","",12,N],[11,"hash","","",36,N],[11,"hash","","",81,N],[11,"hash","","",45,N],[11,"hash","devise::syn","",122,N],[11,"hash","","",195,N],[11,"hash","","",186,N],[11,"hash","devise::syn::token","",62,N],[11,"hash","devise::syn","",147,N],[11,"hash","","",257,N],[11,"hash","","",300,N],[11,"hash","devise::syn::token","",87,N],[11,"hash","devise::syn","",159,N],[11,"hash","","",271,N],[11,"hash","","",295,N],[11,"hash","","",253,N],[11,"hash","","",124,N],[11,"hash","","",138,N],[11,"hash","devise::syn::token","",32,N],[11,"hash","devise::syn","",280,N],[11,"hash","","",338,N],[11,"hash","","",189,N],[11,"hash","","",230,N],[11,"hash","","",243,N],[11,"hash","devise::syn::token","",17,N],[11,"hash","devise::syn","",208,N],[11,"hash","devise::syn::token","",71,N],[11,"hash","devise::syn","",256,N],[11,"hash","devise::syn::token","",92,N],[11,"hash","devise::syn","",247,N],[11,"hash","devise::syn::token","",35,N],[11,"hash","devise::syn","",183,N],[11,"partial_cmp","","",280,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"description","devise::syn::parse","",331,[[["self"]],["str"]]],[11,"parse","devise::syn","",245,[[["parsebuffer"]],["result",["typepath","error"]]]],[11,"parse","devise::syn::token","",12,[[["parsebuffer"]],["result",["underscore","error"]]]],[11,"parse","devise::syn","",239,[[["parsebuffer"]],["result",["itemexistential","error"]]]],[11,"parse","devise::syn::token","",54,[[["parsebuffer"]],["result",["try","error"]]]],[11,"parse","","",108,[[["parsebuffer"]],["result",["sub","error"]]]],[11,"parse","devise::syn","",133,[[["parsebuffer"]],["result",["typeimpltrait","error"]]]],[11,"parse","devise::syn::token","",78,[[["parsebuffer"]],["result",["diveq","error"]]]],[11,"parse","devise::syn","",165,[[["parsebuffer"]],["result",["implitemexistential","error"]]]],[11,"parse","","",286,[[["parsebuffer"]],["result",["fieldvalue","error"]]]],[11,"parse","devise::syn::token","",27,[[["parsebuffer"]],["result",["enum","error"]]]],[11,"parse","devise::syn","",195,[[["parsebuffer"]],["result",["typetuple","error"]]]],[11,"parse","","",251,[[["parsebuffer"]],["result",["typeslice","error"]]]],[11,"parse","devise::syn::token","",58,[[["parsebuffer"]],["result",["unsafe","error"]]]],[11,"parse","devise::syn","",209,[[["parsebuffer"]],["result",["label","error"]]]],[11,"parse","","",247,[[["parsebuffer"]],["result",["rangelimits","error"]]]],[11,"parse","","",228,[[["parsebuffer"]],["result",["typeparen","error"]]]],[11,"parse","","",177,[[["parsebuffer"]],["result",["traititemconst","error"]]]],[11,"parse","devise::syn::token","",110,[[["parsebuffer"]],["result",["tilde","error"]]]],[11,"parse","","",94,[[["parsebuffer"]],["result",["oror","error"]]]],[11,"parse","devise::syn","",150,[[["parsebuffer"]],["result",["nestedmeta","error"]]]],[11,"parse","devise::syn::token","",17,[[["parsebuffer"]],["result",["become","error"]]]],[11,"parse","","",67,[[["parsebuffer"]],["result",["and","error"]]]],[11,"parse","devise::syn","",141,[[["parsebuffer"]],["result",["implitemconst","error"]]]],[11,"parse","","",182,[[["parsebuffer"]],["result",["pathsegment","error"]]]],[11,"parse","","",212,[[["parsebuffer"]],["result",["boundlifetimes","error"]]]],[11,"parse","","",285,[[["parsebuffer"]],["result",["itemimpl","error"]]]],[11,"parse","","",297,[[["parsebuffer"]],["result",["macro","error"]]]],[11,"parse","devise::syn::token","",66,[[["parsebuffer"]],["result",["addeq","error"]]]],[11,"parse","devise::syn","",155,[[["parsebuffer"]],["result",["typeinfer","error"]]]],[11,"parse","devise::syn::token","",77,[[["parsebuffer"]],["result",["div","error"]]]],[11,"parse","devise::syn","",290,[[["parsebuffer"]],["result",["binop","error"]]]],[11,"parse","devise::syn::token","",74,[[["parsebuffer"]],["result",["colon","error"]]]],[11,"parse","devise::syn","",294,[[["parsebuffer"]],["result",["itemtrait","error"]]]],[11,"parse","devise::syn::token","",36,[[["parsebuffer"]],["result",["let","error"]]]],[11,"parse","","",81,[[["parsebuffer"]],["result",["dot2","error"]]]],[11,"parse","devise::syn","",208,[[["parsebuffer"]],["result",["itemmacro2","error"]]]],[11,"parse","devise::syn::token","",107,[[["parsebuffer"]],["result",["star","error"]]]],[11,"parse","","",75,[[["parsebuffer"]],["result",["colon2","error"]]]],[11,"parse","","",97,[[["parsebuffer"]],["result",["rarrow","error"]]]],[11,"parse","","",62,[[["parsebuffer"]],["result",["where","error"]]]],[11,"parse","devise::syn","",171,[[["parsebuffer"]],["result",["barefnargname","error"]]]],[11,"parse","","",135,[[["parsebuffer"]],["result",["arm","error"]]]],[11,"parse","devise::syn::token","",68,[[["parsebuffer"]],["result",["andand","error"]]]],[11,"parse","","",56,[[["parsebuffer"]],["result",["typeof","error"]]]],[11,"parse","devise::syn","",151,[[["parsebuffer"]],["result",["anglebracketedgenericarguments","error"]]]],[11,"parse","","",242,[[["parsebuffer"]],["result",["traititemmethod","error"]]]],[11,"parse","","",232,[[["parsebuffer"]],["result",["abi","error"]]]],[11,"parse","","",262,[[["parsebuffer"]],["result",["lit","error"]]]],[11,"parse","devise::syn::token","",29,[[["parsebuffer"]],["result",["extern","error"]]]],[11,"parse","","",100,[[["parsebuffer"]],["result",["remeq","error"]]]],[11,"parse","devise::syn","",211,[[["parsebuffer"]],["result",["itemstruct","error"]]]],[11,"parse","devise::syn::token","",69,[[["parsebuffer"]],["result",["andeq","error"]]]],[11,"parse","","",19,[[["parsebuffer"]],["result",["break","error"]]]],[11,"parse","","",14,[[["parsebuffer"]],["result",["as","error"]]]],[11,"parse","devise::syn","",163,[[["parsebuffer"]],["result",["itemmacro","error"]]]],[11,"parse","devise::syn::token","",88,[[["parsebuffer"]],["result",["le","error"]]]],[11,"parse","","",37,[[["parsebuffer"]],["result",["loop","error"]]]],[11,"parse","devise::syn","",300,[[["parsebuffer"]],["result",["index","error"]]]],[11,"parse","","",283,[[["parsebuffer"]],["result",["exprpath","error"]]]],[11,"parse","","",224,[[["parsebuffer"]],["result",["foreignitemstatic","error"]]]],[11,"parse","","",128,[[["parsebuffer"]],["result",["fieldsnamed","error"]]]],[11,"parse","","",287,[[["parsebuffer"]],["result",["visibility","error"]]]],[11,"parse","","",188,[[["parsebuffer"]],["result",["typereference","error"]]]],[11,"parse","devise::syn::token","",34,[[["parsebuffer"]],["result",["impl","error"]]]],[11,"parse","devise::syn","",305,[[["parsebuffer"]],["result",["foreignitemfn","error"]]]],[11,"parse","devise::syn::token","",90,[[["parsebuffer"]],["result",["muleq","error"]]]],[11,"parse","devise::syn","",312,[[["parsebuffer"]],["result",["itemstatic","error"]]]],[11,"parse","devise::syn::token","",105,[[["parsebuffer"]],["result",["shr","error"]]]],[11,"parse","devise::syn","",308,[[["parsebuffer"]],["result",["variant","error"]]]],[11,"parse","","",137,[[["parsebuffer"]],["result",["litbool","error"]]]],[11,"parse","devise::syn::token","",101,[[["parsebuffer"]],["result",["fatarrow","error"]]]],[11,"parse","","",98,[[["parsebuffer"]],["result",["larrow","error"]]]],[11,"parse","devise::syn","",263,[[["parsebuffer"]],["result",["typeparam","error"]]]],[11,"parse","","",234,[[["parsebuffer"]],["result",["lifetimedef","error"]]]],[11,"parse","devise::syn::token","",33,[[["parsebuffer"]],["result",["if","error"]]]],[11,"parse","devise::syn","",168,[[["parsebuffer"]],["result",["metalist","error"]]]],[11,"parse","","",161,[[["parsebuffer"]],["result",["deriveinput","error"]]]],[11,"parse","","",184,[[["parsebuffer"]],["result",["foreignitemtype","error"]]]],[11,"parse","devise::syn::token","",46,[[["parsebuffer"]],["result",["ref","error"]]]],[11,"parse","","",63,[[["parsebuffer"]],["result",["while","error"]]]],[11,"parse","","",65,[[["parsebuffer"]],["result",["add","error"]]]],[11,"parse","devise::syn","",192,[[["parsebuffer"]],["result",["returntype","error"]]]],[11,"parse","devise::syn::token","",92,[[["parsebuffer"]],["result",["or","error"]]]],[11,"parse","","",52,[[["parsebuffer"]],["result",["super","error"]]]],[11,"parse","","",45,[[["parsebuffer"]],["result",["pub","error"]]]],[11,"parse","","",43,[[["parsebuffer"]],["result",["override","error"]]]],[11,"parse","","",79,[[["parsebuffer"]],["result",["dollar","error"]]]],[11,"parse","devise::syn","",125,[[["parsebuffer"]],["result",["itemconst","error"]]]],[11,"parse","","",258,[[["parsebuffer"]],["result",["typebarefn","error"]]]],[11,"parse","devise::syn::token","",87,[[["parsebuffer"]],["result",["gt","error"]]]],[11,"parse","devise::syn","",240,[[["parsebuffer"]],["result",["typemacro","error"]]]],[11,"parse","devise::syn::token","",73,[[["parsebuffer"]],["result",["careteq","error"]]]],[11,"parse","devise::syn","",278,[[["parsebuffer"]],["result",["genericargument","error"]]]],[11,"parse","","",172,[[["parsebuffer"]],["result",["implitemtype","error"]]]],[11,"parse","devise::syn::token","",22,[[["parsebuffer"]],["result",["crate","error"]]]],[11,"parse","devise::syn","",298,[[["parsebuffer"]],["result",["fnarg","error"]]]],[11,"parse","devise::syn::token","",21,[[["parsebuffer"]],["result",["continue","error"]]]],[11,"parse","devise::syn","",130,[[["parsebuffer"]],["result",["foreignitemmacro","error"]]]],[11,"parse","devise::syn::token","",35,[[["parsebuffer"]],["result",["in","error"]]]],[11,"parse","","",39,[[["parsebuffer"]],["result",["match","error"]]]],[11,"parse","devise::syn","",333,[[["parsebuffer"]],["result",["litfloat","error"]]]],[11,"parse","devise::syn::token","",38,[[["parsebuffer"]],["result",["macro","error"]]]],[11,"parse","","",42,[[["parsebuffer"]],["result",["mut","error"]]]],[11,"parse","devise::syn","",273,[[["parsebuffer"]],["result",["type","error"]]]],[11,"parse","devise::syn::token","",96,[[["parsebuffer"]],["result",["question","error"]]]],[11,"parse","devise::syn","",218,[[["parsebuffer"]],["result",["generics","error"]]]],[11,"parse","","",271,[[["parsebuffer"]],["result",["typetraitobject","error"]]]],[11,"parse","","",196,[[["parsebuffer"]],["result",["itemtraitalias","error"]]]],[11,"parse","devise::syn::token","",25,[[["parsebuffer"]],["result",["dyn","error"]]]],[11,"parse","","",44,[[["parsebuffer"]],["result",["priv","error"]]]],[11,"parse","devise::syn","",181,[[["parsebuffer"]],["result",["block","error"]]]],[11,"parse","","",169,[[["parsebuffer"]],["result",["stmt","error"]]]],[11,"parse","devise::syn::token","",13,[[["parsebuffer"]],["result",["abstract","error"]]]],[11,"parse","devise::syn","",340,[[["parsebuffer"]],["result",["litstr","error"]]]],[11,"parse","","",217,[[["parsebuffer"]],["result",["itemtype","error"]]]],[11,"parse","","",339,[[["parsebuffer"]],["result",["litchar","error"]]]],[11,"parse","devise::syn::token","",49,[[["parsebuffer"]],["result",["selfvalue","error"]]]],[11,"parse","","",20,[[["parsebuffer"]],["result",["const","error"]]]],[11,"parse","","",83,[[["parsebuffer"]],["result",["dotdoteq","error"]]]],[11,"parse","devise::syn","",288,[[["parsebuffer"]],["result",["typeptr","error"]]]],[11,"parse","devise::syn::token","",41,[[["parsebuffer"]],["result",["move","error"]]]],[11,"parse","","",23,[[["parsebuffer"]],["result",["default","error"]]]],[11,"parse","devise::syn","",253,[[["parsebuffer"]],["result",["metanamevalue","error"]]]],[11,"parse","devise::syn::token","",71,[[["parsebuffer"]],["result",["bang","error"]]]],[11,"parse","","",18,[[["parsebuffer"]],["result",["box","error"]]]],[11,"parse","devise::syn","",311,[[["parsebuffer"]],["result",["unop","error"]]]],[11,"parse","","",280,[[["parsebuffer"]],["result",["lifetime","error"]]]],[11,"parse","devise::syn::token","",70,[[["parsebuffer"]],["result",["at","error"]]]],[11,"parse","devise::syn","",148,[[["parsebuffer"]],["result",["implitemmethod","error"]]]],[11,"parse","devise::syn::token","",31,[[["parsebuffer"]],["result",["fn","error"]]]],[11,"parse","","",50,[[["parsebuffer"]],["result",["static","error"]]]],[11,"parse","devise::syn","",249,[[["parsebuffer"]],["result",["whereclause","error"]]]],[11,"parse","devise::syn::token","",32,[[["parsebuffer"]],["result",["for","error"]]]],[11,"parse","","",47,[[["parsebuffer"]],["result",["return","error"]]]],[11,"parse","","",48,[[["parsebuffer"]],["result",["selftype","error"]]]],[11,"parse","devise::syn","",336,[[["parsebuffer"]],["result",["litbyte","error"]]]],[11,"parse","devise::syn::token","",95,[[["parsebuffer"]],["result",["pound","error"]]]],[11,"parse","","",40,[[["parsebuffer"]],["result",["mod","error"]]]],[11,"parse","","",102,[[["parsebuffer"]],["result",["semi","error"]]]],[11,"parse","","",89,[[["parsebuffer"]],["result",["lt","error"]]]],[11,"parse","devise::syn","",282,[[["parsebuffer"]],["result",["foreignitem","error"]]]],[11,"parse","","",143,[[["parsebuffer"]],["result",["meta","error"]]]],[11,"parse","devise::syn::token","",16,[[["parsebuffer"]],["result",["auto","error"]]]],[11,"parse","devise::syn","",176,[[["parsebuffer"]],["result",["parenthesizedgenericarguments","error"]]]],[11,"parse","devise::syn::token","",80,[[["parsebuffer"]],["result",["dot","error"]]]],[11,"parse","devise::syn","",159,[[["parsebuffer"]],["result",["traitbound","error"]]]],[11,"parse","","",164,[[["parsebuffer"]],["result",["typeparambound","error"]]]],[11,"parse","devise::syn::token","",57,[[["parsebuffer"]],["result",["union","error"]]]],[11,"parse","devise::syn","",291,[[["parsebuffer"]],["result",["implitem","error"]]]],[11,"parse","devise::syn::token","",84,[[["parsebuffer"]],["result",["eq","error"]]]],[11,"parse","","",91,[[["parsebuffer"]],["result",["ne","error"]]]],[11,"parse","","",82,[[["parsebuffer"]],["result",["dot3","error"]]]],[11,"parse","","",53,[[["parsebuffer"]],["result",["trait","error"]]]],[11,"parse","","",59,[[["parsebuffer"]],["result",["unsized","error"]]]],[11,"parse","devise::syn","",307,[[["parsebuffer"]],["result",["member","error"]]]],[11,"parse","","",279,[[["parsebuffer"]],["result",["traititem","error"]]]],[11,"parse","devise::syn::token","",60,[[["parsebuffer"]],["result",["use","error"]]]],[11,"parse","devise::syn","",225,[[["parsebuffer"]],["result",["traititemmacro","error"]]]],[11,"parse","","",204,[[["parsebuffer"]],["result",["itemforeignmod","error"]]]],[11,"parse","","",272,[[["parsebuffer"]],["result",["expr","error"]]]],[11,"parse","","",152,[[["parsebuffer"]],["result",["itemuse","error"]]]],[11,"parse","","",301,[[["parsebuffer"]],["result",["item","error"]]]],[11,"parse","","",237,[[["parsebuffer"]],["result",["constraint","error"]]]],[11,"parse","devise::syn::token","",51,[[["parsebuffer"]],["result",["struct","error"]]]],[11,"parse","","",86,[[["parsebuffer"]],["result",["ge","error"]]]],[11,"parse","devise::syn","",338,[[["parsebuffer"]],["result",["litint","error"]]]],[11,"parse","devise::syn::token","",76,[[["parsebuffer"]],["result",["comma","error"]]]],[11,"parse","devise::syn","",124,[[["parsebuffer"]],["result",["typearray","error"]]]],[11,"parse","","",295,[[["parsebuffer"]],["result",["constparam","error"]]]],[11,"parse","","",269,[[["parsebuffer"]],["result",["wherepredicate","error"]]]],[11,"parse","","",296,[[["parsebuffer"]],["result",["file","error"]]]],[11,"parse","devise::syn::token","",28,[[["parsebuffer"]],["result",["existential","error"]]]],[11,"parse","devise::syn","",252,[[["parsebuffer"]],["result",["implitemmacro","error"]]]],[11,"parse","","",179,[[["parsebuffer"]],["result",["traitboundmodifier","error"]]]],[11,"parse","","",292,[[["parsebuffer"]],["result",["itemmod","error"]]]],[11,"parse","","",221,[[["parsebuffer"]],["result",["binding","error"]]]],[11,"parse","devise::syn::token","",30,[[["parsebuffer"]],["result",["final","error"]]]],[11,"parse","devise::syn","",138,[[["parsebuffer"]],["result",["typenever","error"]]]],[11,"parse","devise::syn::token","",15,[[["parsebuffer"]],["result",["async","error"]]]],[11,"parse","devise::syn","",202,[[["parsebuffer"]],["result",["path","error"]]]],[11,"parse","devise::syn::token","",64,[[["parsebuffer"]],["result",["yield","error"]]]],[11,"parse","","",109,[[["parsebuffer"]],["result",["subeq","error"]]]],[11,"parse","devise::syn","",201,[[["parsebuffer"]],["result",["fieldsunnamed","error"]]]],[11,"parse","","",120,[[["parsebuffer"]],["result",["barefnarg","error"]]]],[11,"parse","","",183,[[["parsebuffer"]],["result",["traititemtype","error"]]]],[11,"parse","devise::syn::token","",103,[[["parsebuffer"]],["result",["shl","error"]]]],[11,"parse","devise::syn","",198,[[["parsebuffer"]],["result",["genericparam","error"]]]],[11,"parse","devise::syn::token","",106,[[["parsebuffer"]],["result",["shreq","error"]]]],[11,"parse","devise::syn","",156,[[["parsebuffer"]],["result",["itemfn","error"]]]],[11,"parse","","",167,[[["parsebuffer"]],["result",["pat","error"]]]],[11,"parse","devise::syn::token","",26,[[["parsebuffer"]],["result",["else","error"]]]],[11,"parse","devise::syn","",200,[[["parsebuffer"]],["result",["itemenum","error"]]]],[11,"parse","devise::syn::token","",99,[[["parsebuffer"]],["result",["rem","error"]]]],[11,"parse","devise::syn","",277,[[["parsebuffer"]],["result",["typegroup","error"]]]],[11,"parse","","",255,[[["parsebuffer"]],["result",["itemunion","error"]]]],[11,"parse","devise::syn::token","",72,[[["parsebuffer"]],["result",["caret","error"]]]],[11,"parse","","",104,[[["parsebuffer"]],["result",["shleq","error"]]]],[11,"parse","devise::syn","",337,[[["parsebuffer"]],["result",["litbytestr","error"]]]],[11,"parse","devise::syn::token","",24,[[["parsebuffer"]],["result",["do","error"]]]],[11,"parse","","",55,[[["parsebuffer"]],["result",["type","error"]]]],[11,"parse","","",61,[[["parsebuffer"]],["result",["virtual","error"]]]],[11,"parse","devise::syn","",134,[[["parsebuffer"]],["result",["itemexterncrate","error"]]]],[11,"parse","devise::syn::token","",93,[[["parsebuffer"]],["result",["oreq","error"]]]],[11,"parse","","",85,[[["parsebuffer"]],["result",["eqeq","error"]]]],[11,"from_iter","devise::syn::punctuated","",322,[[["i"]],["punctuated"]]],[11,"from_iter","","",322,[[["i"]],["punctuated"]]],[11,"fmt","devise::syn::parse","",329,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",280,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::parse","",331,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::parse","",331,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",341,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",299,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",284,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",312,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",291,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",337,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",275,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",283,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",295,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",305,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",308,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",266,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",296,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",281,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::parse","",329,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",297,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",311,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",286,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",306,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",339,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",338,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",293,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",302,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",313,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",340,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",307,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",310,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",294,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",292,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",285,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",304,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",303,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::punctuated","",322,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",309,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",289,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",298,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",255,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",288,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn","",290,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","devise::syn::token","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"index_mut","devise::syn::punctuated","",322,N],[11,"from","devise::syn","",291,[[["implitemtype"]],["implitem"]]],[11,"from","","",262,[[["litfloat"]],["lit"]]],[11,"from","","",273,[[["typemacro"]],["type"]]],[11,"from","","",301,[[["itemstatic"]],["item"]]],[11,"from","","",273,[[["typeparen"]],["type"]]],[11,"from","","",273,[[["typebarefn"]],["type"]]],[11,"from","","",269,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",269,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",167,[[["pattuplestruct"]],["pat"]]],[11,"from","","",298,[[["argselfref"]],["fnarg"]]],[11,"from","","",291,[[["implitemconst"]],["implitem"]]],[11,"from","","",272,[[["exprblock"]],["expr"]]],[11,"from","","",279,[[["traititemtype"]],["traititem"]]],[11,"from","","",272,[[["exprlit"]],["expr"]]],[11,"from","","",291,[[["implitemverbatim"]],["implitem"]]],[11,"from","","",132,[[["datastruct"]],["data"]]],[11,"from","","",164,[[["traitbound"]],["typeparambound"]]],[11,"from","","",262,[[["litverbatim"]],["lit"]]],[11,"from","","",272,[[["exprparen"]],["expr"]]],[11,"from","","",301,[[["itemuse"]],["item"]]],[11,"from","","",272,[[["exprcall"]],["expr"]]],[11,"from","","",272,[[["exprlet"]],["expr"]]],[11,"from","","",282,[[["foreignitemverbatim"]],["foreignitem"]]],[11,"from","","",272,[[["exprclosure"]],["expr"]]],[11,"from","","",143,[[["ident"]],["meta"]]],[11,"from","","",303,[[["fieldsnamed"]],["fields"]]],[11,"from","","",273,[[["typetuple"]],["type"]]],[11,"from","","",132,[[["dataunion"]],["data"]]],[11,"from","","",273,[[["typeverbatim"]],["type"]]],[11,"from","","",197,[[["userename"]],["usetree"]]],[11,"from","","",143,[[["metanamevalue"]],["meta"]]],[11,"from","","",167,[[["patwild"]],["pat"]]],[11,"from","","",272,[[["exprtry"]],["expr"]]],[11,"from","","",167,[[["patpath"]],["pat"]]],[11,"from","","",150,[[["meta"]],["nestedmeta"]]],[11,"from","","",301,[[["itemforeignmod"]],["item"]]],[11,"from","","",272,[[["exprverbatim"]],["expr"]]],[11,"from","","",272,[[["exprbreak"]],["expr"]]],[11,"from","","",272,[[["exprmacro"]],["expr"]]],[11,"from","","",301,[[["itemconst"]],["item"]]],[11,"from","","",287,[[["visrestricted"]],["visibility"]]],[11,"from","","",182,[[["t"]],["pathsegment"]]],[11,"from","","",272,[[["exprfield"]],["expr"]]],[11,"from","","",272,[[["exprreturn"]],["expr"]]],[11,"from","","",273,[[["typeimpltrait"]],["type"]]],[11,"from","","",167,[[["patverbatim"]],["pat"]]],[11,"from","","",167,[[["patstruct"]],["pat"]]],[11,"from","","",273,[[["typeinfer"]],["type"]]],[11,"from","","",272,[[["exprif"]],["expr"]]],[11,"from","","",282,[[["foreignitemtype"]],["foreignitem"]]],[11,"from","","",287,[[["vispublic"]],["visibility"]]],[11,"from","devise::syn::parse","",331,[[["lexerror"]],["error"]]],[11,"from","devise::syn","",291,[[["implitemexistential"]],["implitem"]]],[11,"from","","",301,[[["itemtraitalias"]],["item"]]],[11,"from","","",167,[[["pattuple"]],["pat"]]],[11,"from","","",167,[[["patslice"]],["pat"]]],[11,"from","","",272,[[["exprunary"]],["expr"]]],[11,"from","","",298,[[["argcaptured"]],["fnarg"]]],[11,"from","","",272,[[["exprarray"]],["expr"]]],[11,"from","","",262,[[["litstr"]],["lit"]]],[11,"from","","",262,[[["litchar"]],["lit"]]],[11,"from","","",273,[[["typeslice"]],["type"]]],[11,"from","","",272,[[["exprindex"]],["expr"]]],[11,"from","","",282,[[["foreignitemmacro"]],["foreignitem"]]],[11,"from","","",272,[[["exprmethodcall"]],["expr"]]],[11,"from","","",132,[[["dataenum"]],["data"]]],[11,"from","","",279,[[["traititemmethod"]],["traititem"]]],[11,"from","","",273,[[["typetraitobject"]],["type"]]],[11,"from","","",301,[[["itemmod"]],["item"]]],[11,"from","","",272,[[["exprmatch"]],["expr"]]],[11,"from","","",167,[[["patmacro"]],["pat"]]],[11,"from","","",301,[[["itemfn"]],["item"]]],[11,"from","","",298,[[["pat"]],["fnarg"]]],[11,"from","","",198,[[["constparam"]],["genericparam"]]],[11,"from","","",282,[[["foreignitemstatic"]],["foreignitem"]]],[11,"from","","",167,[[["patident"]],["pat"]]],[11,"from","","",272,[[["exprbox"]],["expr"]]],[11,"from","","",287,[[["viscrate"]],["visibility"]]],[11,"from","","",202,[[["t"]],["path"]]],[11,"from","","",197,[[["useglob"]],["usetree"]]],[11,"from","","",272,[[["exprloop"]],["expr"]]],[11,"from","","",273,[[["typearray"]],["type"]]],[11,"from","","",167,[[["patbox"]],["pat"]]],[11,"from","","",263,[[["ident"]],["typeparam"]]],[11,"from","","",272,[[["exprstruct"]],["expr"]]],[11,"from","","",272,[[["exprasync"]],["expr"]]],[11,"from","","",303,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",143,[[["metalist"]],["meta"]]],[11,"from","","",272,[[["exprrange"]],["expr"]]],[11,"from","","",272,[[["exprbinary"]],["expr"]]],[11,"from","","",167,[[["patref"]],["pat"]]],[11,"from","","",273,[[["typegroup"]],["type"]]],[11,"from","","",167,[[["patrange"]],["pat"]]],[11,"from","","",269,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",197,[[["usename"]],["usetree"]]],[11,"from","","",272,[[["exprforloop"]],["expr"]]],[11,"from","","",298,[[["argself"]],["fnarg"]]],[11,"from","","",272,[[["exprcast"]],["expr"]]],[11,"from","","",272,[[["exprwhile"]],["expr"]]],[11,"from","","",262,[[["litbyte"]],["lit"]]],[11,"from","","",262,[[["litint"]],["lit"]]],[11,"from","","",301,[[["itemmacro2"]],["item"]]],[11,"from","","",301,[[["itemenum"]],["item"]]],[11,"from","","",272,[[["exprunsafe"]],["expr"]]],[11,"from","","",279,[[["traititemmacro"]],["traititem"]]],[11,"from","","",273,[[["typenever"]],["type"]]],[11,"from","","",301,[[["itemstruct"]],["item"]]],[11,"from","","",198,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",272,[[["exprassignop"]],["expr"]]],[11,"from","","",301,[[["itemexterncrate"]],["item"]]],[11,"from","","",279,[[["traititemconst"]],["traititem"]]],[11,"from","","",198,[[["typeparam"]],["genericparam"]]],[11,"from","","",273,[[["typeptr"]],["type"]]],[11,"from","","",272,[[["exprtype"]],["expr"]]],[11,"from","","",167,[[["patlit"]],["pat"]]],[11,"from","","",272,[[["expryield"]],["expr"]]],[11,"from","","",273,[[["typepath"]],["type"]]],[11,"from","","",197,[[["usegroup"]],["usetree"]]],[11,"from","","",272,[[["exprtryblock"]],["expr"]]],[11,"from","","",272,[[["exprinplace"]],["expr"]]],[11,"from","","",273,[[["typereference"]],["type"]]],[11,"from","","",282,[[["foreignitemfn"]],["foreignitem"]]],[11,"from","","",301,[[["itemexistential"]],["item"]]],[11,"from","","",150,[[["lit"]],["nestedmeta"]]],[11,"from","","",164,[[["lifetime"]],["typeparambound"]]],[11,"from","","",272,[[["exprcontinue"]],["expr"]]],[11,"from","","",301,[[["itemunion"]],["item"]]],[11,"from","","",197,[[["usepath"]],["usetree"]]],[11,"from","","",300,[[["usize"]],["index"]]],[11,"from","","",301,[[["itemtrait"]],["item"]]],[11,"from","","",301,[[["itemimpl"]],["item"]]],[11,"from","","",272,[[["exprreference"]],["expr"]]],[11,"from","","",298,[[["type"]],["fnarg"]]],[11,"from","","",279,[[["traititemverbatim"]],["traititem"]]],[11,"from","","",272,[[["exprassign"]],["expr"]]],[11,"from","","",262,[[["litbytestr"]],["lit"]]],[11,"from","","",272,[[["exprtuple"]],["expr"]]],[11,"from","","",272,[[["exprrepeat"]],["expr"]]],[11,"from","","",301,[[["itemtype"]],["item"]]],[11,"from","","",291,[[["implitemmacro"]],["implitem"]]],[11,"from","","",262,[[["litbool"]],["lit"]]],[11,"from","","",301,[[["deriveinput"]],["item"]]],[11,"from","","",301,[[["itemmacro"]],["item"]]],[11,"from","","",291,[[["implitemmethod"]],["implitem"]]],[11,"from","","",301,[[["itemverbatim"]],["item"]]],[11,"from","","",272,[[["exprpath"]],["expr"]]],[11,"from","","",272,[[["exprgroup"]],["expr"]]],[11,"peek","devise::syn::token","",60,[[["cursor"]],["bool"]]],[11,"display","","",60,[[],["str"]]],[11,"peek","","",83,[[["cursor"]],["bool"]]],[11,"display","","",83,[[],["str"]]],[11,"peek","","",70,[[["cursor"]],["bool"]]],[11,"display","","",70,[[],["str"]]],[11,"peek","","",85,[[["cursor"]],["bool"]]],[11,"display","","",85,[[],["str"]]],[11,"peek","","",66,[[["cursor"]],["bool"]]],[11,"display","","",66,[[],["str"]]],[11,"peek","","",27,[[["cursor"]],["bool"]]],[11,"display","","",27,[[],["str"]]],[11,"peek","","",74,[[["cursor"]],["bool"]]],[11,"display","","",74,[[],["str"]]],[11,"peek","","",64,[[["cursor"]],["bool"]]],[11,"display","","",64,[[],["str"]]],[11,"peek","","",15,[[["cursor"]],["bool"]]],[11,"display","","",15,[[],["str"]]],[11,"peek","","",95,[[["cursor"]],["bool"]]],[11,"display","","",95,[[],["str"]]],[11,"peek","","",59,[[["cursor"]],["bool"]]],[11,"display","","",59,[[],["str"]]],[11,"peek","","",47,[[["cursor"]],["bool"]]],[11,"display","","",47,[[],["str"]]],[11,"peek","","",77,[[["cursor"]],["bool"]]],[11,"display","","",77,[[],["str"]]],[11,"peek","devise::syn","",338,[[["cursor"]],["bool"]]],[11,"display","","",338,[[],["str"]]],[11,"peek","devise::syn::token","",69,[[["cursor"]],["bool"]]],[11,"display","","",69,[[],["str"]]],[11,"peek","devise::syn","",340,[[["cursor"]],["bool"]]],[11,"display","","",340,[[],["str"]]],[11,"peek","devise::syn::token","",51,[[["cursor"]],["bool"]]],[11,"display","","",51,[[],["str"]]],[11,"peek","","",94,[[["cursor"]],["bool"]]],[11,"display","","",94,[[],["str"]]],[11,"peek","","",96,[[["cursor"]],["bool"]]],[11,"display","","",96,[[],["str"]]],[11,"peek","","",71,[[["cursor"]],["bool"]]],[11,"display","","",71,[[],["str"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"peek","","",89,[[["cursor"]],["bool"]]],[11,"display","","",89,[[],["str"]]],[11,"peek","","",68,[[["cursor"]],["bool"]]],[11,"display","","",68,[[],["str"]]],[11,"peek","","",23,[[["cursor"]],["bool"]]],[11,"display","","",23,[[],["str"]]],[11,"peek","","",93,[[["cursor"]],["bool"]]],[11,"display","","",93,[[],["str"]]],[11,"peek","","",29,[[["cursor"]],["bool"]]],[11,"display","","",29,[[],["str"]]],[11,"peek","","",30,[[["cursor"]],["bool"]]],[11,"display","","",30,[[],["str"]]],[11,"peek","","",14,[[["cursor"]],["bool"]]],[11,"display","","",14,[[],["str"]]],[11,"peek","","",50,[[["cursor"]],["bool"]]],[11,"display","","",50,[[],["str"]]],[11,"peek","","",37,[[["cursor"]],["bool"]]],[11,"display","","",37,[[],["str"]]],[11,"peek","","",54,[[["cursor"]],["bool"]]],[11,"display","","",54,[[],["str"]]],[11,"peek","","",45,[[["cursor"]],["bool"]]],[11,"display","","",45,[[],["str"]]],[11,"peek","","",80,[[["cursor"]],["bool"]]],[11,"display","","",80,[[],["str"]]],[11,"peek","","",79,[[["cursor"]],["bool"]]],[11,"display","","",79,[[],["str"]]],[11,"peek","","",36,[[["cursor"]],["bool"]]],[11,"display","","",36,[[],["str"]]],[11,"peek","","",103,[[["cursor"]],["bool"]]],[11,"display","","",103,[[],["str"]]],[11,"peek","","",13,[[["cursor"]],["bool"]]],[11,"display","","",13,[[],["str"]]],[11,"peek","","",108,[[["cursor"]],["bool"]]],[11,"display","","",108,[[],["str"]]],[11,"peek","devise::syn","",337,[[["cursor"]],["bool"]]],[11,"display","","",337,[[],["str"]]],[11,"peek","devise::syn::token","",42,[[["cursor"]],["bool"]]],[11,"display","","",42,[[],["str"]]],[11,"peek","","",113,[[["cursor"]],["bool"]]],[11,"display","","",113,[[],["str"]]],[11,"peek","","",88,[[["cursor"]],["bool"]]],[11,"display","","",88,[[],["str"]]],[11,"peek","","",34,[[["cursor"]],["bool"]]],[11,"display","","",34,[[],["str"]]],[11,"peek","","",55,[[["cursor"]],["bool"]]],[11,"display","","",55,[[],["str"]]],[11,"peek","","",73,[[["cursor"]],["bool"]]],[11,"display","","",73,[[],["str"]]],[11,"peek","","",33,[[["cursor"]],["bool"]]],[11,"display","","",33,[[],["str"]]],[11,"peek","","",90,[[["cursor"]],["bool"]]],[11,"display","","",90,[[],["str"]]],[11,"peek","devise::syn","",137,[[["cursor"]],["bool"]]],[11,"display","","",137,[[],["str"]]],[11,"peek","devise::syn::token","",28,[[["cursor"]],["bool"]]],[11,"display","","",28,[[],["str"]]],[11,"peek","","",104,[[["cursor"]],["bool"]]],[11,"display","","",104,[[],["str"]]],[11,"peek","","",31,[[["cursor"]],["bool"]]],[11,"display","","",31,[[],["str"]]],[11,"peek","","",111,[[["cursor"]],["bool"]]],[11,"display","","",111,[[],["str"]]],[11,"peek","","",91,[[["cursor"]],["bool"]]],[11,"display","","",91,[[],["str"]]],[11,"peek","","",61,[[["cursor"]],["bool"]]],[11,"display","","",61,[[],["str"]]],[11,"peek","","",26,[[["cursor"]],["bool"]]],[11,"display","","",26,[[],["str"]]],[11,"peek","devise::syn","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"peek","devise::syn::token","",21,[[["cursor"]],["bool"]]],[11,"display","","",21,[[],["str"]]],[11,"peek","devise::syn","",339,[[["cursor"]],["bool"]]],[11,"display","","",339,[[],["str"]]],[11,"peek","devise::syn::token","",78,[[["cursor"]],["bool"]]],[11,"display","","",78,[[],["str"]]],[11,"peek","","",106,[[["cursor"]],["bool"]]],[11,"display","","",106,[[],["str"]]],[11,"peek","","",92,[[["cursor"]],["bool"]]],[11,"display","","",92,[[],["str"]]],[11,"peek","devise::syn","",333,[[["cursor"]],["bool"]]],[11,"display","","",333,[[],["str"]]],[11,"peek","devise::syn::token","",102,[[["cursor"]],["bool"]]],[11,"display","","",102,[[],["str"]]],[11,"peek","","",57,[[["cursor"]],["bool"]]],[11,"display","","",57,[[],["str"]]],[11,"peek","","",46,[[["cursor"]],["bool"]]],[11,"display","","",46,[[],["str"]]],[11,"peek","","",98,[[["cursor"]],["bool"]]],[11,"display","","",98,[[],["str"]]],[11,"peek","","",24,[[["cursor"]],["bool"]]],[11,"display","","",24,[[],["str"]]],[11,"peek","","",25,[[["cursor"]],["bool"]]],[11,"display","","",25,[[],["str"]]],[11,"peek","","",48,[[["cursor"]],["bool"]]],[11,"display","","",48,[[],["str"]]],[11,"peek","","",62,[[["cursor"]],["bool"]]],[11,"display","","",62,[[],["str"]]],[11,"peek","","",16,[[["cursor"]],["bool"]]],[11,"display","","",16,[[],["str"]]],[11,"peek","","",82,[[["cursor"]],["bool"]]],[11,"display","","",82,[[],["str"]]],[11,"peek","","",20,[[["cursor"]],["bool"]]],[11,"display","","",20,[[],["str"]]],[11,"peek","","",99,[[["cursor"]],["bool"]]],[11,"display","","",99,[[],["str"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"peek","","",40,[[["cursor"]],["bool"]]],[11,"display","","",40,[[],["str"]]],[11,"peek","","",110,[[["cursor"]],["bool"]]],[11,"display","","",110,[[],["str"]]],[11,"peek","","",58,[[["cursor"]],["bool"]]],[11,"display","","",58,[[],["str"]]],[11,"peek","","",41,[[["cursor"]],["bool"]]],[11,"display","","",41,[[],["str"]]],[11,"peek","","",43,[[["cursor"]],["bool"]]],[11,"display","","",43,[[],["str"]]],[11,"peek","","",84,[[["cursor"]],["bool"]]],[11,"display","","",84,[[],["str"]]],[11,"peek","","",63,[[["cursor"]],["bool"]]],[11,"display","","",63,[[],["str"]]],[11,"peek","","",97,[[["cursor"]],["bool"]]],[11,"display","","",97,[[],["str"]]],[11,"peek","","",112,[[["cursor"]],["bool"]]],[11,"display","","",112,[[],["str"]]],[11,"peek","devise::syn","",336,[[["cursor"]],["bool"]]],[11,"display","","",336,[[],["str"]]],[11,"peek","devise::syn::token","",22,[[["cursor"]],["bool"]]],[11,"display","","",22,[[],["str"]]],[11,"peek","","",107,[[["cursor"]],["bool"]]],[11,"display","","",107,[[],["str"]]],[11,"peek","","",52,[[["cursor"]],["bool"]]],[11,"display","","",52,[[],["str"]]],[11,"peek","","",114,[[["cursor"]],["bool"]]],[11,"display","","",114,[[],["str"]]],[11,"peek","","",76,[[["cursor"]],["bool"]]],[11,"display","","",76,[[],["str"]]],[11,"peek","","",12,[[["cursor"]],["bool"]]],[11,"display","","",12,[[],["str"]]],[11,"peek","","",86,[[["cursor"]],["bool"]]],[11,"display","","",86,[[],["str"]]],[11,"peek","","",67,[[["cursor"]],["bool"]]],[11,"display","","",67,[[],["str"]]],[11,"peek","","",109,[[["cursor"]],["bool"]]],[11,"display","","",109,[[],["str"]]],[11,"peek","","",75,[[["cursor"]],["bool"]]],[11,"display","","",75,[[],["str"]]],[11,"peek","","",56,[[["cursor"]],["bool"]]],[11,"display","","",56,[[],["str"]]],[11,"peek","","",32,[[["cursor"]],["bool"]]],[11,"display","","",32,[[],["str"]]],[11,"peek","","",81,[[["cursor"]],["bool"]]],[11,"display","","",81,[[],["str"]]],[11,"peek","","",49,[[["cursor"]],["bool"]]],[11,"display","","",49,[[],["str"]]],[11,"peek","","",38,[[["cursor"]],["bool"]]],[11,"display","","",38,[[],["str"]]],[11,"peek","","",19,[[["cursor"]],["bool"]]],[11,"display","","",19,[[],["str"]]],[11,"peek","devise::syn","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"peek","devise::syn::token","",35,[[["cursor"]],["bool"]]],[11,"display","","",35,[[],["str"]]],[11,"peek","","",72,[[["cursor"]],["bool"]]],[11,"display","","",72,[[],["str"]]],[11,"peek","","",17,[[["cursor"]],["bool"]]],[11,"display","","",17,[[],["str"]]],[11,"peek","","",39,[[["cursor"]],["bool"]]],[11,"display","","",39,[[],["str"]]],[11,"peek","","",105,[[["cursor"]],["bool"]]],[11,"display","","",105,[[],["str"]]],[11,"peek","","",44,[[["cursor"]],["bool"]]],[11,"display","","",44,[[],["str"]]],[11,"peek","","",18,[[["cursor"]],["bool"]]],[11,"display","","",18,[[],["str"]]],[11,"peek","","",87,[[["cursor"]],["bool"]]],[11,"display","","",87,[[],["str"]]],[11,"peek","","",53,[[["cursor"]],["bool"]]],[11,"display","","",53,[[],["str"]]],[11,"peek","","",65,[[["cursor"]],["bool"]]],[11,"display","","",65,[[],["str"]]],[11,"eq","devise::syn","",265,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",265,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",212,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",212,[[["self"],["boundlifetimes"]],["bool"]]],[11,"eq","devise::syn::token","",41,[[["self"],["move"]],["bool"]]],[11,"eq","devise::syn","",203,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",203,[[["self"],["datastruct"]],["bool"]]],[11,"eq","","",261,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",261,[[["self"],["exprcast"]],["bool"]]],[11,"eq","devise::syn::token","",50,[[["self"],["static"]],["bool"]]],[11,"eq","devise::syn","",310,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",310,[[["self"],["exprforloop"]],["bool"]]],[11,"eq","","",244,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",244,[[["self"],["exprrepeat"]],["bool"]]],[11,"eq","","",163,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",163,[[["self"],["itemmacro"]],["bool"]]],[11,"eq","devise::syn::token","",23,[[["self"],["default"]],["bool"]]],[11,"eq","","",96,[[["self"],["question"]],["bool"]]],[11,"eq","devise::syn","",279,[[["self"],["traititem"]],["bool"]]],[11,"ne","","",279,[[["self"],["traititem"]],["bool"]]],[11,"eq","devise::syn::token","",100,[[["self"],["remeq"]],["bool"]]],[11,"eq","devise::syn","",303,[[["self"],["fields"]],["bool"]]],[11,"ne","","",303,[[["self"],["fields"]],["bool"]]],[11,"eq","","",197,[[["self"],["usetree"]],["bool"]]],[11,"ne","","",197,[[["self"],["usetree"]],["bool"]]],[11,"eq","devise::syn::token","",20,[[["self"],["const"]],["bool"]]],[11,"eq","","",105,[[["self"],["shr"]],["bool"]]],[11,"eq","","",16,[[["self"],["auto"]],["bool"]]],[11,"eq","","",19,[[["self"],["break"]],["bool"]]],[11,"eq","","",113,[[["self"],["paren"]],["bool"]]],[11,"eq","devise::syn","",183,[[["self"],["traititemtype"]],["bool"]]],[11,"ne","","",183,[[["self"],["traititemtype"]],["bool"]]],[11,"eq","","",216,[[["self"],["typeverbatim"]],["bool"]]],[11,"eq","devise::syn::token","",39,[[["self"],["match"]],["bool"]]],[11,"eq","devise::syn","",340,[[["self"],["litstr"]],["bool"]]],[11,"eq","","",135,[[["self"],["arm"]],["bool"]]],[11,"ne","","",135,[[["self"],["arm"]],["bool"]]],[11,"eq","devise::syn::token","",36,[[["self"],["let"]],["bool"]]],[11,"eq","","",86,[[["self"],["ge"]],["bool"]]],[11,"eq","","",22,[[["self"],["crate"]],["bool"]]],[11,"eq","devise::syn","",130,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"ne","","",130,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"eq","devise::syn::token","",85,[[["self"],["eqeq"]],["bool"]]],[11,"eq","","",73,[[["self"],["careteq"]],["bool"]]],[11,"eq","","",33,[[["self"],["if"]],["bool"]]],[11,"eq","","",94,[[["self"],["oror"]],["bool"]]],[11,"eq","","",17,[[["self"],["become"]],["bool"]]],[11,"eq","devise::syn","",176,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",176,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","devise::syn::token","",91,[[["self"],["ne"]],["bool"]]],[11,"eq","devise::syn","",206,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",206,[[["self"],["patstruct"]],["bool"]]],[11,"eq","","",246,[[["self"],["useglob"]],["bool"]]],[11,"ne","","",246,[[["self"],["useglob"]],["bool"]]],[11,"eq","devise::syn::token","",71,[[["self"],["bang"]],["bool"]]],[11,"eq","","",51,[[["self"],["struct"]],["bool"]]],[11,"eq","","",67,[[["self"],["and"]],["bool"]]],[11,"eq","","",58,[[["self"],["unsafe"]],["bool"]]],[11,"eq","","",28,[[["self"],["existential"]],["bool"]]],[11,"eq","devise::syn","",277,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",277,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",133,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",133,[[["self"],["typeimpltrait"]],["bool"]]],[11,"eq","","",196,[[["self"],["itemtraitalias"]],["bool"]]],[11,"ne","","",196,[[["self"],["itemtraitalias"]],["bool"]]],[11,"eq","","",226,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",226,[[["self"],["pattuple"]],["bool"]]],[11,"eq","","",198,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",198,[[["self"],["genericparam"]],["bool"]]],[11,"eq","devise::syn::token","",62,[[["self"],["where"]],["bool"]]],[11,"eq","devise::syn","",274,[[["self"],["patpath"]],["bool"]]],[11,"ne","","",274,[[["self"],["patpath"]],["bool"]]],[11,"eq","devise::syn::token","",81,[[["self"],["dot2"]],["bool"]]],[11,"eq","devise::syn","",148,[[["self"],["implitemmethod"]],["bool"]]],[11,"ne","","",148,[[["self"],["implitemmethod"]],["bool"]]],[11,"eq","","",275,[[["self"],["argselfref"]],["bool"]]],[11,"ne","","",275,[[["self"],["argselfref"]],["bool"]]],[11,"eq","devise::syn::token","",47,[[["self"],["return"]],["bool"]]],[11,"eq","devise::syn","",341,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",341,[[["self"],["implgenerics"]],["bool"]]],[11,"eq","","",143,[[["self"],["meta"]],["bool"]]],[11,"ne","","",143,[[["self"],["meta"]],["bool"]]],[11,"eq","devise::syn::token","",106,[[["self"],["shreq"]],["bool"]]],[11,"eq","devise::syn","",121,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",121,[[["self"],["usepath"]],["bool"]]],[11,"eq","devise::syn::token","",43,[[["self"],["override"]],["bool"]]],[11,"eq","","",79,[[["self"],["dollar"]],["bool"]]],[11,"eq","devise::syn","",149,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",149,[[["self"],["exprunary"]],["bool"]]],[11,"eq","devise::syn::token","",60,[[["self"],["use"]],["bool"]]],[11,"eq","devise::syn","",211,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",211,[[["self"],["itemstruct"]],["bool"]]],[11,"eq","devise::syn::token","",54,[[["self"],["try"]],["bool"]]],[11,"eq","devise::syn","",284,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",284,[[["self"],["dataunion"]],["bool"]]],[11,"eq","","",282,[[["self"],["foreignitem"]],["bool"]]],[11,"ne","","",282,[[["self"],["foreignitem"]],["bool"]]],[11,"eq","","",290,[[["self"],["binop"]],["bool"]]],[11,"ne","","",290,[[["self"],["binop"]],["bool"]]],[11,"eq","","",241,[[["self"],["fndecl"]],["bool"]]],[11,"ne","","",241,[[["self"],["fndecl"]],["bool"]]],[11,"eq","","",299,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",299,[[["self"],["exprmethodcall"]],["bool"]]],[11,"eq","","",138,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",138,[[["self"],["typenever"]],["bool"]]],[11,"eq","","",159,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",159,[[["self"],["traitbound"]],["bool"]]],[11,"eq","","",178,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",178,[[["self"],["dataenum"]],["bool"]]],[11,"eq","","",289,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",289,[[["self"],["exprtuple"]],["bool"]]],[11,"eq","devise::syn::token","",38,[[["self"],["macro"]],["bool"]]],[11,"eq","","",80,[[["self"],["dot"]],["bool"]]],[11,"eq","devise::syn","",307,[[["self"],["member"]],["bool"]]],[11,"ne","","",307,[[["self"],["member"]],["bool"]]],[11,"eq","","",177,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",177,[[["self"],["traititemconst"]],["bool"]]],[11,"eq","","",201,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",201,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"eq","","",294,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",294,[[["self"],["itemtrait"]],["bool"]]],[11,"eq","","",123,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",123,[[["self"],["exprlit"]],["bool"]]],[11,"eq","","",293,[[["self"],["local"]],["bool"]]],[11,"ne","","",293,[[["self"],["local"]],["bool"]]],[11,"eq","","",266,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",266,[[["self"],["fieldpat"]],["bool"]]],[11,"eq","","",136,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",136,[[["self"],["viscrate"]],["bool"]]],[11,"eq","","",339,[[["self"],["litchar"]],["bool"]]],[11,"eq","","",232,[[["self"],["abi"]],["bool"]]],[11,"ne","","",232,[[["self"],["abi"]],["bool"]]],[11,"eq","","",200,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",200,[[["self"],["itemenum"]],["bool"]]],[11,"eq","devise::syn::token","",56,[[["self"],["typeof"]],["bool"]]],[11,"eq","devise::syn","",229,[[["self"],["traititemverbatim"]],["bool"]]],[11,"eq","devise::syn::token","",88,[[["self"],["le"]],["bool"]]],[11,"eq","devise::syn","",336,[[["self"],["litbyte"]],["bool"]]],[11,"eq","","",298,[[["self"],["fnarg"]],["bool"]]],[11,"ne","","",298,[[["self"],["fnarg"]],["bool"]]],[11,"eq","","",150,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",150,[[["self"],["nestedmeta"]],["bool"]]],[11,"eq","devise::syn::token","",107,[[["self"],["star"]],["bool"]]],[11,"eq","devise::syn","",137,[[["self"],["litbool"]],["bool"]]],[11,"eq","","",124,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",124,[[["self"],["typearray"]],["bool"]]],[11,"eq","","",230,[[["self"],["patwild"]],["bool"]]],[11,"ne","","",230,[[["self"],["patwild"]],["bool"]]],[11,"eq","","",146,[[["self"],["argcaptured"]],["bool"]]],[11,"ne","","",146,[[["self"],["argcaptured"]],["bool"]]],[11,"eq","","",288,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",288,[[["self"],["typeptr"]],["bool"]]],[11,"eq","devise::syn::token","",25,[[["self"],["dyn"]],["bool"]]],[11,"eq","devise::syn","",181,[[["self"],["block"]],["bool"]]],[11,"ne","","",181,[[["self"],["block"]],["bool"]]],[11,"eq","","",219,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",219,[[["self"],["exprblock"]],["bool"]]],[11,"eq","","",220,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",220,[[["self"],["exprloop"]],["bool"]]],[11,"eq","","",153,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",153,[[["self"],["predicateeq"]],["bool"]]],[11,"eq","","",304,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",304,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",191,[[["self"],["exprlet"]],["bool"]]],[11,"ne","","",191,[[["self"],["exprlet"]],["bool"]]],[11,"eq","devise::syn::token","",87,[[["self"],["gt"]],["bool"]]],[11,"eq","","",63,[[["self"],["while"]],["bool"]]],[11,"eq","devise::syn","",152,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",152,[[["self"],["itemuse"]],["bool"]]],[11,"eq","","",141,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",141,[[["self"],["implitemconst"]],["bool"]]],[11,"eq","","",139,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",139,[[["self"],["exprstruct"]],["bool"]]],[11,"eq","","",156,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",156,[[["self"],["itemfn"]],["bool"]]],[11,"eq","","",193,[[["self"],["implitemverbatim"]],["bool"]]],[11,"eq","devise::syn::token","",70,[[["self"],["at"]],["bool"]]],[11,"eq","devise::syn","",308,[[["self"],["variant"]],["bool"]]],[11,"ne","","",308,[[["self"],["variant"]],["bool"]]],[11,"eq","devise::syn::token","",76,[[["self"],["comma"]],["bool"]]],[11,"eq","devise::syn","",312,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",312,[[["self"],["itemstatic"]],["bool"]]],[11,"eq","","",134,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",134,[[["self"],["itemexterncrate"]],["bool"]]],[11,"eq","devise::syn::token","",75,[[["self"],["colon2"]],["bool"]]],[11,"eq","devise::syn","",338,[[["self"],["litint"]],["bool"]]],[11,"eq","","",210,[[["self"],["attribute"]],["bool"]]],[11,"eq","","",273,[[["self"],["type"]],["bool"]]],[11,"ne","","",273,[[["self"],["type"]],["bool"]]],[11,"eq","","",295,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",295,[[["self"],["constparam"]],["bool"]]],[11,"eq","devise::syn::buffer","",321,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",321,[[["self"],["cursor"]],["bool"]]],[11,"eq","devise::syn","",252,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",252,[[["self"],["implitemmacro"]],["bool"]]],[11,"eq","","",214,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",214,[[["self"],["exprassignop"]],["bool"]]],[11,"eq","devise::syn::token","",97,[[["self"],["rarrow"]],["bool"]]],[11,"eq","devise::syn","",225,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",225,[[["self"],["traititemmacro"]],["bool"]]],[11,"eq","devise::syn::token","",98,[[["self"],["larrow"]],["bool"]]],[11,"eq","","",44,[[["self"],["priv"]],["bool"]]],[11,"eq","devise::syn","",248,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",248,[[["self"],["exprinplace"]],["bool"]]],[11,"eq","","",267,[[["self"],["qself"]],["bool"]]],[11,"ne","","",267,[[["self"],["qself"]],["bool"]]],[11,"eq","","",228,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",228,[[["self"],["typeparen"]],["bool"]]],[11,"eq","","",192,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",192,[[["self"],["returntype"]],["bool"]]],[11,"eq","","",186,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",186,[[["self"],["genericmethodargument"]],["bool"]]],[11,"eq","","",162,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",162,[[["self"],["patharguments"]],["bool"]]],[11,"eq","","",236,[[["self"],["argself"]],["bool"]]],[11,"ne","","",236,[[["self"],["argself"]],["bool"]]],[11,"eq","","",213,[[["self"],["patverbatim"]],["bool"]]],[11,"eq","","",131,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",131,[[["self"],["exprbox"]],["bool"]]],[11,"eq","devise::syn::token","",109,[[["self"],["subeq"]],["bool"]]],[11,"eq","devise::syn","",272,[[["self"],["expr"]],["bool"]]],[11,"ne","","",272,[[["self"],["expr"]],["bool"]]],[11,"eq","devise::syn::token","",14,[[["self"],["as"]],["bool"]]],[11,"eq","","",13,[[["self"],["abstract"]],["bool"]]],[11,"eq","devise::syn","",129,[[["self"],["floatsuffix"]],["bool"]]],[11,"eq","devise::syn::token","",111,[[["self"],["brace"]],["bool"]]],[11,"eq","","",93,[[["self"],["oreq"]],["bool"]]],[11,"eq","devise::syn","",170,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",170,[[["self"],["exprarray"]],["bool"]]],[11,"eq","","",127,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",127,[[["self"],["patrange"]],["bool"]]],[11,"eq","","",285,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",285,[[["self"],["itemimpl"]],["bool"]]],[11,"eq","devise::syn::token","",45,[[["self"],["pub"]],["bool"]]],[11,"eq","","",110,[[["self"],["tilde"]],["bool"]]],[11,"eq","","",112,[[["self"],["bracket"]],["bool"]]],[11,"eq","devise::syn","",161,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",161,[[["self"],["deriveinput"]],["bool"]]],[11,"eq","devise::syn::token","",37,[[["self"],["loop"]],["bool"]]],[11,"eq","","",18,[[["self"],["box"]],["bool"]]],[11,"eq","devise::syn","",281,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",281,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",173,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",173,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","devise::syn::token","",46,[[["self"],["ref"]],["bool"]]],[11,"eq","","",57,[[["self"],["union"]],["bool"]]],[11,"eq","devise::syn","",271,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",271,[[["self"],["typetraitobject"]],["bool"]]],[11,"eq","","",305,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",305,[[["self"],["foreignitemfn"]],["bool"]]],[11,"eq","devise::syn::token","",21,[[["self"],["continue"]],["bool"]]],[11,"eq","devise::syn","",199,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",199,[[["self"],["exprbinary"]],["bool"]]],[11,"eq","devise::syn::token","",31,[[["self"],["fn"]],["bool"]]],[11,"eq","devise::syn","",224,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",224,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"eq","","",188,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",188,[[["self"],["typereference"]],["bool"]]],[11,"eq","devise::syn::token","",49,[[["self"],["selfvalue"]],["bool"]]],[11,"eq","devise::syn","",140,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",140,[[["self"],["usegroup"]],["bool"]]],[11,"eq","","",280,[[["self"],["lifetime"]],["bool"]]],[11,"eq","","",132,[[["self"],["data"]],["bool"]]],[11,"ne","","",132,[[["self"],["data"]],["bool"]]],[11,"eq","","",157,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",157,[[["self"],["vispublic"]],["bool"]]],[11,"eq","","",268,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",268,[[["self"],["visrestricted"]],["bool"]]],[11,"eq","devise::syn::token","",65,[[["self"],["add"]],["bool"]]],[11,"eq","devise::syn","",147,[[["self"],["exprverbatim"]],["bool"]]],[11,"eq","","",262,[[["self"],["lit"]],["bool"]]],[11,"ne","","",262,[[["self"],["lit"]],["bool"]]],[11,"eq","","",233,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",233,[[["self"],["patbox"]],["bool"]]],[11,"eq","","",122,[[["self"],["patident"]],["bool"]]],[11,"ne","","",122,[[["self"],["patident"]],["bool"]]],[11,"eq","","",239,[[["self"],["itemexistential"]],["bool"]]],[11,"ne","","",239,[[["self"],["itemexistential"]],["bool"]]],[11,"eq","","",269,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",269,[[["self"],["wherepredicate"]],["bool"]]],[11,"eq","devise::syn::token","",102,[[["self"],["semi"]],["bool"]]],[11,"eq","devise::syn","",255,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",255,[[["self"],["itemunion"]],["bool"]]],[11,"eq","","",144,[[["self"],["userename"]],["bool"]]],[11,"ne","","",144,[[["self"],["userename"]],["bool"]]],[11,"eq","","",264,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",264,[[["self"],["exprreturn"]],["bool"]]],[11,"eq","","",335,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",335,[[["self"],["typegenerics"]],["bool"]]],[11,"eq","","",189,[[["self"],["usename"]],["bool"]]],[11,"ne","","",189,[[["self"],["usename"]],["bool"]]],[11,"eq","","",164,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",164,[[["self"],["typeparambound"]],["bool"]]],[11,"eq","","",243,[[["self"],["intsuffix"]],["bool"]]],[11,"eq","devise::syn::token","",108,[[["self"],["sub"]],["bool"]]],[11,"eq","devise::syn","",231,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",231,[[["self"],["exprif"]],["bool"]]],[11,"eq","","",221,[[["self"],["binding"]],["bool"]]],[11,"ne","","",221,[[["self"],["binding"]],["bool"]]],[11,"eq","","",165,[[["self"],["implitemexistential"]],["bool"]]],[11,"ne","","",165,[[["self"],["implitemexistential"]],["bool"]]],[11,"eq","","",234,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",234,[[["self"],["lifetimedef"]],["bool"]]],[11,"eq","","",253,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",253,[[["self"],["metanamevalue"]],["bool"]]],[11,"eq","devise::syn::token","",15,[[["self"],["async"]],["bool"]]],[11,"eq","","",83,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","devise::syn","",125,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",125,[[["self"],["itemconst"]],["bool"]]],[11,"eq","","",174,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",174,[[["self"],["patlit"]],["bool"]]],[11,"eq","","",160,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",160,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",278,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",278,[[["self"],["genericargument"]],["bool"]]],[11,"eq","","",172,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",172,[[["self"],["implitemtype"]],["bool"]]],[11,"eq","devise::syn::token","",90,[[["self"],["muleq"]],["bool"]]],[11,"eq","devise::syn","",334,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",334,[[["self"],["turbofish"]],["bool"]]],[11,"eq","devise::syn::token","",12,[[["self"],["underscore"]],["bool"]]],[11,"eq","","",29,[[["self"],["extern"]],["bool"]]],[11,"eq","devise::syn","",292,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",292,[[["self"],["itemmod"]],["bool"]]],[11,"eq","","",263,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",263,[[["self"],["typeparam"]],["bool"]]],[11,"eq","","",128,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",128,[[["self"],["fieldsnamed"]],["bool"]]],[11,"eq","","",258,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",258,[[["self"],["typebarefn"]],["bool"]]],[11,"eq","","",311,[[["self"],["unop"]],["bool"]]],[11,"ne","","",311,[[["self"],["unop"]],["bool"]]],[11,"eq","","",187,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",187,[[["self"],["attrstyle"]],["bool"]]],[11,"eq","","",235,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",235,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",205,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",205,[[["self"],["exprreference"]],["bool"]]],[11,"eq","devise::syn::token","",53,[[["self"],["trait"]],["bool"]]],[11,"eq","","",55,[[["self"],["type"]],["bool"]]],[11,"eq","devise::syn","",142,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",142,[[["self"],["exprindex"]],["bool"]]],[11,"eq","","",240,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",240,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",182,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",182,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",180,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",180,[[["self"],["exprcontinue"]],["bool"]]],[11,"eq","","",169,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",169,[[["self"],["stmt"]],["bool"]]],[11,"eq","devise::syn::token","",34,[[["self"],["impl"]],["bool"]]],[11,"eq","","",66,[[["self"],["addeq"]],["bool"]]],[11,"eq","","",26,[[["self"],["else"]],["bool"]]],[11,"eq","","",95,[[["self"],["pound"]],["bool"]]],[11,"eq","","",48,[[["self"],["selftype"]],["bool"]]],[11,"eq","devise::syn","",195,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",195,[[["self"],["typetuple"]],["bool"]]],[11,"eq","devise::syn::token","",68,[[["self"],["andand"]],["bool"]]],[11,"eq","devise::syn","",300,[[["self"],["index"]],["bool"]]],[11,"eq","","",247,[[["self"],["rangelimits"]],["bool"]]],[11,"ne","","",247,[[["self"],["rangelimits"]],["bool"]]],[11,"eq","","",237,[[["self"],["constraint"]],["bool"]]],[11,"ne","","",237,[[["self"],["constraint"]],["bool"]]],[11,"eq","","",296,[[["self"],["file"]],["bool"]]],[11,"ne","","",296,[[["self"],["file"]],["bool"]]],[11,"eq","","",207,[[["self"],["foreignitemverbatim"]],["bool"]]],[11,"eq","","",145,[[["self"],["litverbatim"]],["bool"]]],[11,"eq","","",309,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",309,[[["self"],["pattuplestruct"]],["bool"]]],[11,"eq","devise::syn::token","",99,[[["self"],["rem"]],["bool"]]],[11,"eq","","",64,[[["self"],["yield"]],["bool"]]],[11,"eq","devise::syn","",270,[[["self"],["exprtryblock"]],["bool"]]],[11,"ne","","",270,[[["self"],["exprtryblock"]],["bool"]]],[11,"eq","","",167,[[["self"],["pat"]],["bool"]]],[11,"ne","","",167,[[["self"],["pat"]],["bool"]]],[11,"eq","","",276,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",276,[[["self"],["exprmatch"]],["bool"]]],[11,"eq","devise::syn::token","",101,[[["self"],["fatarrow"]],["bool"]]],[11,"eq","","",92,[[["self"],["or"]],["bool"]]],[11,"eq","devise::syn","",306,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",306,[[["self"],["exprrange"]],["bool"]]],[11,"eq","devise::syn::token","",72,[[["self"],["caret"]],["bool"]]],[11,"eq","","",32,[[["self"],["for"]],["bool"]]],[11,"eq","","",30,[[["self"],["final"]],["bool"]]],[11,"eq","devise::syn","",190,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",190,[[["self"],["exprassign"]],["bool"]]],[11,"eq","","",155,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",155,[[["self"],["typeinfer"]],["bool"]]],[11,"eq","","",184,[[["self"],["foreignitemtype"]],["bool"]]],[11,"ne","","",184,[[["self"],["foreignitemtype"]],["bool"]]],[11,"eq","","",333,[[["self"],["litfloat"]],["bool"]]],[11,"eq","devise::syn::token","",42,[[["self"],["mut"]],["bool"]]],[11,"eq","","",69,[[["self"],["andeq"]],["bool"]]],[11,"eq","devise::syn","",257,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",257,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","devise::syn::token","",84,[[["self"],["eq"]],["bool"]]],[11,"eq","","",40,[[["self"],["mod"]],["bool"]]],[11,"eq","devise::syn","",171,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",171,[[["self"],["barefnargname"]],["bool"]]],[11,"eq","","",251,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",251,[[["self"],["typeslice"]],["bool"]]],[11,"eq","","",215,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",215,[[["self"],["exprtype"]],["bool"]]],[11,"eq","","",223,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",223,[[["self"],["exprcall"]],["bool"]]],[11,"eq","devise::syn::token","",52,[[["self"],["super"]],["bool"]]],[11,"eq","devise::syn","",249,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",249,[[["self"],["whereclause"]],["bool"]]],[11,"eq","","",204,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",204,[[["self"],["itemforeignmod"]],["bool"]]],[11,"eq","","",259,[[["self"],["methodsig"]],["bool"]]],[11,"ne","","",259,[[["self"],["methodsig"]],["bool"]]],[11,"eq","devise::syn::token","",104,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",89,[[["self"],["lt"]],["bool"]]],[11,"eq","devise::syn","",158,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",158,[[["self"],["patslice"]],["bool"]]],[11,"eq","devise::syn::token","",78,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",74,[[["self"],["colon"]],["bool"]]],[11,"eq","devise::syn","",256,[[["self"],["field"]],["bool"]]],[11,"ne","","",256,[[["self"],["field"]],["bool"]]],[11,"eq","","",175,[[["self"],["exprasync"]],["bool"]]],[11,"ne","","",175,[[["self"],["exprasync"]],["bool"]]],[11,"eq","","",126,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",126,[[["self"],["expryield"]],["bool"]]],[11,"eq","","",301,[[["self"],["item"]],["bool"]]],[11,"ne","","",301,[[["self"],["item"]],["bool"]]],[11,"eq","devise::syn::token","",82,[[["self"],["dot3"]],["bool"]]],[11,"eq","devise::syn","",242,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",242,[[["self"],["traititemmethod"]],["bool"]]],[11,"eq","","",313,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",313,[[["self"],["methodturbofish"]],["bool"]]],[11,"eq","","",194,[[["self"],["patmacro"]],["bool"]]],[11,"ne","","",194,[[["self"],["patmacro"]],["bool"]]],[11,"eq","","",286,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",286,[[["self"],["fieldvalue"]],["bool"]]],[11,"eq","","",245,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",245,[[["self"],["typepath"]],["bool"]]],[11,"eq","devise::syn::token","",114,[[["self"],["group"]],["bool"]]],[11,"eq","devise::syn","",120,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",120,[[["self"],["barefnarg"]],["bool"]]],[11,"eq","","",260,[[["self"],["patref"]],["bool"]]],[11,"ne","","",260,[[["self"],["patref"]],["bool"]]],[11,"eq","devise::syn::token","",77,[[["self"],["div"]],["bool"]]],[11,"eq","","",27,[[["self"],["enum"]],["bool"]]],[11,"eq","devise::syn","",291,[[["self"],["implitem"]],["bool"]]],[11,"ne","","",291,[[["self"],["implitem"]],["bool"]]],[11,"eq","","",154,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",154,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",238,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",238,[[["self"],["macrodelimiter"]],["bool"]]],[11,"eq","","",283,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",283,[[["self"],["exprpath"]],["bool"]]],[11,"eq","","",222,[[["self"],["itemverbatim"]],["bool"]]],[11,"eq","devise::syn::token","",59,[[["self"],["unsized"]],["bool"]]],[11,"eq","devise::syn","",185,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",185,[[["self"],["exprgroup"]],["bool"]]],[11,"eq","","",250,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",250,[[["self"],["exprtry"]],["bool"]]],[11,"eq","","",218,[[["self"],["generics"]],["bool"]]],[11,"ne","","",218,[[["self"],["generics"]],["bool"]]],[11,"eq","","",168,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",168,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",217,[[["self"],["itemtype"]],["bool"]]],[11,"ne","","",217,[[["self"],["itemtype"]],["bool"]]],[11,"eq","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"eq","devise::syn::token","",103,[[["self"],["shl"]],["bool"]]],[11,"eq","","",24,[[["self"],["do"]],["bool"]]],[11,"eq","","",35,[[["self"],["in"]],["bool"]]],[11,"eq","devise::syn","",287,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",287,[[["self"],["visibility"]],["bool"]]],[11,"eq","devise::syn::punctuated","",322,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",322,[[["self"],["punctuated"]],["bool"]]],[11,"eq","devise::syn","",302,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",302,[[["self"],["exprwhile"]],["bool"]]],[11,"eq","","",202,[[["self"],["path"]],["bool"]]],[11,"ne","","",202,[[["self"],["path"]],["bool"]]],[11,"eq","","",297,[[["self"],["macro"]],["bool"]]],[11,"eq","","",208,[[["self"],["itemmacro2"]],["bool"]]],[11,"eq","devise::syn::token","",61,[[["self"],["virtual"]],["bool"]]],[11,"eq","devise::syn","",337,[[["self"],["litbytestr"]],["bool"]]],[11,"eq","","",209,[[["self"],["label"]],["bool"]]],[11,"ne","","",209,[[["self"],["label"]],["bool"]]],[11,"eq","","",179,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",179,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"eq","","",227,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",227,[[["self"],["exprfield"]],["bool"]]],[11,"len","devise::syn::punctuated","",327,[[["self"]],["usize"]]],[11,"len","","",323,[[["self"]],["usize"]]],[11,"len","","",324,[[["self"]],["usize"]]],[11,"len","","",328,[[["self"]],["usize"]]],[11,"len","","",326,[[["self"]],["usize"]]],[11,"len","","",325,[[["self"]],["usize"]]],[11,"match_ident","devise","",6,[[["self"]],["ident"]]],[11,"accessor","","",6,[[["self"]],["tokenstream"]]],[11,"build_for","","",7,[[["tokenstream"],["str"]],["derivegenerator"]]],[11,"generic_support","","",7,[[["self"],["genericsupport"]],["derivegenerator"]]],[11,"data_support","","",7,[[["self"],["datasupport"]],["derivegenerator"]]],[11,"map_type_generic","","",7,N],[11,"replace_generic","","",7,[[["self"],["usize"],["usize"]],["derivegenerator"]]],[11,"validate_enum","","",7,N],[11,"validate_struct","","",7,N],[11,"validate_generics","","",7,N],[11,"validate_fields","","",7,N],[11,"function","","",7,N],[11,"map_struct","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"try_map_struct","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"struct_mapper","","",7,[[["self"]],["box"]]],[11,"map_enum","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"try_map_enum","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"enum_mapper","","",7,[[["self"]],["box"]]],[11,"map_variant","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"try_map_variant","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"variant_mapper","","",7,[[["self"]],["box"]]],[11,"map_fields","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"try_map_fields","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"fields_mapper","","",7,[[["self"]],["box"]]],[11,"map_field","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"try_map_field","","",7,[[["self"],["f"]],["derivegenerator"]]],[11,"field_mapper","","",7,[[["self"]],["box"]]],[11,"debug","","",7,[[["self"]],["derivegenerator"]]],[11,"to_tokens","","",7,[[["self"]],["tokenstream"]]],[11,"iter","","",9,N],[18,"None","","",319,N],[18,"TupleStruct","","",319,N],[18,"NamedStruct","","",319,N],[18,"Struct","","",319,N],[18,"Enum","","",319,N],[18,"Union","","",319,N],[18,"All","","",319,N],[11,"empty","","Returns an empty set of flags.",319,[[],["datasupport"]]],[11,"all","","Returns the set containing all flags.",319,[[],["datasupport"]]],[11,"bits","","Returns the raw value of the flags currently stored.",319,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",319,[[["u32"]],["option",["datasupport"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",319,[[["u32"]],["datasupport"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",319,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",319,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",319,[[["self"],["datasupport"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",319,[[["self"],["datasupport"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",319,N],[11,"remove","","Removes the specified flags in-place.",319,N],[11,"toggle","","Toggles the specified flags in-place.",319,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",319,N],[11,"surround","devise::syn::token","",111,N],[11,"surround","","",112,N],[11,"surround","","",113,N],[11,"surround","","",114,N],[11,"new","devise::syn::buffer","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",320,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",320,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",320,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",321,[[],["cursor"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",321,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",321,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",321,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",321,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",321,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",321,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",321,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",321,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",321,[[["self"]],["span"]]],[11,"new","devise::syn::punctuated","Creates an empty punctuated sequence.",322,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",322,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",322,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",322,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",322,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",322,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",322,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",322,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",322,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",322,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",322,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",322,N],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",322,N],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",322,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",322,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",322,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",322,N],[11,"insert","","Inserts an element at position `index`.",322,N],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",322,[[["parsebuffer"]],["result",["punctuated","error"]]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",322,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",322,[[["parsebuffer"]],["result",["punctuated","error"]]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",322,N],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",116,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",116,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",116,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",116,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",116,[[["t"],["option"]],["pair"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",116,N],[11,"parse","devise::syn::parse","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",329,[[["self"]],["result",["error"]]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",329,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",329,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",329,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",329,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",329,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",329,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",329,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",329,[[["self"]],["parsebuffer"]]],[11,"error","","Triggers an error at the current position of the parse stream.",329,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",329,[[["self"],["f"]],["result",["error"]]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",329,[[["self"]],["cursor"]]],[11,"error","","Triggers an error at the current position of the parse stream.",330,[[["self"],["t"]],["error"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",331,[[["span"],["t"]],["error"]]],[11,"span","","",331,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",331,[[["self"]],["tokenstream"]]],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",332,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",332,[[["self"]],["error"]]],[11,"new","devise::syn","",333,[[["f64"],["floatsuffix"],["span"]],["litfloat"]]],[11,"value","","",333,[[["self"]],["f64"]]],[11,"suffix","","",333,[[["self"]],["floatsuffix"]]],[11,"span","","",333,[[["self"]],["span"]]],[11,"set_span","","",333,N],[11,"name","","Returns the identifier that begins this structured meta item.",143,[[["self"]],["ident"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"set_span","","",145,N],[11,"is_empty","","",162,[[["self"]],["bool"]]],[11,"parse_within","","Parse the body of a block as zero or more statements, possibly including one trailing expression.",181,[[["parsebuffer"]],["result",["vec","error"]]]],[11,"without_plus","","",192,[[["parsebuffer"]],["result",["returntype","error"]]]],[11,"parse","","",192,[[["parsebuffer"],["bool"]],["result",["returntype","error"]]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",202,[[["parsebuffer"]],["result",["path","error"]]]],[11,"parse_meta","","Parses the tokens after the path as a `Meta` if possible.",210,[[["self"]],["result",["meta","error"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",210,[[["parsebuffer"]],["result",["vec","error"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",210,[[["parsebuffer"]],["result",["vec","error"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",218,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",218,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",218,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",218,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",218,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",218,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",218,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",218,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",335,[[["self"]],["turbofish"]]],[11,"new","","",234,[[["lifetime"]],["lifetimedef"]]],[11,"new","","",336,[[["u8"],["span"]],["litbyte"]]],[11,"value","","",336,[[["self"]],["u8"]]],[11,"span","","",336,[[["self"]],["span"]]],[11,"set_span","","",336,N],[11,"parse_named","","Parses a named (braced struct) field.",256,[[["parsebuffer"]],["result",["field","error"]]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",256,[[["parsebuffer"]],["result",["field","error"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",262,[[["literal"]],["lit"]]],[11,"new","","",337,N],[11,"value","","",337,[[["self"]],["vec",["u8"]]]],[11,"span","","",337,[[["self"]],["span"]]],[11,"set_span","","",337,N],[11,"without_plus","","",271,[[["parsebuffer"]],["result",["typetraitobject","error"]]]],[11,"parse","","",271,[[["parsebuffer"],["bool"]],["result",["typetraitobject","error"]]]],[11,"new","","",338,[[["u64"],["intsuffix"],["span"]],["litint"]]],[11,"value","","",338,[[["self"]],["u64"]]],[11,"suffix","","",338,[[["self"]],["intsuffix"]]],[11,"span","","",338,[[["self"]],["span"]]],[11,"set_span","","",338,N],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",273,[[["parsebuffer"]],["result",["type","error"]]]],[11,"new","","Panics",280,[[["str"],["span"]],["lifetime"]]],[11,"new","","",339,[[["char"],["span"]],["litchar"]]],[11,"value","","",339,[[["self"]],["char"]]],[11,"span","","",339,[[["self"]],["span"]]],[11,"set_span","","",339,N],[11,"new","","",340,[[["str"],["span"]],["litstr"]]],[11,"value","","",340,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",340,[[["self"]],["result",["error"]]]],[11,"span","","",340,[[["self"]],["span"]]],[11,"set_span","","",340,N],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",303,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",303,[[["self"]],["itermut",["field"]]]],[11,"from","devise","",314,[[["deriveinput"],["t"]],["derived"]]],[11,"builder","","",314,[[["self"],["f"]],["tokenstream"]]],[11,"fields","","",314,[[["self"]],["fields"]]],[11,"variants","","",314,N],[11,"fields","","",314,[[["self"]],["fields"]]],[11,"iter","","",342,N],[11,"is_empty","","",342,[[["self"]],["bool"]]],[11,"count","","",342,[[["self"]],["usize"]]],[11,"parent_attrs","","",342,N],[11,"are_named","","",342,[[["self"]],["bool"]]],[11,"are_unnamed","","",342,[[["self"]],["bool"]]],[11,"are_unit","","",342,[[["self"]],["bool"]]],[11,"match_tokens","","",342,[[["self"]],["tokenstream"]]],[11,"name","","",315,[[["self"]],["option",["ident"]]]],[11,"description","","",315,[[["self"]],["str"]]],[11,"is_bare","","",315,[[["self"]],["bool"]]],[11,"lit","","",315,[[["self"]],["result",["lit","diagnostic"]]]],[11,"value_span","","",315,[[["self"]],["span"]]],[18,"None","","",343,N],[18,"Type","","",343,N],[18,"Lifetime","","",343,N],[18,"Const","","",343,N],[18,"All","","",343,N],[11,"empty","","Returns an empty set of flags.",343,[[],["genericsupport"]]],[11,"all","","Returns the set containing all flags.",343,[[],["genericsupport"]]],[11,"bits","","Returns the raw value of the flags currently stored.",343,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",343,[[["u32"]],["option",["genericsupport"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",343,[[["u32"]],["genericsupport"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",343,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",343,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",343,[[["self"],["genericsupport"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",343,[[["self"],["genericsupport"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",343,N],[11,"remove","","Removes the specified flags in-place.",343,N],[11,"toggle","","Toggles the specified flags in-place.",343,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",343,N],[11,"input","","",318,[[["self"]],["deriveinput"]]],[11,"fields","","",318,[[["self"]],["fields"]]],[11,"attrs","","",318,N]],"paths":[[8,"PathExt"],[8,"TypeExt"],[4,"GenericKind"],[8,"GenericExt"],[8,"Split2"],[8,"Split3"],[3,"Field"],[3,"DeriveGenerator"],[8,"FromMeta"],[3,"MetaItemList"],[8,"ToTokens"],[8,"TokenStreamExt"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[8,"IdentExt"],[4,"Pair"],[8,"Spanned"],[8,"Parse"],[8,"Parser"],[3,"BareFnArg"],[3,"UsePath"],[3,"PatIdent"],[3,"ExprLit"],[3,"TypeArray"],[3,"ItemConst"],[3,"ExprYield"],[3,"PatRange"],[3,"FieldsNamed"],[4,"FloatSuffix"],[3,"ForeignItemMacro"],[3,"ExprBox"],[4,"Data"],[3,"TypeImplTrait"],[3,"ItemExternCrate"],[3,"Arm"],[3,"VisCrate"],[3,"LitBool"],[3,"TypeNever"],[3,"ExprStruct"],[3,"UseGroup"],[3,"ImplItemConst"],[3,"ExprIndex"],[4,"Meta"],[3,"UseRename"],[3,"LitVerbatim"],[3,"ArgCaptured"],[3,"ExprVerbatim"],[3,"ImplItemMethod"],[3,"ExprUnary"],[4,"NestedMeta"],[3,"AngleBracketedGenericArguments"],[3,"ItemUse"],[3,"PredicateEq"],[3,"ExprBreak"],[3,"TypeInfer"],[3,"ItemFn"],[3,"VisPublic"],[3,"PatSlice"],[3,"TraitBound"],[3,"ExprClosure"],[3,"DeriveInput"],[4,"PathArguments"],[3,"ItemMacro"],[4,"TypeParamBound"],[3,"ImplItemExistential"],[8,"VisitMut"],[4,"Pat"],[3,"MetaList"],[4,"Stmt"],[3,"ExprArray"],[4,"BareFnArgName"],[3,"ImplItemType"],[3,"ExprUnsafe"],[3,"PatLit"],[3,"ExprAsync"],[3,"ParenthesizedGenericArguments"],[3,"TraitItemConst"],[3,"DataEnum"],[4,"TraitBoundModifier"],[3,"ExprContinue"],[3,"Block"],[3,"PathSegment"],[3,"TraitItemType"],[3,"ForeignItemType"],[3,"ExprGroup"],[4,"GenericMethodArgument"],[4,"AttrStyle"],[3,"TypeReference"],[3,"UseName"],[3,"ExprAssign"],[3,"ExprLet"],[4,"ReturnType"],[3,"ImplItemVerbatim"],[3,"PatMacro"],[3,"TypeTuple"],[3,"ItemTraitAlias"],[4,"UseTree"],[4,"GenericParam"],[3,"ExprBinary"],[3,"ItemEnum"],[3,"FieldsUnnamed"],[3,"Path"],[3,"DataStruct"],[3,"ItemForeignMod"],[3,"ExprReference"],[3,"PatStruct"],[3,"ForeignItemVerbatim"],[3,"ItemMacro2"],[3,"Label"],[3,"Attribute"],[3,"ItemStruct"],[3,"BoundLifetimes"],[3,"PatVerbatim"],[3,"ExprAssignOp"],[3,"ExprType"],[3,"TypeVerbatim"],[3,"ItemType"],[3,"Generics"],[3,"ExprBlock"],[3,"ExprLoop"],[3,"Binding"],[3,"ItemVerbatim"],[3,"ExprCall"],[3,"ForeignItemStatic"],[3,"TraitItemMacro"],[3,"PatTuple"],[3,"ExprField"],[3,"TypeParen"],[3,"TraitItemVerbatim"],[3,"PatWild"],[3,"ExprIf"],[3,"Abi"],[3,"PatBox"],[3,"LifetimeDef"],[4,"StrStyle"],[3,"ArgSelf"],[3,"Constraint"],[4,"MacroDelimiter"],[3,"ItemExistential"],[3,"TypeMacro"],[3,"FnDecl"],[3,"TraitItemMethod"],[4,"IntSuffix"],[3,"ExprRepeat"],[3,"TypePath"],[3,"UseGlob"],[4,"RangeLimits"],[3,"ExprInPlace"],[3,"WhereClause"],[3,"ExprTry"],[3,"TypeSlice"],[3,"ImplItemMacro"],[3,"MetaNameValue"],[8,"Visit"],[3,"ItemUnion"],[3,"Field"],[3,"ExprMacro"],[3,"TypeBareFn"],[3,"MethodSig"],[3,"PatRef"],[3,"ExprCast"],[4,"Lit"],[3,"TypeParam"],[3,"ExprReturn"],[3,"ExprParen"],[3,"FieldPat"],[3,"QSelf"],[3,"VisRestricted"],[4,"WherePredicate"],[3,"ExprTryBlock"],[3,"TypeTraitObject"],[4,"Expr"],[4,"Type"],[3,"PatPath"],[3,"ArgSelfRef"],[3,"ExprMatch"],[3,"TypeGroup"],[4,"GenericArgument"],[4,"TraitItem"],[3,"Lifetime"],[3,"PredicateLifetime"],[4,"ForeignItem"],[3,"ExprPath"],[3,"DataUnion"],[3,"ItemImpl"],[3,"FieldValue"],[4,"Visibility"],[3,"TypePtr"],[3,"ExprTuple"],[4,"BinOp"],[4,"ImplItem"],[3,"ItemMod"],[3,"Local"],[3,"ItemTrait"],[3,"ConstParam"],[3,"File"],[3,"Macro"],[4,"FnArg"],[3,"ExprMethodCall"],[3,"Index"],[4,"Item"],[3,"ExprWhile"],[4,"Fields"],[3,"PredicateType"],[3,"ForeignItemFn"],[3,"ExprRange"],[4,"Member"],[3,"Variant"],[3,"PatTupleStruct"],[3,"ExprForLoop"],[4,"UnOp"],[3,"ItemStatic"],[3,"MethodTurbofish"],[3,"Derived"],[4,"MetaItem"],[3,"SpanWrapped"],[8,"Spanned"],[4,"FieldParent"],[3,"DataSupport"],[3,"TokenBuffer"],[3,"Cursor"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"],[3,"LitFloat"],[3,"Turbofish"],[3,"TypeGenerics"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitInt"],[3,"LitChar"],[3,"LitStr"],[3,"ImplGenerics"],[3,"Fields"],[3,"GenericSupport"]]};
searchIndex["devise_codegen"]={"doc":"","items":[[24,"FromMeta","devise_codegen","",N,N]],"paths":[]};
searchIndex["devise_core"]={"doc":"","items":[[3,"Fields","devise_core","",N,N],[3,"Field","","",N,N],[12,"parent","","",0,N],[12,"field","","",0,N],[12,"index","","",0,N],[3,"GenericSupport","","",N,N],[3,"DataSupport","","",N,N],[3,"DeriveGenerator","","",N,N],[12,"input","","",1,N],[12,"trait_path","","",1,N],[3,"MetaItemList","","",N,N],[12,"ident","","",2,N],[12,"iter","","",2,N],[3,"SpanWrapped","","",N,N],[12,"span","","",3,N],[12,"full_span","","",3,N],[12,"value","","",3,N],[3,"Derived","","",N,N],[12,"derive_input","","",4,N],[12,"value","","",4,N],[4,"FieldParent","","",N,N],[13,"Variant","","",5,N],[13,"Struct","","",5,N],[13,"Union","","",5,N],[4,"MetaItem","","",N,N],[13,"Ident","","",6,N],[13,"Literal","","",6,N],[13,"KeyValue","","",6,N],[13,"List","","",6,N],[5,"default_enum_mapper","","",N,[[["derivegenerator"],["enum"]],["mapresult"]]],[5,"null_enum_mapper","","",N,[[["derivegenerator"],["enum"]],["mapresult"]]],[5,"default_struct_mapper","","",N,[[["derivegenerator"],["struct"]],["mapresult"]]],[5,"default_variant_mapper","","",N,[[["derivegenerator"],["variant"]],["mapresult"]]],[5,"default_field_mapper","","",N,[[["derivegenerator"],["field"]],["mapresult"]]],[5,"default_fields_mapper","","",N,[[["derivegenerator"],["fields"]],["mapresult"]]],[11,"input","","",5,[[["self"]],["deriveinput"]]],[11,"fields","","",5,[[["self"]],["fields"]]],[11,"attrs","","",5,N],[11,"iter","","",7,N],[11,"is_empty","","",7,[[["self"]],["bool"]]],[11,"count","","",7,[[["self"]],["usize"]]],[11,"parent_attrs","","",7,N],[11,"are_named","","",7,[[["self"]],["bool"]]],[11,"are_unnamed","","",7,[[["self"]],["bool"]]],[11,"are_unit","","",7,[[["self"]],["bool"]]],[11,"match_tokens","","",7,[[["self"]],["tokenstream2"]]],[11,"match_ident","","",0,[[["self"]],["ident"]]],[11,"accessor","","",0,[[["self"]],["tokenstream2"]]],[11,"build_for","","",1,[[["tokenstream"],["str"]],["derivegenerator"]]],[11,"generic_support","","",1,[[["self"],["genericsupport"]],["self"]]],[11,"data_support","","",1,[[["self"],["datasupport"]],["self"]]],[11,"map_type_generic","","",1,[[["self"],["typegenericmapfn"]],["self"]]],[11,"replace_generic","","",1,[[["self"],["usize"],["usize"]],["self"]]],[11,"validate_enum","","",1,[[["self"],["enumvalidatorfn"]],["self"]]],[11,"validate_struct","","",1,[[["self"],["structvalidatorfn"]],["self"]]],[11,"validate_generics","","",1,[[["self"],["genericsvalidatorfn"]],["self"]]],[11,"validate_fields","","",1,[[["self"],["fieldsvalidatorfn"]],["self"]]],[11,"function","","",1,[[["self"],["functionfn"]],["self"]]],[11,"map_struct","","",1,[[["self"],["f"]],["self"]]],[11,"try_map_struct","","",1,[[["self"],["f"]],["self"]]],[11,"struct_mapper","","",1,[[["self"]],["box"]]],[11,"map_enum","","",1,[[["self"],["f"]],["self"]]],[11,"try_map_enum","","",1,[[["self"],["f"]],["self"]]],[11,"enum_mapper","","",1,[[["self"]],["box"]]],[11,"map_variant","","",1,[[["self"],["f"]],["self"]]],[11,"try_map_variant","","",1,[[["self"],["f"]],["self"]]],[11,"variant_mapper","","",1,[[["self"]],["box"]]],[11,"map_fields","","",1,[[["self"],["f"]],["self"]]],[11,"try_map_fields","","",1,[[["self"],["f"]],["self"]]],[11,"fields_mapper","","",1,[[["self"]],["box"]]],[11,"map_field","","",1,[[["self"],["f"]],["self"]]],[11,"try_map_field","","",1,[[["self"],["f"]],["self"]]],[11,"field_mapper","","",1,[[["self"]],["box"]]],[11,"debug","","",1,[[["self"]],["self"]]],[11,"to_tokens","","",1,[[["self"]],["tokenstream"]]],[18,"None","","",8,N],[18,"Type","","",8,N],[18,"Lifetime","","",8,N],[18,"Const","","",8,N],[18,"All","","",8,N],[11,"empty","","Returns an empty set of flags.",8,[[],["genericsupport"]]],[11,"all","","Returns the set containing all flags.",8,[[],["genericsupport"]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,[[["u32"]],["option",["genericsupport"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,[[["u32"]],["genericsupport"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",8,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,[[["self"],["genericsupport"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,[[["self"],["genericsupport"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["self"],["genericsupport"]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["self"],["genericsupport"]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["self"],["genericsupport"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",8,[[["self"],["genericsupport"],["bool"]]]],[18,"None","","",9,N],[18,"TupleStruct","","",9,N],[18,"NamedStruct","","",9,N],[18,"Struct","","",9,N],[18,"Enum","","",9,N],[18,"Union","","",9,N],[18,"All","","",9,N],[11,"empty","","Returns an empty set of flags.",9,[[],["datasupport"]]],[11,"all","","Returns the set containing all flags.",9,[[],["datasupport"]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,[[["u32"]],["option",["datasupport"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,[[["u32"]],["datasupport"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",9,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,[[["self"],["datasupport"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,[[["self"],["datasupport"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["self"],["datasupport"]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["self"],["datasupport"]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["self"],["datasupport"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",9,[[["self"],["datasupport"],["bool"]]]],[11,"from","","",4,[[["deriveinput"],["t"]],["self"]]],[11,"iter","","",2,N],[11,"name","","",6,[[["self"]],["option",["ident"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"is_bare","","",6,[[["self"]],["bool"]]],[11,"lit","","",6,[[["self"]],["result",["lit"]]]],[11,"value_span","","",6,[[["self"]],["span"]]],[0,"ext","","",N,N],[4,"GenericKind","devise_core::ext","",N,N],[13,"Lifetime","","",10,N],[13,"Type","","",10,N],[13,"Binding","","",10,N],[13,"Const","","",10,N],[13,"Constraint","","",10,N],[8,"PathExt","","",N,N],[10,"is","","",11,N],[10,"is_local","","",11,N],[10,"is_global","","",11,N],[10,"generics","","",11,[[["self"]],["option",["punctuated"]]]],[8,"TypeExt","","",N,N],[10,"strip_lifetimes","","",12,[[["self"]]]],[10,"with_stripped_lifetimes","","",12,[[["self"]],["type"]]],[8,"GenericExt","","",N,N],[10,"kind","","",13,[[["self"]],["generickind"]]],[8,"Split2","","",N,N],[10,"split2","","",14,N],[8,"Split3","","",N,N],[10,"split3","","",15,N],[6,"Result","devise_core","",N,N],[6,"MapResult","","",N,N],[6,"EnumValidatorFn","","",N,N],[6,"StructValidatorFn","","",N,N],[6,"GenericsValidatorFn","","",N,N],[6,"FieldsValidatorFn","","",N,N],[6,"FunctionFn","","",N,N],[6,"TypeGenericMapFn","","",N,N],[6,"Variant","","",N,N],[6,"Struct","","",N,N],[6,"Enum","","",N,N],[8,"Spanned","","",N,N],[10,"span","","",16,[[["self"]],["span"]]],[8,"FromMeta","","",N,N],[10,"from_meta","","",17,[[["metaitem"]],["result"]]],[11,"from_attr","","",17,[[["str"],["attribute"]],["result"]]],[11,"from_attrs","","",17,N],[11,"default","","",17,[[],["option"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"into","devise_core::ext","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"span","devise_core","",7,[[["self"]],["span"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from_meta","","",3,[[["metaitem"]],["result"]]],[11,"partial_cmp","","",8,[[["self"],["genericsupport"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"le","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"gt","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"ge","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["datasupport"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"le","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"gt","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"ge","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"cmp","","",8,[[["self"],["genericsupport"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["datasupport"]],["ordering"]]],[11,"eq","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"ne","","",8,[[["self"],["genericsupport"]],["bool"]]],[11,"eq","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"ne","","",9,[[["self"],["datasupport"]],["bool"]]],[11,"eq","devise_core::ext","",10,[[["self"],["generickind"]],["bool"]]],[11,"from","devise_core","",6,[[["meta"]],["metaitem"]]],[11,"from","","",6,[[["nestedmeta"]],["metaitem"]]],[11,"clone","","",5,[[["self"]],["fieldparent"]]],[11,"clone","","",7,[[["self"]],["fields"]]],[11,"clone","","",0,[[["self"]],["field"]]],[11,"clone","","",8,[[["self"]],["genericsupport"]]],[11,"clone","","",9,[[["self"]],["datasupport"]]],[11,"clone","","",4,[[["self"]],["derived"]]],[11,"clone","","",6,[[["self"]],["metaitem"]]],[11,"clone","","",2,[[["self"]],["metaitemlist"]]],[11,"clone","","",3,[[["self"]],["spanwrapped"]]],[11,"clone","devise_core::ext","",10,[[["self"]],["generickind"]]],[11,"extend","devise_core","",8,[[["self"],["t"]]]],[11,"extend","","",9,[[["self"],["t"]]]],[11,"deref","","",0,N],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",8,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["self"],["datasupport"]],["datasupport"]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["self"],["genericsupport"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["self"],["datasupport"]]]],[11,"not","","Returns the complement of this set of flags.",8,[[["self"]],["genericsupport"]]],[11,"not","","Returns the complement of this set of flags.",9,[[["self"]],["datasupport"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["self"],["datasupport"]],["datasupport"]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["self"],["datasupport"]],["datasupport"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,[[["self"],["genericsupport"]],["genericsupport"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,[[["self"],["datasupport"]],["datasupport"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["self"],["genericsupport"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["self"],["datasupport"]]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["self"],["genericsupport"]]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["self"],["datasupport"]]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["self"],["genericsupport"]]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["self"],["datasupport"]]]],[11,"hash","","",8,N],[11,"hash","","",9,N],[11,"from_iter","","",8,[[["t"]],["genericsupport"]]],[11,"from_iter","","",9,[[["t"]],["datasupport"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"to_tokens","","",4,[[["self"],["tokenstream2"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"builder","","",18,[[["self"],["f"]],["tokenstream2"]]],[11,"fields","","",18,[[["self"]],["fields"]]],[11,"variants","","",19,N],[11,"fields","","",20,[[["self"]],["fields"]]],[11,"from_attr","","",17,[[["str"],["attribute"]],["result"]]],[11,"from_attrs","","",17,N],[11,"default","","",17,[[],["option"]]]],"paths":[[3,"Field"],[3,"DeriveGenerator"],[3,"MetaItemList"],[3,"SpanWrapped"],[3,"Derived"],[4,"FieldParent"],[4,"MetaItem"],[3,"Fields"],[3,"GenericSupport"],[3,"DataSupport"],[4,"GenericKind"],[8,"PathExt"],[8,"TypeExt"],[8,"GenericExt"],[8,"Split2"],[8,"Split3"],[8,"Spanned"],[8,"FromMeta"],[6,"Variant"],[6,"Enum"],[6,"Struct"]]};
searchIndex["env_logger"]={"doc":"A simple logger configured via environment variables which writes to stdout or stderr, for use with the logging facade exposed by the [`log` crate][log-crate-url].","items":[[3,"Env","env_logger","Set of environment variables to configure from.",N,N],[3,"Logger","","The env logger.",N,N],[3,"Builder","","`Builder` acts as builder for initializing a `Logger`.",N,N],[5,"try_init","","Attempts to initialize the global logger with an env logger.",N,[[],["result",["setloggererror"]]]],[5,"init","","Initializes the global logger with an env logger.",N,[[]]],[5,"try_init_from_env","","Attempts to initialize the global logger with an env logger from the given environment variables.",N,[[["e"]],["result",["setloggererror"]]]],[5,"init_from_env","","Initializes the global logger with an env logger from the given environment variables.",N,[[["e"]]]],[0,"filter","","Filtering for log records.",N,N],[3,"Filter","env_logger::filter","A log filter.",N,N],[3,"Builder","","A builder for a log filter.",N,N],[11,"filter","","Returns the maximum `LevelFilter` that this filter instance is configured to output.",0,[[["self"]],["levelfilter"]]],[11,"matches","","Checks if this record matches the configured filter.",0,[[["self"],["record"]],["bool"]]],[11,"enabled","","Determines if a log message with the specified metadata would be logged.",0,[[["self"],["metadata"]],["bool"]]],[11,"new","","Initializes the filter builder with defaults.",1,[[],["builder"]]],[11,"from_env","","Initializes the filter builder from an environment.",1,[[["str"]],["builder"]]],[11,"filter_module","","Adds a directive to the filter for a specific module.",1,[[["self"],["str"],["levelfilter"]],["self"]]],[11,"filter_level","","Adds a directive to the filter for all modules.",1,[[["self"],["levelfilter"]],["self"]]],[11,"filter","","Adds a directive to the filter.",1,[[["self"],["option",["str"]],["levelfilter"]],["self"]]],[11,"parse","","Parses the directives string.",1,[[["self"],["str"]],["self"]]],[11,"build","","Build a log filter.",1,[[["self"]],["filter"]]],[0,"fmt","env_logger","Formatting for log records.",N,N],[3,"Formatter","env_logger::fmt","A formatter to write logs into.",N,N],[3,"Style","","A set of styles to apply to the terminal output.",N,N],[3,"StyledValue","","A value that can be printed using the given styles.",N,N],[3,"Timestamp","","An [RFC3339] formatted timestamp.",N,N],[3,"PreciseTimestamp","","An [RFC3339] formatted timestamp with nanos",N,N],[3,"ParseColorError","","An error from parsing an invalid color specification.",N,N],[4,"Target","","Log target, either `stdout` or `stderr`.",N,N],[13,"Stdout","","Logs will be sent to standard output.",2,N],[13,"Stderr","","Logs will be sent to standard error.",2,N],[4,"WriteStyle","","Whether or not to print styles to the target.",N,N],[13,"Auto","","Try to print styles, but don't force the issue.",3,N],[13,"Always","","Try very hard to print styles.",3,N],[13,"Never","","Never print styles.",3,N],[4,"Color","","The set of available colors for the terminal foreground/background.",N,N],[13,"Black","","",4,N],[13,"Blue","","",4,N],[13,"Green","","",4,N],[13,"Red","","",4,N],[13,"Cyan","","",4,N],[13,"Magenta","","",4,N],[13,"Yellow","","",4,N],[13,"White","","",4,N],[13,"Ansi256","","",4,N],[13,"Rgb","","",4,N],[11,"set_color","","Set the text color.",5,[[["self"],["color"]],["style"]]],[11,"set_bold","","Set the text weight.",5,[[["self"],["bool"]],["style"]]],[11,"set_intense","","Set the text intensity.",5,[[["self"],["bool"]],["style"]]],[11,"set_bg","","Set the background color.",5,[[["self"],["color"]],["style"]]],[11,"value","","Wrap a value in the style.",5,[[["self"],["t"]],["styledvalue"]]],[11,"style","","Begin a new [`Style`].",6,[[["self"]],["style"]]],[11,"default_level_style","","Get the default [`Style`] for the given level.",6,[[["self"],["level"]],["style"]]],[11,"timestamp","","Get a [`Timestamp`] for the current date and time in UTC.",6,[[["self"]],["timestamp"]]],[11,"precise_timestamp","","Get a [`PreciseTimestamp`] for the current date and time in UTC with nanos.",6,[[["self"]],["precisetimestamp"]]],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",7,[[["self"]],["str"]]],[17,"DEFAULT_FILTER_ENV","env_logger","The default name for the environment variable to read filters from.",N,N],[17,"DEFAULT_WRITE_STYLE_ENV","","The default name for the environment variable to read style preferences from.",N,N],[11,"new","","Initializes the log builder with defaults.",8,[[],["builder"]]],[11,"from_env","","Initializes the log builder from the environment.",8,[[["e"]],["self"]]],[11,"from_default_env","","Initializes the log builder from the environment using default variable names.",8,[[],["self"]]],[11,"format","","Sets the format function for formatting the log output.",8,[[["self"],["f"]],["self"]]],[11,"default_format","","Use the default format.",8,[[["self"]],["self"]]],[11,"default_format_level","","Whether or not to write the level in the default format.",8,[[["self"],["bool"]],["self"]]],[11,"default_format_module_path","","Whether or not to write the module path in the default format.",8,[[["self"],["bool"]],["self"]]],[11,"default_format_timestamp","","Whether or not to write the timestamp in the default format.",8,[[["self"],["bool"]],["self"]]],[11,"default_format_timestamp_nanos","","Whether or not to write the timestamp with nanos.",8,[[["self"],["bool"]],["self"]]],[11,"filter_module","","Adds a directive to the filter for a specific module.",8,[[["self"],["str"],["levelfilter"]],["self"]]],[11,"filter_level","","Adds a directive to the filter for all modules.",8,[[["self"],["levelfilter"]],["self"]]],[11,"filter","","Adds filters to the logger.",8,[[["self"],["option",["str"]],["levelfilter"]],["self"]]],[11,"parse","","Parses the directives string in the same form as the `RUST_LOG` environment variable.",8,[[["self"],["str"]],["self"]]],[11,"target","","Sets the target for the log output.",8,[[["self"],["target"]],["self"]]],[11,"write_style","","Sets whether or not styles will be written.",8,[[["self"],["writestyle"]],["self"]]],[11,"parse_write_style","","Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE` environment variable.",8,[[["self"],["str"]],["self"]]],[11,"try_init","","Initializes the global logger with the built env logger.",8,[[["self"]],["result",["setloggererror"]]]],[11,"init","","Initializes the global logger with the built env logger.",8,[[["self"]]]],[11,"build","","Build an env logger.",8,[[["self"]],["logger"]]],[11,"from_env","","Creates the logger from the environment.",9,[[["e"]],["self"]]],[11,"from_default_env","","Creates the logger from the environment using default variable names.",9,[[],["self"]]],[11,"filter","","Returns the maximum `LevelFilter` that this env logger instance is configured to output.",9,[[["self"]],["levelfilter"]]],[11,"matches","","Checks if this record matches the configured filter.",9,[[["self"],["record"]],["bool"]]],[11,"new","","Get a default set of environment variables.",10,[[],["self"]]],[11,"filter","","Specify an environment variable to read the filter from.",10,[[["self"],["e"]],["self"]]],[11,"filter_or","","Specify an environment variable to read the filter from.",10,[[["self"],["e"],["v"]],["self"]]],[11,"write_style","","Specify an environment variable to read the style from.",10,[[["self"],["e"]],["self"]]],[11,"write_style_or","","Specify an environment variable to read the style from.",10,[[["self"],["e"],["v"]],["self"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","env_logger::filter","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","env_logger::fmt","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"default","env_logger::filter","",1,[[],["self"]]],[11,"default","env_logger::fmt","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","env_logger","",8,[[],["builder"]]],[11,"default","","",10,[[],["self"]]],[11,"eq","env_logger::fmt","",2,[[["self"],["target"]],["bool"]]],[11,"eq","","",3,[[["self"],["writestyle"]],["bool"]]],[11,"eq","","",4,[[["self"],["color"]],["bool"]]],[11,"ne","","",4,[[["self"],["color"]],["bool"]]],[11,"eq","","",7,[[["self"],["parsecolorerror"]],["bool"]]],[11,"ne","","",7,[[["self"],["parsecolorerror"]],["bool"]]],[11,"from","env_logger","",10,[[["t"]],["self"]]],[11,"clone","env_logger::fmt","",5,[[["self"]],["style"]]],[11,"clone","","",2,[[["self"]],["target"]]],[11,"clone","","",3,[[["self"]],["writestyle"]]],[11,"clone","","",4,[[["self"]],["color"]]],[11,"clone","","",7,[[["self"]],["parsecolorerror"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","env_logger::filter","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","env_logger::fmt","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","env_logger","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","env_logger::fmt","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"hash","","",3,N],[11,"from_str","","",4,[[["str"]],["result",["color","parsecolorerror"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"enabled","env_logger","",9,[[["self"],["metadata"]],["bool"]]],[11,"log","","",9,[[["self"],["record"]]]],[11,"flush","","",9,[[["self"]]]]],"paths":[[3,"Filter"],[3,"Builder"],[4,"Target"],[4,"WriteStyle"],[4,"Color"],[3,"Style"],[3,"Formatter"],[3,"ParseColorError"],[3,"Builder"],[3,"Logger"],[3,"Env"],[3,"StyledValue"],[3,"Timestamp"],[3,"PreciseTimestamp"]]};
searchIndex["failure"]={"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Context","","An error with context around it.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,[[],["backtrace"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"map","","Maps `Context<D>` to `Context<T>` by applying a function to the contained context.",2,[[["self"],["f"]],["context"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,[[["e"]],["self"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[6,"Fallible","","A common result with an `Error`.",N,N],[8,"AsFail","","The `AsFail` trait",N,N],[10,"as_fail","","Converts a reference to `Self` into a dynamic trait object of `Fail`.",5,[[["self"]],["fail"]]],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",6,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",6,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",6,[[["self"],["f"]],["result",["context"]]]],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",7,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",7,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",7,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",7,[[["self"]],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",7,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",7,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",7,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",7,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",7,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",7,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_chain`.",7,[[["self"]],["causes"]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"as_fail","","",7,[[["self"]],["fail"]]],[11,"as_fail","","",4,[[["self"]],["fail"]]],[11,"cause","","",2,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"next","","",8,[[["self"]],["option",["fail"]]]],[11,"default","","",0,[[],["backtrace"]]],[11,"default","","",1,[[],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"AsFail"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"]={"doc":"","items":[[24,"Fail","failure_derive","",N,N]],"paths":[]};
searchIndex["filetime"]={"doc":"Timestamps for files in Rust","items":[[3,"FileTime","filetime","A helper structure to represent a timestamp for a file.",N,N],[5,"set_file_times","","Set the last access and modification times for a file on the filesystem.",N,[[["p"],["filetime"],["filetime"]],["result"]]],[5,"set_symlink_file_times","","Set the last access and modification times for a file on the filesystem. This function does not follow symlink.",N,[[["p"],["filetime"],["filetime"]],["result"]]],[11,"zero","","Creates a new timestamp representing a 0 time.",0,[[],["filetime"]]],[11,"from_unix_time","","Creates a new instance of `FileTime` with a number of seconds and nanoseconds relative to the Unix epoch, 1970-01-01T00:00:00Z.",0,[[["i64"],["u32"]],["filetime"]]],[11,"from_last_modification_time","","Creates a new timestamp from the last modification time listed in the specified metadata.",0,[[["metadata"]],["filetime"]]],[11,"from_last_access_time","","Creates a new timestamp from the last access time listed in the specified metadata.",0,[[["metadata"]],["filetime"]]],[11,"from_creation_time","","Creates a new timestamp from the creation time listed in the specified metadata.",0,[[["metadata"]],["option",["filetime"]]]],[11,"from_system_time","","Creates a new timestamp from the given SystemTime.",0,[[["systemtime"]],["filetime"]]],[11,"seconds","","Returns the whole number of seconds represented by this timestamp.",0,[[["self"]],["i64"]]],[11,"unix_seconds","","Returns the whole number of seconds represented by this timestamp, relative to the Unix epoch start of January 1, 1970.",0,[[["self"]],["i64"]]],[11,"nanoseconds","","Returns the nanosecond precision of this timestamp.",0,[[["self"]],["u32"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["filetime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["filetime"]],["bool"]]],[11,"le","","",0,[[["self"],["filetime"]],["bool"]]],[11,"gt","","",0,[[["self"],["filetime"]],["bool"]]],[11,"ge","","",0,[[["self"],["filetime"]],["bool"]]],[11,"cmp","","",0,[[["self"],["filetime"]],["ordering"]]],[11,"eq","","",0,[[["self"],["filetime"]],["bool"]]],[11,"ne","","",0,[[["self"],["filetime"]],["bool"]]],[11,"from","","",0,[[["systemtime"]],["filetime"]]],[11,"clone","","",0,[[["self"]],["filetime"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N]],"paths":[[3,"FileTime"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",5,[[["self"]],["bool"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",6,[[["self"]],["option",["result"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",7,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",7,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",7,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",7,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",7,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",7,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",7,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",7,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",7,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",7,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",7,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",7,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",7,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",7,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",7,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",7,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",7,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",7,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",7,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",7,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",7,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",7,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",7,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",8,N],[16,"Item","","The item that the future may resolve with.",8,N],[16,"Error","","The error that the future may resolve with.",8,N],[10,"into_future","","Consumes this object and produces a future.",8,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",9,N],[16,"Error","","Possible errors during conversion.",9,N],[10,"future_from","","Consume the given value, beginning the conversion.",9,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",10,[[["self"],["f"]],["result",["executeerror"]]]],[11,"new","","Create a new `ExecuteError`",11,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",11,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",11,[[["self"]],["f"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",12,N],[12,"1","","",12,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",13,N],[13,"Second","","An item from the second stream",13,N],[13,"Both","","Items from both streams",13,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",14,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",15,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",15,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",15,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",16,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",17,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",18,[[["self"]],["s"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",19,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",19,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",20,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",21,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",22,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",23,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",23,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",23,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",24,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",24,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",24,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",25,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",26,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",26,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",26,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",27,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",27,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",27,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",28,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",29,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",29,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",29,[[["self"]],["s"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",30,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",30,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",30,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",30,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",31,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",32,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",32,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",32,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",33,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",33,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",33,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",34,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",34,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",34,[[["self"]],["s"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",35,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",36,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",37,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",37,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",37,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",37,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",37,[[["self"]],["itermut"]]],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",38,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",38,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",38,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",38,[[["self"],["t"]]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",39,N],[16,"Error","","The type of error this stream may generate.",39,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",39,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",39,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",39,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",39,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",39,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",39,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",39,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",39,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",39,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",39,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",39,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",39,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",39,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",39,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",39,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",39,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",39,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",39,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",39,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",39,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",39,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",39,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",39,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",39,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",39,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",39,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",39,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",39,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",39,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",39,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",39,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",39,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",39,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",39,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",39,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",39,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"get_ref","","Get a shared reference to the inner sink.",40,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",40,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",40,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",41,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",41,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",41,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",42,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",42,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",42,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",43,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",43,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",43,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",44,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",44,[[["self"]],["s"]]],[11,"get_ref","","Get a shared reference to the inner sink.",45,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",45,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",45,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",46,N],[11,"get_ref","","Get a shared reference to the inner sink.",47,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",47,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",47,[[["self"]],["s"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",48,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",48,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",48,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",49,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",49,N],[10,"start_send","","Begin the process of sending a value to the sink.",49,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",49,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",49,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",49,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",49,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",49,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",49,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",49,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",49,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",49,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",49,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",49,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",49,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",50,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",51,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",51,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",51,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",52,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",52,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"send","","Completes this oneshot with a successful result.",53,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",53,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",53,[[["self"]],["bool"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",54,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",54,[[["self"]],["result",["option","canceled"]]]],[11,"forget","","Drop this future without canceling the underlying future.",55,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",56,[[["self"]],["t"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",57,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",57,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",57,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",58,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",58,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",58,[[["self"]],["bool"]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",59,[[["self"]],["bool"]]],[11,"unbounded_send","","Sends the provided message along this channel.",59,[[["self"],["t"]],["result",["senderror"]]]],[11,"close","","Closes the receiving half",60,[[["self"]]]],[11,"close","","Closes the receiving half",61,[[["self"]]]],[11,"new","futures::sync","Creates a new `BiLock` protecting the provided data.",62,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",62,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",62,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",62,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",63,[[["self"]],["bilock"]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"close","","Closes the receiving half",64,[[["self"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",65,[[["self"],["t"]],["result",["senderror"]]]],[11,"close","","Closes the receiving half",66,[[["self"]]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",67,[[["self"]],["t"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"send","","Completes this oneshot with a successful result.",68,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",68,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",68,[[["self"]],["bool"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",69,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",70,[[["self"]]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"into_future","futures::future","",71,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",81,[[["self"]],["f"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into_future","","",82,[[["self"]],["f"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_future","","",83,[[["self"]],["f"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into_future","","",84,[[["self"]],["f"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into_future","","",85,[[["self"]],["f"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"into_future","","",86,[[["self"]],["f"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into_future","","",87,[[["self"]],["f"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"into_future","","",88,[[["self"]],["f"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"into_future","","",89,[[["self"]],["f"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into_future","","",90,[[["self"]],["f"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"into_future","","",91,[[["self"]],["f"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"into_future","","",92,[[["self"]],["f"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into_future","","",93,[[["self"]],["f"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into_future","","",94,[[["self"]],["f"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"into_future","","",95,[[["self"]],["f"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"into_future","","",96,[[["self"]],["f"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"to_string","","",98,[[["self"]],["string"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","futures::stream","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"into_future","","",104,[[["self"]],["f"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"into_future","","",105,[[["self"]],["f"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into_future","","",107,[[["self"]],["f"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"into_future","","",108,[[["self"]],["f"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_future","","",20,[[["self"]],["f"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"into_future","","",30,[[["self"]],["f"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"into_future","","",118,[[["self"]],["f"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","futures::stream::futures_unordered","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into_iter","","",119,[[["self"]],["i"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","futures::sink","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into_future","","",42,[[["self"]],["f"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",120,[[["self"]],["f"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","futures::task","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","futures::executor","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","futures::task","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","futures::sync","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"into_future","","",128,[[["self"]],["f"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","futures::sync::oneshot","",54,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"to_string","","",129,[[["self"]],["string"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",130,[[["self"]],["f"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","futures::sync::mpsc","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"into_future","","",132,[[["self"]],["f"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","futures::unsync::mpsc","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"into_future","","",135,[[["self"]],["f"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","futures::unsync::oneshot","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",136,[[["self"]],["f"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"poll","futures::future","",71,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll"]]],[11,"poll","","",74,[[["self"]],["poll"]]],[11,"poll","","",75,[[["self"]],["poll"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"poll","","",80,[[["self"]],["poll"]]],[11,"poll","","",81,[[["self"]],["poll"]]],[11,"poll","","",82,[[["self"]],["poll"]]],[11,"poll","","",83,[[["self"]],["poll"]]],[11,"poll","","",84,[[["self"]],["poll"]]],[11,"poll","","",85,[[["self"]],["poll"]]],[11,"poll","","",86,[[["self"]],["poll"]]],[11,"poll","","",87,[[["self"]],["poll"]]],[11,"poll","","",88,[[["self"]],["poll"]]],[11,"poll","","",89,[[["self"]],["poll"]]],[11,"poll","","",90,[[["self"]],["poll"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll"]]],[11,"poll","","",96,[[["self"]],["poll"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"poll","futures::stream","",105,[[["self"]],["poll"]]],[11,"poll","","",104,[[["self"]],["poll"]]],[11,"poll","","",107,[[["self"]],["poll"]]],[11,"poll","","",108,[[["self"]],["poll"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"poll","","",118,[[["self"]],["poll",["vec"]]]],[11,"poll","futures::sink","",42,[[["self"]],["poll"]]],[11,"poll","","",44,[[["self"]],["poll"]]],[11,"poll","","",120,[[["self"]],["poll"]]],[11,"poll","futures::sync::oneshot","",54,[[["self"]],["poll",["canceled"]]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"poll","futures::sync::mpsc","",132,[[["self"]],["poll"]]],[11,"poll","futures::sync","",128,[[["self"]],["poll",["bilockacquired"]]]],[11,"poll","futures::unsync::mpsc","",135,[[["self"]],["poll"]]],[11,"poll","futures::unsync::oneshot","",69,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll"]]],[11,"poll","","",136,[[["self"]],["poll"]]],[11,"poll","futures::future","",78,[[["self"]],["poll",["option"]]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"poll","futures::stream","",99,[[["self"]],["poll",["option"]]]],[11,"poll","","",100,[[["self"]],["poll",["option"]]]],[11,"poll","","",101,[[["self"]],["poll",["option"]]]],[11,"poll","","",102,[[["self"]],["poll",["option"]]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"poll","","",103,[[["self"]],["poll",["option"]]]],[11,"poll","","",106,[[["self"]],["poll",["option"]]]],[11,"poll","","",15,[[["self"]],["poll",["option"]]]],[11,"poll","","",16,[[["self"]],["poll",["option"]]]],[11,"poll","","",17,[[["self"]],["poll",["option"]]]],[11,"poll","","",18,[[["self"]],["poll",["option"]]]],[11,"poll","","",19,[[["self"]],["poll",["option"]]]],[11,"poll","","",21,[[["self"]],["poll",["option"]]]],[11,"poll","","",22,[[["self"]],["poll",["option"]]]],[11,"poll","","",23,[[["self"]],["poll",["option"]]]],[11,"poll","","",24,[[["self"]],["poll",["option"]]]],[11,"poll","","",109,[[["self"]],["poll",["option"]]]],[11,"poll","","",110,[[["self"]],["poll",["option"]]]],[11,"poll","","",111,[[["self"]],["poll",["option"]]]],[11,"poll","","",25,[[["self"]],["poll",["option"]]]],[11,"poll","","",112,[[["self"]],["poll",["option"]]]],[11,"poll","","",113,[[["self"]],["poll",["option"]]]],[11,"poll","","",26,[[["self"]],["poll",["option"]]]],[11,"poll","","",27,[[["self"]],["poll",["option"]]]],[11,"poll","","",28,[[["self"]],["poll",["option"]]]],[11,"poll","","",29,[[["self"]],["poll",["option"]]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"poll","","",115,[[["self"]],["poll",["option"]]]],[11,"poll","","",116,[[["self"]],["poll",["option"]]]],[11,"poll","","",31,[[["self"]],["poll",["option"]]]],[11,"poll","","",32,[[["self"]],["poll",["option"]]]],[11,"poll","","",117,[[["self"]],["poll",["option"]]]],[11,"poll","","",33,[[["self"]],["poll",["option"]]]],[11,"poll","","",35,[[["self"]],["poll",["option"]]]],[11,"poll","futures::stream::futures_unordered","",37,[[["self"]],["poll",["option"]]]],[11,"poll","futures::stream","",38,[[["self"]],["poll",["option"]]]],[11,"poll","futures::sink","",40,[[["self"]],["poll",["option"]]]],[11,"poll","","",41,[[["self"]],["poll",["option"]]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"poll","futures::sync::mpsc","",60,[[["self"]],["poll",["option"]]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"poll","","",131,[[["self"]],["poll",["option"]]]],[11,"poll","futures::unsync::mpsc","",64,[[["self"]],["poll",["option"]]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"poll","","",134,[[["self"]],["poll",["option"]]]],[11,"start_send","futures::stream","",14,N],[11,"poll_complete","","",14,[[["self"]],["poll"]]],[11,"close","","",14,[[["self"]],["poll"]]],[11,"start_send","","",15,N],[11,"poll_complete","","",15,[[["self"]],["poll"]]],[11,"close","","",15,[[["self"]],["poll"]]],[11,"start_send","","",16,N],[11,"poll_complete","","",16,[[["self"]],["poll"]]],[11,"close","","",16,[[["self"]],["poll"]]],[11,"start_send","","",17,N],[11,"poll_complete","","",17,[[["self"]],["poll"]]],[11,"close","","",17,[[["self"]],["poll"]]],[11,"start_send","","",18,N],[11,"poll_complete","","",18,[[["self"]],["poll"]]],[11,"close","","",18,[[["self"]],["poll"]]],[11,"start_send","","",19,N],[11,"poll_complete","","",19,[[["self"]],["poll"]]],[11,"close","","",19,[[["self"]],["poll"]]],[11,"start_send","","",21,N],[11,"poll_complete","","",21,[[["self"]],["poll"]]],[11,"close","","",21,[[["self"]],["poll"]]],[11,"start_send","","",22,N],[11,"poll_complete","","",22,[[["self"]],["poll"]]],[11,"close","","",22,[[["self"]],["poll"]]],[11,"start_send","","",23,N],[11,"poll_complete","","",23,[[["self"]],["poll"]]],[11,"close","","",23,[[["self"]],["poll"]]],[11,"start_send","","",24,N],[11,"poll_complete","","",24,[[["self"]],["poll"]]],[11,"close","","",24,[[["self"]],["poll"]]],[11,"start_send","","",111,N],[11,"poll_complete","","",111,[[["self"]],["poll"]]],[11,"close","","",111,[[["self"]],["poll"]]],[11,"start_send","","",25,N],[11,"poll_complete","","",25,[[["self"]],["poll"]]],[11,"close","","",25,[[["self"]],["poll"]]],[11,"start_send","","",26,N],[11,"poll_complete","","",26,[[["self"]],["poll"]]],[11,"close","","",26,[[["self"]],["poll"]]],[11,"start_send","","",27,N],[11,"poll_complete","","",27,[[["self"]],["poll"]]],[11,"close","","",27,[[["self"]],["poll"]]],[11,"start_send","","",28,N],[11,"poll_complete","","",28,[[["self"]],["poll"]]],[11,"close","","",28,[[["self"]],["poll"]]],[11,"start_send","","",29,N],[11,"poll_complete","","",29,[[["self"]],["poll"]]],[11,"close","","",29,[[["self"]],["poll"]]],[11,"start_send","","",114,N],[11,"poll_complete","","",114,[[["self"]],["poll"]]],[11,"close","","",114,[[["self"]],["poll"]]],[11,"start_send","","",31,N],[11,"poll_complete","","",31,[[["self"]],["poll"]]],[11,"close","","",31,[[["self"]],["poll"]]],[11,"start_send","","",32,N],[11,"poll_complete","","",32,[[["self"]],["poll"]]],[11,"close","","",32,[[["self"]],["poll"]]],[11,"start_send","","",33,N],[11,"poll_complete","","",33,[[["self"]],["poll"]]],[11,"close","","",33,[[["self"]],["poll"]]],[11,"start_send","","",36,N],[11,"poll_complete","","",36,[[["self"]],["poll"]]],[11,"close","","",36,[[["self"]],["poll"]]],[11,"start_send","futures::sink","",40,N],[11,"poll_complete","","",40,[[["self"]],["poll"]]],[11,"close","","",40,[[["self"]],["poll"]]],[11,"start_send","","",41,N],[11,"poll_complete","","",41,[[["self"]],["poll"]]],[11,"close","","",41,[[["self"]],["poll"]]],[11,"start_send","","",43,N],[11,"poll_complete","","",43,[[["self"]],["poll"]]],[11,"close","","",43,[[["self"]],["poll"]]],[11,"start_send","","",45,N],[11,"poll_complete","","",45,[[["self"]],["poll"]]],[11,"close","","",45,[[["self"]],["poll"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"start_send","","",47,N],[11,"poll_complete","","",47,[[["self"]],["poll"]]],[11,"close","","",47,[[["self"]],["poll"]]],[11,"start_send","futures::sync::mpsc","",58,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",58,[[["self"]],["poll",["senderror"]]]],[11,"close","","",58,[[["self"]],["poll",["senderror"]]]],[11,"start_send","","",59,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",59,[[["self"]],["poll",["senderror"]]]],[11,"close","","",59,[[["self"]],["poll",["senderror"]]]],[11,"start_send","futures::unsync::mpsc","",133,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",133,[[["self"]],["poll",["senderror"]]]],[11,"close","","",133,[[["self"]],["poll",["senderror"]]]],[11,"start_send","","",65,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",65,[[["self"]],["poll",["senderror"]]]],[11,"close","","",65,[[["self"]],["poll",["senderror"]]]],[11,"from","futures","",0,[[["t"]],["async"]]],[11,"from","futures::future","",74,[[["result"]],["self"]]],[11,"from","futures::executor","",123,[[["arc"]],["notifyhandle"]]],[11,"from","","",123,[[["t"]],["notifyhandle"]]],[11,"fmt","futures","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::future","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::stream","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::stream::futures_unordered","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::stream","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sink","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::task","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::executor","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync::oneshot","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync::mpsc","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::unsync::mpsc","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::unsync::oneshot","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::future","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::stream","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync::oneshot","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync::mpsc","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::unsync::mpsc","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","futures","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","futures::future","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","futures::sync::oneshot","",129,[[["self"],["canceled"]],["bool"]]],[11,"eq","futures::sync::mpsc","",56,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",56,[[["self"],["senderror"]],["bool"]]],[11,"eq","","",57,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",57,[[["self"],["trysenderror"]],["bool"]]],[11,"deref","futures::future","",97,[[["self"]],["t"]]],[11,"deref","","",98,[[["self"]],["e"]]],[11,"deref","futures::sync","",127,[[["self"]],["t"]]],[11,"deref","","",63,[[["self"]],["t"]]],[11,"deref_mut","","",127,[[["self"]],["t"]]],[11,"deref_mut","","",63,[[["self"]],["t"]]],[11,"drop","futures::future","",6,[[["self"]]]],[11,"drop","futures::stream::futures_unordered","",37,[[["self"]]]],[11,"drop","futures::executor","",123,[[["self"]]]],[11,"drop","futures::sync::oneshot","",53,[[["self"]]]],[11,"drop","","",54,[[["self"]]]],[11,"drop","","",55,[[["self"]]]],[11,"drop","","",130,[[["self"]]]],[11,"drop","futures::sync::mpsc","",58,[[["self"]]]],[11,"drop","","",60,[[["self"]]]],[11,"drop","futures::sync","",127,[[["self"]]]],[11,"drop","","",63,[[["self"]]]],[11,"drop","futures::unsync::mpsc","",133,[[["self"]]]],[11,"drop","","",64,[[["self"]]]],[11,"drop","futures::unsync::oneshot","",68,[[["self"]]]],[11,"drop","","",69,[[["self"]]]],[11,"from_iter","futures::stream::futures_unordered","",37,[[["t"]],["self"]]],[11,"from_iter","futures::stream","",38,[[["t"]],["self"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"next","futures::stream::futures_unordered","",119,[[["self"]],["option"]]],[11,"size_hint","","",119,N],[11,"clone","futures","",0,[[["self"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"clone","futures::future","",74,[[["self"]],["futureresult"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","","",97,[[["self"]],["shareditem"]]],[11,"clone","","",98,[[["self"]],["sharederror"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"clone","futures::sink","",40,[[["self"]],["with"]]],[11,"clone","","",43,[[["self"]],["sinkfromerr"]]],[11,"clone","","",45,[[["self"]],["sinkmaperr"]]],[11,"clone","futures::task","",125,[[["self"]],["unparkevent"]]],[11,"clone","","",121,[[["self"]],["task"]]],[11,"clone","futures::executor","",123,[[["self"]],["self"]]],[11,"clone","futures::sync::oneshot","",129,[[["self"]],["canceled"]]],[11,"clone","futures::sync::mpsc","",56,[[["self"]],["senderror"]]],[11,"clone","","",57,[[["self"]],["trysenderror"]]],[11,"clone","","",59,[[["self"]],["unboundedsender"]]],[11,"clone","","",58,[[["self"]],["sender"]]],[11,"clone","futures::unsync::mpsc","",133,[[["self"]],["self"]]],[11,"clone","","",65,[[["self"]],["self"]]],[11,"default","futures::task","",124,[[],["self"]]],[11,"description","futures::future","",98,[[["self"]],["str"]]],[11,"cause","","",98,[[["self"]],["option",["error"]]]],[11,"description","futures::stream","",12,[[["self"]],["str"]]],[11,"description","futures::sync::oneshot","",129,[[["self"]],["str"]]],[11,"description","futures::sync::mpsc","",56,[[["self"]],["str"]]],[11,"description","","",57,[[["self"]],["str"]]],[11,"description","futures::unsync::mpsc","",67,[[["self"]],["str"]]],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",124,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",124,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",124,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",124,[[["self"]]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",126,[[["self"],["f"]],["r"]]],[11,"wait_future","futures::executor","Waits for the internal future to complete, blocking this thread's execution until it does.",122,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",122,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",122,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",122,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",122,[[["self"]],["result"]]],[11,"new","futures::task","Construct an unpark event that will insert `id` into `set` when triggered.",125,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"clone_id","futures::executor","This function is called whenever a new copy of `id` is needed.",51,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",51,[[["self"],["usize"]]]],[11,"notify","futures::task","Indicate that the task should attempt to poll its future in a timely fashion.",121,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",121,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",121,[[["self"]],["bool"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",122,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",122,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",122,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",122,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",122,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",122,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",122,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",122,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",122,[[["self"],["n"],["usize"]],["poll"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",123,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",123,[[["self"],["usize"]]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Fuse"],[3,"Shared"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"AndThen"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Peekable"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"Chunks"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"SendError"],[3,"TrySendError"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"BiLock"],[3,"BiLockAcquired"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"SharedItem"],[3,"SharedError"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"Chain"],[3,"Concat"],[3,"Concat2"],[3,"Empty"],[3,"Fold"],[3,"ForEach"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"PollFn"],[3,"Select"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"CatchUnwind"],[3,"Collect"],[3,"IterMut"],[3,"SendAll"],[3,"Task"],[3,"Spawn"],[3,"NotifyHandle"],[3,"AtomicTask"],[3,"UnparkEvent"],[3,"LocalKey"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"Canceled"],[3,"Execute"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"SpawnHandle"],[3,"Execute"],[3,"Execute"]]};
searchIndex["httparse"]={"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",N,N],[3,"Request","","A parsed Request.",N,N],[12,"method","","The request method, such as `GET`.",0,N],[12,"path","","The request path, such as `/about-us`.",0,N],[12,"version","","The request version, such as `HTTP/1.1`.",0,N],[12,"headers","","The request headers.",0,N],[3,"Response","","A parsed Response.",N,N],[12,"version","","The response version, such as `HTTP/1.1`.",1,N],[12,"code","","The response code, such as `200`.",1,N],[12,"reason","","The response reason-phrase, such as `OK`.",1,N],[12,"headers","","The response headers.",1,N],[3,"Header","","Represents a parsed header.",N,N],[12,"name","","The name portion of a header.",2,N],[12,"value","","The value portion of a header.",2,N],[4,"Error","","An error in parsing.",N,N],[13,"HeaderName","","Invalid byte in header name.",3,N],[13,"HeaderValue","","Invalid byte in header value.",3,N],[13,"NewLine","","Invalid byte in new line.",3,N],[13,"Status","","Invalid byte in Response status.",3,N],[13,"Token","","Invalid byte where token is required.",3,N],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,N],[13,"Version","","Invalid byte in HTTP version.",3,N],[4,"Status","","The result of a successful parse pass.",N,N],[13,"Complete","","The completed result.",4,N],[13,"Partial","","A partial result.",4,N],[5,"parse_headers","","Parse a buffer of bytes as headers.",N,N],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",N,N],[6,"Result","","A Result of any parsing action.",N,N],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",N,N],[11,"is_complete","","Convenience method to check if status is complete.",4,[[["self"]],["bool"]]],[11,"is_partial","","Convenience method to check if status is partial.",4,[[["self"]],["bool"]]],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,[[["self"]],["t"]]],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,N],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,N],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,N],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,N],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"eq","","",5,[[["self"],["invalidchunksize"]],["bool"]]],[11,"eq","","",4,[[["self"],["status"]],["bool"]]],[11,"ne","","",4,[[["self"],["status"]],["bool"]]],[11,"eq","","",0,[[["self"],["request"]],["bool"]]],[11,"ne","","",0,[[["self"],["request"]],["bool"]]],[11,"eq","","",1,[[["self"],["response"]],["bool"]]],[11,"ne","","",1,[[["self"],["response"]],["bool"]]],[11,"eq","","",2,[[["self"],["header"]],["bool"]]],[11,"ne","","",2,[[["self"],["header"]],["bool"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"clone","","",4,[[["self"]],["status"]]],[11,"clone","","",2,[[["self"]],["header"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["humantime"]={"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",N,N],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",N,N],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",N,N],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",N,N],[4,"DurationError","","Error parsing human-friendly duration",N,N],[13,"InvalidCharacter","","Invalid character during parsing",0,N],[13,"NumberExpected","","Non-numeric value where number is expected",0,N],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,N],[13,"NumberOverflow","","The numeric value is too large",0,N],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,N],[4,"TimestampError","","Error parsing datetime (timestamp)",N,N],[13,"OutOfRange","","Numeric component is out of range",1,N],[13,"InvalidDigit","","Bad character where digit is expected",1,N],[13,"InvalidFormat","","Other formatting errors",1,N],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",N,[[["str"]],["result",["duration","error"]]]],[5,"format_duration","","Formats duration into a human-readable string",N,[[["duration"]],["formattedduration"]]],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["stdduration"]]],[11,"into","","",4,[[["self"]],["systemtime"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"eq","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"ne","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"from","","",3,[[["stdduration"]],["duration"]]],[11,"from","","",4,[[["systemtime"]],["timestamp"]]],[11,"as_ref","","",3,[[["self"]],["stdduration"]]],[11,"as_ref","","",4,[[["self"]],["systemtime"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"clone","","",4,[[["self"]],["timestamp"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"deref","","",3,[[["self"]],["stdduration"]]],[11,"deref","","",4,[[["self"]],["systemtime"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"from_str","","",3,[[["str"]],["result",["duration"]]]],[11,"from_str","","",4,[[["str"]],["result",["timestamp"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["hyper"]={"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",N,N],[3,"LanguageTag","","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[0,"client","","HTTP Client",N,N],[3,"Client","hyper::client","A Client to use additional features with Requests.",N,N],[3,"RequestBuilder","","Options for an individual Request.",N,N],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",N,N],[4,"Body","","An enum of possible body types for a Request.",N,N],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,N],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,N],[13,"BufBody","","A String has a size, and uses Content-Length.",1,N],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",N,N],[13,"FollowNone","","Don't follow any redirects.",2,N],[13,"FollowAll","","Follow all redirects.",2,N],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,N],[0,"pool","","Client Connection Pooling",N,N],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",N,N],[3,"Config","","Config options for the `Pool`.",N,N],[12,"max_idle","","The maximum idle connections per host.",3,N],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",N,N],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,[[["config"]],["pool",["defaultconnector"]]]],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,[[["config"],["c"]],["pool"]]],[11,"set_idle_timeout","","Set a duration for how long an idle connection is still valid.",4,[[["self"],["option",["duration"]]]]],[11,"set_stale_check","","",4,[[["self"],["f"]]]],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,[[["self"]]]],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,[[["self"]],["s"]]],[11,"get_ref","","Gets a borrowed reference to the underlying stream.",5,[[["self"]],["s"]]],[0,"request","hyper::client","Client Requests",N,N],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",N,N],[12,"url","","The target URI for this request.",6,N],[12,"version","","The HTTP version of this request.",6,N],[11,"headers","","Read the Request headers.",6,[[["self"]],["headers"]]],[11,"method","","Read the Request method.",6,[[["self"]],["method"]]],[11,"set_write_timeout","","Set the write timeout.",6,[[["self"],["option",["duration"]]],["result"]]],[11,"set_read_timeout","","Set the read timeout.",6,[[["self"],["option",["duration"]]],["result"]]],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,[[["method"],["url"],["box",["httpmessage"]]],["result",["request"]]]],[11,"new","","Create a new client request.",6,[[["method"],["url"]],["result",["request"]]]],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,[[["method"],["url"],["c"]],["result",["request"]]]],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,[[["self"]],["result",["request"]]]],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,[[["self"]],["headers"]]],[11,"send","","Completes writing the request, and returns a response to read from.",6,[[["self"]],["result",["response"]]]],[0,"response","hyper::client","Client Responses",N,N],[3,"Response","hyper::client::response","A response for a client request to a remote server.",N,N],[12,"status","","The status from the server.",7,N],[12,"headers","","The headers from the server.",7,N],[12,"version","","The HTTP version of this response from the server.",7,N],[12,"url","","The final URL of this response.",7,N],[11,"new","","Creates a new response from a server.",7,[[["url"],["box",["networkstream"]]],["result",["response"]]]],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,[[["url"],["box",["httpmessage"]]],["result",["response"]]]],[11,"status_raw","","Get the raw status code and reason.",7,[[["self"]],["rawstatus"]]],[11,"get_ref","","Gets a borrowed reference to the underlying `HttpMessage`.",7,[[["self"]],["httpmessage"]]],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",N,N],[10,"into_url","","Consumes the object, trying to return a Url.",8,[[["self"]],["result",["url","urlerror"]]]],[11,"new","","Create a new Client.",9,[[],["client"]]],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,[[["config"]],["client"]]],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,[[["h"],["u16"]],["client"]]],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,[[["proxyconfig"]],["client"]]],[11,"with_connector","","Create a new client with a specific connector.",9,[[["c"]],["client"]]],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,[[["p"]],["client"]]],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,[[["self"],["redirectpolicy"]]]],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,[[["self"],["option",["duration"]]]]],[11,"get","","Build a Get request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"head","","Build a Head request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"patch","","Build a Patch request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"post","","Build a Post request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"put","","Build a Put request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"delete","","Build a Delete request.",9,[[["self"],["u"]],["requestbuilder"]]],[11,"request","","Build a new request using this Client.",9,[[["self"],["method"],["u"]],["requestbuilder"]]],[11,"body","","Set a request body to be sent.",10,[[["self"],["b"]],["requestbuilder"]]],[11,"headers","","Add additional headers to the request.",10,[[["self"],["headers"]],["requestbuilder"]]],[11,"header","","Add an individual new header to the request.",10,[[["self"],["h"]],["requestbuilder"]]],[11,"send","","Execute this request and receive a Response back.",10,[[["self"]],["result",["response"]]]],[11,"new","","Create a new `ProxyConfig`.",11,[[["str"],["h"],["u16"],["c"],["s"]],["proxyconfig"]]],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",11,[[["self"],["option",["config"]]]]],[0,"error","hyper","Error and Result module.",N,N],[4,"ParseError","hyper::error","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",12,N],[13,"IdnaError","","",12,N],[13,"InvalidPort","","",12,N],[13,"InvalidIpv4Address","","",12,N],[13,"InvalidIpv6Address","","",12,N],[13,"InvalidDomainCharacter","","",12,N],[13,"RelativeUrlWithoutBase","","",12,N],[13,"RelativeUrlWithCannotBeABaseBase","","",12,N],[13,"SetHostOnCannotBeABaseUrl","","",12,N],[13,"Overflow","","",12,N],[4,"Error","","A set of errors that can occur parsing HTTP streams.",N,N],[13,"Method","","An invalid `Method`, such as `GE,T`.",13,N],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",13,N],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",13,N],[13,"Header","","An invalid `Header`.",13,N],[13,"TooLarge","","A message head is too large to be reasonable.",13,N],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",13,N],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",13,N],[13,"Ssl","","An error from a SSL library.",13,N],[13,"Utf8","","Parsing a field as string failed",13,N],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",N,N],[0,"method","hyper","The HTTP request method",N,N],[4,"Method","hyper::method","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",14,N],[13,"Get","","GET",14,N],[13,"Post","","POST",14,N],[13,"Put","","PUT",14,N],[13,"Delete","","DELETE",14,N],[13,"Head","","HEAD",14,N],[13,"Trace","","TRACE",14,N],[13,"Connect","","CONNECT",14,N],[13,"Patch","","PATCH",14,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",14,N],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",14,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",14,[[["self"]],["bool"]]],[0,"header","hyper","Headers container, and common header fields.",N,N],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",15,N],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",16,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",17,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",18,N],[12,"quality","","The quality (client or server preference) for the value.",18,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",19,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",20,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",21,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",22,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",23,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",24,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",25,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",26,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",27,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",28,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",29,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",30,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",31,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",32,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",32,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",33,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",34,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",35,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",36,N],[12,"parameters","","Disposition parameters",36,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",37,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",38,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",39,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",40,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",41,N],[3,"Cookie","","`Cookie` header, defined in RFC6265",N,N],[12,"0","","",42,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",43,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",44,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",45,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",46,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",47,N],[12,"port","","An optional port number.",47,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",48,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",49,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",50,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",51,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",52,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",52,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",53,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",54,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",55,N],[3,"Server","","`Server` header, defined in RFC7231",N,N],[12,"0","","",56,N],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",N,N],[12,"0","","",57,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",58,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",58,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",59,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",60,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",61,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",61,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",62,N],[3,"Link","","The `Link` header, defined in RFC5988",N,N],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",N,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",N,N],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",N,N],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",N,N],[12,"0","","",63,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",64,N],[13,"Iso_8859_1","","ISO-8859-1",64,N],[13,"Iso_8859_2","","ISO-8859-2",64,N],[13,"Iso_8859_3","","ISO-8859-3",64,N],[13,"Iso_8859_4","","ISO-8859-4",64,N],[13,"Iso_8859_5","","ISO-8859-5",64,N],[13,"Iso_8859_6","","ISO-8859-6",64,N],[13,"Iso_8859_7","","ISO-8859-7",64,N],[13,"Iso_8859_8","","ISO-8859-8",64,N],[13,"Iso_8859_9","","ISO-8859-9",64,N],[13,"Iso_8859_10","","ISO-8859-10",64,N],[13,"Shift_Jis","","Shift_JIS",64,N],[13,"Euc_Jp","","EUC-JP",64,N],[13,"Iso_2022_Kr","","ISO-2022-KR",64,N],[13,"Euc_Kr","","EUC-KR",64,N],[13,"Iso_2022_Jp","","ISO-2022-JP",64,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",64,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",64,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",64,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",64,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",64,N],[13,"Gb2312","","GB2312",64,N],[13,"Big5","","Big5",64,N],[13,"Koi8_R","","KOI8-R",64,N],[13,"Ext","","An arbitrary charset specified as a string",64,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",65,N],[13,"Gzip","","The `gzip` encoding.",65,N],[13,"Deflate","","The `deflate` encoding.",65,N],[13,"Compress","","The `compress` encoding.",65,N],[13,"Identity","","The `identity` encoding.",65,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",65,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",66,N],[13,"Null","","A hidden origin",66,N],[13,"Value","","Allow one particular origin",66,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",67,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",67,N],[13,"Unregistered","","The given range unit is not registered at IANA.",67,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",68,N],[13,"NoStore","","\"no-store\"",68,N],[13,"NoTransform","","\"no-transform\"",68,N],[13,"OnlyIfCached","","\"only-if-cached\"",68,N],[13,"MaxAge","","\"max-age=delta\"",68,N],[13,"MaxStale","","\"max-stale=delta\"",68,N],[13,"MinFresh","","\"min-fresh=delta\"",68,N],[13,"MustRevalidate","","\"must-revalidate\"",68,N],[13,"Public","","\"public\"",68,N],[13,"Private","","\"private\"",68,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",68,N],[13,"SMaxAge","","\"s-maxage=delta\"",68,N],[13,"Extension","","Extension directives. Optionally include an argument.",68,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",69,N],[13,"Close","","The `close` connection value.",69,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",69,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",70,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",70,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",70,N],[4,"DispositionParam","","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",71,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",71,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",72,N],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",72,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",72,N],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",72,N],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",72,N],[12,"resp","","other-range-resp",72,N],[4,"Expect","hyper::header","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",73,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",74,N],[13,"Items","","Only the listed items are a match",74,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",75,N],[13,"Items","","Only the listed items are a match",75,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",76,N],[13,"Date","","The date when the client retrieved the resource",76,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",77,N],[13,"Ext","","Every value other than `no-cache`.",77,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",78,N],[13,"ReturnRepresentation","","\"return=representation\"",78,N],[13,"ReturnMinimal","","\"return=minimal\"",78,N],[13,"HandlingStrict","","\"handling=strict\"",78,N],[13,"HandlingLeniant","","\"handling=leniant\"",78,N],[13,"Wait","","\"wait=delta\"",78,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",78,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",79,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",79,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",80,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",80,N],[13,"Last","","Get last x bytes (\"-x\")",80,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",81,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",81,N],[13,"SameOrigin","","`same-origin`",81,N],[13,"Origin","","`origin`",81,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",81,N],[13,"UnsafeUrl","","`unsafe-url`",81,N],[13,"StrictOrigin","","`strict-origin`",81,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",81,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",82,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",82,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",82,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",82,N],[13,"Unregistered","","Any other protocol name not known to hyper",82,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",83,N],[13,"Items","","Only the listed items are a match",83,N],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",N,N],[13,"Alternate","","alternate.",84,N],[13,"Appendix","","appendix.",84,N],[13,"Bookmark","","bookmark.",84,N],[13,"Chapter","","chapter.",84,N],[13,"Contents","","contents.",84,N],[13,"Copyright","","copyright.",84,N],[13,"Current","","current.",84,N],[13,"DescribedBy","","describedby.",84,N],[13,"Edit","","edit.",84,N],[13,"EditMedia","","edit-media.",84,N],[13,"Enclosure","","enclosure.",84,N],[13,"First","","first.",84,N],[13,"Glossary","","glossary.",84,N],[13,"Help","","help.",84,N],[13,"Hub","","hub.",84,N],[13,"Index","","index.",84,N],[13,"Last","","last.",84,N],[13,"LatestVersion","","latest-version.",84,N],[13,"License","","license.",84,N],[13,"Next","","next.",84,N],[13,"NextArchive","","next-archive.",84,N],[13,"Payment","","payment.",84,N],[13,"Prev","","prev.",84,N],[13,"PredecessorVersion","","predecessor-version.",84,N],[13,"Previous","","previous.",84,N],[13,"PrevArchive","","prev-archive.",84,N],[13,"Related","","related.",84,N],[13,"Replies","","replies.",84,N],[13,"Section","","section.",84,N],[13,"RelationTypeSelf","","self.",84,N],[13,"Service","","service.",84,N],[13,"Start","","start.",84,N],[13,"Stylesheet","","stylesheet.",84,N],[13,"Subsection","","subsection.",84,N],[13,"SuccessorVersion","","successor-version.",84,N],[13,"Up","","up.",84,N],[13,"VersionHistory","","versionHistory.",84,N],[13,"Via","","via.",84,N],[13,"WorkingCopy","","working-copy.",84,N],[13,"WorkingCopyOf","","working-copy-of.",84,N],[13,"ExtRelType","","ext-rel-type.",84,N],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",N,N],[13,"Screen","","screen.",85,N],[13,"Tty","","tty.",85,N],[13,"Tv","","tv.",85,N],[13,"Projection","","projection.",85,N],[13,"Handheld","","handheld.",85,N],[13,"Print","","print.",85,N],[13,"Braille","","braille.",85,N],[13,"Aural","","aural.",85,N],[13,"All","","all.",85,N],[13,"Extension","","Unrecognized media descriptor extension.",85,N],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[11,"star","","A constructor to easily create `Accept: */*`.",19,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",19,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",19,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",19,[[],["accept"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",35,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",35,[[],["connection"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",41,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",41,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",41,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",41,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",41,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",41,[[],["contenttype"]]],[11,"new","","Creates a new `Origin` header.",52,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",79,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",79,[[["vec"]],["range"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",58,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",58,[[["u64"]],["stricttransportsecurity"]]],[11,"new","","Creates a new Protocol with the given name and version",61,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",86,[[["vec",["linkvalue"]]],["link"]]],[11,"values","","Get the `Link` header's `LinkValue`s.",86,N],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",86,[[["self"],["linkvalue"]]]],[11,"new","","Create `LinkValue` from URI-Reference.",87,[[["t"]],["linkvalue"]]],[11,"link","","Get the `LinkValue`'s value.",87,[[["self"]],["str"]]],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",87,[[["self"]],["option"]]],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",87,[[["self"]],["option",["str"]]]],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",87,[[["self"]],["option"]]],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",87,[[["self"]],["option"]]],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",87,[[["self"]],["option"]]],[11,"title","","Get the `LinkValue`'s `title` parameter.",87,[[["self"]],["option",["str"]]]],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",87,[[["self"]],["option",["str"]]]],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",87,[[["self"]],["option",["mime"]]]],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",87,[[["self"],["relationtype"]],["linkvalue"]]],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",87,[[["self"],["t"]],["linkvalue"]]],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",87,[[["self"],["relationtype"]],["linkvalue"]]],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",87,[[["self"],["languagetag"]],["linkvalue"]]],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",87,[[["self"],["mediadesc"]],["linkvalue"]]],[11,"set_title","","Set `LinkValue`'s `title` parameter.",87,[[["self"],["t"]],["linkvalue"]]],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",87,[[["self"],["t"]],["linkvalue"]]],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",87,[[["self"],["mime"]],["linkvalue"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",15,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",15,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",15,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",15,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",15,[[["self"],["string"]]]],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",15,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",15,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",15,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",15,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",18,[[["t"],["quality"]],["qualityitem"]]],[0,"parsing","","Utility functions for Header implementations.",N,N],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",N,N],[12,"charset","","The character set that is used to encode the `value` to a string.",88,N],[12,"language_tag","","The human language details of the `value`, if available.",88,N],[12,"value","","The parameter value, as expressed in octets.",88,N],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",N,N],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",N,N],[5,"from_raw_str","","Reads a raw string into a value.",N,N],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",N,N],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",N,N],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",N,[[["str"]],["result",["extendedvalue"]]]],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",89,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",89,[[["self"],["formatter"]],["result"]]],[8,"Header","","A trait for any object that will represent a header field and value.",N,N],[10,"header_name","","Returns the name of the header field this belongs to.",90,[[],["str"]]],[10,"parse_header","","Parse a header from a raw stream of bytes.",90,N],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",N,N],[10,"fmt_header","","Format a header to be output into a TcpStream.",91,[[["self"],["formatter"]],["result"]]],[8,"HeaderClone","","Internal implementation detail.",N,N],[11,"new","","Creates a new, empty headers map.",92,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",92,[[["self"],["h"]]]],[11,"get_raw","","Access the raw value of a header.",92,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",92,[[["self"],["k"],["vec",["vec"]]]]],[11,"append_raw","","Append a value to raw value of this header.",92,[[["self"],["k"],["vec",["u8"]]]]],[11,"remove_raw","","Remove a header set by set_raw",92,[[["self"],["str"]]]],[11,"get","","Get a reference to the header field's value, if it exists.",92,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",92,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",92,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",92,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",92,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",92,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",92,[[["self"]]]],[11,"is","","Check if a HeaderView is a certain Header.",93,[[["self"]],["bool"]]],[11,"name","","Get the Header name as a slice.",93,[[["self"]],["str"]]],[11,"value","","Cast the value to a certain Header type.",93,[[["self"]],["option"]]],[11,"value_string","","Get just the header value as a String.",93,[[["self"]],["string"]]],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",N,N],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",N,N],[12,"0","","",94,N],[12,"1","","",94,N],[5,"should_keep_alive","","Checks if a connection should be kept alive.",N,[[["httpversion"],["headers"]],["bool"]]],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",N,N],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",N,N],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",N,N],[3,"EndError","","",N,N],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",N,N],[12,"version","","HTTP version of the message.",95,N],[12,"subject","","Subject (request line or status line) of Incoming message.",95,N],[12,"headers","","Headers of the Incoming message.",95,N],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",N,N],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",96,N],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",96,N],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",96,N],[13,"EmptyReader","","A Reader used for messages that should never have a body.",96,N],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",N,N],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",97,N],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",97,N],[13,"SizedWriter","","A Writer for when Content-Length is set.",97,N],[13,"EmptyWriter","","A writer that should not write any body.",97,N],[5,"parse_request","","Parses a request into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[5,"parse_response","","Parses a response into an Incoming message head.",N,[[["bufreader"]],["result",["incoming"]]]],[17,"CR","","The `\\r` byte.",N,N],[17,"LF","","The `\\n` byte.",N,N],[17,"LINE_ENDING","","The bytes `\\r\\n`.",N,N],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",98,[[["self"]],["box",["networkstream"]]]],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",98,[[["self"]],["networkstream"]]],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",98,[[["self"]],["networkstream"]]],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",98,[[["box",["networkstream"]]],["http11message"]]],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",98,[[["self"]],["result"]]],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",99,[[["c"]],["http11protocol"]]],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",96,[[["self"]],["r"]]],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",96,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",96,[[["self"]],["r"]]],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",97,[[["self"]],["w"]]],[11,"get_ref","","Access the inner Writer.",97,[[["self"]],["w"]]],[11,"get_mut","","Access the inner Writer mutably.",97,[[["self"]],["w"]]],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",97,[[["self"]],["result",["enderror"]]]],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",N,N],[3,"RequestHead","hyper::http::message","Describes a request.",N,N],[12,"headers","","The headers of the request",100,N],[12,"method","","The method of the request",100,N],[12,"url","","The URL of the request",100,N],[3,"ResponseHead","","Describes a response.",N,N],[12,"headers","","The headers of the reponse",101,N],[12,"raw_status","","The raw status line of the response",101,N],[12,"version","","The HTTP/2 version which generated the response",101,N],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",N,N],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",102,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",N,N],[10,"set_outgoing","","Initiates a new outgoing request.",103,[[["self"],["requesthead"]],["result",["requesthead"]]]],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",103,[[["self"]],["result",["responsehead"]]]],[10,"set_read_timeout","","Set the read timeout duration for this message.",103,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the write timeout duration for this message.",103,[[["self"],["option",["duration"]]],["result"]]],[10,"close_connection","","Closes the underlying HTTP connection.",103,[[["self"]],["result"]]],[10,"has_body","","Returns whether the incoming message has a body.",103,[[["self"]],["bool"]]],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",103,[[["self"],["bool"]]]],[11,"is","","Is the underlying type in this trait object a T?",103,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",103,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",103,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is T, extract it.",103,[[["box",["httpmessage"]]],["result",["box","box"]]]],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",N,N],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",N,N],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",N,N],[3,"HttpStream","","A wrapper around a `TcpStream`.",N,N],[12,"0","","",104,N],[3,"HttpConnector","","A connector that will produce HttpStreams.",N,N],[3,"HttpsListener","","A Http Listener over SSL.",N,N],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",N,N],[4,"Fresh","","The write-status indicating headers have not been written.",N,N],[4,"Streaming","","The write-status indicating headers have been written.",N,N],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",N,N],[13,"Http","","A plain text stream.",105,N],[13,"Https","","A stream protected by SSL.",105,N],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",N,N],[16,"Stream","","The stream produced for each connection.",106,N],[10,"accept","","Returns an iterator of streams.",106,[[["self"]],["result"]]],[10,"local_addr","","Get the address this Listener ended up listening on.",106,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Returns an iterator over incoming connections.",106,[[["self"]],["networkconnections"]]],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",106,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",106,[[["self"],["option",["duration"]]]]],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",N,N],[10,"peer_addr","","Get the remote address of the underlying connection.",107,[[["self"]],["result",["socketaddr"]]]],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",107,[[["self"],["option",["duration"]]],["result"]]],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",107,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","This will be called when Stream should no longer be kept alive.",107,[[["self"],["shutdown"]],["result"]]],[8,"NetworkConnector","","A connector creates a NetworkStream.",N,N],[16,"Stream","","Type of `Stream` to create",108,N],[10,"connect","","Connect to a remote address.",108,[[["self"],["str"],["u16"],["str"]],["result"]]],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",109,N],[10,"wrap_client","","Wrap a client stream with SSL.",109,[[["self"],["t"],["str"]],["result"]]],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",110,N],[10,"wrap_server","","Wrap a server stream with SSL.",110,[[["self"],["t"]],["result"]]],[11,"is","","Is the underlying type in this trait object a `T`?",107,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",107,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"is","","Is the underlying type in this trait object a `T`?",107,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",107,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",107,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"new","","Start listening to an address over HTTP.",111,[[["to"]],["result",["httplistener"]]]],[11,"new","","Start listening to an address over HTTPS.",112,[[["to"],["s"]],["result",["httpslistener"]]]],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",112,[[["httplistener"],["s"]],["httpslistener"]]],[11,"new","","Create a new connector using the provided SSL implementation.",113,[[["s"]],["httpsconnector",["httpconnector"]]]],[11,"with_connector","","Create a new connector using the provided SSL implementation.",113,[[["s"],["c"]],["httpsconnector"]]],[0,"server","hyper","HTTP Server",N,N],[3,"Server","hyper::server","A server can listen on a TCP socket.",N,N],[3,"Listening","","A listening server, which can later be closed.",N,N],[12,"socket","","The socket addresses that the server is bound to.",114,N],[0,"request","","Server Requests",N,N],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",N,N],[12,"remote_addr","","The IP address of the remote connection.",115,N],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",115,N],[12,"headers","","The headers of the incoming request.",115,N],[12,"uri","","The target request-uri for this request.",115,N],[12,"version","","The version of HTTP for this request.",115,N],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",115,[[["bufreader"],["socketaddr"]],["result",["request"]]]],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",115,[[["self"],["option",["duration"]]],["result"]]],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",115,[[["self"]],["option"]]],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",115,[[["self"]],["option"]]],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",115,N],[0,"response","hyper::server","Server Responses",N,N],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",N,N],[12,"version","","The HTTP version of this response.",116,N],[11,"status","","The status of this response.",116,[[["self"]],["statuscode"]]],[11,"headers","","The headers of this response.",116,[[["self"]],["headers"]]],[11,"construct","","Construct a Response from its constituent parts.",116,[[["httpversion"],["httpwriter",["write"]],["statuscode"],["headers"]],["response",["fresh"]]]],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",116,N],[11,"new","","Creates a new Response that can be used to write to a network stream.",116,[[["write"],["headers"]],["response",["fresh"]]]],[11,"send","","Writes the body and ends the response.",116,N],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",116,[[["self"]],["result",["response"]]]],[11,"status_mut","","Get a mutable reference to the status.",116,[[["self"]],["statuscode"]]],[11,"headers_mut","","Get a mutable reference to the Headers.",116,[[["self"]],["headers"]]],[11,"end","","Flushes all writing of a response to the client.",116,[[["self"]],["result"]]],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",N,N],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",117,[[["self"],["request"],["response",["fresh"]]]]],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",117,N],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",117,[[["self"]]]],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",117,[[["self"]]]],[11,"new","","Creates a new server with the provided handler.",118,[[["l"]],["server"]]],[11,"keep_alive","","Controls keep-alive for this server.",118,[[["self"],["option",["duration"]]]]],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",118,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",118,[[["self"],["option",["duration"]]]]],[11,"local_addr","","Get the address that the server is listening on.",118,[[["self"]],["result",["socketaddr"]]]],[11,"http","","Creates a new server that will handle `HttpStream`s.",118,[[["to"]],["result",["server"]]]],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",118,[[["a"],["s"]],["result",["server"]]]],[11,"handle","","Binds to a socket and starts handling connections.",118,[[["self"],["h"]],["result",["listening"]]]],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",118,[[["self"],["h"],["usize"]],["result",["listening"]]]],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",114,[[["self"]],["result"]]],[0,"status","hyper","HTTP status codes",N,N],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",119,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",119,N],[13,"Processing","","102 Processing [RFC2518]",119,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",119,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",119,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",119,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",119,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",119,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",119,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",119,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",119,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",119,N],[13,"ImUsed","","226 IM Used [RFC3229]",119,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",119,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",119,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",119,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",119,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",119,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",119,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",119,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",119,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",119,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",119,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",119,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",119,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",119,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",119,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",119,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",119,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",119,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",119,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",119,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",119,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",119,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",119,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",119,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",119,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",119,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",119,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",119,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",119,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",119,N],[13,"Locked","","423 Locked [RFC4918]",119,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",119,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",119,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",119,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",119,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",119,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",119,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",119,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",119,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",119,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",119,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",119,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",119,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",119,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",119,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",119,N],[13,"NotExtended","","510 Not Extended [RFC2774]",119,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",119,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",119,N],[4,"StatusClass","","The class of an HTTP `status-code`.",N,N],[13,"Informational","","1xx (Informational): The request was received, continuing process",120,N],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",120,N],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",120,N],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",120,N],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",120,N],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",120,N],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",119,[[["self"]],["option",["str"]]]],[11,"class","","Determine the class of a status code, based on its first digit.",119,[[["self"]],["statusclass"]]],[11,"is_informational","","Check if class is Informational.",119,[[["self"]],["bool"]]],[11,"is_success","","Check if class is Success.",119,[[["self"]],["bool"]]],[11,"is_redirection","","Check if class is Redirection.",119,[[["self"]],["bool"]]],[11,"is_client_error","","Check if class is ClientError.",119,[[["self"]],["bool"]]],[11,"is_server_error","","Check if class is ServerError.",119,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if class is NoClass",119,[[["self"]],["bool"]]],[11,"default_code","","Get the default status code for the class.",120,[[["self"]],["statuscode"]]],[0,"uri","hyper","HTTP RequestUris",N,N],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",N,N],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",121,N],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",121,N],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",121,N],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",121,N],[0,"version","hyper","HTTP Versions enum",N,N],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",N,N],[13,"Http09","","`HTTP/0.9`",122,N],[13,"Http10","","`HTTP/1.0`",122,N],[13,"Http11","","`HTTP/1.1`",122,N],[13,"Http20","","`HTTP/2.0`",122,N],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",N,N],[3,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",123,N],[12,"1","","",123,N],[12,"2","","",123,N],[4,"TopLevel","","",N,N],[13,"Star","","",124,N],[13,"Text","","",124,N],[13,"Image","","",124,N],[13,"Audio","","",124,N],[13,"Video","","",124,N],[13,"Application","","",124,N],[13,"Multipart","","",124,N],[13,"Message","","",124,N],[13,"Model","","",124,N],[13,"Ext","","",124,N],[4,"SubLevel","","",N,N],[13,"Star","","",125,N],[13,"Plain","","",125,N],[13,"Html","","",125,N],[13,"Xml","","",125,N],[13,"Javascript","","",125,N],[13,"Css","","",125,N],[13,"EventStream","","",125,N],[13,"Json","","",125,N],[13,"WwwFormUrlEncoded","","",125,N],[13,"Msgpack","","",125,N],[13,"OctetStream","","",125,N],[13,"FormData","","",125,N],[13,"Png","","",125,N],[13,"Gif","","",125,N],[13,"Bmp","","",125,N],[13,"Jpeg","","",125,N],[13,"Mpeg","","",125,N],[13,"Mp4","","",125,N],[13,"Ogg","","",125,N],[13,"Ext","","",125,N],[4,"Attr","","",N,N],[13,"Charset","","",126,N],[13,"Boundary","","",126,N],[13,"Q","","",126,N],[13,"Ext","","",126,N],[4,"Value","","",N,N],[13,"Utf8","","",127,N],[13,"Ext","","",127,N],[6,"Param","","",N,N],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[14,"header","hyper","",N,N],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_string","","",128,[[["self"]],["string"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","hyper::client","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"connect","hyper::client::pool","",4,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","hyper::client::request","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","hyper::client::response","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","hyper::error","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","hyper::method","",14,[[["self"]],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","hyper::header","",15,[[["self"]],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_string","","",129,[[["self"]],["string"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_string","","",34,[[["self"]],["string"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_string","","",86,[[["self"]],["string"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_string","","",87,[[["self"]],["string"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into_iter","","",130,[[["self"]],["i"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_string","","",78,[[["self"]],["string"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","hyper::header::parsing","",88,[[["self"]],["u"]]],[11,"to_string","","",88,[[["self"]],["string"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into","hyper::http","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","hyper::http::h1","",98,[[["self"]],["u"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","hyper::http::message","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","hyper::net","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into_iter","","",133,[[["self"]],["i"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"connect","","",134,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"connect","","",113,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","hyper::server","",118,[[["self"]],["u"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into","hyper::server::request","",115,[[["self"]],["u"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into","hyper::server::response","",116,[[["self"]],["u"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into","hyper::status","",119,[[["self"]],["u"]]],[11,"to_string","","",119,[[["self"]],["string"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into","hyper::uri","",121,[[["self"]],["u"]]],[11,"to_string","","",121,[[["self"]],["string"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into","hyper::version","",122,[[["self"]],["u"]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into","hyper::mime","",123,[[["self"]],["u"]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_string","","",124,[[["self"]],["string"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_string","","",125,[[["self"]],["string"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_string","","",126,[[["self"]],["string"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_string","","",127,[[["self"]],["string"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"clone","hyper","",128,[[["self"]],["url"]]],[11,"clone","hyper::error","",12,[[["self"]],["parseerror"]]],[11,"partial_cmp","hyper","",128,[[["self"],["url"]],["option",["ordering"]]]],[11,"as_ref","","",128,[[["self"]],["str"]]],[11,"description","hyper::error","",12,[[["self"]],["str"]]],[11,"cmp","hyper","",128,[[["self"],["url"]],["ordering"]]],[11,"fmt","hyper::error","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper::error","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","hyper","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",128,[[["str"]],["result",["url","parseerror"]]]],[11,"index","","",128,[[["self"],["range",["position"]]],["str"]]],[11,"index","","",128,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",128,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",128,[[["self"],["rangefull"]],["str"]]],[11,"to_socket_addrs","","",128,[[["self"]],["result",["error"]]]],[11,"from","hyper::error","",12,[[["errors"]],["parseerror"]]],[11,"eq","hyper","",128,[[["self"],["url"]],["bool"]]],[11,"eq","hyper::error","",12,[[["self"],["parseerror"]],["bool"]]],[11,"hash","hyper","",128,N],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",0,[[["str"]],["result",["languagetag","error"]]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"clone","hyper::mime","",125,[[["self"]],["sublevel"]]],[11,"clone","","",126,[[["self"]],["attr"]]],[11,"clone","","",124,[[["self"]],["toplevel"]]],[11,"clone","","",123,[[["self"]],["mime"]]],[11,"clone","","",127,[[["self"]],["value"]]],[11,"partial_cmp","","",123,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",123,[[["self"],["mime"]],["bool"]]],[11,"le","","",123,[[["self"],["mime"]],["bool"]]],[11,"gt","","",123,[[["self"],["mime"]],["bool"]]],[11,"ge","","",123,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",125,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",125,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",125,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",125,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",125,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",126,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",126,[[["self"],["attr"]],["bool"]]],[11,"le","","",126,[[["self"],["attr"]],["bool"]]],[11,"gt","","",126,[[["self"],["attr"]],["bool"]]],[11,"ge","","",126,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",127,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",127,[[["self"],["value"]],["bool"]]],[11,"le","","",127,[[["self"],["value"]],["bool"]]],[11,"gt","","",127,[[["self"],["value"]],["bool"]]],[11,"ge","","",127,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",124,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",124,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",124,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",124,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",124,[[["self"],["toplevel"]],["bool"]]],[11,"cmp","","",124,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",127,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",126,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",123,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",125,[[["self"],["sublevel"]],["ordering"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",126,[[["str"]],["result",["attr"]]]],[11,"from_str","","",127,[[["str"]],["result",["value"]]]],[11,"from_str","","",125,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",124,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",123,[[["str"]],["result",["mime"]]]],[11,"deref","","",125,[[["self"]],["str"]]],[11,"deref","","",127,[[["self"]],["str"]]],[11,"deref","","",126,[[["self"]],["str"]]],[11,"deref","","",124,[[["self"]],["str"]]],[11,"eq","","",125,[[["self"],["string"]],["bool"]]],[11,"eq","","",125,[[["self"],["str"]],["bool"]]],[11,"eq","","",127,[[["self"],["str"]],["bool"]]],[11,"eq","","",124,[[["self"],["str"]],["bool"]]],[11,"eq","","",124,[[["self"],["string"]],["bool"]]],[11,"eq","","",126,[[["self"],["str"]],["bool"]]],[11,"eq","","",126,[[["self"],["string"]],["bool"]]],[11,"eq","","",124,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",126,[[["self"],["str"]],["bool"]]],[11,"eq","","",127,[[["self"],["value"]],["bool"]]],[11,"eq","","",124,[[["self"],["str"]],["bool"]]],[11,"eq","","",123,[[["self"],["mime"]],["bool"]]],[11,"eq","","",125,[[["self"],["str"]],["bool"]]],[11,"eq","","",125,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",127,[[["self"],["str"]],["bool"]]],[11,"eq","","",127,[[["self"],["string"]],["bool"]]],[11,"eq","","",126,[[["self"],["attr"]],["bool"]]],[11,"hash","","",123,N],[11,"hash","","",126,N],[11,"hash","","",127,N],[11,"hash","","",124,N],[11,"hash","","",125,N],[11,"into_url","hyper","",128,[[["self"]],["result",["url","urlerror"]]]],[11,"scheme","hyper::header","",32,[[],["option",["str"]]]],[11,"fmt_scheme","","",32,[[["self"],["formatter"]],["result"]]],[11,"scheme","","",33,[[],["option",["str"]]]],[11,"fmt_scheme","","",33,[[["self"],["formatter"]],["result"]]],[11,"header_name","","",19,[[],["str"]]],[11,"parse_header","","",19,N],[11,"header_name","","",129,[[],["str"]]],[11,"parse_header","","",129,N],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,N],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,N],[11,"header_name","","",66,[[],["str"]]],[11,"parse_header","","",66,N],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,N],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,N],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,N],[11,"header_name","","",25,[[],["str"]]],[11,"parse_header","","",25,N],[11,"header_name","","",26,[[],["str"]]],[11,"parse_header","","",26,N],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"header_name","","",34,[[],["str"]]],[11,"parse_header","","",34,N],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,N],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,N],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,N],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,N],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,N],[11,"header_name","","",37,[[],["str"]]],[11,"parse_header","","",37,N],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,N],[11,"header_name","","",41,[[],["str"]]],[11,"parse_header","","",41,N],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,N],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,N],[11,"header_name","","",73,[[],["str"]]],[11,"parse_header","","",73,N],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,N],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,N],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,N],[11,"header_name","","",74,[[],["str"]]],[11,"parse_header","","",74,N],[11,"header_name","","",48,[[],["str"]]],[11,"parse_header","","",48,N],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"header_name","","",49,[[],["str"]]],[11,"parse_header","","",49,N],[11,"header_name","","",50,[[],["str"]]],[11,"parse_header","","",50,N],[11,"header_name","","",51,[[],["str"]]],[11,"parse_header","","",51,N],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,N],[11,"header_name","","",77,[[],["str"]]],[11,"parse_header","","",77,N],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,N],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,N],[11,"header_name","","",79,[[],["str"]]],[11,"parse_header","","",79,N],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,N],[11,"header_name","","",81,[[],["str"]]],[11,"parse_header","","",81,N],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,N],[11,"header_name","","",57,[[],["str"]]],[11,"parse_header","","",57,N],[11,"header_name","","",58,[[],["str"]]],[11,"parse_header","","",58,N],[11,"header_name","","",59,[[],["str"]]],[11,"parse_header","","",59,N],[11,"header_name","","",60,[[],["str"]]],[11,"parse_header","","",60,N],[11,"header_name","","",62,[[],["str"]]],[11,"parse_header","","",62,N],[11,"header_name","","",83,[[],["str"]]],[11,"parse_header","","",83,N],[11,"header_name","","",86,[[],["str"]]],[11,"parse_header","","",86,N],[11,"fmt_header","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt_multi_header","","",57,[[["self"],["multilineformatter"]],["result"]]],[11,"fmt_header","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt_header","","",86,[[["self"],["formatter"]],["result"]]],[11,"new_message","hyper::http::h1","",99,[[["self"],["str"],["u16"],["str"]],["result",["box"]]]],[11,"set_outgoing","","",98,[[["self"],["requesthead"]],["result",["requesthead"]]]],[11,"get_incoming","","",98,[[["self"]],["result",["responsehead"]]]],[11,"has_body","","",98,[[["self"]],["bool"]]],[11,"set_read_timeout","","",98,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",98,[[["self"],["option",["duration"]]],["result"]]],[11,"close_connection","","",98,[[["self"]],["result"]]],[11,"set_proxied","","",98,[[["self"],["bool"]]]],[11,"accept","hyper::net","",111,[[["self"]],["result",["httpstream"]]]],[11,"local_addr","","",111,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",111,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","",111,[[["self"],["option",["duration"]]]]],[11,"accept","","",112,[[["self"]],["result"]]],[11,"local_addr","","",112,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",112,[[["self"],["option",["duration"]]]]],[11,"set_write_timeout","","",112,[[["self"],["option",["duration"]]]]],[11,"peer_addr","hyper::client::pool","",5,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",5,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",5,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",5,[[["self"],["shutdown"]],["result"]]],[11,"set_previous_response_expected_no_content","","",5,[[["self"],["bool"]]]],[11,"previous_response_expected_no_content","","",5,[[["self"]],["bool"]]],[11,"peer_addr","hyper::net","",104,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",104,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",104,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",104,[[["self"],["shutdown"]],["result"]]],[11,"peer_addr","","",105,[[["self"]],["result",["socketaddr"]]]],[11,"set_read_timeout","","",105,[[["self"],["option",["duration"]]],["result"]]],[11,"set_write_timeout","","",105,[[["self"],["option",["duration"]]],["result"]]],[11,"close","","",105,[[["self"],["shutdown"]],["result"]]],[11,"connect","hyper::client::pool","",4,[[["self"],["str"],["u16"],["str"]],["result",["pooledstream"]]]],[11,"connect","hyper::net","",134,[[["self"],["str"],["u16"],["str"]],["result",["httpstream"]]]],[11,"connect","","",113,[[["self"],["str"],["u16"],["str"]],["result"]]],[11,"next","hyper::header","",130,[[["self"]],["option",["headerview"]]]],[11,"next","hyper::net","",133,[[["self"]],["option",["result"]]]],[11,"partial_cmp","hyper::header","",16,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["quality"]],["bool"]]],[11,"le","","",17,[[["self"],["quality"]],["bool"]]],[11,"gt","","",17,[[["self"],["quality"]],["bool"]]],[11,"ge","","",17,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"partial_cmp","hyper::status","",119,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"partial_cmp","","",120,[[["self"],["statusclass"]],["option",["ordering"]]]],[11,"partial_cmp","hyper::version","",122,[[["self"],["httpversion"]],["option",["ordering"]]]],[11,"default","hyper::client::pool","",3,[[],["config"]]],[11,"default","hyper::client","",9,[[],["client"]]],[11,"default","","",2,[[],["redirectpolicy"]]],[11,"default","hyper::header","",17,[[],["quality"]]],[11,"default","hyper::net","",134,[[],["httpconnector"]]],[11,"default","","",113,[[],["httpsconnector"]]],[11,"cmp","hyper::header","",16,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","","",17,[[["self"],["quality"]],["ordering"]]],[11,"cmp","hyper::status","",119,[[["self"],["statuscode"]],["ordering"]]],[11,"cmp","","",120,[[["self"],["statusclass"]],["ordering"]]],[11,"cmp","hyper::version","",122,[[["self"],["httpversion"]],["ordering"]]],[11,"eq","hyper::method","",14,[[["self"],["method"]],["bool"]]],[11,"ne","","",14,[[["self"],["method"]],["bool"]]],[11,"eq","hyper::header","",19,[[["self"],["accept"]],["bool"]]],[11,"ne","","",19,[[["self"],["accept"]],["bool"]]],[11,"eq","","",129,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",20,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",20,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",21,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",21,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",66,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",66,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",22,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",22,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",23,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",23,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",24,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",24,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",25,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",25,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","","",26,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",26,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",27,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",27,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",28,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",28,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",29,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",29,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",67,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",67,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",30,[[["self"],["allow"]],["bool"]]],[11,"ne","","",30,[[["self"],["allow"]],["bool"]]],[11,"eq","","",31,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",31,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",32,[[["self"],["basic"]],["bool"]]],[11,"ne","","",32,[[["self"],["basic"]],["bool"]]],[11,"eq","","",33,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",33,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",34,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",34,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",68,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",68,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",42,[[["self"],["cookie"]],["bool"]]],[11,"ne","","",42,[[["self"],["cookie"]],["bool"]]],[11,"eq","","",69,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",69,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",35,[[["self"],["connection"]],["bool"]]],[11,"ne","","",35,[[["self"],["connection"]],["bool"]]],[11,"eq","","",70,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",70,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",71,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",71,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",36,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",36,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",38,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",38,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",39,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",39,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",37,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",37,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",40,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",40,[[["self"],["contentrange"]],["bool"]]],[11,"eq","","",72,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",72,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",41,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",41,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",43,[[["self"],["date"]],["bool"]]],[11,"ne","","",43,[[["self"],["date"]],["bool"]]],[11,"eq","","",44,[[["self"],["etag"]],["bool"]]],[11,"ne","","",44,[[["self"],["etag"]],["bool"]]],[11,"eq","","",73,[[["self"],["expect"]],["bool"]]],[11,"eq","","",45,[[["self"],["expires"]],["bool"]]],[11,"ne","","",45,[[["self"],["expires"]],["bool"]]],[11,"eq","","",46,[[["self"],["from"]],["bool"]]],[11,"ne","","",46,[[["self"],["from"]],["bool"]]],[11,"eq","","",47,[[["self"],["host"]],["bool"]]],[11,"ne","","",47,[[["self"],["host"]],["bool"]]],[11,"eq","","",74,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",74,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",48,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",48,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",75,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifnonematch"]],["bool"]]],[11,"eq","","",76,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",76,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",49,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",49,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"eq","","",50,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",50,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",51,[[["self"],["location"]],["bool"]]],[11,"ne","","",51,[[["self"],["location"]],["bool"]]],[11,"eq","","",52,[[["self"],["origin"]],["bool"]]],[11,"eq","","",77,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",77,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",53,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",53,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",78,[[["self"],["preference"]],["bool"]]],[11,"ne","","",78,[[["self"],["preference"]],["bool"]]],[11,"eq","","",54,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",54,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","","",79,[[["self"],["range"]],["bool"]]],[11,"ne","","",79,[[["self"],["range"]],["bool"]]],[11,"eq","","",80,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",80,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",55,[[["self"],["referer"]],["bool"]]],[11,"ne","","",55,[[["self"],["referer"]],["bool"]]],[11,"eq","","",81,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",56,[[["self"],["server"]],["bool"]]],[11,"ne","","",56,[[["self"],["server"]],["bool"]]],[11,"eq","","",57,[[["self"],["setcookie"]],["bool"]]],[11,"ne","","",57,[[["self"],["setcookie"]],["bool"]]],[11,"eq","","",58,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",58,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",59,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",59,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",60,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",60,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",82,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",82,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",61,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",61,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",62,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",62,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",83,[[["self"],["vary"]],["bool"]]],[11,"ne","","",83,[[["self"],["vary"]],["bool"]]],[11,"eq","","",86,[[["self"],["link"]],["bool"]]],[11,"ne","","",86,[[["self"],["link"]],["bool"]]],[11,"eq","","",87,[[["self"],["linkvalue"]],["bool"]]],[11,"ne","","",87,[[["self"],["linkvalue"]],["bool"]]],[11,"eq","","",85,[[["self"],["mediadesc"]],["bool"]]],[11,"ne","","",85,[[["self"],["mediadesc"]],["bool"]]],[11,"eq","","",84,[[["self"],["relationtype"]],["bool"]]],[11,"ne","","",84,[[["self"],["relationtype"]],["bool"]]],[11,"eq","","",64,[[["self"],["charset"]],["bool"]]],[11,"ne","","",64,[[["self"],["charset"]],["bool"]]],[11,"eq","","",65,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",65,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",15,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",15,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",16,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",17,[[["self"],["quality"]],["bool"]]],[11,"ne","","",17,[[["self"],["quality"]],["bool"]]],[11,"eq","","",18,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",18,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","hyper::header::parsing","",88,[[["self"],["extendedvalue"]],["bool"]]],[11,"ne","","",88,[[["self"],["extendedvalue"]],["bool"]]],[11,"eq","hyper::header","",92,[[["self"],["headers"]],["bool"]]],[11,"eq","hyper::http","",94,[[["self"],["rawstatus"]],["bool"]]],[11,"ne","","",94,[[["self"],["rawstatus"]],["bool"]]],[11,"eq","hyper::status","",119,[[["self"],["statuscode"]],["bool"]]],[11,"eq","","",120,[[["self"],["statusclass"]],["bool"]]],[11,"eq","hyper::uri","",121,[[["self"],["requesturi"]],["bool"]]],[11,"ne","","",121,[[["self"],["requesturi"]],["bool"]]],[11,"eq","hyper::version","",122,[[["self"],["httpversion"]],["bool"]]],[11,"from","hyper::client","",1,[[["r"]],["body"]]],[11,"from","hyper::error","",13,[[["ioerror"]],["error"]]],[11,"from","","",13,[[["parseerror"]],["error"]]],[11,"from","","",13,[[["utf8error"]],["error"]]],[11,"from","","",13,[[["fromutf8error"]],["error"]]],[11,"from","","",13,[[["error"]],["error"]]],[11,"from","hyper::net","",111,[[["tcplistener"]],["httplistener"]]],[11,"as_ref","hyper::method","",14,[[["self"]],["str"]]],[11,"as_ref","hyper::version","",122,[[["self"]],["str"]]],[11,"clone","hyper::client","",2,[[["self"]],["redirectpolicy"]]],[11,"clone","hyper::method","",14,[[["self"]],["method"]]],[11,"clone","hyper::header","",19,[[["self"]],["accept"]]],[11,"clone","","",129,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","","",20,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",21,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","","",66,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",22,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",23,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",24,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","","",25,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",26,[[["self"]],["acceptcharset"]]],[11,"clone","","",27,[[["self"]],["acceptencoding"]]],[11,"clone","","",28,[[["self"]],["acceptlanguage"]]],[11,"clone","","",29,[[["self"]],["acceptranges"]]],[11,"clone","","",67,[[["self"]],["rangeunit"]]],[11,"clone","","",30,[[["self"]],["allow"]]],[11,"clone","","",31,[[["self"]],["authorization"]]],[11,"clone","","",32,[[["self"]],["basic"]]],[11,"clone","","",33,[[["self"]],["bearer"]]],[11,"clone","","",34,[[["self"]],["cachecontrol"]]],[11,"clone","","",68,[[["self"]],["cachedirective"]]],[11,"clone","","",42,[[["self"]],["cookie"]]],[11,"clone","","",69,[[["self"]],["connectionoption"]]],[11,"clone","","",35,[[["self"]],["connection"]]],[11,"clone","","",70,[[["self"]],["dispositiontype"]]],[11,"clone","","",71,[[["self"]],["dispositionparam"]]],[11,"clone","","",36,[[["self"]],["contentdisposition"]]],[11,"clone","","",38,[[["self"]],["contentencoding"]]],[11,"clone","","",39,[[["self"]],["contentlanguage"]]],[11,"clone","","",37,[[["self"]],["contentlength"]]],[11,"clone","","",40,[[["self"]],["contentrange"]]],[11,"clone","","",72,[[["self"]],["contentrangespec"]]],[11,"clone","","",41,[[["self"]],["contenttype"]]],[11,"clone","","",43,[[["self"]],["date"]]],[11,"clone","","",44,[[["self"]],["etag"]]],[11,"clone","","",73,[[["self"]],["expect"]]],[11,"clone","","",45,[[["self"]],["expires"]]],[11,"clone","","",46,[[["self"]],["from"]]],[11,"clone","","",47,[[["self"]],["host"]]],[11,"clone","","",74,[[["self"]],["ifmatch"]]],[11,"clone","","",48,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",75,[[["self"]],["ifnonematch"]]],[11,"clone","","",76,[[["self"]],["ifrange"]]],[11,"clone","","",49,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",50,[[["self"]],["lastmodified"]]],[11,"clone","","",51,[[["self"]],["location"]]],[11,"clone","","",52,[[["self"]],["origin"]]],[11,"clone","","",77,[[["self"]],["pragma"]]],[11,"clone","","",53,[[["self"]],["prefer"]]],[11,"clone","","",78,[[["self"]],["preference"]]],[11,"clone","","",54,[[["self"]],["preferenceapplied"]]],[11,"clone","","",79,[[["self"]],["range"]]],[11,"clone","","",80,[[["self"]],["byterangespec"]]],[11,"clone","","",55,[[["self"]],["referer"]]],[11,"clone","","",81,[[["self"]],["referrerpolicy"]]],[11,"clone","","",56,[[["self"]],["server"]]],[11,"clone","","",57,[[["self"]],["setcookie"]]],[11,"clone","","",58,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",59,[[["self"]],["transferencoding"]]],[11,"clone","","",60,[[["self"]],["upgrade"]]],[11,"clone","","",82,[[["self"]],["protocolname"]]],[11,"clone","","",61,[[["self"]],["protocol"]]],[11,"clone","","",62,[[["self"]],["useragent"]]],[11,"clone","","",83,[[["self"]],["vary"]]],[11,"clone","","",86,[[["self"]],["link"]]],[11,"clone","","",87,[[["self"]],["linkvalue"]]],[11,"clone","","",85,[[["self"]],["mediadesc"]]],[11,"clone","","",84,[[["self"]],["relationtype"]]],[11,"clone","","",64,[[["self"]],["charset"]]],[11,"clone","","",65,[[["self"]],["encoding"]]],[11,"clone","","",15,[[["self"]],["entitytag"]]],[11,"clone","","",16,[[["self"]],["httpdate"]]],[11,"clone","","",17,[[["self"]],["quality"]]],[11,"clone","","",18,[[["self"]],["qualityitem"]]],[11,"clone","hyper::header::parsing","",88,[[["self"]],["extendedvalue"]]],[11,"clone","","",131,[[["self"]],["http_value"]]],[11,"clone","hyper::header","",92,[[["self"]],["headers"]]],[11,"clone","hyper::http::message","",100,[[["self"]],["requesthead"]]],[11,"clone","","",101,[[["self"]],["responsehead"]]],[11,"clone","hyper::http","",94,[[["self"]],["rawstatus"]]],[11,"clone","hyper::net","",111,[[["self"]],["httplistener"]]],[11,"clone","","",104,[[["self"]],["httpstream"]]],[11,"clone","","",134,[[["self"]],["httpconnector"]]],[11,"clone","","",105,[[["self"]],["httpsstream"]]],[11,"clone","","",112,[[["self"]],["httpslistener"]]],[11,"clone","hyper::status","",119,[[["self"]],["statuscode"]]],[11,"clone","","",120,[[["self"]],["statusclass"]]],[11,"clone","hyper::uri","",121,[[["self"]],["requesturi"]]],[11,"clone","hyper::version","",122,[[["self"]],["httpversion"]]],[11,"extend","hyper::header","",92,[[["self"],["i"]]]],[11,"drop","hyper::client::pool","",5,[[["self"]]]],[11,"drop","hyper::client::response","",7,[[["self"]]]],[11,"drop","hyper::server::response","",116,[[["self"]]]],[11,"drop","hyper::server","",114,[[["self"]]]],[11,"deref_mut","hyper::header","",19,[[["self"]],["vec"]]],[11,"deref_mut","","",20,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["vec"]]],[11,"deref_mut","","",23,[[["self"]],["u32"]]],[11,"deref_mut","","",24,[[["self"]],["vec"]]],[11,"deref_mut","","",25,[[["self"]],["method"]]],[11,"deref_mut","","",26,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",29,[[["self"]],["vec"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"deref_mut","","",31,[[["self"]],["s"]]],[11,"deref_mut","","",34,[[["self"]],["vec"]]],[11,"deref_mut","","",42,[[["self"]],["vec"]]],[11,"deref_mut","","",35,[[["self"]],["vec"]]],[11,"deref_mut","","",38,[[["self"]],["vec"]]],[11,"deref_mut","","",39,[[["self"]],["vec"]]],[11,"deref_mut","","",37,[[["self"]],["u64"]]],[11,"deref_mut","","",40,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",41,[[["self"]],["mime"]]],[11,"deref_mut","","",43,[[["self"]],["httpdate"]]],[11,"deref_mut","","",44,[[["self"]],["entitytag"]]],[11,"deref_mut","","",45,[[["self"]],["httpdate"]]],[11,"deref_mut","","",46,[[["self"]],["string"]]],[11,"deref_mut","","",48,[[["self"]],["httpdate"]]],[11,"deref_mut","","",49,[[["self"]],["httpdate"]]],[11,"deref_mut","","",50,[[["self"]],["httpdate"]]],[11,"deref_mut","","",51,[[["self"]],["string"]]],[11,"deref_mut","","",53,[[["self"]],["vec"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",55,[[["self"]],["string"]]],[11,"deref_mut","","",56,[[["self"]],["string"]]],[11,"deref_mut","","",57,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",60,[[["self"]],["vec"]]],[11,"deref_mut","","",62,[[["self"]],["string"]]],[11,"deref","","",19,[[["self"]],["vec"]]],[11,"deref","","",20,[[["self"]],["vec"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref","","",22,[[["self"]],["vec"]]],[11,"deref","","",23,[[["self"]],["u32"]]],[11,"deref","","",24,[[["self"]],["vec"]]],[11,"deref","","",25,[[["self"]],["method"]]],[11,"deref","","",26,[[["self"]],["vec"]]],[11,"deref","","",27,[[["self"]],["vec"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref","","",29,[[["self"]],["vec"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref","","",31,[[["self"]],["s"]]],[11,"deref","","",34,[[["self"]],["vec"]]],[11,"deref","","",42,[[["self"]],["vec"]]],[11,"deref","","",35,[[["self"]],["vec"]]],[11,"deref","","",38,[[["self"]],["vec"]]],[11,"deref","","",39,[[["self"]],["vec"]]],[11,"deref","","",37,[[["self"]],["u64"]]],[11,"deref","","",40,[[["self"]],["contentrangespec"]]],[11,"deref","","",41,[[["self"]],["mime"]]],[11,"deref","","",43,[[["self"]],["httpdate"]]],[11,"deref","","",44,[[["self"]],["entitytag"]]],[11,"deref","","",45,[[["self"]],["httpdate"]]],[11,"deref","","",46,[[["self"]],["string"]]],[11,"deref","","",48,[[["self"]],["httpdate"]]],[11,"deref","","",49,[[["self"]],["httpdate"]]],[11,"deref","","",50,[[["self"]],["httpdate"]]],[11,"deref","","",51,[[["self"]],["string"]]],[11,"deref","","",53,[[["self"]],["vec"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref","","",55,[[["self"]],["string"]]],[11,"deref","","",56,[[["self"]],["string"]]],[11,"deref","","",57,[[["self"]],["vec"]]],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref","","",60,[[["self"]],["vec"]]],[11,"deref","","",62,[[["self"]],["string"]]],[11,"fmt","hyper::client::pool","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::client::response","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::client","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::error","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::method","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header::parsing","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http::h1","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http::message","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::http","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::net","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server::response","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::server","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::status","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::uri","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::version","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::error","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::method","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header::parsing","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::header","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::status","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::uri","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","hyper::version","",122,[[["self"],["formatter"]],["result"]]],[11,"hash","hyper::method","",14,N],[11,"hash","hyper::status","",119,N],[11,"hash","hyper::version","",122,N],[11,"from_iter","hyper::header","",92,[[["i"]],["headers"]]],[11,"from_str","hyper::method","",14,[[["str"]],["result",["method","error"]]]],[11,"from_str","hyper::header","",67,[[["str"]],["result"]]],[11,"from_str","","",32,[[["str"]],["result",["basic"]]]],[11,"from_str","","",33,[[["str"]],["result",["bearer"]]]],[11,"from_str","","",68,[[["str"]],["result",["cachedirective","option"]]]],[11,"from_str","","",69,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",72,[[["str"]],["result"]]],[11,"from_str","","",47,[[["str"]],["result",["host"]]]],[11,"from_str","","",52,[[["str"]],["result",["origin"]]]],[11,"from_str","","",78,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",79,[[["str"]],["result",["range"]]]],[11,"from_str","","",80,[[["str"]],["result",["byterangespec"]]]],[11,"from_str","","",58,[[["str"]],["result",["stricttransportsecurity"]]]],[11,"from_str","","",82,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",61,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",86,[[["str"]],["result",["link"]]]],[11,"from_str","","",85,[[["str"]],["result",["mediadesc"]]]],[11,"from_str","","",84,[[["str"]],["result",["relationtype"]]]],[11,"from_str","","",64,[[["str"]],["result",["charset"]]]],[11,"from_str","","",65,[[["str"]],["result",["encoding"]]]],[11,"from_str","","",15,[[["str"]],["result",["entitytag"]]]],[11,"from_str","","",16,[[["str"]],["result",["httpdate"]]]],[11,"from_str","","",18,[[["str"]],["result",["qualityitem"]]]],[11,"from_str","hyper::uri","",121,[[["str"]],["result",["requesturi","error"]]]],[11,"from_str","hyper::version","",122,[[["str"]],["result"]]],[11,"read","hyper::client::pool","",5,N],[11,"read","hyper::client::response","",7,N],[11,"read","hyper::client","",1,N],[11,"read","hyper::http::h1","",98,N],[11,"read","","",96,N],[11,"read","hyper::net","",104,N],[11,"read","","",105,N],[11,"read","hyper::server::request","",115,N],[11,"write","hyper::client::pool","",5,N],[11,"flush","","",5,[[["self"]],["result"]]],[11,"write","hyper::client::request","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"write","hyper::http::h1","",98,N],[11,"flush","","",98,[[["self"]],["result"]]],[11,"write","","",97,N],[11,"flush","","",97,[[["self"]],["result"]]],[11,"write","hyper::net","",104,N],[11,"flush","","",104,[[["self"]],["result"]]],[11,"write","","",105,N],[11,"flush","","",105,[[["self"]],["result"]]],[11,"write","hyper::server::response","",116,N],[11,"flush","","",116,[[["self"]],["result"]]],[11,"description","hyper::error","",13,[[["self"]],["str"]]],[11,"cause","","",13,[[["self"]],["option",["stderror"]]]],[11,"from_raw_fd","hyper::net","",111,[[["rawfd"]],["httplistener"]]],[11,"from_raw_fd","","",104,[[["rawfd"]],["httpstream"]]],[11,"as_raw_fd","","",111,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",104,[[["self"]],["rawfd"]]],[11,"contains","hyper::header::parsing","",131,[[["self"],["u8"]],["bool"]]],[11,"parse","hyper","Parse an absolute URL from a string.",128,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",128,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",128,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",128,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",128,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",128,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",128,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",128,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",128,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",128,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",128,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",128,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",128,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",128,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",128,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",128,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",128,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",128,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",128,[[["self"],["f"]],["result",["hostandport","error"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",128,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",128,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",128,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",128,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",128,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",128,N],[11,"set_query","","Change this URL’s query string.",128,N],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",128,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",128,N],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",128,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",128,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",128,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",128,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",128,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",128,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",128,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",128,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",128,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",128,[[["self"]],["result",["pathbuf"]]]],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[11,"get_param","hyper::mime","",123,[[["self"],["a"]],["option",["value"]]]],[11,"as_str","","",124,[[["self"]],["str"]]],[11,"as_str","","",125,[[["self"]],["str"]]],[11,"as_str","","",126,[[["self"]],["str"]]],[11,"as_str","","",127,[[["self"]],["str"]]]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"Link"],[3,"LinkValue"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"HttpListener"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Url"],[3,"AccessControlAllowCredentials"],[3,"HeadersItems"],[3,"HTTP_VALUE"],[3,"EndError"],[3,"NetworkConnections"],[3,"HttpConnector"],[4,"Fresh"],[4,"Streaming"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["indexmap"]={"doc":"[`IndexMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[0,"set","indexmap","A hash set implemented using `IndexMap`",N,N],[3,"IndexSet","indexmap::set","A hash set where the iteration order of the values is independent of their hash values.",N,N],[3,"IntoIter","","",N,N],[3,"Iter","","",N,N],[3,"Drain","","",N,N],[3,"Difference","","",N,N],[3,"Intersection","","",N,N],[3,"SymmetricDifference","","",N,N],[3,"Union","","",N,N],[11,"new","","Create a new set. (Does not allocate.)",0,[[],["self"]]],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",0,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of elements in the set.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new set with `hash_builder`",0,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the set's `BuildHasher`.",0,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",0,[[["self"]],["usize"]]],[11,"clear","","Remove all elements in the set, while preserving its capacity.",0,[[["self"]]]],[11,"reserve","","FIXME Not implemented fully yet",0,[[["self"],["usize"]]]],[11,"insert","","Insert the value into the set.",0,[[["self"],["t"]],["bool"]]],[11,"insert_full","","Insert the value into the set, and get its index.",0,N],[11,"iter","","Return an iterator over the values of the set, in their order",0,[[["self"]],["iter"]]],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",0,[[["self"],["indexset"]],["difference"]]],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",0,[[["self"],["indexset"]],["symmetricdifference"]]],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",0,[[["self"],["indexset"]],["intersection"]]],[11,"union","","Return an iterator over all values that are in `self` or `other`.",0,[[["self"],["indexset"]],["union"]]],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",0,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",0,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index and value",0,[[["self"],["q"]],["option"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",0,[[["self"],["t"]],["option"]]],[11,"remove","","FIXME Same as .swap_remove",0,[[["self"],["q"]],["bool"]]],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",0,[[["self"],["q"]],["bool"]]],[11,"take","","FIXME Same as .swap_take",0,[[["self"],["q"]],["option"]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",0,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",0,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last value",0,[[["self"]],["option"]]],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",0,[[["self"],["f"]]]],[11,"sort","","Sort the set’s values by their default ordering.",0,[[["self"]]]],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",0,[[["self"],["f"]]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",0,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",0,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a value by index",0,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",0,[[["self"],["usize"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",0,[[["self"],["indexset"]],["bool"]]],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",0,[[["self"],["indexset"]],["bool"]]],[0,"map","indexmap","`IndexMap` is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"IndexMap","indexmap::map","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"OccupiedEntry","","",N,N],[3,"VacantEntry","","",N,N],[3,"Keys","","",N,N],[3,"Values","","",N,N],[3,"ValuesMut","","",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[3,"IntoIter","","",N,N],[3,"Drain","","",N,N],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",N,N],[13,"Occupied","","Existing slot with equivalent key.",1,N],[13,"Vacant","","Vacant slot (no equivalent key in the map).",1,N],[8,"MutableKeys","","Opt-in mutable access to keys.",N,N],[16,"Key","","",2,N],[16,"Value","","",2,N],[10,"get_full_mut2","","Return item index, mutable reference to key and value",2,[[["self"],["q"]],["option"]]],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",2,[[["self"],["f"]]]],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",2,[[["self"]],["privatemarker"]]],[11,"new","","Create a new map. (Does not allocate.)",3,[[],["self"]]],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",3,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",3,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of key-value pairs in the map.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",3,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new map with `hash_builder`",3,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the map's `BuildHasher`.",3,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",3,[[["self"]],["usize"]]],[11,"or_insert","","Computes in O(1) time (amortized average).",1,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Computes in O(1) time (amortized average).",1,[[["self"],["f"]],["v"]]],[11,"key","","",1,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair exists or will be inserted.",1,[[["self"]],["usize"]]],[11,"and_modify","","Modifies the entry if it is occupied.",1,[[["self"],["f"]],["self"]]],[11,"or_default","","Inserts a default-constructed value in the entry if it is vacant and returns a mutable reference to it. Otherwise a mutable reference to an already existent value is returned.",1,[[["self"]],["v"]]],[11,"key","","",4,[[["self"]],["k"]]],[11,"get","","",4,[[["self"]],["v"]]],[11,"get_mut","","",4,[[["self"]],["v"]]],[11,"index","","Return the index of the key-value pair",4,[[["self"]],["usize"]]],[11,"into_mut","","",4,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry to `value`, and returns the entry's old value.",4,[[["self"],["v"]],["v"]]],[11,"remove","","",4,[[["self"]],["v"]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",4,N],[11,"key","","",5,[[["self"]],["k"]]],[11,"into_key","","",5,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair will be inserted.",5,[[["self"]],["usize"]]],[11,"insert","","",5,[[["self"],["v"]],["v"]]],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",3,[[["self"]]]],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",3,[[["self"],["usize"]]]],[11,"insert","","Insert a key-value pair in the map.",3,[[["self"],["k"],["v"]],["option"]]],[11,"insert_full","","Insert a key-value pair in the map, and get their index.",3,N],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",3,[[["self"],["k"]],["entry"]]],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",3,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",3,[[["self"]],["itermut"]]],[11,"keys","","Return an iterator over the keys of the map, in their order",3,[[["self"]],["keys"]]],[11,"values","","Return an iterator over the values of the map, in their order",3,[[["self"]],["values"]]],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",3,[[["self"]],["valuesmut"]]],[11,"contains_key","","Return `true` if an equivalent to `key` exists in the map.",3,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",3,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index, key and value",3,[[["self"],["q"]],["option"]]],[11,"get_mut","","",3,[[["self"],["q"]],["option"]]],[11,"get_full_mut","","",3,[[["self"],["q"]],["option"]]],[11,"remove","","NOTE: Same as .swap_remove",3,[[["self"],["q"]],["option"]]],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",3,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",3,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last key-value pair",3,[[["self"]],["option"]]],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",3,[[["self"],["f"]]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",3,[[["self"]]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",3,[[["self"],["f"]]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",3,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `IndexMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",3,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a key-value pair by index",3,[[["self"],["usize"]],["option"]]],[11,"get_index_mut","","Get a key-value pair by index",3,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",3,[[["self"],["usize"]],["option"]]],[8,"Equivalent","indexmap","Key equivalence trait.",N,N],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",6,[[["self"],["k"]],["bool"]]],[14,"indexmap","","Create an `IndexMap` from a list of key-value pairs",N,N],[14,"indexset","","Create an `IndexSet` from a list of values",N,N],[11,"into","indexmap::set","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","indexmap::map","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_full_mut2","","",3,[[["self"],["q"]],["option"]]],[11,"retain2","","",3,[[["self"],["f"]]]],[11,"__private_marker","","",3,[[["self"]],["privatemarker"]]],[11,"next","indexmap::set","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"count","","",7,[[["self"]],["usize"]]],[11,"nth","","",7,[[["self"],["usize"]],["option"]]],[11,"last","","",7,[[["self"]],["option"]]],[11,"collect","","",7,[[["self"]],["c"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"count","","",8,[[["self"]],["usize"]]],[11,"nth","","",8,[[["self"],["usize"]],["option"]]],[11,"last","","",8,[[["self"]],["option"]]],[11,"collect","","",8,[[["self"]],["c"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"count","","",9,[[["self"]],["usize"]]],[11,"nth","","",9,[[["self"],["usize"]],["option"]]],[11,"last","","",9,[[["self"]],["option"]]],[11,"collect","","",9,[[["self"]],["c"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fold","","",12,[[["self"],["b"],["f"]],["b"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"fold","","",13,[[["self"],["b"],["f"]],["b"]]],[11,"next","indexmap::map","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"count","","",14,[[["self"]],["usize"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"last","","",14,[[["self"]],["option"]]],[11,"collect","","",14,[[["self"]],["c"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"count","","",15,[[["self"]],["usize"]]],[11,"nth","","",15,[[["self"],["usize"]],["option"]]],[11,"last","","",15,[[["self"]],["option"]]],[11,"collect","","",15,[[["self"]],["c"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"last","","",16,[[["self"]],["option"]]],[11,"collect","","",16,[[["self"]],["c"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"count","","",17,[[["self"]],["usize"]]],[11,"nth","","",17,[[["self"],["usize"]],["option"]]],[11,"last","","",17,[[["self"]],["option"]]],[11,"collect","","",17,[[["self"]],["c"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"count","","",18,[[["self"]],["usize"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"collect","","",18,[[["self"]],["c"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"nth","","",19,[[["self"],["usize"]],["option"]]],[11,"last","","",19,[[["self"]],["option"]]],[11,"collect","","",19,[[["self"]],["c"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"count","","",20,[[["self"]],["usize"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"last","","",20,[[["self"]],["option"]]],[11,"collect","","",20,[[["self"]],["c"]]],[11,"len","indexmap::set","",7,[[["self"]],["usize"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"len","indexmap::map","",14,[[["self"]],["usize"]]],[11,"len","","",15,[[["self"]],["usize"]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"len","","",17,[[["self"]],["usize"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"default","indexmap::set","Return an empty `IndexSet`",0,[[],["self"]]],[11,"default","indexmap::map","Return an empty `IndexMap`",3,[[],["self"]]],[11,"next_back","indexmap::set","",7,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"next_back","indexmap::map","",14,[[["self"]],["option"]]],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"next_back","","",16,[[["self"]],["option"]]],[11,"next_back","","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"eq","indexmap::set","",0,[[["self"],["indexset"]],["bool"]]],[11,"eq","indexmap::map","",3,[[["self"],["indexmap"]],["bool"]]],[11,"clone","indexmap::set","",0,[[["self"]],["indexset"]]],[11,"clone","indexmap::map","",3,[[["self"]],["indexmap"]]],[11,"into_iter","indexmap::set","",0,N],[11,"into_iter","indexmap::map","",3,N],[11,"extend","indexmap::set","",0,[[["self"],["i"]]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"extend","indexmap::map","Extend the map with all key-value pairs in the iterable.",3,[[["self"],["i"]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",3,[[["self"],["i"]]]],[11,"fmt","indexmap::set","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","indexmap::map","",3,[[["self"],["formatter"]],["result"]]],[11,"index","","Panics if `key` is not present in the map.",3,[[["self"],["q"]],["v"]]],[11,"index_mut","","Panics if `key` is not present in the map.",3,[[["self"],["q"]],["v"]]],[11,"from_iter","indexmap::set","",0,[[["i"]],["self"]]],[11,"from_iter","indexmap::map","Create an `IndexMap` from the sequence of key-value pairs in the iterable.",3,[[["i"]],["self"]]]],"paths":[[3,"IndexSet"],[4,"Entry"],[8,"MutableKeys"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Equivalent"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["inotify"]={"doc":"Idiomatic inotify wrapper for the Rust programming language","items":[[3,"Event","inotify","An inotify event",N,N],[12,"wd","","Identifies the watch this event originates from",0,N],[12,"mask","","Indicates what kind of event this is",0,N],[12,"cookie","","Connects related events to each other",0,N],[12,"name","","The name of the file the event originates from",0,N],[3,"EventMask","","Indicates the type of an event",N,N],[3,"Events","","Iterator over inotify events",N,N],[3,"Inotify","","Idiomatic Rust wrapper around Linux's inotify API",N,N],[3,"WatchDescriptor","","Represents a watch on an inode",N,N],[3,"WatchMask","","Describes a file system watch",N,N],[3,"EventStream","","Stream of inotify events",N,N],[18,"ACCESS","","File was accessed",1,N],[18,"ATTRIB","","Metadata (permissions, timestamps, ...) changed",1,N],[18,"CLOSE_WRITE","","File opened for writing was closed",1,N],[18,"CLOSE_NOWRITE","","File or directory not opened for writing was closed",1,N],[18,"CREATE","","File/directory created in watched directory",1,N],[18,"DELETE","","File/directory deleted from watched directory",1,N],[18,"DELETE_SELF","","Watched file/directory was deleted",1,N],[18,"MODIFY","","File was modified",1,N],[18,"MOVE_SELF","","Watched file/directory was moved",1,N],[18,"MOVED_FROM","","File was renamed/moved; watched directory contained old name",1,N],[18,"MOVED_TO","","File was renamed/moved; watched directory contains new name",1,N],[18,"OPEN","","File or directory was opened",1,N],[18,"IGNORED","","Watch was removed",1,N],[18,"ISDIR","","Event related to a directory",1,N],[18,"Q_OVERFLOW","","Event queue overflowed",1,N],[18,"UNMOUNT","","File system containing watched object was unmounted. File system was unmounted",1,N],[11,"empty","","Returns an empty set of flags.",1,[[],["eventmask"]]],[11,"all","","Returns the set containing all flags.",1,[[],["eventmask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",1,[[["u32"]],["option",["eventmask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",1,[[["u32"]],["eventmask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",1,[[["self"],["eventmask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",1,[[["self"],["eventmask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["self"],["eventmask"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["self"],["eventmask"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["self"],["eventmask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",1,[[["self"],["eventmask"],["bool"]]]],[11,"init","","Creates an [`Inotify`] instance",2,[[],["result",["inotify"]]]],[11,"add_watch","","Adds or updates a watch for the given path",2,[[["self"],["p"],["watchmask"]],["result",["watchdescriptor"]]]],[11,"rm_watch","","Stops watching a file",2,[[["self"],["watchdescriptor"]],["result"]]],[11,"read_events_blocking","","Waits until events are available, then returns them",2,N],[11,"read_events","","Returns any available events",2,N],[11,"event_stream","","Create a stream which collects events",2,N],[11,"event_stream_with_handle","","Create a stream which collects events, associated with the given reactor.",2,N],[11,"close","","Closes the inotify instance",2,[[["self"]],["result"]]],[18,"ACCESS","","File was accessed",3,N],[18,"ATTRIB","","Metadata (permissions, timestamps, ...) changed",3,N],[18,"CLOSE_WRITE","","File opened for writing was closed",3,N],[18,"CLOSE_NOWRITE","","File or directory not opened for writing was closed",3,N],[18,"CREATE","","File/directory created in watched directory",3,N],[18,"DELETE","","File/directory deleted from watched directory",3,N],[18,"DELETE_SELF","","Watched file/directory was deleted",3,N],[18,"MODIFY","","File was modified",3,N],[18,"MOVE_SELF","","Watched file/directory was moved",3,N],[18,"MOVED_FROM","","File was renamed/moved; watched directory contained old name",3,N],[18,"MOVED_TO","","File was renamed/moved; watched directory contains new name",3,N],[18,"OPEN","","File or directory was opened",3,N],[18,"ALL_EVENTS","","Watch for all events",3,N],[18,"MOVE","","Watch for all move events",3,N],[18,"CLOSE","","Watch for all close events",3,N],[18,"DONT_FOLLOW","","Don't dereference the path if it is a symbolic link",3,N],[18,"EXCL_UNLINK","","Filter events for directory entries that have been unlinked",3,N],[18,"MASK_ADD","","If a watch for the inode exists, amend it instead of replacing it",3,N],[18,"ONESHOT","","Only receive one event, then remove the watch",3,N],[18,"ONLYDIR","","Only watch path, if it is a directory",3,N],[11,"empty","","Returns an empty set of flags.",3,[[],["watchmask"]]],[11,"all","","Returns the set containing all flags.",3,[[],["watchmask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",3,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",3,[[["u32"]],["option",["watchmask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",3,[[["u32"]],["watchmask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",3,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,[[["self"],["watchmask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,[[["self"],["watchmask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",3,[[["self"],["watchmask"]]]],[11,"remove","","Removes the specified flags in-place.",3,[[["self"],["watchmask"]]]],[11,"toggle","","Toggles the specified flags in-place.",3,[[["self"],["watchmask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",3,[[["self"],["watchmask"],["bool"]]]],[6,"EventOwned","","An owned version of `Event`",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"partial_cmp","","",1,[[["self"],["eventmask"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"le","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"gt","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"ge","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["watchmask"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"le","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"gt","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"ge","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"cmp","","",1,[[["self"],["eventmask"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["watchmask"]],["ordering"]]],[11,"eq","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"ne","","",1,[[["self"],["eventmask"]],["bool"]]],[11,"eq","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"ne","","",3,[[["self"],["watchmask"]],["bool"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"clone","","",0,[[["self"]],["event"]]],[11,"clone","","",1,[[["self"]],["eventmask"]]],[11,"clone","","",3,[[["self"]],["watchmask"]]],[11,"clone","","",5,[[["self"]],["watchdescriptor"]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"extend","","",3,[[["self"],["t"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",1,[[["self"],["eventmask"]],["eventmask"]]],[11,"sub","","Returns the set difference of the two sets of flags.",3,[[["self"],["watchmask"]],["watchmask"]]],[11,"sub_assign","","Disables all flags enabled in the set.",1,[[["self"],["eventmask"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",3,[[["self"],["watchmask"]]]],[11,"not","","Returns the complement of this set of flags.",1,[[["self"]],["eventmask"]]],[11,"not","","Returns the complement of this set of flags.",3,[[["self"]],["watchmask"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",1,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",3,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitor","","Returns the union of the two sets of flags.",1,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitor","","Returns the union of the two sets of flags.",3,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",1,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",1,[[["self"],["eventmask"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",3,[[["self"],["watchmask"]]]],[11,"bitor_assign","","Adds the set of flags.",1,[[["self"],["eventmask"]]]],[11,"bitor_assign","","Adds the set of flags.",3,[[["self"],["watchmask"]]]],[11,"bitxor_assign","","Toggles the set of flags.",1,[[["self"],["eventmask"]]]],[11,"bitxor_assign","","Toggles the set of flags.",3,[[["self"],["watchmask"]]]],[11,"hash","","",1,N],[11,"hash","","",3,N],[11,"hash","","",5,[[["self"],["h"]]]],[11,"from_iter","","",1,[[["t"]],["eventmask"]]],[11,"from_iter","","",3,[[["t"]],["watchmask"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_raw_fd","","",2,[[["rawfd"]],["self"]]],[11,"as_raw_fd","","",2,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",2,[[["self"]],["rawfd"]]],[11,"poll","","",6,[[["self"]],["poll",["option"]]]]],"paths":[[3,"Event"],[3,"EventMask"],[3,"Inotify"],[3,"WatchMask"],[3,"Events"],[3,"WatchDescriptor"],[3,"EventStream"]]};
searchIndex["inotify_sys"]={"doc":"inotify bindings for the Rust programming language","items":[[5,"close","inotify_sys","",N,[[["i32"]],["i32"]]],[5,"read","","",N,N],[3,"inotify_event","","Describes a file system event",N,N],[12,"wd","","Identifies the watch for which this event occurs",0,N],[12,"mask","","Describes the type file system event",0,N],[12,"cookie","","A number that connects related events",0,N],[12,"len","","The length of `name`",0,N],[5,"inotify_init","","Creates an inotify instance",N,N],[5,"inotify_init1","","Creates an inotify instance",N,N],[5,"inotify_add_watch","","Adds or updates an inotify watch",N,N],[5,"inotify_rm_watch","","Removes an inotify watch",N,N],[17,"IN_CLOEXEC","","Set the `FD_CLOEXEC` flag for an inotify instance",N,N],[17,"IN_NONBLOCK","","Set an inotify instance to non-blocking mode",N,N],[17,"IN_ACCESS","","Event: File was accessed",N,N],[17,"IN_MODIFY","","Event: File was modified",N,N],[17,"IN_ATTRIB","","Event: Metadata was changed",N,N],[17,"IN_CLOSE_WRITE","","Event: Writable file was closed",N,N],[17,"IN_CLOSE_NOWRITE","","Event: Non-writable file or directory was closed",N,N],[17,"IN_OPEN","","Event: File or directory was opened",N,N],[17,"IN_MOVED_FROM","","Event: File or directory was moved out of watched directory",N,N],[17,"IN_MOVED_TO","","Event: File or directory was moved into watched directory",N,N],[17,"IN_CREATE","","Event: File or directory was created in watched directory",N,N],[17,"IN_DELETE","","Event: File or directory in watched directory was deleted",N,N],[17,"IN_DELETE_SELF","","Event: Watched file or directory was deleted",N,N],[17,"IN_MOVE_SELF","","Event: Watched file or directory was moved",N,N],[17,"IN_MOVE","","Event: File or directory within watched directory was moved",N,N],[17,"IN_CLOSE","","Event: File was closed",N,N],[17,"IN_ALL_EVENTS","","Event: Any event occured",N,N],[17,"IN_ONLYDIR","","Only watch path, if it is a directory",N,N],[17,"IN_DONT_FOLLOW","","Don't dereference path, if it is a symbolic link",N,N],[17,"IN_EXCL_UNLINK","","Ignore events for children, that have been unlinked from watched directory",N,N],[17,"IN_MASK_ADD","","Update existing watch mask, instead of replacing it",N,N],[17,"IN_ONESHOT","","Remove watch after one event",N,N],[17,"IN_ISDIR","","Indicates that the subject of an event is a directory",N,N],[17,"IN_UNMOUNT","","Indicates that file system containing a watched object has been unmounted",N,N],[17,"IN_Q_OVERFLOW","","Indicates that the event queue has overflowed",N,N],[17,"IN_IGNORED","","Indicates that a file system watch was removed",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["inotify_event"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"inotify_event"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,N],[11,"deref","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["isatty"]={"doc":"This crate provides the following three functions:","items":[[5,"stdin_isatty","isatty","",N,[[],["bool"]]],[5,"stdout_isatty","","",N,[[],["bool"]]],[5,"stderr_isatty","","",N,[[],["bool"]]]],"paths":[]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"default","","",0,[[],["buffer"]]],[11,"clone","","",0,[[["self"]],["self"]]]],"paths":[[3,"Buffer"]]};
searchIndex["language_tags"]={"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",N,N],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,N],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,N],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,N],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,N],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,N],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,N],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,N],[4,"Error","","Defines an Error type for langtags.",N,N],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,N],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,N],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,N],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,N],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,N],[13,"InvalidLanguage","","The given language subtag is invalid.",1,N],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,N],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,N],[6,"Result","","Result type used for this library.",N,N],[17,"GRANDFATHERED","","Contains all grandfathered tags.",N,N],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,[[["self"],["languagetag"]],["bool"]]],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,[[["self"]],["bool"]]],[11,"canonicalize","","Returns the canonical version of the language tag.",0,[[["self"]],["languagetag"]]],[14,"langtag","","Utility for creating simple language tags.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"default","","",0,[[],["languagetag"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"eq","","",0,[[["self"],["languagetag"]],["bool"]]],[11,"clone","","",0,[[["self"]],["languagetag"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazycell"]={"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with mutable contents.",N,N],[3,"AtomicLazyCell","","A lazily filled and thread-safe `Cell`, with frozen contents.",N,N],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell"]]],[11,"fill","","Put a value into this cell.",0,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",0,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"borrow_mut_with","","Borrows the contents of this `LazyCell` mutably for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"try_borrow_mut_with","","Same as `borrow_mut_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[["self"]],["option"]]],[18,"NONE","","An empty `AtomicLazyCell`.",1,N],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell"]]],[11,"fill","","Put a value into this cell.",1,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",1,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,[[["self"]],["option"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[["self"]],["option"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["lazycell"]]],[11,"default","","",1,[[],["atomiclazycell"]]]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",116,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",117,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",118,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",119,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",120,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",121,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",123,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",124,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",125,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",126,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",127,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",128,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",129,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",130,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"fd_set"],[3,"in6_rtmsg"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"sem_t"],[3,"sigset_t"],[3,"pthread_attr_t"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"],[4,"DIR"],[4,"locale_t"],[4,"timezone"],[4,"fpos64_t"]]};
searchIndex["lock_api"]={"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",N,N],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",N,N],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],["option",["mutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",1,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",2,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[["self"]]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[["self"]],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],["option",["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",4,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",5,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[["self"]]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[["self"]],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],["option",["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,[[["self"]],["option",["rwlockupgradablereadguard"]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",7,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",8,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,[[["self"]],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,[[["self"]],["result",["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,[[["self"]],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",10,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[["self"]]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",11,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,[[["self"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[["self"]]]],[8,"RawMutex","","Basic operations for a mutex.",N,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,N],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",N,N],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",14,N],[16,"Instant","","Instant type used for `try_lock_until`.",14,N],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,N],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,N],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",N,N],[18,"INIT","","Initial value.",15,N],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,[[["self"]],["usize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",N,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,N],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",N,N],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",N,N],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",19,N],[16,"Instant","","Instant type used for `try_lock_until`.",19,N],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",N,N],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",N,N],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",N,N],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",N,N],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",N,N],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",N,N],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref","","",9,[[["self"]],["t"]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"drop","","",8,[[["self"]]]],[11,"drop","","",9,[[["self"]]]],[11,"drop","","",10,[[["self"]]]],[11,"drop","","",11,[[["self"]]]],[11,"default","","",0,[[],["mutex"]]],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"default","","",6,[[],["rwlock"]]],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[18,"INIT","","Initial value.",15,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"],[3,"GuardSend"],[3,"GuardNoSend"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",N,N],[3,"LogMetadata","","Metadata about a log message.",N,N],[3,"LogLocation","","The location of a log message.",N,N],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",N,N],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",N,N],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",N,N],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"max_log_level","","Returns the current maximum log level.",N,[[],["loglevelfilter"]]],[5,"set_logger","","Sets the global logger.",N,[[["m"]],["result",["setloggererror"]]]],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",N,[[["m"]],["result",["setloggererror"]]]],[5,"shutdown_logger","","Shuts down the global logger.",N,[[],["result",["box","shutdownloggererror"]]]],[5,"shutdown_logger_raw","","Shuts down the global logger.",N,[[],["result",["shutdownloggererror"]]]],[8,"Log","","A trait encapsulating the operations required of a logger",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["logmetadata"]],["bool"]]],[10,"log","","Logs the `LogRecord`.",2,[[["self"],["logrecord"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["loglevel"]]],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,[[["self"]],["loglevelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["loglevelfilter"]]],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,[[["self"]],["option",["loglevel"]]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["logmetadata"]]],[11,"location","","The location of the log directive.",3,[[["self"]],["loglocation"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"level","","The verbosity level of the message.",4,[[["self"]],["loglevel"]]],[11,"target","","The name of the target of the directive.",4,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",5,[[["self"]],["str"]]],[11,"file","","The source file containing the message.",5,[[["self"]],["str"]]],[11,"line","","The line containing the message.",5,[[["self"]],["u32"]]],[11,"get","","Gets the current maximum log level filter.",6,[[["self"]],["loglevelfilter"]]],[11,"set","","Sets the maximum log level.",6,[[["self"],["loglevelfilter"]]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"partial_cmp","","",0,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevelfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["loglevel"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["loglevelfilter"]],["ordering"]]],[11,"eq","","",0,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",0,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["loglevel"]],["bool"]]],[11,"clone","","",0,[[["self"]],["loglevel"]]],[11,"clone","","",1,[[["self"]],["loglevelfilter"]]],[11,"clone","","",5,[[["self"]],["loglocation"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["loglevel"]]]],[11,"from_str","","",1,[[["str"]],["result",["loglevelfilter"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for searching bytes.","items":[[3,"Memchr","memchr","An iterator for `memchr`.",N,N],[3,"Memchr2","","An iterator for `memchr2`.",N,N],[3,"Memchr3","","An iterator for `memchr3`.",N,N],[5,"memchr_iter","","An iterator over all occurrences of the needle in a haystack.",N,N],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a haystack, in reverse.",N,N],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memchr","","Search for the first occurrence of a byte in a slice.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",N,N],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",N,N],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mime"]={"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[12,"2","","",0,N],[4,"TopLevel","","",N,N],[13,"Star","","",1,N],[13,"Text","","",1,N],[13,"Image","","",1,N],[13,"Audio","","",1,N],[13,"Video","","",1,N],[13,"Application","","",1,N],[13,"Multipart","","",1,N],[13,"Message","","",1,N],[13,"Model","","",1,N],[13,"Ext","","",1,N],[4,"SubLevel","","",N,N],[13,"Star","","",2,N],[13,"Plain","","",2,N],[13,"Html","","",2,N],[13,"Xml","","",2,N],[13,"Javascript","","",2,N],[13,"Css","","",2,N],[13,"EventStream","","",2,N],[13,"Json","","",2,N],[13,"WwwFormUrlEncoded","","",2,N],[13,"Msgpack","","",2,N],[13,"OctetStream","","",2,N],[13,"FormData","","",2,N],[13,"Png","","",2,N],[13,"Gif","","",2,N],[13,"Bmp","","",2,N],[13,"Jpeg","","",2,N],[13,"Mpeg","","",2,N],[13,"Mp4","","",2,N],[13,"Ogg","","",2,N],[13,"Ext","","",2,N],[4,"Attr","","",N,N],[13,"Charset","","",3,N],[13,"Boundary","","",3,N],[13,"Q","","",3,N],[13,"Ext","","",3,N],[4,"Value","","",N,N],[13,"Utf8","","",4,N],[13,"Ext","","",4,N],[6,"Param","","",N,N],[11,"as_str","","",1,[[["self"]],["str"]]],[11,"as_str","","",2,[[["self"]],["str"]]],[11,"as_str","","",3,[[["self"]],["str"]]],[11,"as_str","","",4,[[["self"]],["str"]]],[11,"get_param","","",0,[[["self"],["a"]],["option",["value"]]]],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["mime"]],["bool"]]],[11,"le","","",0,[[["self"],["mime"]],["bool"]]],[11,"gt","","",0,[[["self"],["mime"]],["bool"]]],[11,"ge","","",0,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["attr"]],["bool"]]],[11,"le","","",3,[[["self"],["attr"]],["bool"]]],[11,"gt","","",3,[[["self"],["attr"]],["bool"]]],[11,"ge","","",3,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["value"]],["bool"]]],[11,"le","","",4,[[["self"],["value"]],["bool"]]],[11,"gt","","",4,[[["self"],["value"]],["bool"]]],[11,"ge","","",4,[[["self"],["value"]],["bool"]]],[11,"cmp","","",0,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["sublevel"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["value"]],["ordering"]]],[11,"eq","","",0,[[["self"],["mime"]],["bool"]]],[11,"eq","","",1,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["attr"]],["bool"]]],[11,"eq","","",3,[[["self"],["string"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["value"]],["bool"]]],[11,"eq","","",4,[[["self"],["string"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"eq","","",4,[[["self"],["str"]],["bool"]]],[11,"clone","","",0,[[["self"]],["mime"]]],[11,"clone","","",1,[[["self"]],["toplevel"]]],[11,"clone","","",2,[[["self"]],["sublevel"]]],[11,"clone","","",3,[[["self"]],["attr"]]],[11,"clone","","",4,[[["self"]],["value"]]],[11,"deref","","",1,[[["self"]],["str"]]],[11,"deref","","",2,[[["self"]],["str"]]],[11,"deref","","",3,[[["self"]],["str"]]],[11,"deref","","",4,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"from_str","","",1,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",2,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",3,[[["str"]],["result",["attr"]]]],[11,"from_str","","",4,[[["str"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["mime"]]]]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",N,N],[3,"Registration","","Handle to a user space `Poll` registration.",N,N],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",N,N],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Events","","A collection of readiness events.",N,N],[11,"empty","","Return a `PollOpt` representing no set options.",1,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",1,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",1,[[["self"],["pollopt"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",1,[[["self"],["pollopt"]]]],[11,"empty","","Returns the empty `Ready` set.",2,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",2,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",2,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,[[["self"],["t"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",2,[[["self"],["t"]]]],[11,"contains","","Returns true if `self` is a superset of `other`.",2,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,"new","","Return a new `Poll` handle.",3,[[],["result",["poll"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",3,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",3,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",3,[[["self"],["e"]],["result"]]],[11,"poll","","Wait for readiness events",3,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",3,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",4,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",4,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",4,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",4,[[["self"]]]],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",5,N],[11,"readiness","","Returns the registration's current readiness.",6,[[["self"]],["ready"]]],[11,"set_readiness","","Set the registration's readiness",6,[[["self"],["ready"]],["result"]]],[0,"net","","Networking primitives",N,N],[3,"TcpListener","mio::net","A structure representing a socket server",N,N],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",N,N],[3,"UdpSocket","","A User Datagram Protocol socket.",N,N],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,[[["socketaddr"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,[[["tcpstream"],["socketaddr"]],["result",["tcpstream"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,[[["tcpstream"]],["result",["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,[[["self"]],["result",["tcpstream"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,N],[11,"read_bufs","","Read in a list of buffers all at once.",7,N],[11,"write_bufs","","Write a list of buffers all at once.",7,N],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,[[["tcplistener"]],["result",["tcplistener"]]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,[[["self"]],["result",["tcplistener"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],["result",["option"]]]],[11,"bind","","Creates a UDP socket from the given address.",9,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,[[["udpsocket"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the socket address that this socket was created from.",9,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,[[["self"]],["result",["udpsocket"]]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,N],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"],["u32"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],["result",["option"]]]],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Events","mio::event","A collection of readiness events.",N,N],[3,"Iter","","[`Events`] iterator.",N,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,[[["self"],["poll"]],["result"]]],[0,"unix","mio","Unix only extensions",N,N],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",N,N],[12,"0","","",11,N],[3,"UnixReady","","Unix specific extensions to `Ready`",N,N],[11,"into","mio","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","mio::event","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","mio::unix","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","mio::net","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"register","mio","",5,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",5,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",5,[[["self"],["poll"]],["result"]]],[11,"register","mio::unix","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",11,[[["self"],["poll"]],["result"]]],[11,"register","mio::net","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]],[11,"register","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",8,[[["self"],["poll"]],["result"]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[11,"next","mio::event","",13,[[["self"]],["option",["event"]]]],[11,"partial_cmp","mio","",1,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["ready"]],["bool"]]],[11,"le","","",2,[[["self"],["ready"]],["bool"]]],[11,"gt","","",2,[[["self"],["ready"]],["bool"]]],[11,"ge","","",2,[[["self"],["ready"]],["bool"]]],[11,"partial_cmp","mio::unix","",14,[[["self"],["unixready"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"le","","",14,[[["self"],["unixready"]],["bool"]]],[11,"gt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ge","","",14,[[["self"],["unixready"]],["bool"]]],[11,"partial_cmp","mio","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"cmp","","",1,[[["self"],["pollopt"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["ready"]],["ordering"]]],[11,"cmp","mio::unix","",14,[[["self"],["unixready"]],["ordering"]]],[11,"cmp","mio","",0,[[["self"],["token"]],["ordering"]]],[11,"eq","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"eq","","",2,[[["self"],["ready"]],["bool"]]],[11,"ne","","",2,[[["self"],["ready"]],["bool"]]],[11,"eq","mio::event","",12,[[["self"],["event"]],["bool"]]],[11,"ne","","",12,[[["self"],["event"]],["bool"]]],[11,"eq","mio::unix","",14,[[["self"],["unixready"]],["bool"]]],[11,"ne","","",14,[[["self"],["unixready"]],["bool"]]],[11,"eq","mio","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"from","mio::unix","",14,[[["ready"]],["unixready"]]],[11,"from","mio","",2,[[["unixready"]],["ready"]]],[11,"from","","",0,[[["usize"]],["token"]]],[11,"clone","","",1,[[["self"]],["pollopt"]]],[11,"clone","","",2,[[["self"]],["ready"]]],[11,"clone","mio::event","",12,[[["self"]],["event"]]],[11,"clone","mio","",6,[[["self"]],["setreadiness"]]],[11,"clone","mio::event","",13,[[["self"]],["iter"]]],[11,"clone","mio::unix","",14,[[["self"]],["unixready"]]],[11,"clone","mio","",0,[[["self"]],["token"]]],[11,"into_iter","","",4,N],[11,"drop","","",5,[[["self"]]]],[11,"deref_mut","mio::unix","",14,[[["self"]],["ready"]]],[11,"deref","","",14,[[["self"]],["ready"]]],[11,"fmt","mio","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio::event","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio::event","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio::unix","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio::net","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"sub","mio","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",2,[[["self"],["t"]],["ready"]]],[11,"sub","mio::unix","",14,[[["self"],["unixready"]],["unixready"]]],[11,"sub_assign","mio","",2,[[["self"],["t"]]]],[11,"bitand","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",2,[[["self"],["t"]],["ready"]]],[11,"bitand","mio::unix","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitor","mio","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitor","mio::unix","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitxor","mio","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitxor","mio::unix","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitand_assign","mio","",2,[[["self"],["t"]]]],[11,"bitor_assign","","",2,[[["self"],["t"]]]],[11,"bitxor_assign","","",2,[[["self"],["t"]]]],[11,"hash","","",0,N],[11,"read","mio::net","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"from_raw_fd","","",7,[[["rawfd"]],["tcpstream"]]],[11,"from_raw_fd","","",8,[[["rawfd"]],["tcplistener"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["udpsocket"]]],[11,"as_raw_fd","mio","",3,[[["self"]],["rawfd"]]],[11,"as_raw_fd","mio::net","",7,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"new","mio::event","Creates a new `Event` containing `readiness` and `token`",12,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",12,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",12,[[["self"]],["token"]]],[11,"error","mio::unix","Returns a `Ready` representing error readiness.",14,[[],["unixready"]]],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,[[],["unixready"]]],[11,"priority","","Returns a `Ready` representing priority (`EPOLLPRI`) readiness",14,[[],["unixready"]]],[11,"is_error","","Returns true if the value includes error readiness",14,[[["self"]],["bool"]]],[11,"is_hup","","Returns true if the value includes HUP readiness",14,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if `Ready` contains priority (`EPOLLPRI`) readiness",14,[[["self"]],["bool"]]]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"SetReadiness"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["mio_extras"]={"doc":"Extra components for use with Mio.","items":[[0,"channel","mio_extras","Thread safe communication channel implementing `Evented`",N,N],[3,"Sender","mio_extras::channel","The sending half of a channel.",N,N],[3,"SyncSender","","The sending half of a synchronous channel.",N,N],[3,"Receiver","","The receiving half of a channel.",N,N],[4,"SendError","","An error returned from the `Sender::send` or `SyncSender::send` function.",N,N],[13,"Io","","An IO error.",0,N],[13,"Disconnected","","The receiving half of the channel has disconnected.",0,N],[4,"TrySendError","","An error returned from the `SyncSender::try_send` function.",N,N],[13,"Io","","An IO error.",1,N],[13,"Full","","Data could not be sent because it would require the callee to block.",1,N],[13,"Disconnected","","The receiving half of the channel has disconnected.",1,N],[5,"channel","","Creates a new asynchronous channel, where the `Receiver` can be registered with `Poll`.",N,N],[5,"sync_channel","","Creates a new synchronous, bounded channel where the `Receiver` can be registered with `Poll`.",N,N],[11,"send","","Attempts to send a value on this channel, returning it back if it could not be sent.",2,[[["self"],["t"]],["result",["senderror"]]]],[11,"send","","Sends a value on this synchronous channel.",3,[[["self"],["t"]],["result",["senderror"]]]],[11,"try_send","","Attempts to send a value on this channel without blocking.",3,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking.",4,[[["self"]],["result",["tryrecverror"]]]],[0,"timer","mio_extras","Timer optimized for I/O related operations",N,N],[3,"Timer","mio_extras::timer","A timer.",N,N],[3,"Builder","","Used to create a `Timer`.",N,N],[3,"Timeout","","A timeout, as returned by `Timer::set_timeout`.",N,N],[11,"tick_duration","","Set the tick duration.  Default is 100ms.",5,[[["self"],["duration"]],["builder"]]],[11,"num_slots","","Set the number of slots.  Default is 256.",5,[[["self"],["usize"]],["builder"]]],[11,"capacity","","Set the capacity.  Default is 65536.",5,[[["self"],["usize"]],["builder"]]],[11,"build","","Build a `Timer` with the parameters set on this `Builder`.",5,[[["self"]],["timer"]]],[11,"set_timeout","","Set a timeout.",6,[[["self"],["duration"],["t"]],["timeout"]]],[11,"cancel_timeout","","Cancel a timeout.",6,[[["self"],["timeout"]],["option"]]],[11,"poll","","Poll for an expired timer.",6,[[["self"]],["option"]]],[11,"into","mio_extras::channel","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","mio_extras::timer","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"default","","",5,[[],["builder"]]],[11,"default","","",6,[[],["timer"]]],[11,"from","mio_extras::channel","",0,[[["senderror"]],["senderror"]]],[11,"from","","",0,[[["error"]],["senderror"]]],[11,"from","","",1,[[["trysenderror"]],["trysenderror"]]],[11,"from","","",1,[[["senderror"]],["trysenderror"]]],[11,"from","","",1,[[["error"]],["trysenderror"]]],[11,"clone","","",2,[[["self"]],["sender"]]],[11,"clone","","",3,[[["self"]],["syncsender"]]],[11,"clone","mio_extras::timer","",7,[[["self"]],["timeout"]]],[11,"fmt","mio_extras::channel","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio_extras::timer","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio_extras::channel","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"register","","",4,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",4,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",4,[[["self"],["poll"]],["result"]]],[11,"register","mio_extras::timer","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",6,[[["self"],["poll"]],["result"]]]],"paths":[[4,"SendError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Builder"],[3,"Timer"],[3,"Timeout"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","net2","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"reuse_port","","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["notify"]={"doc":"Cross-platform file system notification library","items":[[3,"RawEvent","notify","Event delivered when action occurs on a watched path in raw mode",N,N],[12,"path","","Path where the event originated.",0,N],[12,"op","","Operation detected on that path.",0,N],[12,"cookie","","Unique cookie associating related events (for `RENAME` events).",0,N],[4,"DebouncedEvent","","Event delivered when action occurs on a watched path in debounced mode",N,N],[13,"NoticeWrite","","`NoticeWrite` is emitted immediately after the first write event for the path.",1,N],[13,"NoticeRemove","","`NoticeRemove` is emitted immediately after a remove or rename event for the path.",1,N],[13,"Create","","`Create` is emitted when a file or directory has been created and no events were detected for the path within the specified time frame.",1,N],[13,"Write","","`Write` is emitted when a file has been written to and no events were detected for the path within the specified time frame.",1,N],[13,"Chmod","","`Chmod` is emitted when attributes have been changed and no events were detected for the path within the specified time frame.",1,N],[13,"Remove","","`Remove` is emitted when a file or directory has been removed and no events were detected for the path within the specified time frame.",1,N],[13,"Rename","","`Rename` is emitted when a file or directory has been moved within a watched directory and no events were detected for the new path within the specified time frame.",1,N],[13,"Rescan","","`Rescan` is emitted immediately after a problem has been detected that makes it necessary to re-scan the watched directories.",1,N],[13,"Error","","`Error` is emitted immediately after a error has been detected.",1,N],[4,"Error","","Errors generated from the `notify` crate",N,N],[13,"Generic","","Generic error",2,N],[13,"Io","","I/O errors",2,N],[13,"PathNotFound","","The provided path does not exist",2,N],[13,"WatchNotFound","","Attempted to remove a watch that does not exist",2,N],[4,"RecursiveMode","","Indicates whether only the provided directory or its sub-directories as well should be watched",N,N],[13,"Recursive","","Watch all sub-directories as well, including directories created after installing the watch",3,N],[13,"NonRecursive","","Watch only the provided directory",3,N],[5,"raw_watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in raw mode.",N,[[["sender",["rawevent"]]],["result",["recommendedwatcher"]]]],[5,"watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in default (debounced) mode.",N,[[["sender",["debouncedevent"]],["duration"]],["result",["recommendedwatcher"]]]],[0,"inotify","","Watcher implementation for the inotify Linux API",N,N],[3,"INotifyWatcher","notify::inotify","Watcher implementation based on inotify",N,N],[0,"null","notify","Stub Watcher implementation",N,N],[3,"NullWatcher","notify::null","Stub `Watcher` implementation",N,N],[0,"poll","notify","Generic Watcher implementation based on polling",N,N],[3,"PollWatcher","notify::poll","Polling based `Watcher` implementation",N,N],[11,"with_delay_ms","","Create a PollWatcher which polls every `delay` milliseconds",4,[[["sender",["rawevent"]],["u32"]],["result",["pollwatcher"]]]],[0,"op","notify","Contains the `Op` type which describes the actions for an event.",N,N],[3,"Op","notify::op","Holds a set of bit flags representing the actions for the event.",N,N],[17,"CHMOD","","",N,N],[17,"CREATE","","",N,N],[17,"REMOVE","","",N,N],[17,"RENAME","","",N,N],[17,"WRITE","","",N,N],[17,"CLOSE_WRITE","","",N,N],[17,"RESCAN","","",N,N],[18,"CHMOD","","Attributes changed",5,N],[18,"CREATE","","Created",5,N],[18,"REMOVE","","Removed",5,N],[18,"RENAME","","Renamed",5,N],[18,"WRITE","","Written",5,N],[18,"CLOSE_WRITE","","File opened for writing was closed",5,N],[18,"RESCAN","","Directories need to be rescanned",5,N],[11,"empty","","Returns an empty set of flags.",5,[[],["op"]]],[11,"all","","Returns the set containing all flags.",5,[[],["op"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,[[["u32"]],["option",["op"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,[[["u32"]],["op"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,[[["self"],["op"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,[[["self"],["op"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["op"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["op"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["op"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,[[["self"],["op"],["bool"]]]],[6,"Result","notify","Type alias to use this library's `Error` type in a Result",N,N],[6,"RecommendedWatcher","","The recommended `Watcher` implementation for the current platform",N,N],[8,"Watcher","","Type that can deliver file activity notifications",N,N],[10,"new_raw","","Create a new watcher in raw mode.",6,[[["sender",["rawevent"]]],["result"]]],[10,"new","","Create a new debounced watcher with a `delay`.",6,[[["sender",["debouncedevent"]],["duration"]],["result"]]],[10,"watch","","Begin watching a new path.",6,[[["self"],["p"],["recursivemode"]],["result"]]],[10,"unwatch","","Stop watching a path.",6,[[["self"],["p"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","notify::inotify","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","notify::null","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","notify::poll","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","notify::op","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"new_raw","notify::inotify","",7,[[["sender",["rawevent"]]],["result",["inotifywatcher"]]]],[11,"new","","",7,[[["sender",["debouncedevent"]],["duration"]],["result",["inotifywatcher"]]]],[11,"watch","","",7,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",7,[[["self"],["p"]],["result"]]],[11,"new_raw","notify::null","",8,[[["sender",["rawevent"]]],["result",["nullwatcher"]]]],[11,"new","","",8,[[["sender",["debouncedevent"]],["duration"]],["result",["nullwatcher"]]]],[11,"watch","","",8,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",8,[[["self"],["p"]],["result"]]],[11,"new_raw","notify::poll","",4,[[["sender",["rawevent"]]],["result",["pollwatcher"]]]],[11,"new","","",4,[[["sender",["debouncedevent"]],["duration"]],["result",["pollwatcher"]]]],[11,"watch","","",4,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",4,[[["self"],["p"]],["result"]]],[11,"partial_cmp","notify::op","",5,[[["self"],["op"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["op"]],["bool"]]],[11,"le","","",5,[[["self"],["op"]],["bool"]]],[11,"gt","","",5,[[["self"],["op"]],["bool"]]],[11,"ge","","",5,[[["self"],["op"]],["bool"]]],[11,"partial_cmp","notify","",3,[[["self"],["recursivemode"]],["option",["ordering"]]]],[11,"cmp","notify::op","",5,[[["self"],["op"]],["ordering"]]],[11,"cmp","notify","",3,[[["self"],["recursivemode"]],["ordering"]]],[11,"eq","notify::op","",5,[[["self"],["op"]],["bool"]]],[11,"ne","","",5,[[["self"],["op"]],["bool"]]],[11,"eq","notify","",1,[[["self"],["debouncedevent"]],["bool"]]],[11,"eq","","",3,[[["self"],["recursivemode"]],["bool"]]],[11,"from","","",2,[[["error"]],["error"]]],[11,"clone","notify::op","",5,[[["self"]],["op"]]],[11,"clone","notify","",3,[[["self"]],["recursivemode"]]],[11,"extend","notify::op","",5,[[["self"],["t"]]]],[11,"drop","notify::inotify","",7,[[["self"]]]],[11,"drop","notify::poll","",4,[[["self"]]]],[11,"fmt","notify::op","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","notify","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"sub","notify::op","Returns the set difference of the two sets of flags.",5,[[["self"],["op"]],["op"]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["self"],["op"]]]],[11,"not","","Returns the complement of this set of flags.",5,[[["self"]],["op"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["self"],["op"]],["op"]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["self"],["op"]],["op"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,[[["self"],["op"]],["op"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["op"]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["op"]]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["op"]]]],[11,"hash","","",5,N],[11,"from_iter","","",5,[[["t"]],["op"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","notify","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["stderror"]]]]],"paths":[[3,"RawEvent"],[4,"DebouncedEvent"],[4,"Error"],[4,"RecursiveMode"],[3,"PollWatcher"],[3,"Op"],[8,"Watcher"],[3,"INotifyWatcher"],[3,"NullWatcher"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,N],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,[[["self"]],["owningref"]]],[11,"owner","","A getter for the underlying owner.",3,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,[[["self"]],["owningrefmut"]]],[11,"owner","","A getter for the underlying owner.",4,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deref_mut","","",5,N],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"deref","","",5,N],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"borrow","","",3,[[["self"]],["t"]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"]={"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",N,N],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",N,N],[3,"RawMutex","","Raw mutex type backed by the parking lot.",N,N],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",N,N],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",N,N],[4,"OnceState","","Current state of a `Once`.",N,N],[13,"New","","A closure has not been executed yet",0,N],[13,"Poisoned","","A closure was executed but panicked.",0,N],[13,"InProgress","","A thread is currently executing a closure.",0,N],[13,"Done","","A closure has completed sucessfully.",0,N],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]]]],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,[[["self"],["mutexguard"]]]],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,[[["self"],["mutexguard"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,[[["self"],["mutexguard"],["duration"]],["waittimeoutresult"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,[[["self"],["f"]]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"RwLock","","A reader-writer lock",N,N],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[17,"ONCE_INIT","","Initialization value for static `Once` values.",N,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"default","","",2,[[],["condvar"]]],[11,"default","","",3,[[],["once"]]],[11,"eq","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["self"],["duration"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,N],[11,"try_lock_shared_until","","",5,N],[11,"try_lock_exclusive_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,N],[11,"try_lock_shared_recursive_until","","",5,N],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["self"],["duration"]],["bool"]]]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"]={"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",N,N],[12,"0","","",0,N],[3,"UnparkResult","","Result of an unpark operation.",N,N],[12,"unparked_threads","","The number of threads that were unparked.",1,N],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,N],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,N],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",N,N],[12,"0","","",2,N],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",N,N],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",N,N],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,N],[4,"ParkResult","","Result of a park operation.",N,N],[13,"Unparked","","We were unparked by another thread with the given token.",4,N],[13,"Invalid","","The validation callback returned false.",4,N],[13,"TimedOut","","The timeout expired.",4,N],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",N,N],[13,"Abort","","Abort the operation without doing anything.",5,N],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,N],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,N],[5,"park","","Parks the current thread in the queue associated with the given key.",N,[[["usize"],["v"],["b"],["t"],["parktoken"],["option",["instant"]]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",N,[[["usize"],["unparktoken"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",N,[[["usize"],["f"],["c"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",N,[[["usize"],["c"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",N,[[["usize"],["usize"],["v"],["c"]],["unparkresult"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[["self"]],["bool"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[0,"deadlock","","[Experimental] Deadlock detection",N,N],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",N,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",N,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",N,N],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"default","","",6,[[],["spinwait"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"eq","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"eq","","",5,[[["self"],["requeueop"]],["bool"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"eq","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"ne","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["pear"]={"doc":"","items":[[3,"Position","pear","",N,N],[12,"line","","",0,N],[12,"column","","",0,N],[12,"offset","","",0,N],[12,"snippet","","",0,N],[3,"Text","","",N,N],[3,"StringFile","","",N,N],[3,"ParseErr","","",N,N],[12,"parser","","",1,N],[12,"expected","","",1,N],[12,"context","","",1,N],[4,"Expected","","",N,N],[13,"Token","","",2,N],[13,"Slice","","",2,N],[13,"Custom","","",2,N],[13,"EOF","","",2,N],[11,"open","","",3,[[["str"]],["result",["stringfile"]]]],[11,"open_with_cap","","",3,[[["str"],["usize"]],["result",["stringfile"]]]],[11,"new","","",3,[[["file"],["usize"]],["stringfile"]]],[11,"available","","",3,[[["self"]],["usize"]]],[11,"map","","",2,[[["self"],["ft"],["fi"],["fs"]],["expected"]]],[11,"new","","",1,[[["str"],["t"]],["parseerr"]]],[11,"from_context","","",1,[[["i"],["str"],["t"]],["parseerr"]]],[0,"combinators","","",N,N],[5,"many","pear::combinators","",N,[[["i"],["f"]],["result"]]],[5,"surrounded","","",N,[[["i"],["p"],["f"]],["result"]]],[0,"parsers","pear","",N,N],[5,"error","pear::parsers","",N,[[["i"],["str"],["expected"]],["result"]]],[5,"eat","","",N,N],[5,"eat_if","","",N,[[["i"],["f"]],["result"]]],[5,"eat_slice","","",N,N],[5,"eat_any","","",N,[[["i"]],["result"]]],[5,"peek","","",N,N],[5,"peek_if","","",N,[[["i"],["f"]],["result"]]],[5,"peek_slice","","",N,N],[5,"peek_any","","",N,[[["i"]],["result"]]],[5,"skip_while","","",N,[[["i"],["f"]],["result"]]],[5,"take_some_while","","",N,[[["i"],["f"]],["result"]]],[5,"take_while","","",N,[[["i"],["f"]],["result"]]],[5,"take_some_while_until","","",N,N],[5,"take_n","","Takes at most `num` inputs.",N,[[["i"],["usize"]],["result"]]],[5,"take_n_while","","Takes at most `num` inputs as long as `condition` holds.",N,[[["i"],["usize"],["f"]],["result"]]],[5,"take_n_if","","Take exactly `num` inputs, ensuring `condition` holds.",N,[[["i"],["usize"],["f"]],["result"]]],[5,"delimited","","",N,N],[5,"enclosed","","",N,N],[5,"eof","","",N,[[["i"]],["result"]]],[5,"collection","","",N,N],[5,"series","","",N,N],[8,"Collection","","",N,N],[16,"Item","","",4,N],[10,"new","","",4,[[],["self"]]],[10,"add","","",4,N],[6,"Result","pear","",N,N],[8,"Length","","",N,N],[10,"len","","",5,[[["self"]],["usize"]]],[8,"Input","","",N,N],[16,"Token","","",6,N],[16,"Slice","","",6,N],[16,"InSlice","","",6,N],[16,"Many","","",6,N],[16,"Context","","",6,N],[10,"peek","","",6,[[["self"]],["option"]]],[10,"peek_slice","","",6,N],[10,"advance","","",6,[[["self"],["usize"]]]],[10,"is_empty","","",6,[[["self"]],["bool"]]],[10,"take_many","","",6,N],[10,"skip_many","","",6,[[["self"],["f"]],["usize"]]],[11,"context","","",6,[[["self"]],["option"]]],[8,"AsResult","","",N,N],[10,"as_result","","",7,[[["self"]],["result"]]],[14,"is_debug","","",N,N],[14,"pear_declare","","",N,N],[14,"parse","","",N,N],[14,"pear_error","","",N,N],[14,"pear_try","","FIXME: This is an issue with rustc here where if `$input` is `expr` everything fails.",N,N],[14,"any","","",N,N],[14,"maybe","","",N,N],[14,"collect","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"peek","","",8,[[["self"]],["option"]]],[11,"peek_slice","","",8,N],[11,"skip_many","","",8,[[["self"],["f"]],["usize"]]],[11,"take_many","","",8,N],[11,"advance","","",8,[[["self"],["usize"]]]],[11,"is_empty","","",8,[[["self"]],["bool"]]],[11,"context","","",8,[[["self"]],["option",["position"]]]],[11,"peek","","",3,[[["self"]],["option"]]],[11,"take_many","","",3,N],[11,"skip_many","","",3,[[["self"],["f"]],["usize"]]],[11,"peek_slice","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"as_result","","",9,[[["self"]],["result"]]],[11,"eq","","",0,[[["self"],["position"]],["bool"]]],[11,"ne","","",0,[[["self"],["position"]],["bool"]]],[11,"eq","","",2,[[["self"],["expected"]],["bool"]]],[11,"ne","","",2,[[["self"],["expected"]],["bool"]]],[11,"eq","","",1,[[["self"],["parseerr"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseerr"]],["bool"]]],[11,"from","","",8,[[["str"]],["text"]]],[11,"clone","","",0,[[["self"]],["position"]]],[11,"clone","","",2,[[["self"]],["expected"]]],[11,"clone","","",1,[[["self"]],["parseerr"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"context","","",6,[[["self"]],["option"]]]],"paths":[[3,"Position"],[3,"ParseErr"],[4,"Expected"],[3,"StringFile"],[8,"Collection"],[8,"Length"],[8,"Input"],[8,"AsResult"],[3,"Text"],[6,"Result"]]};
searchIndex["pear_codegen"]={"doc":"","items":[[23,"parser","pear_codegen","",N,N],[14,"switch","","",N,N]],"paths":[]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",1,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",1,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",1,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"contains","","",6,[[["self"],["u8"]],["bool"]]],[11,"next","","",7,[[["self"]],["option",["str"]]]],[11,"size_hint","","",7,N],[11,"next","","",1,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",1,N],[11,"clone","","",2,[[["self"]],["simple_encode_set"]]],[11,"clone","","",3,[[["self"]],["query_encode_set"]]],[11,"clone","","",4,[[["self"]],["default_encode_set"]]],[11,"clone","","",5,[[["self"]],["path_segment_encode_set"]]],[11,"clone","","",6,[[["self"]],["userinfo_encode_set"]]],[11,"clone","","",7,[[["self"]],["percentencode"]]],[11,"clone","","",1,[[["self"]],["percentdecode"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]]],"paths":[[8,"EncodeSet"],[3,"PercentDecode"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream"]]],[11,"empty","","",3,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[["self"]],["bool"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",5,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",5,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",5,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",5,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",6,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",6,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",7,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",7,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",8,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",8,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",8,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",8,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",8,[[["f32"]],["literal"]]],[11,"string","","",8,[[["str"]],["literal"]]],[11,"character","","",8,[[["char"]],["literal"]]],[11,"byte_string","","",8,N],[11,"span","","",8,[[["self"]],["span"]]],[11,"set_span","","",8,[[["self"],["span"]]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","proc_macro2::token_stream","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"next","","",10,[[["self"]],["option",["tokentree"]]]],[11,"partial_cmp","proc_macro2","",7,[[["self"],["ident"]],["option",["ordering"]]]],[11,"default","","",3,[[],["self"]]],[11,"cmp","","",7,[[["self"],["ident"]],["ordering"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"eq","","",7,[[["self"],["ident"]],["bool"]]],[11,"eq","","",7,[[["self"],["t"]],["bool"]]],[11,"from","","",4,[[["span"]],["span"]]],[11,"from","","",3,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"clone","","",3,[[["self"]],["tokenstream"]]],[11,"clone","","",4,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",5,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["ident"]]],[11,"clone","","",8,[[["self"]],["literal"]]],[11,"into_iter","","",3,[[["self"]],["intoiter"]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","proc_macro2::token_stream","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","proc_macro2","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"from_str","","",3,[[["str"]],["result",["tokenstream","lexerror"]]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["quick_error"]={"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[8,"ResultExt","","Result extension trait adding a `context` method",N,N],[10,"context","","The method is use to add context information to current operation",1,[[["self"],["x"]],["result",["context"]]]],[14,"quick_error","","Main macro that does all the work",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new","rand::distributions","Construct an object representing the `Gamma(shape, scale)` distribution.",8,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",9,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",10,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",11,[[["f64"]],["studentt"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",12,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",13,[[["f64"],["f64"]],["lognormal"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",14,[[["f64"]],["exp"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",15,[[["f64"],["f64"]],["pareto"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",16,[[["f64"]],["poisson"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",17,[[["u64"],["f64"]],["binomial"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",18,[[["f64"]],["bernoulli"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",19,[[["f64"],["f64"]],["cauchy"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",20,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",21,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",22,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",22,[[["self"],["r"]],["distiter"]]],[11,"new","","Create a new `WeightedChoice`.",23,N],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",24,[[],["chacharng"]]],[11,"set_stream","","Set the stream number.",24,[[["self"],["u64"]]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",25,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",25,[[["u64"]],["self"]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",26,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",26,[[["u64"]],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",27,[[["u64"]],["self"]]],[11,"new_unseeded","rand::prng","Creates a new XorShiftRng instance which is not seeded.",28,[[],["xorshiftrng"]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",29,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",29,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",29,N],[13,"TinyVariantions","","Variations of deltas of time too small.",29,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",29,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"new","","Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",31,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",31,[[["self"]],["result",["error"]]]],[11,"new","rand::rngs","Create a new `EntropyRng`.",32,[[],["self"]]],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",33,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",33,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",33,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",33,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",33,[[["self"],["bool"]],["i64"]]],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",34,[[["u64"],["u64"]],["self"]]],[11,"new","rand::rngs","Create a new `OsRng`.",35,[[],["result",["osrng","error"]]]],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",36,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",37,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",37,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",37,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",37,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",37,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",37,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",37,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",37,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",37,N],[11,"shuffle","","Shuffle a mutable slice in place.",37,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",37,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",37,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",37,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",38,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",38,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",39,[[],["self"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","rand::distributions","",42,[[["self"]],["u"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","rand::distributions::uniform","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","rand::distributions","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into_iter","","",47,[[["self"]],["i"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","rand::distributions::uniform","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"from_entropy","rand::prng","",28,[[],["r"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"from_entropy","rand::prng::chacha","",24,[[],["r"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"from_entropy","","",52,[[],["r"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"from_entropy","rand::prng::hc128","",53,[[],["r"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"from_entropy","","",54,[[],["r"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"from_entropy","rand::prng::isaac","",25,[[],["r"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"from_entropy","","",55,[[],["r"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"from_entropy","rand::prng::isaac64","",26,[[],["r"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"from_entropy","","",27,[[],["r"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","rand::rngs","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"from_entropy","","",56,[[],["r"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"from_entropy","","",57,[[],["r"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","rand::rngs::adapter","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","rand::rngs::mock","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"clone","rand","",2,[[["self"]],["errorkind"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",0,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"new","rand::distributions::uniform","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",49,N],[11,"new_inclusive","","",49,N],[11,"sample","","",49,N],[11,"sample_single","","",49,N],[11,"new","","",50,N],[11,"new_inclusive","","",50,N],[11,"sample","","",50,N],[11,"sample_single","","",50,N],[11,"new","","",50,N],[11,"new_inclusive","","",50,N],[11,"sample","","",50,N],[11,"sample_single","","",50,N],[11,"new","","",51,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",51,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",51,[[["self"],["r"]],["duration"]]],[11,"sample","rand::distributions","",23,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",8,[[["self"],["r"]],["f64"]]],[11,"sample","","",9,[[["self"],["r"]],["f64"]]],[11,"sample","","",10,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",23,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",8,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",9,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",10,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["x"]]],[11,"sample","rand::distributions","",8,[[["self"],["r"]],["f64"]]],[11,"sample","","",9,[[["self"],["r"]],["f64"]]],[11,"sample","","",10,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",45,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",46,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["u64"]]],[11,"sample","","",17,[[["self"],["r"]],["u64"]]],[11,"sample","","",18,[[["self"],["r"]],["bool"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["f32"]]],[11,"sample","","",43,[[["self"],["r"]],["f32"]]],[11,"sample","","",44,[[["self"],["r"]],["f32"]]],[11,"sample","","",48,[[["self"],["r"]],["f64"]]],[11,"sample","","",43,[[["self"],["r"]],["f64"]]],[11,"sample","","",44,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["u8"]]],[11,"sample","","",48,[[["self"],["r"]],["u16"]]],[11,"sample","","",48,[[["self"],["r"]],["u32"]]],[11,"sample","","",48,[[["self"],["r"]],["u64"]]],[11,"sample","","",48,[[["self"],["r"]],["usize"]]],[11,"sample","","",48,[[["self"],["r"]],["i8"]]],[11,"sample","","",48,[[["self"],["r"]],["i16"]]],[11,"sample","","",48,[[["self"],["r"]],["i32"]]],[11,"sample","","",48,[[["self"],["r"]],["i64"]]],[11,"sample","","",48,[[["self"],["r"]],["isize"]]],[11,"sample","","",48,[[["self"],["r"]],["char"]]],[11,"sample","","",42,[[["self"],["r"]],["char"]]],[11,"sample","","",48,[[["self"],["r"]],["bool"]]],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,N],[11,"sample","","",48,[[["self"],["r"]],["option"]]],[11,"sample","","",48,[[["self"],["r"]],["wrapping"]]],[11,"sample","","",23,[[["self"],["r"]],["t"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","rand","",40,[[["self"]],["option"]]],[11,"next","","",41,[[["self"]],["option",["char"]]]],[11,"default","rand::rngs","",32,[[],["self"]]],[11,"eq","","",29,[[["self"],["timererror"]],["bool"]]],[11,"from","rand::distributions::uniform","",7,[[["range"]],["uniform"]]],[11,"from","rand::prng::chacha","",24,[[["chachacore"]],["self"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"clone","rand::distributions::uniform","",7,[[["self"]],["uniform"]]],[11,"clone","","",49,[[["self"]],["uniformint"]]],[11,"clone","","",50,[[["self"]],["uniformfloat"]]],[11,"clone","","",51,[[["self"]],["uniformduration"]]],[11,"clone","rand::distributions","",8,[[["self"]],["gamma"]]],[11,"clone","","",9,[[["self"]],["chisquared"]]],[11,"clone","","",10,[[["self"]],["fisherf"]]],[11,"clone","","",11,[[["self"]],["studentt"]]],[11,"clone","","",45,[[["self"]],["standardnormal"]]],[11,"clone","","",12,[[["self"]],["normal"]]],[11,"clone","","",13,[[["self"]],["lognormal"]]],[11,"clone","","",46,[[["self"]],["exp1"]]],[11,"clone","","",14,[[["self"]],["exp"]]],[11,"clone","","",15,[[["self"]],["pareto"]]],[11,"clone","","",16,[[["self"]],["poisson"]]],[11,"clone","","",17,[[["self"]],["binomial"]]],[11,"clone","","",18,[[["self"]],["bernoulli"]]],[11,"clone","","",19,[[["self"]],["cauchy"]]],[11,"clone","","",43,[[["self"]],["openclosed01"]]],[11,"clone","","",44,[[["self"]],["open01"]]],[11,"clone","","",48,[[["self"]],["standard"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"clone","rand::prng::chacha","",24,[[["self"]],["chacharng"]]],[11,"clone","","",52,[[["self"]],["chachacore"]]],[11,"clone","rand::prng::hc128","",53,[[["self"]],["hc128rng"]]],[11,"clone","","",54,[[["self"]],["hc128core"]]],[11,"clone","rand::prng::isaac","",25,[[["self"]],["isaacrng"]]],[11,"clone","","",55,[[["self"]],["isaaccore"]]],[11,"clone","rand::prng::isaac64","",26,[[["self"]],["isaac64rng"]]],[11,"clone","","",27,[[["self"]],["isaac64core"]]],[11,"clone","rand::prng","",28,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::rngs::adapter","",31,[[["self"]],["reseedingrng"]]],[11,"clone","rand::rngs","",33,[[["self"]],["jitterrng"]]],[11,"clone","","",29,[[["self"]],["timererror"]]],[11,"clone","rand::rngs::mock","",34,[[["self"]],["steprng"]]],[11,"clone","rand::rngs","",56,[[["self"]],["smallrng"]]],[11,"clone","","",57,[[["self"]],["stdrng"]]],[11,"clone","","",58,[[["self"]],["threadrng"]]],[11,"clone","","",35,[[["self"]],["osrng"]]],[11,"fmt","rand::distributions::uniform","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::distributions","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::chacha","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::hc128","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::isaac","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng::isaac64","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::prng","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs::adapter","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs::mock","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand::rngs","",29,[[["self"],["formatter"]],["result"]]],[11,"description","","",29,[[["self"]],["str"]]],[11,"next_u32","rand::prng::chacha","",24,[[["self"]],["u32"]]],[11,"next_u64","","",24,[[["self"]],["u64"]]],[11,"fill_bytes","","",24,N],[11,"try_fill_bytes","","",24,N],[11,"next_u32","rand::prng::hc128","",53,[[["self"]],["u32"]]],[11,"next_u64","","",53,[[["self"]],["u64"]]],[11,"fill_bytes","","",53,N],[11,"try_fill_bytes","","",53,N],[11,"next_u32","rand::prng::isaac","",25,[[["self"]],["u32"]]],[11,"next_u64","","",25,[[["self"]],["u64"]]],[11,"fill_bytes","","",25,N],[11,"try_fill_bytes","","",25,N],[11,"next_u32","rand::prng::isaac64","",26,[[["self"]],["u32"]]],[11,"next_u64","","",26,[[["self"]],["u64"]]],[11,"fill_bytes","","",26,N],[11,"try_fill_bytes","","",26,N],[11,"next_u32","rand::prng","",28,[[["self"]],["u32"]]],[11,"next_u64","","",28,[[["self"]],["u64"]]],[11,"fill_bytes","","",28,N],[11,"try_fill_bytes","","",28,N],[11,"next_u32","rand::rngs::adapter","",30,[[["self"]],["u32"]]],[11,"next_u64","","",30,[[["self"]],["u64"]]],[11,"fill_bytes","","",30,N],[11,"try_fill_bytes","","",30,N],[11,"next_u32","","",31,[[["self"]],["u32"]]],[11,"next_u64","","",31,[[["self"]],["u64"]]],[11,"fill_bytes","","",31,N],[11,"try_fill_bytes","","",31,N],[11,"next_u32","rand::rngs","",32,[[["self"]],["u32"]]],[11,"next_u64","","",32,[[["self"]],["u64"]]],[11,"fill_bytes","","",32,N],[11,"try_fill_bytes","","",32,N],[11,"next_u32","","",33,[[["self"]],["u32"]]],[11,"next_u64","","",33,[[["self"]],["u64"]]],[11,"fill_bytes","","",33,N],[11,"try_fill_bytes","","",33,N],[11,"next_u32","rand::rngs::mock","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"next_u32","rand::rngs","",56,[[["self"]],["u32"]]],[11,"next_u64","","",56,[[["self"]],["u64"]]],[11,"fill_bytes","","",56,N],[11,"try_fill_bytes","","",56,N],[11,"next_u32","","",57,[[["self"]],["u32"]]],[11,"next_u64","","",57,[[["self"]],["u64"]]],[11,"fill_bytes","","",57,N],[11,"try_fill_bytes","","",57,N],[11,"next_u32","","",58,[[["self"]],["u32"]]],[11,"next_u64","","",58,[[["self"]],["u64"]]],[11,"fill_bytes","","",58,N],[11,"try_fill_bytes","","",58,N],[11,"next_u32","","",35,[[["self"]],["u32"]]],[11,"next_u64","","",35,[[["self"]],["u64"]]],[11,"fill_bytes","","",35,N],[11,"try_fill_bytes","","",35,N],[11,"from_seed","rand::prng::chacha","",24,N],[11,"from_rng","","",24,[[["r"]],["result",["error"]]]],[11,"from_seed","","",52,N],[11,"from_seed","rand::prng::hc128","",53,N],[11,"from_rng","","",53,[[["r"]],["result",["error"]]]],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",54,N],[11,"from_seed","rand::prng::isaac","",25,N],[11,"from_rng","","",25,[[["s"]],["result",["error"]]]],[11,"from_seed","","",55,N],[11,"from_rng","","",55,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::prng::isaac64","",26,N],[11,"from_rng","","",26,[[["s"]],["result",["error"]]]],[11,"from_seed","","",27,N],[11,"from_rng","","",27,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::prng","",28,N],[11,"from_rng","","",28,[[["r"]],["result",["error"]]]],[11,"from_seed","rand::rngs","",56,N],[11,"from_rng","","",56,[[["r"]],["result",["error"]]]],[11,"from_seed","","",57,N],[11,"from_rng","","",57,[[["r"]],["result",["error"]]]],[11,"generate","rand::prng::chacha","",52,N],[11,"generate","rand::prng::hc128","",54,N],[11,"generate","rand::prng::isaac","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",55,[[["self"],["isaacarray"]]]],[11,"generate","rand::prng::isaac64","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",27,[[["self"],["isaacarray"]]]],[11,"should_retry","rand","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Normal"],[3,"LogNormal"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"WeightedChoice"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"],[3,"Alphanumeric"],[3,"OpenClosed01"],[3,"Open01"],[3,"StandardNormal"],[3,"Exp1"],[3,"DistIter"],[3,"Standard"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacCore"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[4,"ErrorKind","rand_core","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",0,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",0,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",0,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",0,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",1,N],[12,"msg","","The error message",1,N],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",2,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",2,N],[10,"generate","","Generate a new block of results.",2,N],[3,"BlockRng","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",4,N],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",6,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","rand_core::block","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"clone","","",3,[[["self"]],["blockrng"]]],[11,"clone","rand_core","",0,[[["self"]],["errorkind"]]],[11,"clone","rand_core::block","",4,[[["self"]],["blockrng64"]]],[11,"from_seed","","",4,N],[11,"seed_from_u64","","",4,[[["u64"]],["blockrng64"]]],[11,"from_rng","","",4,[[["s"]],["result",["blockrng64","error"]]]],[11,"from_seed","","",3,N],[11,"seed_from_u64","","",3,[[["u64"]],["blockrng"]]],[11,"from_rng","","",3,[[["s"]],["result",["blockrng","error"]]]],[11,"description","rand_core","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"next_u32","rand_core::block","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"next_u32","","",4,[[["self"]],["u32"]]],[11,"next_u64","","",4,[[["self"]],["u64"]]],[11,"fill_bytes","","",4,N],[11,"try_fill_bytes","","",4,N],[11,"fmt","rand_core","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",5,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","rand_core","",0,[[["self"],["errorkind"]],["bool"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",0,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",0,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",0,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",1,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",1,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",1,[[["self"]],["option",["box"]]]],[11,"new","rand_core::block","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,N],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",4,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",4,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",4,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",4,N]],"paths":[[4,"ErrorKind"],[3,"Error"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"new","","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",10,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",10,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",11,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",11,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",11,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",11,N],[11,"len","","Returns the number of captured groups.",11,[[["self"]],["usize"]]],[11,"new","regex","Create a new regex set with the given regular expressions.",12,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",12,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",12,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",12,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",13,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",13,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",13,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",13,[[["self"]],["setmatchesiter"]]],[11,"new","regex::bytes","Create a new regex set with the given regular expressions.",14,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",14,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",14,N],[11,"len","","Returns the total number of regular expressions in this set.",14,[[["self"]],["usize"]]],[11,"matched_any","","Whether this set contains any matches.",15,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",15,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",15,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",15,[[["self"]],["setmatchesiter"]]],[11,"start","regex","Returns the starting byte offset of the match in the haystack.",16,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",16,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",16,[[["self"]],["str"]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",17,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",17,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",17,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",17,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",17,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",17,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",17,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",17,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",17,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",17,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",17,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",17,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",17,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",17,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",17,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",17,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",17,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",17,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",17,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",17,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",17,[[["self"]],["capturelocations"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",18,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",18,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",19,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",19,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",19,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",19,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",19,[[["self"]],["usize"]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",20,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",20,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",20,[[["self"]],["replacerref"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into_iter","","",23,[[["self"]],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into_iter","","",25,[[["self"]],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","regex::bytes","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"replace_append","","",36,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",36,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"replace_append","regex","",27,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",27,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[11,"next","regex::bytes","",30,[[["self"]],["option",["match"]]]],[11,"next","","",31,[[["self"]],["option",["captures"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"size_hint","","",34,N],[11,"next","","",35,[[["self"]],["option",["option"]]]],[11,"next","regex","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next","regex::bytes","",37,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",37,N],[11,"next","","",38,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",38,N],[11,"next","regex","",23,[[["self"]],["option",["option"]]]],[11,"size_hint","","",23,N],[11,"next","","",28,[[["self"]],["option",["str"]]]],[11,"next","","",29,[[["self"]],["option",["str"]]]],[11,"next","","",26,[[["self"]],["option",["option"]]]],[11,"next","","",25,[[["self"]],["option",["captures"]]]],[11,"next","","",24,[[["self"]],["option",["match"]]]],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"next_back","regex::bytes","",37,[[["self"]],["option",["usize"]]]],[11,"next_back","","",38,[[["self"]],["option",["usize"]]]],[11,"eq","regex","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"eq","regex::bytes","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"eq","regex","",16,[[["self"],["match"]],["bool"]]],[11,"ne","","",16,[[["self"],["match"]],["bool"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"clone","regex::bytes","",8,[[["self"]],["match"]]],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"clone","","",10,[[["self"]],["capturelocations"]]],[11,"clone","regex","",12,[[["self"]],["regexset"]]],[11,"clone","","",13,[[["self"]],["setmatches"]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"clone","regex::bytes","",14,[[["self"]],["regexset"]]],[11,"clone","","",15,[[["self"]],["setmatches"]]],[11,"clone","","",38,[[["self"]],["setmatchesiter"]]],[11,"clone","regex","",16,[[["self"]],["match"]]],[11,"clone","","",17,[[["self"]],["regex"]]],[11,"clone","","",18,[[["self"]],["capturelocations"]]],[11,"into_iter","","",13,N],[11,"into_iter","regex::bytes","",15,N],[11,"fmt","regex","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",17,[[["self"],["formatter"]],["result"]]],[11,"index","regex::bytes","",11,N],[11,"index","","",11,N],[11,"index","regex","",19,[[["self"],["usize"]],["str"]]],[11,"index","","",19,[[["self"],["str"]],["str"]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",17,[[["str"]],["result",["regex","error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",20,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",20,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[8,"Replacer"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureNames"],[3,"Matches"],[3,"CaptureMatches"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"Split"],[3,"SplitN"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[0,"hir","regex_syntax","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"new","","Create a new Unicode scalar value range for a character class.",67,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",67,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",67,[[["self"]],["char"]]],[11,"new","","Create a new class from a sequence of ranges.",68,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",68,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",68,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",68,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",68,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",68,[[["self"]]]],[11,"negate","","Negate this byte class.",68,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",68,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",68,[[["self"]],["bool"]]],[11,"new","","Create a new byte range for a character class.",69,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",69,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",69,[[["self"]],["u8"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",70,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",70,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",70,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",71,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",71,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","regex_syntax::ast","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","regex_syntax::ast::parse","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","regex_syntax::ast::print","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","regex_syntax::hir","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into_iter","","",72,[[["self"]],["i"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into_iter","","",73,[[["self"]],["i"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","regex_syntax::hir::literal","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","regex_syntax::hir::print","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","regex_syntax::hir::translate","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"next","regex_syntax::hir","",72,[[["self"]],["option",["classunicoderange"]]]],[11,"next","","",73,[[["self"]],["option",["classbytesrange"]]]],[11,"partial_cmp","regex_syntax::ast","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"partial_cmp","regex_syntax::hir::literal","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"partial_cmp","regex_syntax::hir","",67,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"default","regex_syntax::ast::parse","",42,[[],["parserbuilder"]]],[11,"default","regex_syntax::hir::translate","",61,[[],["translatorbuilder"]]],[11,"default","regex_syntax::hir","",67,[[],["classunicoderange"]]],[11,"default","","",69,[[],["classbytesrange"]]],[11,"default","regex_syntax","",70,[[],["parserbuilder"]]],[11,"cmp","regex_syntax::ast","",1,[[["self"],["span"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"cmp","regex_syntax::hir::literal","",59,[[["self"],["literal"]],["ordering"]]],[11,"cmp","regex_syntax::hir","",67,[[["self"],["classunicoderange"]],["ordering"]]],[11,"cmp","","",69,[[["self"],["classbytesrange"]],["ordering"]]],[11,"eq","regex_syntax::ast","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"eq","regex_syntax","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","regex_syntax::hir::literal","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"eq","regex_syntax::hir","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"eq","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",67,[[["self"],["classunicoderange"]],["bool"]]],[11,"eq","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"eq","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"from","regex_syntax","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"as_ref","regex_syntax::hir::literal","",59,N],[11,"clone","regex_syntax::ast::parse","",42,[[["self"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"clone","regex_syntax::ast","",46,[[["self"]],["error"]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"clone","regex_syntax::hir::literal","",58,[[["self"]],["literals"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"clone","regex_syntax::hir::translate","",61,[[["self"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"clone","regex_syntax::hir","",64,[[["self"]],["error"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"clone","","",67,[[["self"]],["classunicoderange"]]],[11,"clone","","",68,[[["self"]],["classbytes"]]],[11,"clone","","",69,[[["self"]],["classbytesrange"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"clone","regex_syntax","",70,[[["self"]],["parserbuilder"]]],[11,"clone","","",71,[[["self"]],["parser"]]],[11,"drop","regex_syntax::ast","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"drop","regex_syntax::hir","",65,[[["self"]]]],[11,"deref_mut","regex_syntax::hir::literal","",59,[[["self"]],["vec"]]],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"fmt","regex_syntax::ast::parse","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast::print","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::literal","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::print","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::translate","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"description","regex_syntax::ast","",46,[[["self"]],["str"]]],[11,"description","regex_syntax","",0,[[["self"]],["str"]]],[11,"description","regex_syntax::hir","",64,[[["self"]],["str"]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"]]};
searchIndex["ring"]={"doc":"Safe, fast, small crypto using Rust with BoringSSL's cryptography primitives.","items":[[0,"aead","ring","Authenticated Encryption with Associated Data (AEAD).",N,N],[3,"OpeningKey","ring::aead","A key for authenticating and decrypting (“opening”) AEAD-protected data.",N,N],[3,"SealingKey","","A key for encrypting and signing (“sealing”) data.",N,N],[3,"Algorithm","","An AEAD Algorithm.",N,N],[5,"open_in_place","","Authenticates and decrypts (“opens”) data in place.",N,N],[5,"seal_in_place","","Encrypts and signs (“seals”) data in place.",N,N],[0,"chacha20_poly1305_openssh","","The [chacha20-poly1305@openssh.com] AEAD-ish construct.",N,N],[3,"SealingKey","ring::aead::chacha20_poly1305_openssh","A key for sealing packets.",N,N],[3,"OpeningKey","","A key for opening packets.",N,N],[17,"KEY_LEN","","The length of key.",N,N],[17,"TAG_LEN","","The length of a tag.",N,N],[17,"PACKET_LENGTH_LEN","","The length in bytes of the `packet_length` field in a SSH packet.",N,N],[11,"new","","Constructs a new `SealingKey`.",0,N],[11,"seal_in_place","","Seals (encrypts and signs) a packet.",0,N],[11,"new","","Constructs a new `OpeningKey`.",1,N],[11,"decrypt_packet_length","","Returns the decrypted, but unauthenticated, packet length.",1,N],[11,"open_in_place","","Opens (authenticates and decrypts) a packet.",1,N],[7,"CHACHA20_POLY1305","ring::aead","ChaCha20-Poly1305 as described in [RFC 7539].",N,N],[7,"AES_128_GCM","","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[7,"AES_256_GCM","","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.",N,N],[17,"MAX_TAG_LEN","","The maximum length of a tag for the algorithms in this module.",N,N],[11,"new","","Create a new opening key.",2,N],[11,"algorithm","","The key's AEAD algorithm.",2,[[["self"]],["algorithm"]]],[11,"new","","C analogs: `EVP_AEAD_CTX_init_with_direction` with direction            `evp_aead_seal`, `EVP_AEAD_CTX_init`.",3,N],[11,"algorithm","","The key's AEAD algorithm.",3,[[["self"]],["algorithm"]]],[11,"key_len","","The length of the key.",4,[[["self"]],["usize"]]],[11,"tag_len","","The length of a tag.",4,[[["self"]],["usize"]]],[11,"nonce_len","","The length of the nonces.",4,[[["self"]],["usize"]]],[0,"agreement","ring","Key Agreement: ECDH, including X25519.",N,N],[3,"Algorithm","ring::agreement","A key agreement algorithm.",N,N],[3,"EphemeralPrivateKey","","An ephemeral private key for use (only) with `agree_ephemeral`. The signature of `agree_ephemeral` ensures that an `EphemeralPrivateKey` can be used for at most one key agreement.",N,N],[5,"agree_ephemeral","","Performs a key agreement with an ephemeral private key and the given public key.",N,[[["ephemeralprivatekey"],["algorithm"],["input"],["e"],["f"]],["result"]]],[7,"ECDH_P256","","ECDH using the NSA Suite B P-256 (secp256r1) curve.",N,N],[7,"ECDH_P384","","ECDH using the NSA Suite B P-384 (secp384r1) curve.",N,N],[7,"X25519","","X25519 (ECDH using Curve25519) as described in [RFC 7748].",N,N],[17,"PUBLIC_KEY_MAX_LEN","","The maximum length, in bytes, of an encoded public key.",N,N],[11,"generate","","Generate a new ephemeral private key for the given algorithm.",5,[[["algorithm"],["securerandom"]],["result",["ephemeralprivatekey","unspecified"]]]],[11,"algorithm","","The key exchange algorithm.",5,[[["self"]],["algorithm"]]],[11,"public_key_len","","The size in bytes of the encoded public key.",5,[[["self"]],["usize"]]],[11,"compute_public_key","","Computes the public key from the private key's value and fills `out` with the public point encoded in the standard form for the algorithm.",5,N],[0,"constant_time","ring","Constant-time operations.",N,N],[5,"verify_slices_are_equal","ring::constant_time","Returns `Ok(())` if `a == b` and `Err(error::Unspecified)` otherwise. The comparison of `a` and `b` is done in constant time with respect to the contents of each, but NOT in constant time with respect to the lengths of `a` and `b`.",N,N],[0,"digest","ring","SHA-2 and the legacy SHA-1 digest algorithm.",N,N],[3,"Context","ring::digest","A context for multi-step (Init-Update-Finish) digest calculations.",N,N],[12,"algorithm","","The context's algorithm.",6,N],[3,"Digest","","A calculated digest value.",N,N],[3,"Algorithm","","A digest algorithm.",N,N],[12,"output_len","","C analog: `EVP_MD_size`",7,N],[12,"chaining_len","","The size of the chaining value of the digest function, in bytes. For non-truncated algorithms (SHA-1, SHA-256, SHA-512), this is equal to `output_len`. For truncated algorithms (e.g. SHA-384, SHA-512/256), this is equal to the length before truncation. This is mostly helpful for determining the size of an HMAC key that is appropriate for the digest algorithm.",7,N],[12,"block_len","","C analog: `EVP_MD_block_size`",7,N],[5,"digest","","Returns the digest of `data` using the given digest algorithm.",N,N],[7,"SHA1","","SHA-1 as specified in [FIPS 180-4]. Deprecated.",N,N],[7,"SHA256","","SHA-256 as specified in [FIPS 180-4].",N,N],[7,"SHA384","","SHA-384 as specified in [FIPS 180-4].",N,N],[7,"SHA512","","SHA-512 as specified in [FIPS 180-4].",N,N],[7,"SHA512_256","","SHA-512/256 as specified in [FIPS 180-4].",N,N],[17,"MAX_BLOCK_LEN","","The maximum block length (`Algorithm::block_len`) of all the algorithms in this module.",N,N],[17,"MAX_OUTPUT_LEN","","The maximum output length (`Algorithm::output_len`) of all the algorithms in this module.",N,N],[17,"MAX_CHAINING_LEN","","The maximum chaining length (`Algorithm::chaining_len`) of all the algorithms in this module.",N,N],[17,"SHA1_OUTPUT_LEN","","The length of the output of SHA-1, in bytes.",N,N],[17,"SHA256_OUTPUT_LEN","","The length of the output of SHA-256, in bytes.",N,N],[17,"SHA384_OUTPUT_LEN","","The length of the output of SHA-384, in bytes.",N,N],[17,"SHA512_OUTPUT_LEN","","The length of the output of SHA-512, in bytes.",N,N],[17,"SHA512_256_OUTPUT_LEN","","The length of the output of SHA-512/256, in bytes.",N,N],[11,"new","","Constructs a new context.",6,[[["algorithm"]],["context"]]],[11,"update","","Updates the digest with all the data in `data`. `update` may be called zero or more times until `finish` is called. It must not be called after `finish` has been called.",6,N],[11,"finish","","Finalizes the digest calculation and returns the digest value. `finish` consumes the context so it cannot be (mis-)used after `finish` has been called.",6,[[["self"]],["digest"]]],[11,"algorithm","","The algorithm that this context is using.",6,[[["self"]],["algorithm"]]],[11,"algorithm","","The algorithm that was used to calculate the digest value.",8,[[["self"]],["algorithm"]]],[0,"error","ring","Error reporting.",N,N],[3,"Unspecified","ring::error","An error with absolutely no details.",N,N],[0,"hkdf","ring","HMAC-based Extract-and-Expand Key Derivation Function.",N,N],[5,"extract_and_expand","ring::hkdf","Fills `out` with the output of the HKDF Extract-and-Expand operation for the given inputs.",N,N],[5,"extract","","The HKDF-Extract operation.",N,N],[5,"expand","","Fills `out` with the output of the HKDF-Expand operation for the given inputs.",N,N],[0,"hmac","ring","HMAC is specified in [RFC 2104].",N,N],[3,"Signature","ring::hmac","An HMAC signature.",N,N],[3,"SigningKey","","A key to use for HMAC signing.",N,N],[3,"SigningContext","","A context for multi-step (Init-Update-Finish) HMAC signing.",N,N],[3,"VerificationKey","","A key to use for HMAC authentication.",N,N],[5,"sign","","Calculates the HMAC of `data` using the key `key` in one step.",N,N],[5,"verify","","Calculates the HMAC of `data` using the key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"verify_with_own_key","","Calculates the HMAC of `data` using the signing key `key`, and verifies whether the resultant value equals `signature`, in one step.",N,N],[5,"recommended_key_len","","Returns the recommended key length for HMAC using the given digest algorithm.",N,[[["algorithm"]],["usize"]]],[11,"generate","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`.",9,[[["algorithm"],["securerandom"]],["result",["signingkey","unspecified"]]]],[11,"generate_serializable","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`, and puts the raw key value in `key_bytes`.",9,N],[11,"new","","Construct an HMAC signing key using the given digest algorithm and key value.",9,N],[11,"digest_algorithm","","The digest algorithm for the key.",9,[[["self"]],["algorithm"]]],[11,"with_key","","Constructs a new HMAC signing context using the given digest algorithm and key.",10,[[["signingkey"]],["signingcontext"]]],[11,"update","","Updates the HMAC with all the data in `data`. `update` may be called zero or more times until `finish` is called.",10,N],[11,"sign","","Finalizes the HMAC calculation and returns the HMAC value. `sign` consumes the context so it cannot be (mis-)used after `sign` has been called.",10,[[["self"]],["signature"]]],[11,"new","","Construct an HMAC verification key using the given digest algorithm and key value.",11,N],[11,"digest_algorithm","","The digest algorithm for the key.",11,[[["self"]],["algorithm"]]],[0,"pbkdf2","ring","PBKDF2 derivation and verification.",N,N],[5,"derive","ring::pbkdf2","Fills `out` with the key derived using PBKDF2 with the given inputs.",N,N],[5,"verify","","Verifies that a previously-derived (e.g., using `derive`) PBKDF2 value matches the PBKDF2 value derived from the other inputs.",N,N],[0,"rand","ring","Cryptographic pseudo-random number generation.",N,N],[3,"SystemRandom","ring::rand","A secure random number generator where the random values come directly from the operating system.",N,N],[8,"SecureRandom","","A secure random number generator.",N,N],[10,"fill","","Fills `dest` with random bytes.",12,N],[11,"new","","Constructs a new `SystemRandom`.",13,[[],["systemrandom"]]],[0,"signature","ring","Public key signatures: signing and verification.",N,N],[3,"ECDSAKeyPair","ring::signature","An ECDSA key pair, used for signing.",N,N],[3,"ECDSAVerification","","An ECDSA verification algorithm.",N,N],[3,"EdDSAParameters","","Parameters for EdDSA signing and verification.",N,N],[3,"Ed25519KeyPair","","An Ed25519 key pair, for signing.",N,N],[3,"RSAParameters","","Parameters for RSA verification.",N,N],[3,"Signature","","A public key signature returned from a signing operation.",N,N],[3,"KeyPair","","A key pair for signing.",N,N],[5,"key_pair_from_pkcs8","","Returns a key for signing that is parsed from a PKCS#8 document.",N,[[["signingalgorithm"],["input"]],["result",["keypair","unspecified"]]]],[5,"sign","","Returns a signature of the given data using the given key. The signing may or may not use `rng`, depending on the `key_pair's algorithm.",N,[[["keypair"],["securerandom"],["input"]],["result",["signature","unspecified"]]]],[5,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key` using the algorithm `alg`.",N,[[["verificationalgorithm"],["input"],["input"],["input"]],["result",["unspecified"]]]],[0,"primitive","","Lower-level verification primitives. Usage of `ring::signature::verify()` is preferred when the public key and signature are encoded in standard formats, as it also handles the parsing.",N,N],[5,"verify_rsa","ring::signature::primitive","Lower-level API for the verification of RSA signatures.",N,N],[7,"ECDSA_P256_SHA256_ASN1_SIGNING","ring::signature","Signing of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA256_FIXED_SIGNING","","Signing of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P384_SHA384_ASN1_SIGNING","","Signing of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA384_FIXED_SIGNING","","Signing of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ECDSA_P256_SHA256_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA256_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",N,N],[7,"ECDSA_P256_SHA384_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA256_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-256.",N,N],[7,"ECDSA_P384_SHA384_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ECDSA_P384_SHA384_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",N,N],[7,"ED25519","","Verification of [Ed25519] signatures.",N,N],[7,"RSA_PKCS1_2048_8192_SHA1","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-1.",N,N],[7,"RSA_PKCS1_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-256.",N,N],[7,"RSA_PKCS1_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PKCS1_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-512.",N,N],[7,"RSA_PKCS1_3072_8192_SHA384","","Verification of signatures using RSA keys of 3072-8192 bits,              PKCS#1.5 padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-256.",N,N],[7,"RSA_PSS_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-384.",N,N],[7,"RSA_PSS_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-512.",N,N],[17,"ED25519_PUBLIC_KEY_LEN","","The length of an Ed25519 public key.",N,N],[17,"ED25519_PKCS8_V2_LEN","","The length of a Ed25519 PKCS#8 (v2) private key generated by `Ed25519KeyPair::generate_pkcs8()`. Ed25519 PKCS#8 files generated by other software may have different lengths, and `Ed25519KeyPair::generate_pkcs8()` may generate files of a different length in the future.",N,N],[8,"SigningAlgorithm","","An algorithm for signing.",N,N],[10,"from_pkcs8","","Parses the key out of the given PKCS#8 document, verifying that it is valid for the algorithm.",14,[[["self"],["input"]],["result",["keypair","unspecified"]]]],[8,"VerificationAlgorithm","","A signature verification algorithm.",N,N],[10,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key`.",15,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[0,"test","ring","Testing framework.",N,N],[3,"TestCase","ring::test","A test case. A test case consists of a set of named attributes. Every attribute in the test case must be consumed exactly once; this helps catch typos and omissions.",N,N],[5,"compile_time_assert_clone","","`compile_time_assert_clone::<T>();` fails to compile if `T` doesn't implement `Clone`.",N,[[]]],[5,"compile_time_assert_copy","","`compile_time_assert_copy::<T>();` fails to compile if `T` doesn't implement `Copy`.",N,[[]]],[5,"compile_time_assert_send","","`compile_time_assert_send::<T>();` fails to compile if `T` doesn't implement `Send`.",N,[[]]],[5,"compile_time_assert_sync","","`compile_time_assert_sync::<T>();` fails to compile if `T` doesn't implement `Sync`.",N,[[]]],[5,"compile_time_assert_debug","","`compile_time_assert_debug::<T>();` fails to compile if `T` doesn't implement `Debug`.",N,[[]]],[5,"ring_src_path","","Returns the path for ring source code root.",N,[[],["pathbuf"]]],[5,"from_file","","Reads test cases out of the file with the path given by `test_data_relative_file_path`, calling `f` on each vector until `f` fails or until all the test vectors have been read. `f` can indicate failure either by returning `Err()` or by panicking.",N,[[["str"],["f"]]]],[5,"from_hex","","Decode an string of hex digits into a sequence of bytes. The input must have an even number of digits.",N,[[["str"]],["result",["vec","string"]]]],[0,"rand","","Deterministic implementations of `ring::rand::SecureRandom`.",N,N],[3,"FixedByteRandom","ring::test::rand","An implementation of `SecureRandom` that always fills the output slice with the given byte.",N,N],[12,"byte","","",16,N],[3,"FixedSliceRandom","","An implementation of `SecureRandom` that always fills the output slice with the slice in `bytes`. The length of the slice given to `slice` must match exactly.",N,N],[12,"bytes","","",17,N],[3,"FixedSliceSequenceRandom","","An implementation of `SecureRandom` where each slice in `bytes` is a test vector for one call to `fill()`. Not thread-safe.",N,N],[12,"bytes","","The value.",18,N],[12,"current","","",18,N],[11,"consume_bool","ring::test","Maps the string \"true\" to true and the string \"false\" to false.",19,[[["self"],["str"]],["bool"]]],[11,"consume_digest_alg","","Maps the strings \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\" to digest algorithms, maps \"SHA224\" to `None`, and panics on other (erroneous) inputs. \"SHA224\" is mapped to None because ring intentionally does not support SHA224, but we need to consume test vectors from NIST that have SHA224 vectors in them.",19,[[["self"],["str"]],["option",["algorithm"]]]],[11,"consume_bytes","","Returns the value of an attribute that is encoded as a sequence of an even number of hex digits, or as a double-quoted UTF-8 string. The empty (zero-length) value is represented as \"\".",19,[[["self"],["str"]],["vec",["u8"]]]],[11,"consume_usize","","Returns the value of an attribute that is an integer, in decimal notation.",19,[[["self"],["str"]],["usize"]]],[11,"consume_usize_bits","","Returns the value of an attribute that is an integer, in decimal notation, as a bit length.",19,[[["self"],["str"]],["bitlength"]]],[11,"consume_string","","Returns the raw value of an attribute, without any unquoting or other interpretation.",19,[[["self"],["str"]],["string"]]],[11,"consume_optional_string","","Like `consume_string()` except it returns `None` if the test case doesn't have the attribute.",19,[[["self"],["str"]],["option",["string"]]]],[11,"from","ring::aead","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","ring::aead::chacha20_poly1305_openssh","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","ring::agreement","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","ring::digest","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","ring::signature","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","ring::error","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","ring::hmac","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","ring::rand","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","ring::signature","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","ring::test","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","ring::test::rand","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"fill","ring::rand","",13,N],[11,"fill","ring::test::rand","",16,N],[11,"fill","","",17,N],[11,"fill","","",18,N],[11,"verify","ring::signature","",22,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"verify","","",24,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"verify","","",27,[[["self"],["input"],["input"],["input"]],["result",["unspecified"]]]],[11,"from","ring::error","",25,[[["endofinput"]],["self"]]],[11,"fmt","ring::aead","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","ring::agreement","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","ring::digest","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","ring::signature","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","ring::error","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","ring::hmac","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","ring::signature","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","ring::test","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","ring::test::rand","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","ring::error","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","ring::aead","",4,[[["self"],["self"]],["bool"]]],[11,"eq","ring::agreement","",20,[[["self"],["algorithm"]],["bool"]]],[11,"ne","","",20,[[["self"],["algorithm"]],["bool"]]],[11,"eq","ring::digest","",7,[[["self"],["self"]],["bool"]]],[11,"eq","ring::error","",25,[[["self"],["unspecified"]],["bool"]]],[11,"drop","ring::test::rand","",18,[[["self"]]]],[11,"clone","ring::digest","",6,[[["self"]],["context"]]],[11,"clone","","",8,[[["self"]],["digest"]]],[11,"clone","ring::error","",25,[[["self"]],["unspecified"]]],[11,"clone","ring::hmac","",26,[[["self"]],["signature"]]],[11,"clone","","",10,[[["self"]],["signingcontext"]]],[11,"clone","ring::signature","",28,[[["self"]],["signature"]]],[11,"as_ref","ring::digest","",8,N],[11,"as_ref","ring::hmac","",26,N],[11,"as_ref","ring::signature","",28,N],[11,"cause","ring::error","",25,[[["self"]],["option",["error"]]]],[11,"description","","",25,[[["self"]],["str"]]],[11,"generate_pkcs8","ring::signature","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",21,[[["securerandom"]],["result",["unspecified"]]]],[11,"from_pkcs8","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v2 Ed25519 private key.",21,[[["input"]],["result",["unspecified"]]]],[11,"from_pkcs8_maybe_unchecked","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v1 or v2 Ed25519 private key.",21,[[["input"]],["result",["unspecified"]]]],[11,"from_seed_and_public_key","","Constructs an Ed25519 key pair from the private key seed `seed` and its public key `public_key`.",21,[[["input"],["input"]],["result",["unspecified"]]]],[11,"from_seed_unchecked","","Constructs a Ed25519 key pair from the private key seed `seed`.",21,[[["input"]],["result",["unspecified"]]]],[11,"public_key_bytes","","Returns a reference to the little-endian-encoded public key bytes.",21,N],[11,"sign","","Returns the signature of the message `msg`.",21,N],[11,"generate_pkcs8","","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",23,[[["algorithm"],["securerandom"]],["result",["document","unspecified"]]]],[11,"from_pkcs8","","Constructs an ECDSA key pair by parsing an unencrypted PKCS#8 v1 id-ecPublicKey `ECPrivateKey` key.",23,[[["algorithm"],["input"]],["result",["unspecified"]]]],[11,"from_private_key_and_public_key","","Constructs an ECDSA key pair directly from the big-endian-encoded private key and public key bytes.",23,[[["algorithm"],["input"],["input"]],["result",["unspecified"]]]],[11,"sign","","Deprecated.",23,[[["self"],["input"],["securerandom"]],["result",["signature","unspecified"]]]]],"paths":[[3,"SealingKey"],[3,"OpeningKey"],[3,"OpeningKey"],[3,"SealingKey"],[3,"Algorithm"],[3,"EphemeralPrivateKey"],[3,"Context"],[3,"Algorithm"],[3,"Digest"],[3,"SigningKey"],[3,"SigningContext"],[3,"VerificationKey"],[8,"SecureRandom"],[3,"SystemRandom"],[8,"SigningAlgorithm"],[8,"VerificationAlgorithm"],[3,"FixedByteRandom"],[3,"FixedSliceRandom"],[3,"FixedSliceSequenceRandom"],[3,"TestCase"],[3,"Algorithm"],[3,"Ed25519KeyPair"],[3,"EdDSAParameters"],[3,"ECDSAKeyPair"],[3,"ECDSAVerification"],[3,"Unspecified"],[3,"Signature"],[3,"RSAParameters"],[3,"Signature"],[3,"KeyPair"]]};
searchIndex["rocket"]={"doc":"Rocket - Core API Documentation","items":[[3,"Response","rocket","A response, as returned by types implementing [`Responder`].",N,N],[3,"Data","","Type representing the data in the body of an incoming request.",N,N],[3,"Config","","Structure for Rocket application configuration.",N,N],[12,"environment","","The environment that this configuration corresponds to.",0,N],[12,"address","","The address to serve on.",0,N],[12,"port","","The port to serve on.",0,N],[12,"workers","","The number of workers to run concurrently.",0,N],[12,"keep_alive","","Keep-alive timeout in seconds or None if disabled.",0,N],[12,"log_level","","How much information to log.",0,N],[12,"limits","","Streaming read size limits.",0,N],[12,"extras","","Extra parameters that aren't part of Rocket's core config.",0,N],[12,"config_path","","The path to the configuration file this config belongs to.",0,N],[3,"Route","","A route: a method, its handler, path, rank, and format/media type.",N,N],[12,"name","","The name of this route, if one was given.",1,N],[12,"method","","The method this route matches against.",1,N],[12,"handler","","The function that should be called when the route matches.",1,N],[12,"base","","The base mount point of this `Route`.",1,N],[12,"uri","","The uri (in Rocket's route format) that should be matched against. This URI already includes the base mount point.",1,N],[12,"rank","","The rank of this route. Lower ranks have higher priorities.",1,N],[12,"format","","The media type this route matches against, if any.",1,N],[3,"Request","","The type of an incoming web request.",N,N],[3,"State","","Request guard to retrieve managed state.",N,N],[3,"Catcher","","An error catching route.",N,N],[12,"code","","The HTTP status code to match against.",2,N],[12,"handler","","The catcher's associated handler.",2,N],[3,"Rocket","","The main `Rocket` type: used to mount routes and catchers and launch the application.",N,N],[4,"Outcome","","An enum representing success (`Success`), failure (`Failure`), or forwarding (`Forward`).",N,N],[13,"Success","","Contains the success value.",3,N],[13,"Failure","","Contains the failure error value.",3,N],[13,"Forward","","Contains the value to forward on.",3,N],[5,"ignite","","Alias to [`Rocket::ignite()`] Creates a new instance of `Rocket`.",N,[[],["rocket"]]],[5,"custom","","Alias to [`Rocket::custom()`]. Creates a new instance of `Rocket` with a custom configuration.",N,[[["config"]],["rocket"]]],[0,"local","","Structures for local dispatching of requests, primarily for testing.",N,N],[3,"LocalResponse","rocket::local","A structure representing a response from dispatching a local request.",N,N],[3,"LocalRequest","","A structure representing a local request as created by [`Client`].",N,N],[3,"Client","","A structure to construct requests for local dispatching.",N,N],[11,"inner","","Retrieves the inner `Request` as seen by Rocket.",4,[[["self"]],["request"]]],[11,"header","","Add a header to this request.",4,[[["self"],["h"]],["self"]]],[11,"add_header","","Adds a header to this request without consuming `self`.",4,[[["self"],["h"]]]],[11,"remote","","Set the remote address of this request.",4,[[["self"],["socketaddr"]],["self"]]],[11,"cookie","","Add a cookie to this request.",4,[[["self"],["cookie"]],["self"]]],[11,"cookies","","Add all of the cookies in `cookies` to this request.",4,[[["self"],["vec",["cookie"]]],["self"]]],[11,"private_cookie","","Add a [private cookie] to this request.",4,[[["self"],["cookie"]],["self"]]],[11,"body","","Set the body (data) of the request.",4,[[["self"],["s"]],["self"]]],[11,"set_body","","Set the body (data) of the request without consuming `self`.",4,[[["self"],["s"]]]],[11,"dispatch","","Dispatches the request, returning the response.",4,[[["self"]],["localresponse"]]],[11,"mut_dispatch","","Dispatches the request, returning the response.",4,[[["self"]],["localresponse"]]],[11,"new","","Construct a new `Client` from an instance of `Rocket` with cookie tracking.",5,[[["rocket"]],["result",["client","launcherror"]]]],[11,"untracked","","Construct a new `Client` from an instance of `Rocket` without cookie tracking.",5,[[["rocket"]],["result",["client","launcherror"]]]],[11,"rocket","","Returns the instance of `Rocket` this client is creating requests for.",5,[[["self"]],["rocket"]]],[11,"get","","Create a local `GET` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"put","","Create a local `PUT` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"post","","Create a local `POST` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"delete","","Create a local `DELETE` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"options","","Create a local `OPTIONS` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"head","","Create a local `HEAD` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"patch","","Create a local `PATCH` request to the URI `uri`.",5,[[["self"],["u"]],["localrequest"]]],[11,"req","","Create a local request with method `method` to the URI `uri`.",5,[[["self"],["method"],["u"]],["localrequest"]]],[0,"request","rocket","Types and traits for request parsing and handling.",N,N],[3,"Request","rocket::request","The type of an incoming web request.",N,N],[3,"Form","","A data guard for parsing [`FromForm`] types strictly.",N,N],[3,"LenientForm","","A data gaurd for parsing [`FromForm`] types leniently.",N,N],[3,"FormItem","","A form items returned by the [`FormItems`] iterator.",N,N],[12,"raw","","The full, nonempty string for the item, not including `&` delimiters.",6,N],[12,"key","","The key for the item, which may be empty if `value` is nonempty.",6,N],[12,"value","","The value for the item, which may be empty if `key` is nonempty.",6,N],[3,"State","","Request guard to retrieve managed state.",N,N],[3,"Query","","Iterator over form items in a query string.",N,N],[4,"FormItems","","Iterator over the key/value pairs of a given HTTP form string.",N,N],[4,"FormParseError","","Error returned by the `FromForm` derive on form parsing errors.",N,N],[13,"BadValue","","The field named `.0` with value `.1` failed to parse or validate.",7,N],[13,"Unknown","","The parse was strict and the field named `.0` with value `.1` appeared in the incoming form string but was unexpected.",7,N],[13,"Missing","","The field named `.0` was expected but is missing in the incoming form.",7,N],[4,"FormDataError","","Error returned by the `FromData` implementations of `Form` and `LenientForm`.",N,N],[13,"Io","","An I/O error occurred while reading reading the data stream. This can also mean that the form contained invalid UTF-8.",8,N],[13,"Malformed","","The form string (in `.0`) is malformed and was unable to be parsed as HTTP `application/x-www-form-urlencoded` data.",8,N],[13,"Parse","","The form string (in `.1`) failed to parse as the intended structure. The error type in `.0` contains further details.",8,N],[11,"method","rocket","Retrieve the method from `self`.",9,[[["self"]],["method"]]],[11,"set_method","","Set the method of `self`.",9,[[["self"],["method"]]]],[11,"uri","","Borrow the [`Origin`] URI from `self`.",9,[[["self"]],["origin"]]],[11,"set_uri","","Set the URI in `self` to `uri`.",9,[[["self"],["origin"]]]],[11,"remote","","Returns the address of the remote connection that initiated this request if the address is known. If the address is not known, `None` is returned.",9,[[["self"]],["option",["socketaddr"]]]],[11,"set_remote","","Sets the remote address of `self` to `address`.",9,[[["self"],["socketaddr"]]]],[11,"real_ip","","Returns the IP address in the \"X-Real-IP\" header of the request if such a header exists and contains a valid IP address.",9,[[["self"]],["option",["ipaddr"]]]],[11,"client_ip","","Attempts to return the client's IP address by first inspecting the \"X-Real-IP\" header and then using the remote connection's IP address.",9,[[["self"]],["option",["ipaddr"]]]],[11,"cookies","","Returns a wrapped borrow to the cookies in `self`.",9,[[["self"]],["cookies"]]],[11,"headers","","Returns a [`HeaderMap`] of all of the headers in `self`.",9,[[["self"]],["headermap"]]],[11,"add_header","","Add `header` to `self`'s headers. The type of `header` can be any type that implements the `Into<Header>` trait. This includes common types such as [`ContentType`] and [`Accept`].",9,[[["self"],["h"]]]],[11,"replace_header","","Replaces the value of the header with name `header.name` with `header.value`. If no such header exists, `header` is added as a header to `self`.",9,[[["self"],["h"]]]],[11,"content_type","","Returns the Content-Type header of `self`. If the header is not present, returns `None`. The Content-Type header is cached after the first call to this function. As a result, subsequent calls will always return the same value.",9,[[["self"]],["option",["contenttype"]]]],[11,"accept","","Returns the Accept header of `self`. If the header is not present, returns `None`. The Accept header is cached after the first call to this function. As a result, subsequent calls will always return the same value.",9,[[["self"]],["option",["accept"]]]],[11,"format","","Returns the media type \"format\" of the request.",9,[[["self"]],["option",["mediatype"]]]],[11,"limits","","Returns the configured application receive limits.",9,[[["self"]],["limits"]]],[11,"route","","Get the presently matched route, if any.",9,[[["self"]],["option",["route"]]]],[11,"guard","","Invokes the request guard implementation for `T`, returning its outcome.",9,[[["self"]],["outcome"]]],[11,"local_cache","","Retrieves the cached value for type `T` from the request-local cached state of `self`. If no such value has previously been cached for this request, `f` is called to produce the value which is subsequently returned.",9,[[["self"],["f"]],["t"]]],[11,"get_param","","Retrieves and parses into `T` the 0-indexed `n`th segment from the request. Returns `None` if `n` is greater than the number of segments. Returns `Some(Err(T::Error))` if the parameter type `T` failed to be parsed from the `n`th dynamic parameter.",9,[[["self"],["usize"]],["option",["result"]]]],[11,"get_segments","","Retrieves and parses into `T` all of the path segments in the request URI beginning and including the 0-indexed `n`th non-empty segment. `T` must implement [`FromSegments`], which is used to parse the segments.",9,[[["self"],["usize"]],["option",["result"]]]],[11,"get_query_value","","Retrieves and parses into `T` the query value with key `key`. `T` must implement [`FromFormValue`], which is used to parse the query's value. Key matching is performed case-sensitively. If there are multiple pairs with key `key`, the last one is returned.",9,[[["self"],["str"]],["option",["result"]]]],[11,"key_value","rocket::request","Extracts the raw `key` and `value` as a tuple.",6,N],[11,"key_value_decoded","","Extracts and lossy URL decodes the `key` and `value` as a tuple.",6,N],[11,"explode","","Extracts `raw` and the raw `key` and `value` as a triple.",6,N],[11,"completed","","Returns `true` if the form string was parsed to completion. Returns `false` otherwise. All valid form strings will parse to completion, while invalid form strings will not.",10,[[["self"]],["bool"]]],[11,"exhaust","","Parses all remaining key/value pairs and returns `true` if parsing ran to completion. All valid form strings will parse to completion, while invalid form strings will not.",10,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self` and returns the parsed value.",11,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the parsed value.",12,[[["self"]],["t"]]],[11,"inner","rocket","Retrieve a borrow to the underlying value with a lifetime of `'r`.",13,[[["self"]],["t"]]],[6,"Outcome","rocket::request","Type alias for the `Outcome` of a `FromRequest` conversion.",N,N],[6,"FormError","","Alias to the type of form errors returned by the [`FromData`] implementations of [`Form<T>`] where the [`FromForm`] implementation for `T` was derived.",N,N],[6,"FlashMessage","","Type alias to retrieve [`Flash`] messages from a request.",N,N],[8,"FromRequest","","Trait implemented by request guards to derive a value from incoming requests.",N,N],[16,"Error","","The associated error to be returned if derivation fails.",14,N],[10,"from_request","","Derives an instance of `Self` from the incoming request metadata.",14,[[["request"]],["outcome"]]],[8,"FromParam","","Trait to convert a dynamic path segment string to a concrete value.",N,N],[16,"Error","","The associated error to be returned if parsing/validation fails.",15,N],[10,"from_param","","Parses and validates an instance of `Self` from a path parameter string or returns an `Error` if parsing or validation fails.",15,[[["rawstr"]],["result"]]],[8,"FromSegments","","Trait to convert many dynamic path segment strings to a concrete value.",N,N],[16,"Error","","The associated error to be returned when parsing fails.",16,N],[10,"from_segments","","Parses an instance of `Self` from many dynamic path parameter strings or returns an `Error` if one cannot be parsed.",16,[[["segments"]],["result"]]],[8,"FromForm","","Trait to create an instance of some type from an HTTP form. `Form` requires its generic type to implement this trait.",N,N],[16,"Error","","The associated error to be returned when parsing fails.",17,N],[10,"from_form","","Parses an instance of `Self` from the iterator of form items `it`.",17,[[["formitems"],["bool"]],["result"]]],[8,"FromFormValue","","Trait to parse a typed value from a form value.",N,N],[16,"Error","","The associated error which can be returned from parsing. It is a good idea to have the return type be or contain an `&'v str` so that the unparseable string can be examined after a bad parse.",18,N],[10,"from_form_value","","Parses an instance of `Self` from an HTTP form field value or returns an `Error` if one cannot be parsed.",18,[[["rawstr"]],["result"]]],[11,"default","","Returns a default value to be used when the form field does not exist. If this returns `None`, then the field is required. Otherwise, this should return `Some(default_value)`. The default implementation simply returns `None`.",18,[[],["option"]]],[8,"FromQuery","","Trait implemented by query guards to derive a value from a query string.",N,N],[16,"Error","","The associated error to be returned if parsing/validation fails.",19,N],[10,"from_query","","Parses and validates an instance of `Self` from a query or returns an `Error` if parsing or validation fails.",19,[[["query"]],["result"]]],[0,"response","rocket","Types and traits to build and send responses.",N,N],[3,"Response","rocket::response","A response, as returned by types implementing [`Responder`].",N,N],[3,"ResponseBuilder","","Type for easily building `Response`s.",N,N],[3,"Redirect","","An empty redirect response to a given URL.",N,N],[3,"Flash","","Sets a \"flash\" cookie that will be removed when it is accessed. The analogous request type is [`FlashMessage`].",N,N],[3,"NamedFile","","A file with an associated name; responds with the Content-Type based on the file extension.",N,N],[3,"Stream","","Streams a response to a client from an arbitrary `Read`er type.",N,N],[3,"Content","","Sets the Content-Type of a `Responder` to a chosen value.",N,N],[12,"0","","",20,N],[12,"1","","",20,N],[4,"Body","","The body of a response: can be sized or streamed/chunked.",N,N],[13,"Sized","","A fixed-size body.",21,N],[13,"Chunked","","A streamed/chunked body, akin to `Transfer-Encoding: chunked`.",21,N],[11,"to","","Construct a temporary \"see other\" (303) redirect response. This is the typical response when redirecting a user to another page. This type of redirect indicates that the client should look elsewhere, but always via a `GET` request, for a given resource.",22,[[["u"]],["redirect"]]],[11,"temporary","","Construct a \"temporary\" (307) redirect response. This response instructs the client to reissue the current request to a different URL, maintaining the contents of the request identically. This means that, for example, a `POST` request will be resent, contents included, to the requested URL.",22,[[["u"]],["redirect"]]],[11,"permanent","","Construct a \"permanent\" (308) redirect response. This redirect must only be used for permanent redirects as it is cached by clients. This response instructs the client to reissue requests for the current URL to a different URL, now and in the future, maintaining the contents of the request identically. This means that, for example, a `POST` request will be resent, contents included, to the requested URL.",22,[[["u"]],["redirect"]]],[11,"found","","Construct a temporary \"found\" (302) redirect response. This response instructs the client to reissue the current request to a different URL, ideally maintaining the contents of the request identically. Unfortunately, different clients may respond differently to this type of redirect, so `303` or `307` redirects, which disambiguate, are preferred.",22,[[["u"]],["redirect"]]],[11,"moved","","Construct a permanent \"moved\" (301) redirect response. This response should only be used for permanent redirects as it can be cached by browsers. Because different clients may respond differently to this type of redirect, a `308` redirect, which disambiguates, is preferred.",22,[[["u"]],["redirect"]]],[11,"open","","Attempts to open a file in read-only mode.",23,[[["p"]],["result",["namedfile"]]]],[11,"file","","Retrieve the underlying `File`.",23,[[["self"]],["file"]]],[11,"take_file","","Take the underlying `File`.",23,[[["self"]],["file"]]],[11,"file_mut","","Retrieve a mutable borrow to the underlying `File`.",23,[[["self"]],["file"]]],[11,"path","","Retrieve the path of this file.",23,[[["self"]],["path"]]],[11,"chunked","","Create a new stream from the given `reader` and sets the chunk size for each streamed chunk to `chunk_size` bytes.",24,[[["t"],["u64"]],["stream"]]],[11,"as_mut","","Returns a new `Body` with a mutable borrow to `self`'s inner type.",21,[[["self"]],["body"]]],[11,"map","","Consumes `self`. Passes the inner type as a parameter to `f` and constructs a new body with the size of `self` and the return value of the call to `f`.",21,[[["self"],["f"]],["body"]]],[11,"into_inner","","Consumes `self` and returns the inner body.",21,[[["self"]],["t"]]],[11,"is_sized","","Returns `true` if `self` is a `Body::Sized`.",21,[[["self"]],["bool"]]],[11,"is_chunked","","Returns `true` if `self` is a `Body::Chunked`.",21,[[["self"]],["bool"]]],[11,"into_bytes","","Attempts to read `self` into a `Vec` and returns it. If reading fails, returns `None`.",21,[[["self"]],["option",["vec"]]]],[11,"into_string","","Attempts to read `self` into a `String` and returns it. If reading or conversion fails, returns `None`.",21,[[["self"]],["option",["string"]]]],[11,"new","","Creates a new `ResponseBuilder` that will build on top of the `base` `Response`.",25,[[["response"]],["responsebuilder"]]],[11,"status","","Sets the status of the `Response` being built to `status`.",25,[[["self"],["status"]],["responsebuilder"]]],[11,"raw_status","","Sets the status of the `Response` being built to a custom status constructed from the `code` and `reason` phrase.",25,[[["self"],["u16"],["str"]],["responsebuilder"]]],[11,"header","","Adds `header` to the `Response`, replacing any header with the same name that already exists in the response. If multiple headers with the same name exist, they are all removed, and only the new header and value will remain.",25,[[["self"],["h"]],["responsebuilder"]]],[11,"header_adjoin","","Adds `header` to the `Response` by adjoining the header with any existing headers with the same name that already exist in the `Response`. This allows for multiple headers with the same name and potentially different values to be present in the `Response`.",25,[[["self"],["h"]],["responsebuilder"]]],[11,"raw_header","","Adds a custom header to the `Response` with the given name and value, replacing any header with the same name that already exists in the response. If multiple headers with the same name exist, they are all removed, and only the new header and value will remain.",25,[[["self"],["n"],["v"]],["responsebuilder"]]],[11,"raw_header_adjoin","","Adds custom header to the `Response` with the given name and value, adjoining the header with any existing headers with the same name that already exist in the `Response`. This allows for multiple headers with the same name and potentially different values to be present in the `Response`.",25,[[["self"],["n"],["v"]],["responsebuilder"]]],[11,"sized_body","","Sets the body of the `Response` to be the fixed-sized `body`.",25,[[["self"],["b"]],["responsebuilder"]]],[11,"streamed_body","","Sets the body of the `Response` to be the streamed `body`.",25,[[["self"],["b"]],["responsebuilder"]]],[11,"chunked_body","","Sets the body of the `Response` to be the streamed `body` with a custom chunk size, in bytes.",25,[[["self"],["b"],["u64"]],["responsebuilder"]]],[11,"raw_body","","Sets the body of `self` to be `body`. This method should typically not be used, opting instead for one of `sized_body`, `streamed_body`, or `chunked_body`.",25,[[["self"],["body"]],["responsebuilder"]]],[11,"merge","","Merges the `other` `Response` into `self` by setting any fields in `self` to the corresponding value in `other` if they are set in `other`. Fields in `self` are unchanged if they are not set in `other`. If a header is set in both `self` and `other`, the values in `other` are kept. Headers set only in `self` remain.",25,[[["self"],["response"]],["responsebuilder"]]],[11,"join","","Joins the `other` `Response` into `self` by setting any fields in `self` to the corresponding value in `other` if they are set in `self`. Fields in `self` are unchanged if they are already set. If a header is set in both `self` and `other`, the values are adjoined, with the values in `self` coming first. Headers only in `self` or `other` are set in `self`.",25,[[["self"],["response"]],["responsebuilder"]]],[11,"finalize","","Retrieve the built `Response`.",25,[[["self"]],["response"]]],[11,"ok","","Retrieve the built `Response` wrapped in `Ok`.",25,[[["self"]],["result",["response"]]]],[11,"new","rocket","Creates a new, empty `Response` without a status, body, or headers. Because all HTTP responses must have a status, if a default `Response` is written to the client without a status, the status defaults to `200 Ok`.",26,[[],["response"]]],[11,"build","","Returns a `ResponseBuilder` with a base of `Response::new()`.",26,[[],["responsebuilder"]]],[11,"build_from","","Returns a `ResponseBuilder` with a base of `other`.",26,[[["response"]],["responsebuilder"]]],[11,"status","","Returns the status of `self`.",26,[[["self"]],["status"]]],[11,"set_status","","Sets the status of `self` to `status`.",26,[[["self"],["status"]]]],[11,"content_type","","Returns the Content-Type header of `self`. If the header is not present or is malformed, returns `None`.",26,[[["self"]],["option",["contenttype"]]]],[11,"set_raw_status","","Sets the status of `self` to a custom `status` with status code `code` and reason phrase `reason`. This method should be used sparingly; prefer to use set_status instead.",26,[[["self"],["u16"],["str"]]]],[11,"cookies","","Returns a vector of the cookies set in `self` as identified by the `Set-Cookie` header. Malformed cookies are skipped.",26,[[["self"]],["vec",["cookie"]]]],[11,"headers","","Returns a [`HeaderMap`] of all of the headers in `self`.",26,[[["self"]],["headermap"]]],[11,"set_header","","Sets the header `header` in `self`. Any existing headers with the name `header.name` will be lost, and only `header` will remain. The type of `header` can be any type that implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",26,[[["self"],["h"]],["bool"]]],[11,"set_raw_header","","Sets the custom header with name `name` and value `value` in `self`. Any existing headers with the same `name` will be lost, and the new custom header will remain. This method should be used sparingly; prefer to use set_header instead.",26,[[["self"],["n"],["v"]],["bool"]]],[11,"adjoin_header","","Adds the header `header` to `self`. If `self` contains headers with the name `header.name`, another header with the same name and value `header.value` is added. The type of `header` can be any type that implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",26,[[["self"],["h"]]]],[11,"adjoin_raw_header","","Adds a custom header with name `name` and value `value` to `self`. If `self` already contains headers with the name `name`, another header with the same `name` and `value` is added. The type of `header` can be any type implements `Into<Header>`. This includes `Header` itself, `ContentType` and `hyper::header` types.",26,[[["self"],["n"],["v"]]]],[11,"remove_header","","Removes all headers with the name `name`.",26,[[["self"],["str"]]]],[11,"body","","Returns a mutable borrow of the body of `self`, if there is one. The body is borrowed mutably to allow for reading.",26,[[["self"]],["option",["body"]]]],[11,"body_string","","Consumes `self's` body and reads it into a string. If `self` doesn't have a body, reading fails, or string conversion (for non-UTF-8 bodies) fails, returns `None`. Note that `self`'s `body` is consumed after a call to this method.",26,[[["self"]],["option",["string"]]]],[11,"body_bytes","","Consumes `self's` body and reads it into a `Vec` of `u8` bytes. If `self` doesn't have a body or reading fails returns `None`. Note that `self`'s `body` is consumed after a call to this method.",26,[[["self"]],["option",["vec"]]]],[11,"take_body","","Moves the body of `self` out and returns it, if there is one, leaving no body in its place.",26,[[["self"]],["option",["body"]]]],[11,"set_sized_body","","Sets the body of `self` to be the fixed-sized `body`. The size of the body is obtained by `seek`ing to the end and then `seek`ing back to the start.",26,[[["self"],["b"]]]],[11,"set_streamed_body","","Sets the body of `self` to be `body`, which will be streamed. The chunk size of the stream is DEFAULT_CHUNK_SIZE. Use set_chunked_body for custom chunk sizes.",26,[[["self"],["b"]]]],[11,"set_chunked_body","","Sets the body of `self` to be `body`, which will be streamed with chunk size `chunk_size`.",26,[[["self"],["b"],["u64"]]]],[11,"set_raw_body","","Sets the body of `self` to be `body`. This method should typically not be used, opting instead for one of `set_sized_body`, `set_streamed_body`, or `set_chunked_body`.",26,[[["self"],["body"]]]],[11,"merge","","Replaces this response's status and body with that of `other`, if they exist in `other`. Any headers that exist in `other` replace the ones in `self`. Any in `self` that aren't in `other` remain in `self`.",26,[[["self"],["response"]]]],[11,"join","","Sets `self`'s status and body to that of `other` if they are not already set in `self`. Any headers present in both `other` and `self` are adjoined.",26,[[["self"],["response"]]]],[11,"new","rocket::response","Constructs a new `Flash` message with the given `name`, `msg`, and underlying `responder`.",27,[[["r"],["n"],["m"]],["flash"]]],[11,"success","","Constructs a \"success\" `Flash` message with the given `responder` and `msg`.",27,[[["r"],["s"]],["flash"]]],[11,"warning","","Constructs a \"warning\" `Flash` message with the given `responder` and `msg`.",27,[[["r"],["s"]],["flash"]]],[11,"error","","Constructs an \"error\" `Flash` message with the given `responder` and `msg`.",27,[[["r"],["s"]],["flash"]]],[11,"name","","Returns the `name` of this message.",27,[[["self"]],["str"]]],[11,"msg","","Returns the `msg` contents of this message.",27,[[["self"]],["str"]]],[0,"content","","Contains types that set the Content-Type of a response.",N,N],[3,"Content","rocket::response::content","Sets the Content-Type of a `Responder` to a chosen value.",N,N],[12,"0","","",20,N],[12,"1","","",20,N],[3,"Json","","Override the `Content-Type` of the response to  JSON , or  application/json .",N,N],[12,"0","","",28,N],[3,"Xml","","Override the `Content-Type` of the response to  XML , or  text/xml .",N,N],[12,"0","","",29,N],[3,"MsgPack","","Override the `Content-Type` of the response to  MessagePack , or  application/msgpack .",N,N],[12,"0","","",30,N],[3,"Html","","Override the `Content-Type` of the response to  HTML , or  text/html .",N,N],[12,"0","","",31,N],[3,"Plain","","Override the `Content-Type` of the response to  plain text , or  text/plain .",N,N],[12,"0","","",32,N],[3,"Css","","Override the `Content-Type` of the response to  CSS , or  text/css .",N,N],[12,"0","","",33,N],[3,"JavaScript","","Override the `Content-Type` of the response to  JavaScript , or  application/javascript .",N,N],[12,"0","","",34,N],[0,"status","rocket::response","Contains types that set the status code and corresponding headers of a response.",N,N],[3,"Created","rocket::response::status","Sets the status of the response to 201 (Created).",N,N],[12,"0","","",35,N],[12,"1","","",35,N],[3,"Accepted","","Sets the status of the response to 202 (Accepted).",N,N],[12,"0","","",36,N],[3,"BadRequest","","Sets the status of the response to 400 (Bad Request).",N,N],[12,"0","","",37,N],[3,"NotFound","","Sets the status of the response to 404 (Not Found).",N,N],[12,"0","","",38,N],[3,"Custom","","Creates a response with the given status code and underlying responder.",N,N],[12,"0","","",39,N],[12,"1","","",39,N],[6,"Result","rocket::response","Type alias for the `Result` of a `Responder::respond` call.",N,N],[17,"DEFAULT_CHUNK_SIZE","","The default size, in bytes, of a chunk for streamed responses.",N,N],[8,"Responder","","Trait implemented by types that generate responses for clients.",N,N],[10,"respond_to","","Returns `Ok` if a `Response` could be generated successfully. Otherwise, returns an `Err` with a failing `Status`.",40,[[["self"],["request"]],["result"]]],[0,"outcome","rocket","Success, failure, and forward handling.",N,N],[4,"Outcome","rocket::outcome","An enum representing success (`Success`), failure (`Failure`), or forwarding (`Forward`).",N,N],[13,"Success","","Contains the success value.",3,N],[13,"Failure","","Contains the failure error value.",3,N],[13,"Forward","","Contains the value to forward on.",3,N],[8,"IntoOutcome","","Conversion trait from some type into an Outcome type.",N,N],[16,"Failure","","The type to use when returning an `Outcome::Failure`.",41,N],[16,"Forward","","The type to use when returning an `Outcome::Forward`.",41,N],[10,"into_outcome","","Converts `self` into an `Outcome`. If `self` represents a success, an `Outcome::Success` is returned. Otherwise, an `Outcome::Failure` is returned with `failure` as the inner value.",41,N],[10,"or_forward","","Converts `self` into an `Outcome`. If `self` represents a success, an `Outcome::Success` is returned. Otherwise, an `Outcome::Forward` is returned with `forward` as the inner value.",41,N],[11,"unwrap","","Unwraps the Outcome, yielding the contents of a Success.",3,[[["self"]],["s"]]],[11,"expect","","Unwraps the Outcome, yielding the contents of a Success.",3,[[["self"],["str"]],["s"]]],[11,"is_success","","Return true if this `Outcome` is a `Success`.",3,[[["self"]],["bool"]]],[11,"is_failure","","Return true if this `Outcome` is a `Failure`.",3,[[["self"]],["bool"]]],[11,"is_forward","","Return true if this `Outcome` is a `Forward`.",3,[[["self"]],["bool"]]],[11,"succeeded","","Converts from `Outcome<S, E, F>` to `Option<S>`.",3,[[["self"]],["option"]]],[11,"failed","","Converts from `Outcome<S, E, F>` to `Option<E>`.",3,[[["self"]],["option"]]],[11,"forwarded","","Converts from `Outcome<S, E, F>` to `Option<F>`.",3,[[["self"]],["option"]]],[11,"success_or","","Converts from `Outcome<S, E, F>` to `Result<S, T>` for a given `T`.",3,[[["self"],["t"]],["result"]]],[11,"success_or_else","","Converts from `Outcome<S, E, F>` to `Result<S, T>` for a given `T` produced from a supplied function or closure.",3,[[["self"],["v"]],["result"]]],[11,"as_ref","","Converts from `Outcome<S, E, F>` to `Outcome<&S, &E, &F>`.",3,[[["self"]],["outcome"]]],[11,"map","","Maps an `Outcome<S, E, F>` to an `Outcome<T, E, F>` by applying the function `f` to the value of type `S` in `self` if `self` is an `Outcome::Success`.",3,[[["self"],["m"]],["outcome"]]],[11,"map_failure","","Maps an `Outcome<S, E, F>` to an `Outcome<S, T, F>` by applying the function `f` to the value of type `E` in `self` if `self` is an `Outcome::Failure`.",3,[[["self"],["m"]],["outcome"]]],[11,"map_forward","","Maps an `Outcome<S, E, F>` to an `Outcome<S, E, T>` by applying the function `f` to the value of type `F` in `self` if `self` is an `Outcome::Forward`.",3,[[["self"],["m"]],["outcome"]]],[11,"and_then","","Maps an `Outcome<S, E, F>` to an `Outcome<T, E, F>` by applying the function `f` to the value of type `S` in `self` if `self` is an `Outcome::Success`.",3,[[["self"],["m"]],["outcome"]]],[11,"failure_then","","Maps an `Outcome<S, E, F>` to an `Outcome<S, T, F>` by applying the function `f` to the value of type `E` in `self` if `self` is an `Outcome::Failure`.",3,[[["self"],["m"]],["outcome"]]],[11,"forward_then","","Maps an `Outcome<S, E, F>` to an `Outcome<S, E, T>` by applying the function `f` to the value of type `F` in `self` if `self` is an `Outcome::Forward`.",3,[[["self"],["m"]],["outcome"]]],[11,"as_mut","","Converts from `Outcome<S, E, F>` to `Outcome<&mut S, &mut E, &mut F>`.",3,[[["self"]],["outcome"]]],[0,"config","rocket","Application configuration and configuration parameter retrieval.",N,N],[6,"Array","rocket::config","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",42,N],[13,"Integer","","Represents a TOML integer",42,N],[13,"Float","","Represents a TOML float",42,N],[13,"Boolean","","Represents a TOML boolean",42,N],[13,"Datetime","","Represents a TOML datetime",42,N],[13,"Array","","Represents a TOML array",42,N],[13,"Table","","Represents a TOML table",42,N],[3,"Datetime","","A parsed TOML datetime value",N,N],[3,"Limits","","Mapping from data type to size limits.",N,N],[3,"Config","","Structure for Rocket application configuration.",N,N],[12,"environment","","The environment that this configuration corresponds to.",0,N],[12,"address","","The address to serve on.",0,N],[12,"port","","The port to serve on.",0,N],[12,"workers","","The number of workers to run concurrently.",0,N],[12,"keep_alive","","Keep-alive timeout in seconds or None if disabled.",0,N],[12,"log_level","","How much information to log.",0,N],[12,"limits","","Streaming read size limits.",0,N],[12,"extras","","Extra parameters that aren't part of Rocket's core config.",0,N],[12,"config_path","","The path to the configuration file this config belongs to.",0,N],[3,"ConfigBuilder","","Structure following the builder pattern for building `Config` structures.",N,N],[12,"environment","","The environment that this configuration corresponds to.",43,N],[12,"address","","The address to serve on.",43,N],[12,"port","","The port to serve on.",43,N],[12,"workers","","The number of workers to run in parallel.",43,N],[12,"keep_alive","","Keep-alive timeout in seconds or disabled if 0.",43,N],[12,"log_level","","How much information to log.",43,N],[12,"secret_key","","The secret key.",43,N],[12,"tls","","TLS configuration (path to certificates file, path to private key file).",43,N],[12,"limits","","Size limits.",43,N],[12,"extras","","Any extra parameters that aren't part of Rocket's config.",43,N],[12,"root","","The root directory of this config.",43,N],[4,"ConfigError","","The type of a configuration error.",N,N],[13,"BadCWD","","The current working directory could not be determined.",44,N],[13,"NotFound","","The configuration file was not found.",44,N],[13,"IoError","","There was an I/O error while reading the configuration file.",44,N],[13,"Io","","There was an I/O error while setting a configuration parameter.",44,N],[13,"BadFilePath","","The path at which the configuration file was found was invalid.",44,N],[13,"BadEnv","","An environment specified in `ROCKET_ENV` is invalid.",44,N],[13,"BadEntry","","An environment specified as a table `[environment]` is invalid.",44,N],[13,"BadType","","A config key was specified with a value of the wrong type.",44,N],[13,"ParseError","","There was a TOML parsing error.",44,N],[13,"BadEnvVal","","There was a TOML parsing error in a config environment variable.",44,N],[13,"UnknownKey","","The entry (key) is unknown.",44,N],[13,"Missing","","The entry (key) was expected but was missing.",44,N],[4,"Environment","","An enum corresponding to the valid configuration environments.",N,N],[13,"Development","","The development environment.",45,N],[13,"Staging","","The staging environment.",45,N],[13,"Production","","The production environment.",45,N],[4,"LoggingLevel","","Defines the different levels for log messages.",N,N],[13,"Critical","","Only shows errors, warnings, and launch information.",46,N],[13,"Normal","","Shows everything except debug and trace information.",46,N],[13,"Debug","","Shows everything.",46,N],[13,"Off","","Shows nothing.",46,N],[11,"pretty_print","","Prints this configuration error with Rocket formatting.",44,[[["self"]]]],[11,"is_not_found","","Returns `true` if `self` is of `NotFound` variant.",44,[[["self"]],["bool"]]],[11,"active","","Retrieves the \"active\" environment as determined by the `ROCKET_ENV` environment variable. If `ROCKET_ENV` is not set, returns `Development` when the application was compiled in `debug` mode and `Production` when the application was compiled in `release` mode.",45,[[],["result",["environment","configerror"]]]],[11,"is_dev","","Returns `true` if `self` is `Environment::Development`.",45,[[["self"]],["bool"]]],[11,"is_stage","","Returns `true` if `self` is `Environment::Staging`.",45,[[["self"]],["bool"]]],[11,"is_prod","","Returns `true` if `self` is `Environment::Production`.",45,[[["self"]],["bool"]]],[11,"build","rocket","Returns a builder for `Config` structure where the default parameters are set to those of `env`. The root configuration directory is set to the current working directory.",0,[[["environment"]],["configbuilder"]]],[11,"new","","Returns a `Config` with the parameters for the environment `env`. The root configuration directory is set to the current working directory.",0,[[["environment"]],["result",["config"]]]],[11,"active","","Returns a `Config` with the default parameters of the active environment as determined by the `ROCKET_ENV` environment variable.",0,[[],["result",["config"]]]],[11,"development","","Returns a `Config` with the default parameters of the development environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"staging","","Returns a `Config` with the default parameters of the staging environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"production","","Returns a `Config` with the default parameters of the production environment. The root configuration directory is set to the current working directory.",0,[[],["result",["config"]]]],[11,"set_root","","Sets the root directory of this configuration to `root`.",0,[[["self"],["p"]]]],[11,"set_address","","Sets the address of `self` to `address`.",0,[[["self"],["a"]],["result"]]],[11,"set_port","","Sets the `port` of `self` to `port`.",0,[[["self"],["u16"]]]],[11,"set_workers","","Sets the number of `workers` in `self` to `workers`.",0,[[["self"],["u16"]]]],[11,"set_keep_alive","","Sets the keep-alive timeout to `timeout` seconds. If `timeout` is `0`, keep-alive is disabled.",0,[[["self"],["u32"]]]],[11,"set_secret_key","","Sets the `secret_key` in `self` to `key` which must be a 256-bit base64 encoded string.",0,[[["self"],["k"]],["result"]]],[11,"set_log_level","","Sets the logging level for `self` to `log_level`.",0,[[["self"],["logginglevel"]]]],[11,"set_limits","","Sets the receive limits in `self` to `limits`.",0,[[["self"],["limits"]]]],[11,"set_extras","","Sets the extras for `self` to be the key/value pairs in `extras`. encoded string.",0,[[["self"],["hashmap",["string","value"]]]]],[11,"extras","","Returns an iterator over the names and values of all of the extras in `self`.",0,N],[11,"tls_enabled","","Returns `true` if TLS is enabled.",0,[[["self"]],["bool"]]],[11,"get_extra","","Attempts to retrieve the extra named `name` as a raw value.",0,[[["self"],["str"]],["result",["value"]]]],[11,"get_str","","Attempts to retrieve the extra named `name` as a borrowed string.",0,[[["self"],["str"]],["result",["str"]]]],[11,"get_string","","Attempts to retrieve the extra named `name` as an owned string.",0,[[["self"],["str"]],["result",["string"]]]],[11,"get_int","","Attempts to retrieve the extra named `name` as an integer.",0,[[["self"],["str"]],["result",["i64"]]]],[11,"get_bool","","Attempts to retrieve the extra named `name` as a boolean.",0,[[["self"],["str"]],["result",["bool"]]]],[11,"get_float","","Attempts to retrieve the extra named `name` as a float.",0,[[["self"],["str"]],["result",["f64"]]]],[11,"get_slice","","Attempts to retrieve the extra named `name` as a slice of an array.",0,[[["self"],["str"]],["result",["array"]]]],[11,"get_table","","Attempts to retrieve the extra named `name` as a table.",0,[[["self"],["str"]],["result",["table"]]]],[11,"get_datetime","","Attempts to retrieve the extra named `name` as a datetime value.",0,[[["self"],["str"]],["result",["datetime"]]]],[11,"root","","Returns the path at which the configuration file for `self` is stored. For instance, if the configuration file is at `/tmp/Rocket.toml`, the path `/tmp` is returned.",0,[[["self"]],["path"]]],[11,"root_relative","","If `path` is a relative path, `path` is appended to the [`Config::root()`] at which the configuration file for `self` is stored and the new path is returned. If `path` is absolute, `path` is returned unaltered.",0,[[["self"],["p"]],["pathbuf"]]],[11,"new","rocket::config","Create a new `ConfigBuilder` instance using the default parameters from the given `environment`. The root configuration directory is set to the current working directory.",43,[[["environment"]],["configbuilder"]]],[11,"address","","Sets the `address` in the configuration being built.",43,[[["self"],["a"]],["self"]]],[11,"port","","Sets the `port` in the configuration being built.",43,[[["self"],["u16"]],["self"]]],[11,"workers","","Sets `workers` in the configuration being built.",43,[[["self"],["u16"]],["self"]]],[11,"keep_alive","","Sets the keep-alive timeout to `timeout` seconds. If `timeout` is `0`, keep-alive is disabled.",43,[[["self"],["u32"]],["self"]]],[11,"log_level","","Sets the `log_level` in the configuration being built.",43,[[["self"],["logginglevel"]],["self"]]],[11,"secret_key","","Sets the `secret_key` in the configuration being built.",43,[[["self"],["k"]],["self"]]],[11,"limits","","Sets the `limits` in the configuration being built.",43,[[["self"],["limits"]],["self"]]],[11,"tls","","Sets the TLS configuration in the configuration being built.",43,[[["self"],["c"],["k"]],["self"]]],[11,"environment","","Sets the `environment` in the configuration being built.",43,[[["self"],["environment"]],["self"]]],[11,"root","","Sets the `root` in the configuration being built.",43,[[["self"],["p"]],["self"]]],[11,"extra","","Adds an extra configuration parameter with `name` and `value` to the configuration being built. The value can be any type that implements `Into<Value>` including `&str`, `String`, `Vec<V: Into<Value>>`, `HashMap<S: Into<String>, V: Into<Value>>`, and most integer and float types.",43,[[["self"],["str"],["v"]],["self"]]],[11,"finalize","","Return the `Config` structure that was being built by this builder.",43,[[["self"]],["result",["config"]]]],[11,"unwrap","","Return the `Config` structure that was being built by this builder.",43,[[["self"]],["config"]]],[11,"expect","","Returns the `Config` structure that was being built by this builder.",43,[[["self"],["str"]],["config"]]],[11,"new","","Construct a new `Limits` structure with the default limits set.",47,[[],["self"]]],[11,"limit","","Adds or replaces a limit in `self`, consuming `self` and returning a new `Limits` structure with the added or replaced limit.",47,[[["self"],["s"],["u64"]],["self"]]],[11,"get","","Retrieve the set limit, if any, for the data type with name `name`.",47,[[["self"],["str"]],["option",["u64"]]]],[6,"Result","","Wraps `std::result` with the error type of [`ConfigError`].",N,N],[0,"data","rocket","Types and traits for handling incoming body data.",N,N],[3,"Data","rocket::data","Type representing the data in the body of an incoming request.",N,N],[3,"DataStream","","Raw data stream of a request body.",N,N],[4,"Transform","","Indicates how incoming data should be transformed before being parsed and validated by a data guard.",N,N],[13,"Owned","","Indicates that data should be or has been transformed into the [`FromData::Owned`] variant.",48,N],[13,"Borrowed","","Indicates that data should be or has been transformed into the [`FromData::Borrowed`] variant.",48,N],[11,"open","rocket","Returns the raw data stream.",49,[[["self"]],["datastream"]]],[11,"peek","","Retrieve the `peek` buffer.",49,N],[11,"peek_complete","","Returns true if the `peek` buffer contains all of the data in the body of the request. Returns `false` if it does not or if it is not known if it does.",49,[[["self"]],["bool"]]],[11,"stream_to","","A helper method to write the body of the request to any `Write` type.",49,[[["self"],["w"]],["result",["u64"]]]],[11,"stream_to_file","","A helper method to write the body of the request to a file at the path determined by `path`.",49,[[["self"],["p"]],["result",["u64"]]]],[11,"owned","rocket::data","Returns the `Owned` value if `self` is `Owned`.",48,[[["self"]],["t"]]],[11,"borrowed","","Returns the `Borrowed` value if `self` is `Borrowed`.",48,[[["self"]],["b"]]],[6,"Outcome","","Type alias for the `Outcome` of a `FromData` conversion.",N,N],[6,"Transformed","","Type alias to the `outcome` input type of [`FromData::from_data`].",N,N],[8,"FromData","","Trait implemented by data guards to derive a value from request body data.",N,N],[16,"Error","","The associated error to be returned when the guard fails.",50,N],[16,"Owned","","The owned type returned from [`FromData::transform()`].",50,N],[16,"Borrowed","","The borrowed type consumed by [`FromData::from_data()`] when [`FromData::transform()`] returns a [`Transform::Borrowed`].",50,N],[10,"transform","","Transforms `data` into a value of type `Self::Owned`.",50,[[["request"],["data"]],["transform",["outcome"]]]],[10,"from_data","","Validates, parses, and converts the incoming request body data into an instance of `Self`.",50,[[["request"],["transformed"]],["outcome"]]],[8,"FromDataSimple","","A simple, less complex variant of [`FromData`].",N,N],[16,"Error","","The associated error to be returned when the guard fails.",51,N],[10,"from_data","","Validates, parses, and converts an instance of `Self` from the incoming request body data.",51,[[["request"],["data"]],["outcome"]]],[0,"handler","rocket","Types and traits for request and error handlers and their return values.",N,N],[6,"Outcome","rocket::handler","Type alias for the `Outcome` of a `Handler`.",N,N],[6,"ErrorHandler","","The type of an error handler.",N,N],[8,"Handler","","Trait implemented by types that can handle requests.",N,N],[10,"handle","","Called by Rocket when a `Request` with its associated `Data` should be handled by this handler.",52,[[["self"],["request"],["data"]],["outcome"]]],[8,"Cloneable","","Unfortunate but necessary hack to be able to clone a `Box<Handler>`.",N,N],[10,"clone_handler","","Clones `self`.",53,[[["self"]],["box",["handler"]]]],[11,"from","","Return the `Outcome` of response to `req` from `responder`.",54,[[["request"],["t"]],["outcome"]]],[11,"failure","","Return an `Outcome` of `Failure` with the status code `code`. This is equivalent to `Outcome::Failure(code)`.",54,[[["status"]],["outcome"]]],[11,"forward","","Return an `Outcome` of `Forward` with the data `data`. This is equivalent to `Outcome::Forward(data)`.",54,[[["data"]],["outcome"]]],[0,"fairing","rocket","Fairings: callbacks at attach, launch, request, and response time.",N,N],[3,"AdHoc","rocket::fairing","A ad-hoc fairing that can be created from a function or closure.",N,N],[3,"Info","","Information about a `Fairing`.",N,N],[12,"name","","The name of the fairing.",55,N],[12,"kind","","A set representing the callbacks the fairing wishes to receive.",55,N],[3,"Kind","","A bitset representing the kinds of callbacks a `Fairing` wishes to receive.",N,N],[11,"on_attach","","Constructs an `AdHoc` attach fairing named `name`. The function `f` will be called by Rocket when this fairing is attached.",56,[[["str"],["f"]],["adhoc"]]],[11,"on_launch","","Constructs an `AdHoc` launch fairing named `name`. The function `f` will be called by Rocket just prior to launching.",56,[[["str"],["f"]],["adhoc"]]],[11,"on_request","","Constructs an `AdHoc` request fairing named `name`. The function `f` will be called by Rocket when a new request is received.",56,[[["str"],["f"]],["adhoc"]]],[11,"on_response","","Constructs an `AdHoc` response fairing named `name`. The function `f` will be called by Rocket when a response is ready to be sent.",56,[[["str"],["f"]],["adhoc"]]],[18,"Attach","","`Kind` flag representing a request for an 'attach' callback.",57,N],[18,"Launch","","`Kind` flag representing a request for a 'launch' callback.",57,N],[18,"Request","","`Kind` flag representing a request for a 'request' callback.",57,N],[18,"Response","","`Kind` flag representing a request for a 'response' callback.",57,N],[11,"is","","Returns `true` if `self` is a superset of `other`. In other words, returns `true` if all of the kinds in `other` are also in `self`.",57,[[["self"],["kind"]],["bool"]]],[11,"is_exactly","","Returns `true` if `self` is exactly `other`.",57,[[["self"],["kind"]],["bool"]]],[8,"Fairing","","Trait implemented by fairings: Rocket's structured middleware.",N,N],[10,"info","","Returns an [`Info`] structure containing the `name` and [`Kind`] of this fairing. The `name` can be any arbitrary string. `Kind` must be an `or`d set of `Kind` variants.",58,[[["self"]],["info"]]],[11,"on_attach","","The attach callback. Returns `Ok` if launch should proceed and `Err` if launch should be aborted.",58,[[["self"],["rocket"]],["result",["rocket","rocket"]]]],[11,"on_launch","","The launch callback.",58,[[["self"],["rocket"]]]],[11,"on_request","","The request callback.",58,[[["self"],["request"],["data"]]]],[11,"on_response","","The response callback.",58,[[["self"],["request"],["response"]]]],[0,"error","rocket","Types representing various errors that can occur in a Rocket application.",N,N],[3,"LaunchError","rocket::error","An error that occurs during launch.",N,N],[4,"LaunchErrorKind","","The kind of launch error that occurred.",N,N],[13,"Bind","","Binding to the provided address/port failed.",59,N],[13,"Io","","An I/O error occurred during launch.",59,N],[13,"Collision","","Route collisions were detected.",59,N],[13,"FailedFairings","","A launch fairing reported an error.",59,N],[13,"Unknown","","An otherwise uncategorized error occurred during launch.",59,N],[4,"RouteUriError","","Error returned by `set_uri()` on invalid URIs.",N,N],[13,"Segment","","The base (mount point) or route path contains invalid segments.",60,N],[13,"Uri","","The route URI is not a valid URI.",60,N],[13,"DynamicBase","","The base (mount point) contains dynamic segments.",60,N],[11,"kind","","Retrieve the `kind` of the launch error.",61,[[["self"]],["launcherrorkind"]]],[0,"http","rocket","Types that map to concepts in HTTP.",N,N],[0,"hyper","rocket::http","Re-exported hyper HTTP library types.",N,N],[0,"header","rocket::http::hyper","Reexported Hyper header types.",N,N],[3,"LastModified","rocket::http::hyper::header","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",62,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",63,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",64,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",65,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",65,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",66,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",67,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",68,N],[13,"Items","","Only the listed items are a match",68,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",69,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",70,N],[12,"port","","An optional port number.",70,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",71,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",72,N],[13,"Items","","Only the listed items are a match",72,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",73,N],[4,"DispositionParam","","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",74,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",74,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",75,N],[13,"Items","","Only the listed items are a match",75,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",76,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",77,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",78,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",78,N],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",79,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",80,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",81,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",82,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",83,N],[4,"Expect","","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",84,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",85,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",86,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",87,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",88,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",89,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",90,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",91,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",92,N],[12,"range","rocket::http::hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",92,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",92,N],[13,"Unregistered","rocket::http::hyper::header","Custom range, with unit not registered at IANA",92,N],[12,"unit","rocket::http::hyper::header::ContentRangeSpec","other-range-unit",92,N],[12,"resp","","other-range-resp",92,N],[3,"AccessControlAllowCredentials","rocket::http::hyper::header","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",93,N],[13,"Date","","The date when the client retrieved the resource",93,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",94,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",95,N],[13,"Iso_8859_1","","ISO-8859-1",95,N],[13,"Iso_8859_2","","ISO-8859-2",95,N],[13,"Iso_8859_3","","ISO-8859-3",95,N],[13,"Iso_8859_4","","ISO-8859-4",95,N],[13,"Iso_8859_5","","ISO-8859-5",95,N],[13,"Iso_8859_6","","ISO-8859-6",95,N],[13,"Iso_8859_7","","ISO-8859-7",95,N],[13,"Iso_8859_8","","ISO-8859-8",95,N],[13,"Iso_8859_9","","ISO-8859-9",95,N],[13,"Iso_8859_10","","ISO-8859-10",95,N],[13,"Shift_Jis","","Shift_JIS",95,N],[13,"Euc_Jp","","EUC-JP",95,N],[13,"Iso_2022_Kr","","ISO-2022-KR",95,N],[13,"Euc_Kr","","EUC-KR",95,N],[13,"Iso_2022_Jp","","ISO-2022-JP",95,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",95,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",95,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",95,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",95,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",95,N],[13,"Gb2312","","GB2312",95,N],[13,"Big5","","Big5",95,N],[13,"Koi8_R","","KOI8-R",95,N],[13,"Ext","","An arbitrary charset specified as a string",95,N],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",96,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",97,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",98,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",99,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",100,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",100,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",100,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",100,N],[13,"Unregistered","","Any other protocol name not known to hyper",100,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",101,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",102,N],[13,"NoStore","","\"no-store\"",102,N],[13,"NoTransform","","\"no-transform\"",102,N],[13,"OnlyIfCached","","\"only-if-cached\"",102,N],[13,"MaxAge","","\"max-age=delta\"",102,N],[13,"MaxStale","","\"max-stale=delta\"",102,N],[13,"MinFresh","","\"min-fresh=delta\"",102,N],[13,"MustRevalidate","","\"must-revalidate\"",102,N],[13,"Public","","\"public\"",102,N],[13,"Private","","\"private\"",102,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",102,N],[13,"SMaxAge","","\"s-maxage=delta\"",102,N],[13,"Extension","","Extension directives. Optionally include an argument.",102,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",103,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",104,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",105,N],[13,"ReturnRepresentation","","\"return=representation\"",105,N],[13,"ReturnMinimal","","\"return=minimal\"",105,N],[13,"HandlingStrict","","\"handling=strict\"",105,N],[13,"HandlingLeniant","","\"handling=leniant\"",105,N],[13,"Wait","","\"wait=delta\"",105,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",105,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",106,N],[12,"quality","","The quality (client or server preference) for the value.",106,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",107,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",107,N],[13,"Last","","Get last x bytes (\"-x\")",107,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",108,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",108,N],[13,"SameOrigin","","`same-origin`",108,N],[13,"Origin","","`origin`",108,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",108,N],[13,"UnsafeUrl","","`unsafe-url`",108,N],[13,"StrictOrigin","","`strict-origin`",108,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",108,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",109,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",109,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",110,N],[12,"parameters","","Disposition parameters",110,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",111,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",111,N],[13,"Unregistered","","The given range unit is not registered at IANA.",111,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",112,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",113,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",114,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",115,N],[13,"Ext","","Every value other than `no-cache`.",115,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",116,N],[13,"Close","","The `close` connection value.",116,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",116,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",117,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",118,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",119,N],[13,"Gzip","","The `gzip` encoding.",119,N],[13,"Deflate","","The `deflate` encoding.",119,N],[13,"Compress","","The `compress` encoding.",119,N],[13,"Identity","","The `identity` encoding.",119,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",119,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",120,N],[3,"Accept","","`Accept` header, defined in RFC7231",N,N],[12,"0","","",121,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",122,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",123,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",123,N],[8,"Scheme","","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",124,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",124,[[["self"],["formatter"]],["result",["error"]]]],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",125,N],[13,"Null","","A hidden origin",125,N],[13,"Value","","Allow one particular origin",125,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",126,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",126,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",127,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",127,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",127,N],[3,"Server","rocket::http::hyper","A server can listen on a TCP socket.",N,N],[0,"net","","A collection of traits abstracting over Listeners and Streams.",N,N],[4,"Fresh","rocket::http::hyper::net","The write-status indicating headers have not been written.",N,N],[4,"Streaming","","The write-status indicating headers have been written.",N,N],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",N,N],[16,"Stream","","The stream produced for each connection.",128,N],[10,"accept","","Returns an iterator of streams.",128,[[["self"]],["result",["error"]]]],[10,"local_addr","","Get the address this Listener ended up listening on.",128,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Returns an iterator over incoming connections.",128,[[["self"]],["networkconnections"]]],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",128,N],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",128,N],[3,"NetworkConnections","","An iterator wrapper over a `NetworkAcceptor`.",N,N],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",N,N],[10,"peer_addr","","Get the remote address of the underlying connection.",129,[[["self"]],["result",["socketaddr","error"]]]],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",129,[[["self"],["option",["duration"]]],["result",["error"]]]],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",129,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"close","","This will be called when Stream should no longer be kept alive.",129,[[["self"],["shutdown"]],["result",["error"]]]],[8,"NetworkConnector","","A connector creates a NetworkStream.",N,N],[16,"Stream","","Type of `Stream` to create",130,N],[10,"connect","","Connect to a remote address.",130,[[["self"],["str"],["u16"],["str"]],["result",["error"]]]],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",N,N],[3,"HttpStream","","A wrapper around a `TcpStream`.",N,N],[12,"0","","",131,N],[3,"HttpConnector","","A connector that will produce HttpStreams.",N,N],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",132,N],[10,"wrap_client","","Wrap a client stream with SSL.",132,[[["self"],["t"],["str"]],["result",["error"]]]],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",N,N],[16,"Stream","","The protected stream.",133,N],[10,"wrap_server","","Wrap a server stream with SSL.",133,[[["self"],["t"]],["result",["error"]]]],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",N,N],[13,"Http","","A plain text stream.",134,N],[13,"Https","","A stream protected by SSL.",134,N],[3,"HttpsListener","","A Http Listener over SSL.",N,N],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",N,N],[4,"Method","rocket::http::hyper","The Request Method (VERB)",N,N],[13,"Options","","OPTIONS",135,N],[13,"Get","","GET",135,N],[13,"Post","","POST",135,N],[13,"Put","","PUT",135,N],[13,"Delete","","DELETE",135,N],[13,"Head","","HEAD",135,N],[13,"Trace","","TRACE",135,N],[13,"Connect","","CONNECT",135,N],[13,"Patch","","PATCH",135,N],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",135,N],[4,"RequestUri","","The Request-URI of a Request's StartLine.",N,N],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",136,N],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",136,N],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",136,N],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",136,N],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",N,N],[3,"Http11Message","rocket::http::hyper::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",N,N],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",N,N],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",N,N],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",137,N],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",137,N],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",137,N],[13,"EmptyReader","","A Reader used for messages that should never have a body.",137,N],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",N,N],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",138,N],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",138,N],[13,"SizedWriter","","A Writer for when Content-Length is set.",138,N],[13,"EmptyWriter","","A writer that should not write any body.",138,N],[3,"EndError","","",N,N],[5,"parse_request","","Parses a request into an Incoming message head.",N,[[["bufreader"]],["result",["incoming","error"]]]],[5,"parse_response","","Parses a response into an Incoming message head.",N,[[["bufreader"]],["result",["incoming","error"]]]],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",N,N],[12,"version","","HTTP version of the message.",139,N],[12,"subject","","Subject (request line or status line) of Incoming message.",139,N],[12,"headers","","Headers of the Incoming message.",139,N],[17,"CR","","The `\\r` byte.",N,N],[17,"LF","","The `\\n` byte.",N,N],[17,"LINE_ENDING","","The bytes `\\r\\n`.",N,N],[0,"mime","rocket::http::hyper","Re-exporting the mime crate, for convenience.",N,N],[4,"TopLevel","rocket::http::hyper::mime","",N,N],[13,"Star","","",140,N],[13,"Text","","",140,N],[13,"Image","","",140,N],[13,"Audio","","",140,N],[13,"Video","","",140,N],[13,"Application","","",140,N],[13,"Multipart","","",140,N],[13,"Message","","",140,N],[13,"Model","","",140,N],[13,"Ext","","",140,N],[6,"Param","","",N,N],[4,"Value","","",N,N],[13,"Utf8","","",141,N],[13,"Ext","","",141,N],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",142,N],[12,"1","","",142,N],[12,"2","","",142,N],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[4,"Attr","","",N,N],[13,"Charset","","",143,N],[13,"Boundary","","",143,N],[13,"Q","","",143,N],[13,"Ext","","",143,N],[4,"SubLevel","","",N,N],[13,"Star","","",144,N],[13,"Plain","","",144,N],[13,"Html","","",144,N],[13,"Xml","","",144,N],[13,"Javascript","","",144,N],[13,"Css","","",144,N],[13,"EventStream","","",144,N],[13,"Json","","",144,N],[13,"WwwFormUrlEncoded","","",144,N],[13,"Msgpack","","",144,N],[13,"OctetStream","","",144,N],[13,"FormData","","",144,N],[13,"Png","","",144,N],[13,"Gif","","",144,N],[13,"Bmp","","",144,N],[13,"Jpeg","","",144,N],[13,"Mpeg","","",144,N],[13,"Mp4","","",144,N],[13,"Ogg","","",144,N],[13,"Ext","","",144,N],[3,"Response","rocket::http::hyper","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",N,N],[12,"version","","The HTTP version of this response.",145,N],[3,"Request","","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",N,N],[12,"remote_addr","","The IP address of the remote connection.",146,N],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",146,N],[12,"headers","","The headers of the incoming request.",146,N],[12,"uri","","The target request-uri for this request.",146,N],[12,"version","","The version of HTTP for this request.",146,N],[4,"Error","","A set of errors that can occur parsing HTTP streams.",N,N],[13,"Method","","An invalid `Method`, such as `GE,T`.",147,N],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",147,N],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",147,N],[13,"Header","","An invalid `Header`.",147,N],[13,"TooLarge","","A message head is too large to be reasonable.",147,N],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",147,N],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",147,N],[13,"Ssl","","An error from a SSL library.",147,N],[13,"Utf8","","Parsing a field as string failed",147,N],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",N,N],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",148,N],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",148,N],[13,"Processing","","102 Processing [RFC2518]",148,N],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",148,N],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",148,N],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",148,N],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",148,N],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",148,N],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",148,N],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",148,N],[13,"MultiStatus","","207 Multi-Status [RFC4918]",148,N],[13,"AlreadyReported","","208 Already Reported [RFC5842]",148,N],[13,"ImUsed","","226 IM Used [RFC3229]",148,N],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",148,N],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",148,N],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",148,N],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",148,N],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",148,N],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",148,N],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",148,N],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",148,N],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",148,N],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",148,N],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",148,N],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",148,N],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",148,N],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",148,N],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",148,N],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",148,N],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",148,N],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",148,N],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",148,N],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",148,N],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",148,N],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",148,N],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",148,N],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",148,N],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",148,N],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",148,N],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",148,N],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",148,N],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",148,N],[13,"Locked","","423 Locked [RFC4918]",148,N],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",148,N],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",148,N],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",148,N],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",148,N],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",148,N],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",148,N],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",148,N],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",148,N],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",148,N],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",148,N],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",148,N],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",148,N],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",148,N],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",148,N],[13,"LoopDetected","","508 Loop Detected [RFC5842]",148,N],[13,"NotExtended","","510 Not Extended [RFC2774]",148,N],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",148,N],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",148,N],[8,"Handler","","A handler that can handle incoming requests for a server.",N,N],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",149,N],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",149,N],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",149,N],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",149,N],[0,"uri","rocket::http","Types for URIs and traits for rendering URI components.",N,N],[3,"Absolute","rocket::http::uri","A URI with a scheme, authority, path, and query: `http://user:pass@domain.com:4444/path?query`.",N,N],[8,"UriDisplay","","Trait implemented by types that can be displayed as part of a URI in `uri!`.",N,N],[10,"fmt","","Formats `self` in a URI-safe manner using the given formatter.",150,[[["self"],["formatter"]],["result",["error"]]]],[3,"Authority","","A URI with an authority only: `user:pass@host:8000`.",N,N],[3,"Segments","","Iterator over the segments of an absolute URI path. Skips empty segments.",N,N],[12,"0","","",151,N],[3,"Formatter","","A struct used to format strings for [`UriDisplay`].",N,N],[3,"Error","","Error emitted on URI parse failure.",N,N],[8,"FromUriParam","","Conversion trait for parameters used in [`uri!`] invocations.",N,N],[16,"Target","","The resulting type of this conversion.",152,N],[10,"from_uri_param","","Converts a value of type `T` into a value of type `Self::Target`. The resulting value of type `Self::Target` will be rendered into a URI using its `UriDisplay` implementation.",152,N],[4,"Uri","","An `enum` encapsulating any of the possible URI variants.",N,N],[13,"Origin","","An origin URI.",153,N],[13,"Authority","","An authority URI.",153,N],[13,"Absolute","","An absolute URI.",153,N],[13,"Asterisk","","An asterisk: exactly `*`.",153,N],[4,"SegmentError","","Errors which can occur when attempting to interpret a segment string as a valid path segment.",N,N],[13,"Utf8","","The segment contained invalid UTF8 characters when percent decoded.",154,N],[13,"BadStart","","The segment started with the wrapped invalid character.",154,N],[13,"BadChar","","The segment contained the wrapped invalid character.",154,N],[13,"BadEnd","","The segment ended with the wrapped invalid character.",154,N],[3,"Origin","","A URI with an absolute path and optional query: `/path?query`.",N,N],[0,"ext","rocket::http","Extension traits implemented by several HTTP types.",N,N],[8,"IntoCollection","rocket::http::ext","Trait implemented by types that can be converted into a collection.",N,N],[10,"into_collection","","Converts `self` into a collection.",155,[[["self"]],["smallvec"]]],[8,"IntoOwned","","Trait implemented by types that can be converted into owned versions of themselves.",N,N],[16,"Owned","","The owned version of the type.",156,N],[10,"into_owned","","Converts `self` into an owned version of itself.",156,N],[8,"Normalize","","",N,N],[10,"normalized_str","","",157,[[["self"]],["cow",["str"]]]],[0,"uncased","rocket::http","Contains types that encapsulate uncased ASCII strings.",N,N],[3,"UncasedStr","rocket::http::uncased","A reference to an uncased (case-preserving) ASCII string. This is typically created from an `&str` as follows:",N,N],[3,"Uncased","","An uncased (case-preserving), owned or borrowed ASCII string.",N,N],[5,"uncased_eq","","Returns true if `s1` and `s2` are equal without considering case.",N,[[["s1"],["s2"]],["bool"]]],[4,"Method","rocket::http","Representation of HTTP methods.",N,N],[13,"Get","","",158,N],[13,"Put","","",158,N],[13,"Post","","",158,N],[13,"Delete","","",158,N],[13,"Options","","",158,N],[13,"Head","","",158,N],[13,"Trace","","",158,N],[13,"Connect","","",158,N],[13,"Patch","","",158,N],[3,"RawStr","","A reference to a string inside of a raw HTTP message.",N,N],[4,"Cookies","","Collection of one or more HTTP cookies.",N,N],[3,"CookieJar","","A collection of cookies that tracks its modifications.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"HeaderMap","","A collection of headers, mapping a header name to its many ordered values.",N,N],[3,"QMediaType","","A `MediaType` with an associated quality value.",N,N],[12,"0","","",159,N],[12,"1","","",159,N],[4,"SameSite","","The `SameSite` cookie attribute.",N,N],[13,"Strict","","The \"Strict\" `SameSite` attribute.",160,N],[13,"Lax","","The \"Lax\" `SameSite` attribute.",160,N],[13,"None","","No `SameSite` attribute.",160,N],[3,"Key","","A cryptographic master key for use with `Signed` and/or `Private` jars.",N,N],[4,"Source","","",N,N],[13,"Known","","",161,N],[13,"Custom","","",161,N],[13,"None","","",161,N],[4,"MediaParams","","",N,N],[13,"Static","","",162,N],[13,"Dynamic","","",162,N],[3,"Header","","Simple representation of an HTTP header.",N,N],[12,"name","","The name of the header.",163,N],[12,"value","","The value of the header.",163,N],[3,"Cookie","","Representation of an HTTP cookie.",N,N],[3,"ContentType","","Representation of HTTP Content-Types.",N,N],[12,"0","","",164,N],[4,"StatusClass","","Enumeration of HTTP status classes.",N,N],[13,"Informational","","Indicates a provisional response: a status code of 1XX.",165,N],[13,"Success","","Indicates that a request has succeeded: a status code of 2XX.",165,N],[13,"Redirection","","Indicates that further action needs to be taken by the user agent in order to fulfill the request: a status code of 3XX.",165,N],[13,"ClientError","","Intended for cases in which the client seems to have erred: a status code of 4XX.",165,N],[13,"ServerError","","Indicates cases in which the server is aware that it has erred or is incapable of performing the request: a status code of 5XX.",165,N],[13,"Unknown","","Indicates that the status code is nonstandard and unknown: all other status codes.",165,N],[3,"Accept","","The HTTP Accept header.",N,N],[3,"MediaType","","An HTTP media type.",N,N],[4,"Indexed","","",N,N],[13,"Indexed","","",166,N],[13,"Concrete","","",166,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",167,N],[10,"size","","Returns the number of items the array can hold.",167,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",167,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",167,N],[3,"Status","","Structure representing an HTTP status: an integer code and a reason phrase.",N,N],[12,"code","","The HTTP status code associated with this status.",168,N],[12,"reason","","The HTTP reason phrase associated with this status.",168,N],[11,"new","rocket","Creates a new route with the given method, path, and handler with a base of `/`.",1,[[["method"],["s"],["h"]],["route"]]],[11,"ranked","","Creates a new route with the given rank, method, path, and handler with a base of `/`.",1,[[["isize"],["method"],["s"],["h"]],["route"]]],[11,"base","","Retrieves the path of the base mount point of this route as an `&str`.",1,[[["self"]],["str"]]],[11,"set_uri","","Sets the base mount point of the route to `base` and sets the path to `path`. The `path` should not contains the `base` mount point. If `base` contains a query, it is ignored. Note that `self.uri` will include the new `base` after this method is called.",1,[[["self"],["origin"],["origin"]],["result",["routeurierror"]]]],[11,"ignite","","Create a new `Rocket` application using the configuration information in `Rocket.toml`. If the file does not exist or if there is an I/O error reading the file, the defaults are used. See the [`config`] documentation for more information on defaults.",169,[[],["rocket"]]],[11,"custom","","Creates a new `Rocket` application using the supplied custom configuration information. The `Rocket.toml` file, if present, is ignored. Any environment variables setting config parameters are ignored. If `log` is `true`, logging is enabled.",169,[[["config"]],["rocket"]]],[11,"mount","","Mounts all of the routes in the supplied vector at the given `base` path. Mounting a route with path `path` at path `base` makes the route available at `base/path`.",169,[[["self"],["str"],["r"]],["self"]]],[11,"register","","Registers all of the catchers in the supplied vector.",169,[[["self"],["vec",["catcher"]]],["self"]]],[11,"manage","","Add `state` to the state managed by this instance of Rocket.",169,[[["self"],["t"]],["self"]]],[11,"attach","","Attaches a fairing to this instance of Rocket. If the fairing is an attach fairing, it is run immediately. All other kinds of fairings will be executed at their appropriate time.",169,[[["self"],["f"]],["self"]]],[11,"launch","","Starts the application server and begins listening for and dispatching requests to mounted routes and catchers. Unless there is an error, this function does not return and blocks until program termination.",169,[[["self"]],["launcherror"]]],[11,"routes","","Returns an iterator over all of the routes mounted on this instance of Rocket.",169,N],[11,"state","","Returns `Some` of the managed state value for the type `T` if it is being managed by `self`. Otherwise, returns `None`.",169,[[["self"]],["option"]]],[11,"config","","Returns the active configuration.",169,[[["self"]],["config"]]],[11,"new","","Creates a catcher for the given status code using the given error handler. This should only be used when routing manually.",2,[[["u16"],["errorhandler"]],["catcher"]]],[6,"ErrorHandler","","The type of an error handler.",N,N],[8,"Handler","","Trait implemented by types that can handle requests.",N,N],[10,"handle","","Called by Rocket when a `Request` with its associated `Data` should be handled by this handler.",52,[[["self"],["request"],["data"]],["outcome"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into_collection","","",26,[[["self"]],["smallvec"]]],[11,"mapped","","",26,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",26,[[["self"]],["result",["parseerr"]]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into_collection","","",49,[[["self"]],["smallvec"]]],[11,"mapped","","",49,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",49,[[["self"]],["result",["parseerr"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into_collection","","",0,[[["self"]],["smallvec"]]],[11,"mapped","","",0,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",0,[[["self"]],["result",["parseerr"]]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into_collection","","",1,[[["self"]],["smallvec"]]],[11,"mapped","","",1,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",1,[[["self"]],["result",["parseerr"]]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into_collection","","",9,[[["self"]],["smallvec"]]],[11,"mapped","","",9,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",9,[[["self"]],["result",["parseerr"]]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into_collection","","",13,[[["self"]],["smallvec"]]],[11,"mapped","","",13,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",13,[[["self"],["k"]],["bool"]]],[11,"as_result","","",13,[[["self"]],["result",["parseerr"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into_collection","","",2,[[["self"]],["smallvec"]]],[11,"mapped","","",2,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",2,[[["self"]],["result",["parseerr"]]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"handle","","",169,N],[11,"into_collection","","",169,[[["self"]],["smallvec"]]],[11,"mapped","","",169,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",169,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::outcome","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into_collection","","",3,[[["self"]],["smallvec"]]],[11,"mapped","","",3,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"as_result","","",3,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::config","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into_collection","","",46,[[["self"]],["smallvec"]]],[11,"mapped","","",46,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",46,[[["self"],["k"]],["bool"]]],[11,"as_result","","",46,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::local","",170,[[["self"]],["u"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"into_collection","","",170,[[["self"]],["smallvec"]]],[11,"mapped","","",170,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",170,[[["self"]],["result",["parseerr"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into_collection","","",4,[[["self"]],["smallvec"]]],[11,"mapped","","",4,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",4,[[["self"]],["result",["parseerr"]]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into_collection","","",5,[[["self"]],["smallvec"]]],[11,"mapped","","",5,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",5,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::request","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"from_uri_param","","",12,[[["t"]],["t"]]],[11,"from_uri_param","","",12,[[["t"]],["t"]]],[11,"from_uri_param","","",12,[[["t"]],["t"]]],[11,"into_collection","","",12,[[["self"]],["smallvec"]]],[11,"mapped","","",12,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",12,[[["self"]],["result",["parseerr"]]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"from_uri_param","","",11,[[["t"]],["t"]]],[11,"from_uri_param","","",11,[[["t"]],["t"]]],[11,"from_uri_param","","",11,[[["t"]],["t"]]],[11,"into_collection","","",11,[[["self"]],["smallvec"]]],[11,"mapped","","",11,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",11,[[["self"]],["result",["parseerr"]]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into_collection","","",6,[[["self"]],["smallvec"]]],[11,"mapped","","",6,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",6,[[["self"],["k"]],["bool"]]],[11,"as_result","","",6,[[["self"]],["result",["parseerr"]]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"into_iter","","",171,[[["self"]],["i"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"into_collection","","",171,[[["self"]],["smallvec"]]],[11,"mapped","","",171,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",171,[[["self"]],["result",["parseerr"]]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into_collection","","",10,[[["self"]],["smallvec"]]],[11,"mapped","","",10,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",10,[[["self"]],["result",["parseerr"]]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into_collection","","",7,[[["self"]],["smallvec"]]],[11,"mapped","","",7,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",7,[[["self"],["k"]],["bool"]]],[11,"as_result","","",7,[[["self"]],["result",["parseerr"]]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into_collection","","",8,[[["self"]],["smallvec"]]],[11,"mapped","","",8,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",8,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::response","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into_collection","","",25,[[["self"]],["smallvec"]]],[11,"mapped","","",25,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",25,[[["self"]],["result",["parseerr"]]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into_collection","","",22,[[["self"]],["smallvec"]]],[11,"mapped","","",22,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",22,[[["self"]],["result",["parseerr"]]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into_collection","","",27,[[["self"]],["smallvec"]]],[11,"mapped","","",27,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",27,[[["self"]],["result",["parseerr"]]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into_collection","","",23,[[["self"]],["smallvec"]]],[11,"mapped","","",23,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",23,[[["self"]],["result",["parseerr"]]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into_collection","","",24,[[["self"]],["smallvec"]]],[11,"mapped","","",24,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",24,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::response::content","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into_collection","","",20,[[["self"]],["smallvec"]]],[11,"mapped","","",20,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",20,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::response","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into_collection","","",21,[[["self"]],["smallvec"]]],[11,"mapped","","",21,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",21,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::response::content","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into_collection","","",28,[[["self"]],["smallvec"]]],[11,"mapped","","",28,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",28,[[["self"]],["result",["parseerr"]]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into_collection","","",29,[[["self"]],["smallvec"]]],[11,"mapped","","",29,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",29,[[["self"]],["result",["parseerr"]]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into_collection","","",30,[[["self"]],["smallvec"]]],[11,"mapped","","",30,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",30,[[["self"]],["result",["parseerr"]]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into_collection","","",31,[[["self"]],["smallvec"]]],[11,"mapped","","",31,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",31,[[["self"]],["result",["parseerr"]]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into_collection","","",32,[[["self"]],["smallvec"]]],[11,"mapped","","",32,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",32,[[["self"]],["result",["parseerr"]]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into_collection","","",33,[[["self"]],["smallvec"]]],[11,"mapped","","",33,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",33,[[["self"]],["result",["parseerr"]]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into_collection","","",34,[[["self"]],["smallvec"]]],[11,"mapped","","",34,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",34,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::response::status","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into_collection","","",35,[[["self"]],["smallvec"]]],[11,"mapped","","",35,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",35,[[["self"]],["result",["parseerr"]]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into_collection","","",36,[[["self"]],["smallvec"]]],[11,"mapped","","",36,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",36,[[["self"]],["result",["parseerr"]]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into_collection","","",37,[[["self"]],["smallvec"]]],[11,"mapped","","",37,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",37,[[["self"]],["result",["parseerr"]]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into_collection","","",38,[[["self"]],["smallvec"]]],[11,"mapped","","",38,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",38,[[["self"]],["result",["parseerr"]]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into_collection","","",39,[[["self"]],["smallvec"]]],[11,"mapped","","",39,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",39,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::config","",42,[[["self"]],["u"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into_collection","","",42,[[["self"]],["smallvec"]]],[11,"mapped","","",42,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",42,[[["self"]],["result",["parseerr"]]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_string","","",172,[[["self"]],["string"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"into_collection","","",172,[[["self"]],["smallvec"]]],[11,"mapped","","",172,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",172,[[["self"]],["result",["parseerr"]]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into_collection","","",47,[[["self"]],["smallvec"]]],[11,"mapped","","",47,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",47,[[["self"]],["result",["parseerr"]]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into_collection","","",43,[[["self"]],["smallvec"]]],[11,"mapped","","",43,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",43,[[["self"]],["result",["parseerr"]]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into_collection","","",44,[[["self"]],["smallvec"]]],[11,"mapped","","",44,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",44,[[["self"]],["result",["parseerr"]]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into_collection","","",45,[[["self"]],["smallvec"]]],[11,"mapped","","",45,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",45,[[["self"],["k"]],["bool"]]],[11,"as_result","","",45,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::data","",173,[[["self"]],["u"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"into_collection","","",173,[[["self"]],["smallvec"]]],[11,"mapped","","",173,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",173,[[["self"]],["result",["parseerr"]]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into_collection","","",48,[[["self"]],["smallvec"]]],[11,"mapped","","",48,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",48,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::fairing","",56,[[["self"]],["u"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into_collection","","",56,[[["self"]],["smallvec"]]],[11,"mapped","","",56,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",56,[[["self"]],["result",["parseerr"]]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into_collection","","",55,[[["self"]],["smallvec"]]],[11,"mapped","","",55,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",55,[[["self"]],["result",["parseerr"]]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into_collection","","",57,[[["self"]],["smallvec"]]],[11,"mapped","","",57,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",57,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::error","",61,[[["self"]],["u"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into_collection","","",61,[[["self"]],["smallvec"]]],[11,"mapped","","",61,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",61,[[["self"]],["result",["parseerr"]]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into_collection","","",59,[[["self"]],["smallvec"]]],[11,"mapped","","",59,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",59,[[["self"]],["result",["parseerr"]]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into_collection","","",60,[[["self"]],["smallvec"]]],[11,"mapped","","",60,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",60,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper::header","",62,[[["self"]],["u"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into_collection","","",62,[[["self"]],["smallvec"]]],[11,"mapped","","",62,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",62,[[["self"]],["result",["parseerr"]]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into_collection","","",63,[[["self"]],["smallvec"]]],[11,"mapped","","",63,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",63,[[["self"]],["result",["parseerr"]]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into_collection","","",64,[[["self"]],["smallvec"]]],[11,"mapped","","",64,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",64,[[["self"]],["result",["parseerr"]]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into_collection","","",65,[[["self"]],["smallvec"]]],[11,"mapped","","",65,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",65,[[["self"]],["result",["parseerr"]]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into_collection","","",66,[[["self"]],["smallvec"]]],[11,"mapped","","",66,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",66,[[["self"]],["result",["parseerr"]]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into_collection","","",67,[[["self"]],["smallvec"]]],[11,"mapped","","",67,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",67,[[["self"]],["result",["parseerr"]]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into_collection","","",68,[[["self"]],["smallvec"]]],[11,"mapped","","",68,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",68,[[["self"]],["result",["parseerr"]]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into_collection","","",69,[[["self"]],["smallvec"]]],[11,"mapped","","",69,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",69,[[["self"]],["result",["parseerr"]]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into_collection","","",70,[[["self"]],["smallvec"]]],[11,"mapped","","",70,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",70,[[["self"]],["result",["parseerr"]]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into_collection","","",71,[[["self"]],["smallvec"]]],[11,"mapped","","",71,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",71,[[["self"]],["result",["parseerr"]]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into_collection","","",72,[[["self"]],["smallvec"]]],[11,"mapped","","",72,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",72,[[["self"]],["result",["parseerr"]]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into_collection","","",73,[[["self"]],["smallvec"]]],[11,"mapped","","",73,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",73,[[["self"]],["result",["parseerr"]]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into_collection","","",74,[[["self"]],["smallvec"]]],[11,"mapped","","",74,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",74,[[["self"]],["result",["parseerr"]]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into_collection","","",75,[[["self"]],["smallvec"]]],[11,"mapped","","",75,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",75,[[["self"]],["result",["parseerr"]]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_string","","",174,[[["self"]],["string"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"into_collection","","",174,[[["self"]],["smallvec"]]],[11,"mapped","","",174,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",174,[[["self"]],["result",["parseerr"]]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into_collection","","",76,[[["self"]],["smallvec"]]],[11,"mapped","","",76,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",76,[[["self"]],["result",["parseerr"]]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_string","","",77,[[["self"]],["string"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into_collection","","",77,[[["self"]],["smallvec"]]],[11,"mapped","","",77,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",77,[[["self"]],["result",["parseerr"]]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into_collection","","",78,[[["self"]],["smallvec"]]],[11,"mapped","","",78,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",78,[[["self"]],["result",["parseerr"]]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into_collection","","",79,[[["self"]],["smallvec"]]],[11,"mapped","","",79,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",79,[[["self"]],["result",["parseerr"]]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into_collection","","",80,[[["self"]],["smallvec"]]],[11,"mapped","","",80,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",80,[[["self"]],["result",["parseerr"]]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_string","","",81,[[["self"]],["string"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into_collection","","",81,[[["self"]],["smallvec"]]],[11,"mapped","","",81,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",81,[[["self"]],["result",["parseerr"]]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into_collection","","",82,[[["self"]],["smallvec"]]],[11,"mapped","","",82,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",82,[[["self"],["k"]],["bool"]]],[11,"as_result","","",82,[[["self"]],["result",["parseerr"]]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into_collection","","",83,[[["self"]],["smallvec"]]],[11,"mapped","","",83,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",83,[[["self"]],["result",["parseerr"]]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into_collection","","",84,[[["self"]],["smallvec"]]],[11,"mapped","","",84,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",84,[[["self"]],["result",["parseerr"]]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into_collection","","",85,[[["self"]],["smallvec"]]],[11,"mapped","","",85,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",85,[[["self"]],["result",["parseerr"]]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_string","","",86,[[["self"]],["string"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into_collection","","",86,[[["self"]],["smallvec"]]],[11,"mapped","","",86,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",86,[[["self"]],["result",["parseerr"]]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_string","","",87,[[["self"]],["string"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into_collection","","",87,[[["self"]],["smallvec"]]],[11,"mapped","","",87,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",87,[[["self"]],["result",["parseerr"]]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_string","","",88,[[["self"]],["string"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into_collection","","",88,[[["self"]],["smallvec"]]],[11,"mapped","","",88,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",88,[[["self"]],["result",["parseerr"]]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_string","","",89,[[["self"]],["string"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into_collection","","",89,[[["self"]],["smallvec"]]],[11,"mapped","","",89,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",89,[[["self"]],["result",["parseerr"]]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_string","","",90,[[["self"]],["string"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into_collection","","",90,[[["self"]],["smallvec"]]],[11,"mapped","","",90,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",90,[[["self"]],["result",["parseerr"]]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into_collection","","",91,[[["self"]],["smallvec"]]],[11,"mapped","","",91,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",91,[[["self"]],["result",["parseerr"]]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into_collection","","",92,[[["self"]],["smallvec"]]],[11,"mapped","","",92,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",92,[[["self"]],["result",["parseerr"]]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_string","","",175,[[["self"]],["string"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"into_collection","","",175,[[["self"]],["smallvec"]]],[11,"mapped","","",175,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",175,[[["self"]],["result",["parseerr"]]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into_collection","","",93,[[["self"]],["smallvec"]]],[11,"mapped","","",93,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",93,[[["self"]],["result",["parseerr"]]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_string","","",94,[[["self"]],["string"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into_collection","","",94,[[["self"]],["smallvec"]]],[11,"mapped","","",94,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",94,[[["self"]],["result",["parseerr"]]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_string","","",95,[[["self"]],["string"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into_collection","","",95,[[["self"]],["smallvec"]]],[11,"mapped","","",95,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",95,[[["self"]],["result",["parseerr"]]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_string","","",96,[[["self"]],["string"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into_collection","","",96,[[["self"]],["smallvec"]]],[11,"mapped","","",96,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",96,[[["self"],["k"]],["bool"]]],[11,"as_result","","",96,[[["self"]],["result",["parseerr"]]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_string","","",97,[[["self"]],["string"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into_collection","","",97,[[["self"]],["smallvec"]]],[11,"mapped","","",97,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",97,[[["self"]],["result",["parseerr"]]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_string","","",98,[[["self"]],["string"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into_collection","","",98,[[["self"]],["smallvec"]]],[11,"mapped","","",98,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",98,[[["self"]],["result",["parseerr"]]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_string","","",99,[[["self"]],["string"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into_collection","","",99,[[["self"]],["smallvec"]]],[11,"mapped","","",99,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",99,[[["self"]],["result",["parseerr"]]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into_collection","","",100,[[["self"]],["smallvec"]]],[11,"mapped","","",100,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",100,[[["self"],["k"]],["bool"]]],[11,"as_result","","",100,[[["self"]],["result",["parseerr"]]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into_collection","","",101,[[["self"]],["smallvec"]]],[11,"mapped","","",101,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",101,[[["self"]],["result",["parseerr"]]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_string","","",102,[[["self"]],["string"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into_collection","","",102,[[["self"]],["smallvec"]]],[11,"mapped","","",102,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",102,[[["self"]],["result",["parseerr"]]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_string","","",103,[[["self"]],["string"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into_collection","","",103,[[["self"]],["smallvec"]]],[11,"mapped","","",103,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",103,[[["self"]],["result",["parseerr"]]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_string","","",104,[[["self"]],["string"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into_collection","","",104,[[["self"]],["smallvec"]]],[11,"mapped","","",104,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",104,[[["self"]],["result",["parseerr"]]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_string","","",105,[[["self"]],["string"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into_collection","","",105,[[["self"]],["smallvec"]]],[11,"mapped","","",105,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",105,[[["self"]],["result",["parseerr"]]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_string","","",106,[[["self"]],["string"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into_collection","","",106,[[["self"]],["smallvec"]]],[11,"mapped","","",106,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",106,[[["self"]],["result",["parseerr"]]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_string","","",107,[[["self"]],["string"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into_collection","","",107,[[["self"]],["smallvec"]]],[11,"mapped","","",107,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",107,[[["self"]],["result",["parseerr"]]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_string","","",108,[[["self"]],["string"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into_collection","","",108,[[["self"]],["smallvec"]]],[11,"mapped","","",108,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",108,[[["self"],["k"]],["bool"]]],[11,"as_result","","",108,[[["self"]],["result",["parseerr"]]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_string","","",109,[[["self"]],["string"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into_collection","","",109,[[["self"]],["smallvec"]]],[11,"mapped","","",109,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",109,[[["self"]],["result",["parseerr"]]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_string","","",110,[[["self"]],["string"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into_collection","","",110,[[["self"]],["smallvec"]]],[11,"mapped","","",110,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",110,[[["self"]],["result",["parseerr"]]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_string","","",111,[[["self"]],["string"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into_collection","","",111,[[["self"]],["smallvec"]]],[11,"mapped","","",111,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",111,[[["self"],["k"]],["bool"]]],[11,"as_result","","",111,[[["self"]],["result",["parseerr"]]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_string","","",112,[[["self"]],["string"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into_collection","","",112,[[["self"]],["smallvec"]]],[11,"mapped","","",112,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",112,[[["self"]],["result",["parseerr"]]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_string","","",113,[[["self"]],["string"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into_collection","","",113,[[["self"]],["smallvec"]]],[11,"mapped","","",113,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",113,[[["self"]],["result",["parseerr"]]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_string","","",114,[[["self"]],["string"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into_collection","","",114,[[["self"]],["smallvec"]]],[11,"mapped","","",114,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",114,[[["self"]],["result",["parseerr"]]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_string","","",115,[[["self"]],["string"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into_collection","","",115,[[["self"]],["smallvec"]]],[11,"mapped","","",115,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",115,[[["self"]],["result",["parseerr"]]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_string","","",116,[[["self"]],["string"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into_collection","","",116,[[["self"]],["smallvec"]]],[11,"mapped","","",116,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",116,[[["self"]],["result",["parseerr"]]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_string","","",117,[[["self"]],["string"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into_collection","","",117,[[["self"]],["smallvec"]]],[11,"mapped","","",117,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",117,[[["self"]],["result",["parseerr"]]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_string","","",118,[[["self"]],["string"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into_collection","","",118,[[["self"]],["smallvec"]]],[11,"mapped","","",118,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",118,[[["self"]],["result",["parseerr"]]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_string","","",119,[[["self"]],["string"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into_collection","","",119,[[["self"]],["smallvec"]]],[11,"mapped","","",119,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",119,[[["self"]],["result",["parseerr"]]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_string","","",120,[[["self"]],["string"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into_collection","","",120,[[["self"]],["smallvec"]]],[11,"mapped","","",120,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",120,[[["self"]],["result",["parseerr"]]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_string","","",121,[[["self"]],["string"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into_collection","","",121,[[["self"]],["smallvec"]]],[11,"mapped","","",121,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",121,[[["self"]],["result",["parseerr"]]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into_collection","","",122,[[["self"]],["smallvec"]]],[11,"mapped","","",122,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",122,[[["self"],["k"]],["bool"]]],[11,"as_result","","",122,[[["self"]],["result",["parseerr"]]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into_collection","","",123,[[["self"]],["smallvec"]]],[11,"mapped","","",123,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",123,[[["self"],["k"]],["bool"]]],[11,"as_result","","",123,[[["self"]],["result",["parseerr"]]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_string","","",125,[[["self"]],["string"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into_collection","","",125,[[["self"]],["smallvec"]]],[11,"mapped","","",125,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",125,[[["self"]],["result",["parseerr"]]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_string","","",126,[[["self"]],["string"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into_collection","","",126,[[["self"]],["smallvec"]]],[11,"mapped","","",126,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",126,[[["self"]],["result",["parseerr"]]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into_collection","","",127,[[["self"]],["smallvec"]]],[11,"mapped","","",127,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",127,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper","",176,[[["self"]],["u"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"into_collection","","",176,[[["self"]],["smallvec"]]],[11,"mapped","","",176,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",176,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper::net","",177,[[["self"]],["u"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"into_collection","","",177,[[["self"]],["smallvec"]]],[11,"mapped","","",177,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",177,[[["self"]],["result",["parseerr"]]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"into_collection","","",178,[[["self"]],["smallvec"]]],[11,"mapped","","",178,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",178,[[["self"]],["result",["parseerr"]]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into_iter","","",179,[[["self"]],["i"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"into_collection","","",179,[[["self"]],["smallvec"]]],[11,"mapped","","",179,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",179,[[["self"]],["result",["parseerr"]]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"into_collection","","",180,[[["self"]],["smallvec"]]],[11,"mapped","","",180,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",180,[[["self"]],["result",["parseerr"]]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into_collection","","",131,[[["self"]],["smallvec"]]],[11,"mapped","","",131,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",131,[[["self"]],["result",["parseerr"]]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"connect","","",181,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"into_collection","","",181,[[["self"]],["smallvec"]]],[11,"mapped","","",181,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",181,[[["self"]],["result",["parseerr"]]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into_collection","","",134,[[["self"]],["smallvec"]]],[11,"mapped","","",134,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",134,[[["self"]],["result",["parseerr"]]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"into_collection","","",182,[[["self"]],["smallvec"]]],[11,"mapped","","",182,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",182,[[["self"]],["result",["parseerr"]]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"connect","","",183,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"into_collection","","",183,[[["self"]],["smallvec"]]],[11,"mapped","","",183,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",183,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper","",135,[[["self"]],["u"]]],[11,"to_string","","",135,[[["self"]],["string"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into_collection","","",135,[[["self"]],["smallvec"]]],[11,"mapped","","",135,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",135,[[["self"],["k"]],["bool"]]],[11,"as_result","","",135,[[["self"]],["result",["parseerr"]]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_string","","",136,[[["self"]],["string"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into_collection","","",136,[[["self"]],["smallvec"]]],[11,"mapped","","",136,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",136,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper::h1","",184,[[["self"]],["u"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"into_collection","","",184,[[["self"]],["smallvec"]]],[11,"mapped","","",184,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",184,[[["self"]],["result",["parseerr"]]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"into_collection","","",185,[[["self"]],["smallvec"]]],[11,"mapped","","",185,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",185,[[["self"]],["result",["parseerr"]]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"into_collection","","",137,[[["self"]],["smallvec"]]],[11,"mapped","","",137,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",137,[[["self"]],["result",["parseerr"]]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"into_collection","","",138,[[["self"]],["smallvec"]]],[11,"mapped","","",138,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",138,[[["self"]],["result",["parseerr"]]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"into_collection","","",186,[[["self"]],["smallvec"]]],[11,"mapped","","",186,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",186,[[["self"]],["result",["parseerr"]]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"into_collection","","",139,[[["self"]],["smallvec"]]],[11,"mapped","","",139,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",139,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper::mime","",140,[[["self"]],["u"]]],[11,"to_string","","",140,[[["self"]],["string"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"into_collection","","",140,[[["self"]],["smallvec"]]],[11,"mapped","","",140,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",140,[[["self"],["k"]],["bool"]]],[11,"as_result","","",140,[[["self"]],["result",["parseerr"]]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_string","","",141,[[["self"]],["string"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"into_collection","","",141,[[["self"]],["smallvec"]]],[11,"mapped","","",141,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",141,[[["self"],["k"]],["bool"]]],[11,"as_result","","",141,[[["self"]],["result",["parseerr"]]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_string","","",142,[[["self"]],["string"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"into_collection","","",142,[[["self"]],["smallvec"]]],[11,"mapped","","",142,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",142,[[["self"],["k"]],["bool"]]],[11,"as_result","","",142,[[["self"]],["result",["parseerr"]]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_string","","",143,[[["self"]],["string"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"into_collection","","",143,[[["self"]],["smallvec"]]],[11,"mapped","","",143,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",143,[[["self"],["k"]],["bool"]]],[11,"as_result","","",143,[[["self"]],["result",["parseerr"]]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_string","","",144,[[["self"]],["string"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"into_collection","","",144,[[["self"]],["smallvec"]]],[11,"mapped","","",144,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",144,[[["self"],["k"]],["bool"]]],[11,"as_result","","",144,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::hyper","",145,[[["self"]],["u"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"into_collection","","",145,[[["self"]],["smallvec"]]],[11,"mapped","","",145,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",145,[[["self"]],["result",["parseerr"]]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"into_collection","","",146,[[["self"]],["smallvec"]]],[11,"mapped","","",146,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",146,[[["self"]],["result",["parseerr"]]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_string","","",147,[[["self"]],["string"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"into_collection","","",147,[[["self"]],["smallvec"]]],[11,"mapped","","",147,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",147,[[["self"]],["result",["parseerr"]]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_string","","",148,[[["self"]],["string"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"into_collection","","",148,[[["self"]],["smallvec"]]],[11,"mapped","","",148,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",148,[[["self"],["k"]],["bool"]]],[11,"as_result","","",148,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http::uri","",187,[[["self"]],["u"]]],[11,"to_string","","",187,[[["self"]],["string"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"into_collection","","",187,[[["self"]],["smallvec"]]],[11,"mapped","","",187,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",187,[[["self"]],["result",["parseerr"]]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_string","","",188,[[["self"]],["string"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"into_collection","","",188,[[["self"]],["smallvec"]]],[11,"mapped","","",188,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",188,[[["self"]],["result",["parseerr"]]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"into_iter","","",151,[[["self"]],["i"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"into_collection","","",151,[[["self"]],["smallvec"]]],[11,"mapped","","",151,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",151,[[["self"]],["result",["parseerr"]]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"into_collection","","",189,[[["self"]],["smallvec"]]],[11,"mapped","","",189,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",189,[[["self"]],["result",["parseerr"]]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_string","","",190,[[["self"]],["string"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"into_collection","","",190,[[["self"]],["smallvec"]]],[11,"mapped","","",190,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",190,[[["self"]],["result",["parseerr"]]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_string","","",153,[[["self"]],["string"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"into_collection","","",153,[[["self"]],["smallvec"]]],[11,"mapped","","",153,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",153,[[["self"]],["result",["parseerr"]]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"into_collection","","",154,[[["self"]],["smallvec"]]],[11,"mapped","","",154,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",154,[[["self"],["k"]],["bool"]]],[11,"as_result","","",154,[[["self"]],["result",["parseerr"]]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_string","","",191,[[["self"]],["string"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"into_collection","","",191,[[["self"]],["smallvec"]]],[11,"mapped","","",191,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",191,[[["self"]],["result",["parseerr"]]]],[11,"to_string","rocket::http::uncased","",192,[[["self"]],["string"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"equivalent","","",192,[[["self"],["k"]],["bool"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_string","","",193,[[["self"]],["string"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"into_collection","","",193,[[["self"]],["smallvec"]]],[11,"mapped","","",193,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",193,[[["self"],["k"]],["bool"]]],[11,"as_result","","",193,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket::http","",158,[[["self"]],["u"]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"into_collection","","",158,[[["self"]],["smallvec"]]],[11,"mapped","","",158,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",158,[[["self"],["k"]],["bool"]]],[11,"as_result","","",158,[[["self"]],["result",["parseerr"]]]],[11,"to_string","","",194,[[["self"]],["string"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"equivalent","","",194,[[["self"],["k"]],["bool"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"into_collection","","",195,[[["self"]],["smallvec"]]],[11,"mapped","","",195,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",195,[[["self"]],["result",["parseerr"]]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"into_collection","","",196,[[["self"]],["smallvec"]]],[11,"mapped","","",196,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",196,[[["self"]],["result",["parseerr"]]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"into_iter","","",197,[[["self"]],["i"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"into_collection","","",197,[[["self"]],["smallvec"]]],[11,"mapped","","",197,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",197,[[["self"],["k"]],["bool"]]],[11,"as_result","","",197,[[["self"]],["result",["parseerr"]]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"into_collection","","",198,[[["self"]],["smallvec"]]],[11,"mapped","","",198,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",198,[[["self"]],["result",["parseerr"]]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"into_collection","","",159,[[["self"]],["smallvec"]]],[11,"mapped","","",159,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",159,[[["self"]],["result",["parseerr"]]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_string","","",160,[[["self"]],["string"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"into_collection","","",160,[[["self"]],["smallvec"]]],[11,"mapped","","",160,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",160,[[["self"],["k"]],["bool"]]],[11,"as_result","","",160,[[["self"]],["result",["parseerr"]]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"into_collection","","",199,[[["self"]],["smallvec"]]],[11,"mapped","","",199,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",199,[[["self"]],["result",["parseerr"]]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"into_collection","","",161,[[["self"]],["smallvec"]]],[11,"mapped","","",161,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",161,[[["self"],["k"]],["bool"]]],[11,"as_result","","",161,[[["self"]],["result",["parseerr"]]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"into_collection","","",162,[[["self"]],["smallvec"]]],[11,"mapped","","",162,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",162,[[["self"]],["result",["parseerr"]]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_string","","",163,[[["self"]],["string"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"into_collection","","",163,[[["self"]],["smallvec"]]],[11,"mapped","","",163,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",163,[[["self"],["k"]],["bool"]]],[11,"as_result","","",163,[[["self"]],["result",["parseerr"]]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_string","","",200,[[["self"]],["string"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"into_collection","","",200,[[["self"]],["smallvec"]]],[11,"mapped","","",200,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",200,[[["self"]],["result",["parseerr"]]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_string","","",164,[[["self"]],["string"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"into_collection","","",164,[[["self"]],["smallvec"]]],[11,"mapped","","",164,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",164,[[["self"]],["result",["parseerr"]]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"into_collection","","",165,[[["self"]],["smallvec"]]],[11,"mapped","","",165,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",165,[[["self"],["k"]],["bool"]]],[11,"as_result","","",165,[[["self"]],["result",["parseerr"]]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_string","","",201,[[["self"]],["string"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"into_collection","","",201,[[["self"]],["smallvec"]]],[11,"mapped","","",201,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",201,[[["self"]],["result",["parseerr"]]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_string","","",202,[[["self"]],["string"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"into_collection","","",202,[[["self"]],["smallvec"]]],[11,"mapped","","",202,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",202,[[["self"]],["result",["parseerr"]]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"into_collection","","",166,[[["self"]],["smallvec"]]],[11,"mapped","","",166,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",166,[[["self"]],["result",["parseerr"]]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_string","","",168,[[["self"]],["string"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"into_collection","","",168,[[["self"]],["smallvec"]]],[11,"mapped","","",168,[[["self"],["f"]],["smallvec"]]],[11,"equivalent","","",168,[[["self"],["k"]],["bool"]]],[11,"as_result","","",168,[[["self"]],["result",["parseerr"]]]],[11,"clone","","",198,[[["self"]],["headermap"]]],[11,"clone","","",159,[[["self"]],["qmediatype"]]],[11,"clone","","",166,[[["self"]],["indexed"]]],[11,"clone","","",168,[[["self"]],["status"]]],[11,"clone","rocket::http::uncased","",193,[[["self"]],["uncased"]]],[11,"clone","rocket::http","",164,[[["self"]],["contenttype"]]],[11,"clone","rocket::http::uri","",191,[[["self"]],["origin"]]],[11,"clone","rocket::http","",165,[[["self"]],["statusclass"]]],[11,"clone","rocket::http::uri","",187,[[["self"]],["absolute"]]],[11,"clone","rocket::http","",201,[[["self"]],["accept"]]],[11,"clone","","",158,[[["self"]],["method"]]],[11,"clone","rocket::http::uri","",151,[[["self"]],["segments"]]],[11,"clone","","",153,[[["self"]],["uri"]]],[11,"clone","","",154,[[["self"]],["segmenterror"]]],[11,"clone","rocket::http","",163,[[["self"]],["header"]]],[11,"clone","","",162,[[["self"]],["mediaparams"]]],[11,"clone","","",202,[[["self"]],["mediatype"]]],[11,"clone","rocket::http::uri","",188,[[["self"]],["authority"]]],[11,"clone","rocket::http","",161,[[["self"]],["source"]]],[11,"cmp","rocket::http::uncased","",193,[[["self"],["uncased"]],["ordering"]]],[11,"cmp","","",192,[[["self"],["uncasedstr"]],["ordering"]]],[11,"cmp","rocket::http","",194,[[["self"],["rawstr"]],["ordering"]]],[11,"len","","",166,[[["self"]],["usize"]]],[11,"default","","",198,[[],["headermap"]]],[11,"default","","Returns a ContentType of `Any`, or `*/*`.",164,[[],["contenttype"]]],[11,"add","","",166,[[["self"],["indexed"]],["indexed"]]],[11,"into","","",164,[[["self"]],["header"]]],[11,"into","","",201,[[["self"]],["header"]]],[11,"from_str","","Parses a `ContentType` from a given Content-Type header value.",164,[[["str"]],["result",["contenttype","string"]]]],[11,"from_str","","",201,[[["str"]],["result",["accept","string"]]]],[11,"from_str","","",158,[[["str"]],["result",["method"]]]],[11,"from_str","","",202,[[["str"]],["result",["mediatype","string"]]]],[11,"next","rocket::http::uri","",151,[[["self"]],["option"]]],[11,"into_owned","","",190,N],[11,"into_owned","","",191,[[["self"]],["origin"]]],[11,"into_owned","","",187,N],[11,"into_owned","","",153,[[["self"]],["uri"]]],[11,"into_owned","rocket::http","",166,[[["self"]],["indexed"]]],[11,"into_owned","rocket::http::uri","",188,[[["self"]],["authority"]]],[11,"deref","rocket::http","",164,[[["self"]],["mediatype"]]],[11,"deref","","",194,[[["self"]],["str"]]],[11,"deref","","",159,[[["self"]],["mediatype"]]],[11,"deref","rocket::http::uncased","",193,[[["self"]],["uncasedstr"]]],[11,"fmt","rocket::http","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref_mut","","",194,[[["self"]],["str"]]],[11,"hash","","",194,N],[11,"hash","","",164,N],[11,"hash","","",163,N],[11,"hash","","",202,N],[11,"hash","","",168,N],[11,"hash","rocket::http::uncased","",193,N],[11,"hash","rocket::http","",165,N],[11,"hash","rocket::http::uncased","",192,N],[11,"hash","rocket::http","",158,N],[11,"partial_cmp","rocket::http::uncased","",193,[[["self"],["uncased"]],["option",["ordering"]]]],[11,"partial_cmp","rocket::http","",194,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","rocket::http::uncased","",192,[[["self"],["uncasedstr"]],["option",["ordering"]]]],[11,"partial_cmp","rocket::http","",194,[[["self"],["rawstr"]],["option",["ordering"]]]],[11,"lt","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"le","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"gt","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"ge","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"to_string","","",194,[[["self"]],["string"]]],[11,"as_ref","","",194,N],[11,"as_ref","rocket::http::uncased","",193,[[["self"]],["uncasedstr"]]],[11,"as_ref","rocket::http","",194,[[["self"]],["str"]]],[11,"try_from","rocket::http::uri","",153,[[["string"]],["result",["uri"]]]],[11,"try_from","","",153,[[["str"]],["result",["uri"]]]],[11,"write_str","","",189,[[["self"],["str"]],["result",["error"]]]],[11,"fmt","rocket::http","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Formats the ContentType as an HTTP Content-Type value.",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uncased","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uncased","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uncased","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::uri","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"borrow","rocket::http::uncased","",193,[[["self"]],["uncasedstr"]]],[11,"from","rocket::http","",163,[[["contentencoding"]],["header"]]],[11,"from","","",159,[[["mediatype"]],["qmediatype"]]],[11,"from","","",163,[[["accept"]],["header"]]],[11,"from","","",163,[[["accesscontrolallowheaders"]],["header"]]],[11,"from","","",163,[[["cookie"]],["header"]]],[11,"from","","",163,[[["acceptranges"]],["header"]]],[11,"from","","",201,[[["t"]],["accept"]]],[11,"from","rocket::http::uncased","",193,[[["t"]],["uncased"]]],[11,"from","rocket::http","",163,[[["contentlanguage"]],["header"]]],[11,"from","","",163,[[["location"]],["header"]]],[11,"from","","",163,[[["origin"]],["header"]]],[11,"from","","",163,[[["expires"]],["header"]]],[11,"from","","",166,[[["c"]],["indexed"]]],[11,"from","","",163,[[["accesscontrolmaxage"]],["header"]]],[11,"from","","",163,[[["acceptcharset"]],["header"]]],[11,"from","","",163,[[["accesscontrolallowmethods"]],["header"]]],[11,"from","","",163,[[["host"]],["header"]]],[11,"from","","",163,[[["referer"]],["header"]]],[11,"from","","",163,[[["allow"]],["header"]]],[11,"from","","",163,[[["cookie"]],["header"]]],[11,"from","","",163,[[["ifnonematch"]],["header"]]],[11,"from","","",163,[[["contentlength"]],["header"]]],[11,"from","","",163,[[["ifmatch"]],["header"]]],[11,"from","","",163,[[["lastmodified"]],["header"]]],[11,"from","","",163,[[["stricttransportsecurity"]],["header"]]],[11,"from","","",163,[[["accesscontrolallowcredentials"]],["header"]]],[11,"from","","",163,[[["acceptlanguage"]],["header"]]],[11,"from","rocket::http::uri","",153,[[["authority"]],["uri"]]],[11,"from","rocket::http","",163,[[["ifmodifiedsince"]],["header"]]],[11,"from","","",163,[[["accesscontrolexposeheaders"]],["header"]]],[11,"from","rocket::http::uncased","",193,[[["cow",["str"]]],["uncased"]]],[11,"from","rocket::http","",163,[[["connection"]],["header"]]],[11,"from","","",163,[[["referrerpolicy"]],["header"]]],[11,"from","rocket::http::uri","",153,[[["absolute"]],["uri"]]],[11,"from","rocket::http","",163,[[["etag"]],["header"]]],[11,"from","","",163,[[["accesscontrolrequestmethod"]],["header"]]],[11,"from","rocket::http::uncased","",193,[[["string"]],["uncased"]]],[11,"from","rocket::http","",163,[[["useragent"]],["header"]]],[11,"from","","",163,[[["ifunmodifiedsince"]],["header"]]],[11,"from","","",163,[[["preferenceapplied"]],["header"]]],[11,"from","","",163,[[["ifrange"]],["header"]]],[11,"from","","",163,[[["accesscontrolrequestheaders"]],["header"]]],[11,"from","","",163,[[["vary"]],["header"]]],[11,"from","","",163,[[["date"]],["header"]]],[11,"from","","",163,[[["upgrade"]],["header"]]],[11,"from","","",163,[[["expect"]],["header"]]],[11,"from","","",163,[[["transferencoding"]],["header"]]],[11,"from","","",163,[[["prefer"]],["header"]]],[11,"from","","",163,[[["cachecontrol"]],["header"]]],[11,"from","","",163,[[["acceptencoding"]],["header"]]],[11,"from","","",163,[[["range"]],["header"]]],[11,"from","","",163,[[["contentdisposition"]],["header"]]],[11,"from","","",163,[[["pragma"]],["header"]]],[11,"from","rocket::http::uncased","",193,[[["str"]],["uncased"]]],[11,"from","rocket::http","",163,[[["contentrange"]],["header"]]],[11,"from","","",163,[[["accesscontrolalloworigin"]],["header"]]],[11,"from","rocket::http::uri","",153,[[["origin"]],["uri"]]],[11,"eq","rocket::http","",198,[[["self"],["headermap"]],["bool"]]],[11,"ne","","",198,[[["self"],["headermap"]],["bool"]]],[11,"eq","rocket::http::uncased","",193,[[["self"],["uncased"]],["bool"]]],[11,"eq","rocket::http","",194,[[["self"],["str"]],["bool"]]],[11,"eq","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"ne","","",194,[[["self"],["rawstr"]],["bool"]]],[11,"eq","","",166,[[["self"],["indexed"]],["bool"]]],[11,"ne","","",166,[[["self"],["indexed"]],["bool"]]],[11,"eq","rocket::http::uncased","",193,[[["self"],["str"]],["bool"]]],[11,"eq","rocket::http::uri","",187,[[["self"],["absolute"]],["bool"]]],[11,"eq","rocket::http","",164,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",164,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",201,[[["self"],["accept"]],["bool"]]],[11,"ne","","",201,[[["self"],["accept"]],["bool"]]],[11,"eq","rocket::http::uncased","",192,[[["self"],["uncasedstr"]],["bool"]]],[11,"eq","rocket::http","",159,[[["self"],["qmediatype"]],["bool"]]],[11,"ne","","",159,[[["self"],["qmediatype"]],["bool"]]],[11,"eq","","",194,[[["self"],["string"]],["bool"]]],[11,"eq","","",165,[[["self"],["statusclass"]],["bool"]]],[11,"eq","","",158,[[["self"],["method"]],["bool"]]],[11,"eq","rocket::http::uncased","",192,[[["self"],["str"]],["bool"]]],[11,"eq","rocket::http::uri","",154,[[["self"],["segmenterror"]],["bool"]]],[11,"ne","","",154,[[["self"],["segmenterror"]],["bool"]]],[11,"eq","","",188,[[["self"],["authority"]],["bool"]]],[11,"eq","rocket::http","",163,[[["self"],["header"]],["bool"]]],[11,"ne","","",163,[[["self"],["header"]],["bool"]]],[11,"eq","","",168,[[["self"],["status"]],["bool"]]],[11,"ne","","",168,[[["self"],["status"]],["bool"]]],[11,"eq","","",202,[[["self"],["mediatype"]],["bool"]]],[11,"eq","","",161,[[["self"],["source"]],["bool"]]],[11,"ne","","",161,[[["self"],["source"]],["bool"]]],[11,"eq","rocket::http::uri","",153,[[["self"],["uri"]],["bool"]]],[11,"ne","","",153,[[["self"],["uri"]],["bool"]]],[11,"eq","rocket::http::uncased","",193,[[["self"],["str"]],["bool"]]],[11,"eq","rocket::http::uri","",191,[[["self"],["origin"]],["bool"]]],[11,"eq","rocket::http::uncased","",192,[[["self"],["str"]],["bool"]]],[11,"new","rocket::http","",162,[[],["mediaparams"]]],[11,"add","","",162,N],[11,"clone","","",197,[[["self"]],["smallvec"]]],[11,"extend_from_slice","","",197,N],[11,"extend","","",197,N],[11,"cmp","","",197,[[["self"],["smallvec"]],["ordering"]]],[11,"default","","",197,[[],["smallvec"]]],[11,"drop","","",197,N],[11,"as_mut","","",197,N],[11,"index","","",197,N],[11,"index","","",197,N],[11,"index","","",197,N],[11,"index","","",197,N],[11,"index","","",197,N],[11,"into_iter","","",197,N],[11,"push","","",197,N],[11,"deref","","",197,N],[11,"deref_mut","","",197,N],[11,"hash","","",197,N],[11,"partial_cmp","","",197,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"borrow_mut","","",197,N],[11,"as_ref","","",197,N],[11,"from_iter","","",197,[[["i"]],["smallvec"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"write","","",197,N],[11,"write_all","","",197,N],[11,"flush","","",197,[[["self"]],["result",["error"]]]],[11,"index_mut","","",197,N],[11,"index_mut","","",197,N],[11,"index_mut","","",197,N],[11,"index_mut","","",197,N],[11,"index_mut","","",197,N],[11,"borrow","","",197,N],[11,"from","","",197,[[["vec"]],["smallvec"]]],[11,"from","","",197,[[["a"]],["smallvec"]]],[11,"from","","",197,N],[11,"eq","","",197,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",197,[[["self"],["smallvec"]],["bool"]]],[11,"clone","","",200,[[["self"]],["cookie"]]],[11,"clone","","",196,[[["self"]],["cookiejar"]]],[11,"clone","","",160,[[["self"]],["samesite"]]],[11,"clone","","",199,[[["self"]],["key"]]],[11,"default","","",196,[[],["cookiejar"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",200,[[["str"]],["result",["cookie","parseerror"]]]],[11,"eq","","",200,[[["self"],["cookie"]],["bool"]]],[11,"eq","","",160,[[["self"],["samesite"]],["bool"]]],[11,"hash","","",160,N],[11,"clone","rocket::http::hyper::header","",72,[[["self"]],["vary"]]],[11,"clone","","",121,[[["self"]],["accept"]]],[11,"clone","","",92,[[["self"]],["contentrangespec"]]],[11,"clone","","",117,[[["self"]],["contentlength"]]],[11,"clone","","",101,[[["self"]],["bearer"]]],[11,"clone","","",87,[[["self"]],["connection"]]],[11,"clone","","",93,[[["self"]],["ifrange"]]],[11,"clone","","",119,[[["self"]],["encoding"]]],[11,"clone","","",88,[[["self"]],["contenttype"]]],[11,"clone","","",66,[[["self"]],["referer"]]],[11,"clone","rocket::http::hyper::net","",182,[[["self"]],["httpslistener"]]],[11,"clone","rocket::http::hyper::header","",71,[[["self"]],["prefer"]]],[11,"clone","","",76,[[["self"]],["acceptlanguage"]]],[11,"clone","","",116,[[["self"]],["connectionoption"]]],[11,"clone","rocket::http::hyper::net","",134,[[["self"]],["httpsstream"]]],[11,"clone","rocket::http::hyper::header","",89,[[["self"]],["etag"]]],[11,"clone","rocket::http::hyper","",135,[[["self"]],["method"]]],[11,"clone","rocket::http::hyper::header","",112,[[["self"]],["transferencoding"]]],[11,"clone","rocket::http::hyper","",148,[[["self"]],["statuscode"]]],[11,"clone","rocket::http::hyper::header","",84,[[["self"]],["expect"]]],[11,"clone","","",105,[[["self"]],["preference"]]],[11,"clone","","",99,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",175,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","rocket::http::hyper","",136,[[["self"]],["requesturi"]]],[11,"clone","rocket::http::hyper::header","",80,[[["self"]],["date"]]],[11,"clone","","",114,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",103,[[["self"]],["contentencoding"]]],[11,"clone","","",115,[[["self"]],["pragma"]]],[11,"clone","","",91,[[["self"]],["authorization"]]],[11,"clone","","",79,[[["self"]],["upgrade"]]],[11,"clone","rocket::http::hyper::net","",181,[[["self"]],["httpconnector"]]],[11,"clone","rocket::http::hyper::header","",85,[[["self"]],["expires"]]],[11,"clone","","",94,[[["self"]],["from"]]],[11,"clone","","",67,[[["self"]],["contentlanguage"]]],[11,"clone","","",106,[[["self"]],["qualityitem"]]],[11,"clone","","",75,[[["self"]],["ifmatch"]]],[11,"clone","","",108,[[["self"]],["referrerpolicy"]]],[11,"clone","","",70,[[["self"]],["host"]]],[11,"clone","","",110,[[["self"]],["contentdisposition"]]],[11,"clone","","",63,[[["self"]],["allow"]]],[11,"clone","","",65,[[["self"]],["range"]]],[11,"clone","","",104,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","rocket::http::hyper::net","",131,[[["self"]],["httpstream"]]],[11,"clone","rocket::http::hyper::header","",126,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",109,[[["self"]],["origin"]]],[11,"clone","","",64,[[["self"]],["acceptranges"]]],[11,"clone","","",68,[[["self"]],["ifnonematch"]]],[11,"clone","","",81,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",120,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",113,[[["self"]],["contentrange"]]],[11,"clone","","",86,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",107,[[["self"]],["byterangespec"]]],[11,"clone","","",77,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","rocket::http::hyper::net","",180,[[["self"]],["httplistener"]]],[11,"clone","rocket::http::hyper::header","",78,[[["self"]],["basic"]]],[11,"clone","","",174,[[["self"]],["headers"]]],[11,"clone","","",111,[[["self"]],["rangeunit"]]],[11,"clone","","",123,[[["self"]],["protocol"]]],[11,"clone","","",98,[[["self"]],["cachecontrol"]]],[11,"clone","","",118,[[["self"]],["acceptcharset"]]],[11,"clone","","",95,[[["self"]],["charset"]]],[11,"clone","","",97,[[["self"]],["preferenceapplied"]]],[11,"clone","","",83,[[["self"]],["acceptencoding"]]],[11,"clone","","",125,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",74,[[["self"]],["dispositionparam"]]],[11,"clone","","",82,[[["self"]],["quality"]]],[11,"clone","","",96,[[["self"]],["httpdate"]]],[11,"clone","","",100,[[["self"]],["protocolname"]]],[11,"clone","","",69,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",122,[[["self"]],["entitytag"]]],[11,"clone","","",90,[[["self"]],["location"]]],[11,"clone","","",127,[[["self"]],["dispositiontype"]]],[11,"clone","","",73,[[["self"]],["useragent"]]],[11,"clone","","",62,[[["self"]],["lastmodified"]]],[11,"clone","","",102,[[["self"]],["cachedirective"]]],[11,"new_message","rocket::http::hyper::h1","",185,[[["self"],["str"],["u16"],["str"]],["result",["box","error"]]]],[11,"scheme","rocket::http::hyper::header","",78,[[],["option",["str"]]]],[11,"fmt_scheme","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"scheme","","",101,[[],["option",["str"]]]],[11,"fmt_scheme","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"connect","rocket::http::hyper::net","",183,[[["self"],["str"],["u16"],["str"]],["result",["error"]]]],[11,"connect","","",181,[[["self"],["str"],["u16"],["str"]],["result",["httpstream","error"]]]],[11,"extend","rocket::http::hyper::header","",174,N],[11,"cmp","rocket::http::hyper","",148,[[["self"],["statuscode"]],["ordering"]]],[11,"cmp","rocket::http::hyper::header","",96,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","","",82,[[["self"],["quality"]],["ordering"]]],[11,"default","rocket::http::hyper::net","",183,[[],["httpsconnector"]]],[11,"default","","",181,[[],["httpconnector"]]],[11,"default","rocket::http::hyper::header","",82,[[],["quality"]]],[11,"as_raw_fd","rocket::http::hyper::net","",180,[[["self"]],["i32"]]],[11,"as_raw_fd","","",131,[[["self"]],["i32"]]],[11,"drop","rocket::http::hyper","",145,N],[11,"read","rocket::http::hyper::net","",134,N],[11,"read","","",131,N],[11,"read","rocket::http::hyper","",146,N],[11,"read","rocket::http::hyper::h1","",137,N],[11,"read","","",184,N],[11,"from_raw_fd","rocket::http::hyper::net","",180,[[["i32"]],["httplistener"]]],[11,"from_raw_fd","","",131,[[["i32"]],["httpstream"]]],[11,"from_str","rocket::http::hyper::header","",65,[[["str"]],["result",["range","error"]]]],[11,"from_str","","",95,[[["str"]],["result",["charset","error"]]]],[11,"from_str","","",122,[[["str"]],["result",["entitytag","error"]]]],[11,"from_str","","",123,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",78,[[["str"]],["result",["basic","error"]]]],[11,"from_str","","",101,[[["str"]],["result",["bearer","error"]]]],[11,"from_str","","",119,[[["str"]],["result",["encoding","error"]]]],[11,"from_str","","",116,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",102,[[["str"]],["result",["cachedirective","option"]]]],[11,"from_str","","",107,[[["str"]],["result",["byterangespec","error"]]]],[11,"from_str","rocket::http::hyper","",135,[[["str"]],["result",["method","error"]]]],[11,"from_str","rocket::http::hyper::header","",106,[[["str"]],["result",["qualityitem","error"]]]],[11,"from_str","rocket::http::hyper","",136,[[["str"]],["result",["requesturi","error"]]]],[11,"from_str","rocket::http::hyper::header","",100,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",92,[[["str"]],["result",["contentrangespec","error"]]]],[11,"from_str","","",111,[[["str"]],["result",["rangeunit","error"]]]],[11,"from_str","","",105,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",109,[[["str"]],["result",["origin","error"]]]],[11,"from_str","","",96,[[["str"]],["result",["httpdate","error"]]]],[11,"from_str","","",126,[[["str"]],["result",["stricttransportsecurity","error"]]]],[11,"from_str","","",70,[[["str"]],["result",["host","error"]]]],[11,"next","rocket::http::hyper::net","",179,[[["self"]],["option",["result"]]]],[11,"accept","","",180,[[["self"]],["result",["httpstream","error"]]]],[11,"local_addr","","",180,[[["self"]],["result",["socketaddr","error"]]]],[11,"set_read_timeout","","",180,N],[11,"set_write_timeout","","",180,N],[11,"accept","","",182,[[["self"]],["result",["error"]]]],[11,"local_addr","","",182,[[["self"]],["result",["socketaddr","error"]]]],[11,"set_read_timeout","","",182,N],[11,"set_write_timeout","","",182,N],[11,"set_outgoing","rocket::http::hyper::h1","",184,[[["self"],["requesthead"]],["result",["requesthead","error"]]]],[11,"get_incoming","","",184,[[["self"]],["result",["responsehead","error"]]]],[11,"has_body","","",184,[[["self"]],["bool"]]],[11,"set_read_timeout","","",184,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"set_write_timeout","","",184,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"close_connection","","",184,[[["self"]],["result",["error"]]]],[11,"set_proxied","","",184,N],[11,"deref","rocket::http::hyper::header","",85,[[["self"]],["httpdate"]]],[11,"deref","","",98,[[["self"]],["vec"]]],[11,"deref","","",90,[[["self"]],["string"]]],[11,"deref","","",103,[[["self"]],["vec"]]],[11,"deref","","",77,[[["self"]],["vec"]]],[11,"deref","","",62,[[["self"]],["httpdate"]]],[11,"deref","","",66,[[["self"]],["string"]]],[11,"deref","","",69,[[["self"]],["method"]]],[11,"deref","","",87,[[["self"]],["vec"]]],[11,"deref","","",86,[[["self"]],["vec"]]],[11,"deref","","",67,[[["self"]],["vec"]]],[11,"deref","","",88,[[["self"]],["mime"]]],[11,"deref","","",114,[[["self"]],["u32"]]],[11,"deref","","",91,[[["self"]],["s"]]],[11,"deref","","",121,[[["self"]],["vec"]]],[11,"deref","","",89,[[["self"]],["entitytag"]]],[11,"deref","","",112,[[["self"]],["vec"]]],[11,"deref","","",71,[[["self"]],["vec"]]],[11,"deref","","",83,[[["self"]],["vec"]]],[11,"deref","","",120,[[["self"]],["vec"]]],[11,"deref","","",79,[[["self"]],["vec"]]],[11,"deref","","",118,[[["self"]],["vec"]]],[11,"deref","","",97,[[["self"]],["vec"]]],[11,"deref","","",104,[[["self"]],["vec"]]],[11,"deref","","",81,[[["self"]],["httpdate"]]],[11,"deref","","",80,[[["self"]],["httpdate"]]],[11,"deref","","",76,[[["self"]],["vec"]]],[11,"deref","","",63,[[["self"]],["vec"]]],[11,"deref","","",94,[[["self"]],["string"]]],[11,"deref","","",64,[[["self"]],["vec"]]],[11,"deref","","",117,[[["self"]],["u64"]]],[11,"deref","","",73,[[["self"]],["string"]]],[11,"deref","","",99,[[["self"]],["httpdate"]]],[11,"deref","","",113,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",97,[[["self"]],["vec"]]],[11,"deref_mut","","",87,[[["self"]],["vec"]]],[11,"deref_mut","","",90,[[["self"]],["string"]]],[11,"deref_mut","","",63,[[["self"]],["vec"]]],[11,"deref_mut","","",117,[[["self"]],["u64"]]],[11,"deref_mut","","",81,[[["self"]],["httpdate"]]],[11,"deref_mut","","",73,[[["self"]],["string"]]],[11,"deref_mut","","",62,[[["self"]],["httpdate"]]],[11,"deref_mut","","",94,[[["self"]],["string"]]],[11,"deref_mut","","",120,[[["self"]],["vec"]]],[11,"deref_mut","","",77,[[["self"]],["vec"]]],[11,"deref_mut","","",85,[[["self"]],["httpdate"]]],[11,"deref_mut","","",76,[[["self"]],["vec"]]],[11,"deref_mut","","",64,[[["self"]],["vec"]]],[11,"deref_mut","","",91,[[["self"]],["s"]]],[11,"deref_mut","","",118,[[["self"]],["vec"]]],[11,"deref_mut","","",89,[[["self"]],["entitytag"]]],[11,"deref_mut","","",99,[[["self"]],["httpdate"]]],[11,"deref_mut","","",66,[[["self"]],["string"]]],[11,"deref_mut","","",88,[[["self"]],["mime"]]],[11,"deref_mut","","",83,[[["self"]],["vec"]]],[11,"deref_mut","","",69,[[["self"]],["method"]]],[11,"deref_mut","","",71,[[["self"]],["vec"]]],[11,"deref_mut","","",67,[[["self"]],["vec"]]],[11,"deref_mut","","",113,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",86,[[["self"]],["vec"]]],[11,"deref_mut","","",112,[[["self"]],["vec"]]],[11,"deref_mut","","",104,[[["self"]],["vec"]]],[11,"deref_mut","","",98,[[["self"]],["vec"]]],[11,"deref_mut","","",114,[[["self"]],["u32"]]],[11,"deref_mut","","",121,[[["self"]],["vec"]]],[11,"deref_mut","","",80,[[["self"]],["httpdate"]]],[11,"deref_mut","","",79,[[["self"]],["vec"]]],[11,"deref_mut","","",103,[[["self"]],["vec"]]],[11,"peer_addr","rocket::http::hyper::net","",131,[[["self"]],["result",["socketaddr","error"]]]],[11,"set_read_timeout","","",131,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"set_write_timeout","","",131,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"close","","",131,[[["self"],["shutdown"]],["result",["error"]]]],[11,"peer_addr","","",134,[[["self"]],["result",["socketaddr","error"]]]],[11,"set_read_timeout","","",134,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"set_write_timeout","","",134,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"close","","",134,[[["self"],["shutdown"]],["result",["error"]]]],[11,"hash","rocket::http::hyper","",148,N],[11,"hash","","",135,N],[11,"partial_cmp","rocket::http::hyper::header","",96,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",82,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",82,[[["self"],["quality"]],["bool"]]],[11,"le","","",82,[[["self"],["quality"]],["bool"]]],[11,"gt","","",82,[[["self"],["quality"]],["bool"]]],[11,"ge","","",82,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","rocket::http::hyper","",148,[[["self"],["statuscode"]],["option",["ordering"]]]],[11,"partial_cmp","rocket::http::hyper::header","",106,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"as_ref","rocket::http::hyper","",135,[[["self"]],["str"]]],[11,"description","","",147,[[["self"]],["str"]]],[11,"cause","","",147,[[["self"]],["option",["error"]]]],[11,"from_iter","rocket::http::hyper::header","",174,[[["i"]],["headers"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::h1","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::h1","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::net","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::h1","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::h1","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::net","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::net","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::h1","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::net","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket::http::hyper::header","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"write","rocket::http::hyper","",145,N],[11,"flush","","",145,[[["self"]],["result",["error"]]]],[11,"write","rocket::http::hyper::h1","",184,N],[11,"flush","","",184,[[["self"]],["result",["error"]]]],[11,"write","","",138,N],[11,"flush","","",138,[[["self"]],["result",["error"]]]],[11,"write","rocket::http::hyper::net","",134,N],[11,"flush","","",134,[[["self"]],["result",["error"]]]],[11,"write","","",131,N],[11,"flush","","",131,[[["self"]],["result",["error"]]]],[11,"fmt_header","rocket::http::hyper::header","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",88,[[],["str"]]],[11,"parse_header","","",88,N],[11,"header_name","","",62,[[],["str"]]],[11,"parse_header","","",62,N],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"header_name","","",77,[[],["str"]]],[11,"parse_header","","",77,N],[11,"header_name","","",109,[[],["str"]]],[11,"parse_header","","",109,N],[11,"header_name","","",125,[[],["str"]]],[11,"parse_header","","",125,N],[11,"header_name","","",97,[[],["str"]]],[11,"parse_header","","",97,N],[11,"header_name","","",63,[[],["str"]]],[11,"parse_header","","",63,N],[11,"header_name","","",69,[[],["str"]]],[11,"parse_header","","",69,N],[11,"header_name","","",91,[[],["str"]]],[11,"parse_header","","",91,N],[11,"header_name","","",86,[[],["str"]]],[11,"parse_header","","",86,N],[11,"header_name","","",104,[[],["str"]]],[11,"parse_header","","",104,N],[11,"header_name","","",80,[[],["str"]]],[11,"parse_header","","",80,N],[11,"header_name","","",83,[[],["str"]]],[11,"parse_header","","",83,N],[11,"header_name","","",90,[[],["str"]]],[11,"parse_header","","",90,N],[11,"header_name","","",67,[[],["str"]]],[11,"parse_header","","",67,N],[11,"header_name","","",103,[[],["str"]]],[11,"parse_header","","",103,N],[11,"header_name","","",98,[[],["str"]]],[11,"parse_header","","",98,N],[11,"header_name","","",84,[[],["str"]]],[11,"parse_header","","",84,N],[11,"header_name","","",85,[[],["str"]]],[11,"parse_header","","",85,N],[11,"header_name","","",68,[[],["str"]]],[11,"parse_header","","",68,N],[11,"header_name","","",113,[[],["str"]]],[11,"parse_header","","",113,N],[11,"header_name","","",79,[[],["str"]]],[11,"parse_header","","",79,N],[11,"header_name","","",94,[[],["str"]]],[11,"parse_header","","",94,N],[11,"header_name","","",72,[[],["str"]]],[11,"parse_header","","",72,N],[11,"header_name","","",114,[[],["str"]]],[11,"parse_header","","",114,N],[11,"header_name","","",120,[[],["str"]]],[11,"parse_header","","",120,N],[11,"header_name","","",175,[[],["str"]]],[11,"parse_header","","",175,N],[11,"header_name","","",117,[[],["str"]]],[11,"parse_header","","",117,N],[11,"header_name","","",99,[[],["str"]]],[11,"parse_header","","",99,N],[11,"header_name","","",115,[[],["str"]]],[11,"parse_header","","",115,N],[11,"header_name","","",121,[[],["str"]]],[11,"parse_header","","",121,N],[11,"header_name","","",65,[[],["str"]]],[11,"parse_header","","",65,N],[11,"header_name","","",126,[[],["str"]]],[11,"parse_header","","",126,N],[11,"header_name","","",81,[[],["str"]]],[11,"parse_header","","",81,N],[11,"header_name","","",118,[[],["str"]]],[11,"parse_header","","",118,N],[11,"header_name","","",64,[[],["str"]]],[11,"parse_header","","",64,N],[11,"header_name","","",89,[[],["str"]]],[11,"parse_header","","",89,N],[11,"header_name","","",66,[[],["str"]]],[11,"parse_header","","",66,N],[11,"header_name","","",87,[[],["str"]]],[11,"parse_header","","",87,N],[11,"header_name","","",71,[[],["str"]]],[11,"parse_header","","",71,N],[11,"header_name","","",112,[[],["str"]]],[11,"parse_header","","",112,N],[11,"header_name","","",73,[[],["str"]]],[11,"parse_header","","",73,N],[11,"header_name","","",93,[[],["str"]]],[11,"parse_header","","",93,N],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"header_name","","",110,[[],["str"]]],[11,"parse_header","","",110,N],[11,"header_name","","",70,[[],["str"]]],[11,"parse_header","","",70,N],[11,"header_name","","",108,[[],["str"]]],[11,"parse_header","","",108,N],[11,"from","rocket::http::hyper","",147,[[["fromutf8error"]],["error"]]],[11,"from","","",147,[[["parseerror"]],["error"]]],[11,"from","rocket::http::hyper::net","",180,[[["tcplistener"]],["httplistener"]]],[11,"from","rocket::http::hyper","",147,[[["error"]],["error"]]],[11,"from","","",147,[[["utf8error"]],["error"]]],[11,"from","","",147,[[["error"]],["error"]]],[11,"eq","rocket::http::hyper::header","",119,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",119,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",73,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",73,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",76,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",76,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",95,[[["self"],["charset"]],["bool"]]],[11,"ne","","",95,[[["self"],["charset"]],["bool"]]],[11,"eq","rocket::http::hyper","",148,[[["self"],["statuscode"]],["bool"]]],[11,"eq","rocket::http::hyper::header","",98,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",98,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",120,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",120,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",109,[[["self"],["origin"]],["bool"]]],[11,"eq","","",67,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",67,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",75,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",125,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",125,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",97,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",97,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","","",82,[[["self"],["quality"]],["bool"]]],[11,"ne","","",82,[[["self"],["quality"]],["bool"]]],[11,"eq","","",64,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",64,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",79,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",79,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",86,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",86,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",85,[[["self"],["expires"]],["bool"]]],[11,"ne","","",85,[[["self"],["expires"]],["bool"]]],[11,"eq","","",71,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",71,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",100,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",100,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",91,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",91,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",113,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",113,[[["self"],["contentrange"]],["bool"]]],[11,"eq","rocket::http::hyper","",135,[[["self"],["method"]],["bool"]]],[11,"ne","","",135,[[["self"],["method"]],["bool"]]],[11,"eq","rocket::http::hyper::header","",66,[[["self"],["referer"]],["bool"]]],[11,"ne","","",66,[[["self"],["referer"]],["bool"]]],[11,"eq","","",126,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",126,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",63,[[["self"],["allow"]],["bool"]]],[11,"ne","","",63,[[["self"],["allow"]],["bool"]]],[11,"eq","","",93,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",93,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",175,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",118,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",118,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",81,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",81,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",89,[[["self"],["etag"]],["bool"]]],[11,"ne","","",89,[[["self"],["etag"]],["bool"]]],[11,"eq","","",111,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",111,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",70,[[["self"],["host"]],["bool"]]],[11,"ne","","",70,[[["self"],["host"]],["bool"]]],[11,"eq","","",80,[[["self"],["date"]],["bool"]]],[11,"ne","","",80,[[["self"],["date"]],["bool"]]],[11,"eq","","",102,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",102,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",121,[[["self"],["accept"]],["bool"]]],[11,"ne","","",121,[[["self"],["accept"]],["bool"]]],[11,"eq","","",117,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",117,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",110,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",110,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",122,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",122,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",84,[[["self"],["expect"]],["bool"]]],[11,"eq","","",72,[[["self"],["vary"]],["bool"]]],[11,"ne","","",72,[[["self"],["vary"]],["bool"]]],[11,"eq","","",103,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",103,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",99,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",99,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"eq","","",114,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",114,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",69,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",69,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","rocket::http::hyper","",136,[[["self"],["requesturi"]],["bool"]]],[11,"ne","","",136,[[["self"],["requesturi"]],["bool"]]],[11,"eq","rocket::http::hyper::header","",62,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",62,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",74,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",74,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",174,[[["self"],["headers"]],["bool"]]],[11,"eq","","",107,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",107,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",90,[[["self"],["location"]],["bool"]]],[11,"ne","","",90,[[["self"],["location"]],["bool"]]],[11,"eq","","",65,[[["self"],["range"]],["bool"]]],[11,"ne","","",65,[[["self"],["range"]],["bool"]]],[11,"eq","","",101,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",101,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",106,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",106,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","","",123,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",123,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",105,[[["self"],["preference"]],["bool"]]],[11,"ne","","",105,[[["self"],["preference"]],["bool"]]],[11,"eq","","",87,[[["self"],["connection"]],["bool"]]],[11,"ne","","",87,[[["self"],["connection"]],["bool"]]],[11,"eq","","",127,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",127,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",83,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",83,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",78,[[["self"],["basic"]],["bool"]]],[11,"ne","","",78,[[["self"],["basic"]],["bool"]]],[11,"eq","","",115,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",115,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",77,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",77,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",116,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",116,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",112,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",112,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",96,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",88,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",88,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",108,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",94,[[["self"],["from"]],["bool"]]],[11,"ne","","",94,[[["self"],["from"]],["bool"]]],[11,"eq","","",92,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",92,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",104,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",104,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",68,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",68,[[["self"],["ifnonematch"]],["bool"]]],[11,"clone","rocket::http::hyper::mime","",144,[[["self"]],["sublevel"]]],[11,"clone","","",143,[[["self"]],["attr"]]],[11,"clone","","",140,[[["self"]],["toplevel"]]],[11,"clone","","",142,[[["self"]],["mime"]]],[11,"clone","","",141,[[["self"]],["value"]]],[11,"partial_cmp","","",142,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",142,[[["self"],["mime"]],["bool"]]],[11,"le","","",142,[[["self"],["mime"]],["bool"]]],[11,"gt","","",142,[[["self"],["mime"]],["bool"]]],[11,"ge","","",142,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",144,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",144,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",144,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",144,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",144,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",143,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",143,[[["self"],["attr"]],["bool"]]],[11,"le","","",143,[[["self"],["attr"]],["bool"]]],[11,"gt","","",143,[[["self"],["attr"]],["bool"]]],[11,"ge","","",143,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",141,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",141,[[["self"],["value"]],["bool"]]],[11,"le","","",141,[[["self"],["value"]],["bool"]]],[11,"gt","","",141,[[["self"],["value"]],["bool"]]],[11,"ge","","",141,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",140,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",140,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",140,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",140,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",140,[[["self"],["toplevel"]],["bool"]]],[11,"cmp","","",140,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",141,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",143,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",142,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",144,[[["self"],["sublevel"]],["ordering"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",143,[[["str"]],["result",["attr"]]]],[11,"from_str","","",141,[[["str"]],["result",["value"]]]],[11,"from_str","","",144,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",140,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",142,[[["str"]],["result",["mime"]]]],[11,"deref","","",144,[[["self"]],["str"]]],[11,"deref","","",141,[[["self"]],["str"]]],[11,"deref","","",143,[[["self"]],["str"]]],[11,"deref","","",140,[[["self"]],["str"]]],[11,"eq","","",144,[[["self"],["string"]],["bool"]]],[11,"eq","","",144,[[["self"],["str"]],["bool"]]],[11,"eq","","",141,[[["self"],["str"]],["bool"]]],[11,"eq","","",140,[[["self"],["str"]],["bool"]]],[11,"eq","","",140,[[["self"],["string"]],["bool"]]],[11,"eq","","",143,[[["self"],["str"]],["bool"]]],[11,"eq","","",143,[[["self"],["string"]],["bool"]]],[11,"eq","","",140,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",143,[[["self"],["str"]],["bool"]]],[11,"eq","","",141,[[["self"],["value"]],["bool"]]],[11,"eq","","",140,[[["self"],["str"]],["bool"]]],[11,"eq","","",142,[[["self"],["mime"]],["bool"]]],[11,"eq","","",144,[[["self"],["str"]],["bool"]]],[11,"eq","","",144,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",141,[[["self"],["str"]],["bool"]]],[11,"eq","","",141,[[["self"],["string"]],["bool"]]],[11,"eq","","",143,[[["self"],["attr"]],["bool"]]],[11,"hash","","",142,N],[11,"hash","","",143,N],[11,"hash","","",141,N],[11,"hash","","",140,N],[11,"hash","","",144,N],[11,"clone","rocket::config","",172,[[["self"]],["datetime"]]],[11,"clone","","",42,[[["self"]],["value"]]],[11,"serialize","","",172,[[["self"],["s"]],["result"]]],[11,"serialize","","",42,[[["self"],["s"]],["result"]]],[11,"deserialize","","",42,[[["d"]],["result",["value"]]]],[11,"deserialize","","",172,[[["d"]],["result",["datetime"]]]],[11,"from_str","","",42,[[["str"]],["result",["value"]]]],[11,"from_str","","",172,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"index","","",42,[[["self"],["i"]],["value"]]],[11,"deserialize_any","","",42,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",42,N],[11,"deserialize_option","","",42,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",42,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",42,N],[11,"deserialize_tuple","","",42,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["self"],["v"]],["result"]]],[11,"into_deserializer","","",42,[[["self"]],["value"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"index_mut","","",42,[[["self"],["i"]],["value"]]],[11,"from","","",42,[[["i32"]],["value"]]],[11,"from","","",42,[[["btreemap"]],["value"]]],[11,"from","","",42,[[["f64"]],["value"]]],[11,"from","","",42,[[["bool"]],["value"]]],[11,"from","","",42,[[["u32"]],["value"]]],[11,"from","","",42,[[["datetime"]],["value"]]],[11,"from","","",42,[[["i8"]],["value"]]],[11,"from","","",42,[[["vec"]],["value"]]],[11,"from","","",42,[[["i64"]],["value"]]],[11,"from","","",42,[[["hashmap",["randomstate"]]],["value"]]],[11,"from","","",42,[[["str"]],["value"]]],[11,"from","","",42,[[["f32"]],["value"]]],[11,"from","","",42,[[["string"]],["value"]]],[11,"from","","",42,[[["u8"]],["value"]]],[11,"eq","","",172,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",172,[[["self"],["datetime"]],["bool"]]],[11,"eq","","",42,[[["self"],["value"]],["bool"]]],[11,"ne","","",42,[[["self"],["value"]],["bool"]]],[11,"from_segments","rocket::http::uri","",151,[[["segments"]],["result",["segments"]]]],[11,"from_request","rocket::http","",158,[[["request"]],["outcome"]]],[11,"from_request","","",195,[[["request"]],["outcome"]]],[11,"from_request","rocket","",13,[[["request"]],["outcome",["state"]]]],[11,"from_request","rocket::response","",27,[[["request"]],["outcome"]]],[11,"from_query","rocket::request","",12,[[["query"]],["result"]]],[11,"from_query","","",11,[[["query"]],["result"]]],[11,"respond_to","rocket::http","",168,[[["self"],["request"]],["result"]]],[11,"respond_to","rocket::response","",22,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",23,[[["self"],["request"]],["result"]]],[11,"respond_to","","",24,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","rocket","This is the identity implementation. It simply returns `Ok(self)`.",26,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","rocket::response","",27,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","rocket::response::content","",20,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",28,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",29,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",30,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",31,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",32,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",33,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",34,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","rocket::response::status","",35,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",35,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",36,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",37,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",38,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",39,[[["self"],["request"]],["result",["response","status"]]]],[11,"transform","rocket::request","",11,[[["request"],["data"]],["transform",["outcome"]]]],[11,"from_data","","",11,[[["request"],["transformed"]],["outcome"]]],[11,"transform","","",12,[[["request"],["data"]],["transform",["outcome"]]]],[11,"from_data","","",12,[[["request"],["transformed"]],["outcome"]]],[11,"transform","rocket","",49,[[["request"],["data"]],["transform",["outcome"]]]],[11,"from_data","","",49,[[["request"],["transformed"]],["outcome"]]],[11,"info","rocket::fairing","",56,[[["self"]],["info"]]],[11,"on_attach","","",56,[[["self"],["rocket"]],["result",["rocket","rocket"]]]],[11,"on_launch","","",56,[[["self"],["rocket"]]]],[11,"on_request","","",56,[[["self"],["request"],["data"]]]],[11,"on_response","","",56,[[["self"],["request"],["response"]]]],[11,"next","rocket::request","",10,[[["self"]],["option"]]],[11,"next","","",171,[[["self"]],["option"]]],[11,"partial_cmp","rocket","",13,[[["self"],["state"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["state"]],["bool"]]],[11,"le","","",13,[[["self"],["state"]],["bool"]]],[11,"gt","","",13,[[["self"],["state"]],["bool"]]],[11,"ge","","",13,[[["self"],["state"]],["bool"]]],[11,"partial_cmp","rocket::outcome","",3,[[["self"],["outcome"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["outcome"]],["bool"]]],[11,"le","","",3,[[["self"],["outcome"]],["bool"]]],[11,"gt","","",3,[[["self"],["outcome"]],["bool"]]],[11,"ge","","",3,[[["self"],["outcome"]],["bool"]]],[11,"default","rocket","",26,[[],["response"]]],[11,"default","rocket::config","",47,[[],["limits"]]],[11,"cmp","rocket","",13,[[["self"],["state"]],["ordering"]]],[11,"cmp","rocket::outcome","",3,[[["self"],["outcome"]],["ordering"]]],[11,"eq","rocket::config","",46,[[["self"],["logginglevel"]],["bool"]]],[11,"eq","rocket::request","",6,[[["self"],["formitem"]],["bool"]]],[11,"ne","","",6,[[["self"],["formitem"]],["bool"]]],[11,"eq","","",7,[[["self"],["formparseerror"]],["bool"]]],[11,"ne","","",7,[[["self"],["formparseerror"]],["bool"]]],[11,"eq","rocket","",13,[[["self"],["state"]],["bool"]]],[11,"ne","","",13,[[["self"],["state"]],["bool"]]],[11,"eq","rocket::response","",21,[[["self"],["body"]],["bool"]]],[11,"ne","","",21,[[["self"],["body"]],["bool"]]],[11,"eq","rocket::response::content","",20,[[["self"],["content"]],["bool"]]],[11,"ne","","",20,[[["self"],["content"]],["bool"]]],[11,"eq","","",28,[[["self"],["json"]],["bool"]]],[11,"ne","","",28,[[["self"],["json"]],["bool"]]],[11,"eq","","",29,[[["self"],["xml"]],["bool"]]],[11,"ne","","",29,[[["self"],["xml"]],["bool"]]],[11,"eq","","",30,[[["self"],["msgpack"]],["bool"]]],[11,"ne","","",30,[[["self"],["msgpack"]],["bool"]]],[11,"eq","","",31,[[["self"],["html"]],["bool"]]],[11,"ne","","",31,[[["self"],["html"]],["bool"]]],[11,"eq","","",32,[[["self"],["plain"]],["bool"]]],[11,"ne","","",32,[[["self"],["plain"]],["bool"]]],[11,"eq","","",33,[[["self"],["css"]],["bool"]]],[11,"ne","","",33,[[["self"],["css"]],["bool"]]],[11,"eq","","",34,[[["self"],["javascript"]],["bool"]]],[11,"ne","","",34,[[["self"],["javascript"]],["bool"]]],[11,"eq","rocket::response::status","",35,[[["self"],["created"]],["bool"]]],[11,"ne","","",35,[[["self"],["created"]],["bool"]]],[11,"eq","","",36,[[["self"],["accepted"]],["bool"]]],[11,"ne","","",36,[[["self"],["accepted"]],["bool"]]],[11,"eq","","",37,[[["self"],["badrequest"]],["bool"]]],[11,"ne","","",37,[[["self"],["badrequest"]],["bool"]]],[11,"eq","","",38,[[["self"],["notfound"]],["bool"]]],[11,"ne","","",38,[[["self"],["notfound"]],["bool"]]],[11,"eq","","",39,[[["self"],["custom"]],["bool"]]],[11,"ne","","",39,[[["self"],["custom"]],["bool"]]],[11,"eq","rocket::outcome","",3,[[["self"],["outcome"]],["bool"]]],[11,"ne","","",3,[[["self"],["outcome"]],["bool"]]],[11,"eq","rocket::config","",44,[[["self"],["configerror"]],["bool"]]],[11,"eq","","",45,[[["self"],["environment"]],["bool"]]],[11,"eq","rocket","",0,[[["self"],["config"]],["bool"]]],[11,"from","rocket::request","",10,[[["rawstr"]],["formitems"]]],[11,"from","","",10,[[["str"]],["formitems"]]],[11,"from","","",10,N],[11,"from","rocket::response","",24,[[["t"]],["self"]]],[11,"from","rocket::error","",61,[[["error"]],["launcherror"]]],[11,"from","","",61,[[["error"]],["launcherror"]]],[11,"from","","",60,N],[11,"from","","",60,[[["error"]],["self"]]],[11,"clone","rocket::config","",46,[[["self"]],["logginglevel"]]],[11,"clone","rocket::local","",4,[[["self"]],["localrequest"]]],[11,"clone","rocket","",9,[[["self"]],["request"]]],[11,"clone","rocket::request","",6,[[["self"]],["formitem"]]],[11,"clone","","",7,[[["self"]],["formparseerror"]]],[11,"clone","","",171,[[["self"]],["query"]]],[11,"clone","rocket::response","",21,[[["self"]],["body"]]],[11,"clone","rocket::response::content","",20,[[["self"]],["content"]]],[11,"clone","","",28,[[["self"]],["json"]]],[11,"clone","","",29,[[["self"]],["xml"]]],[11,"clone","","",30,[[["self"]],["msgpack"]]],[11,"clone","","",31,[[["self"]],["html"]]],[11,"clone","","",32,[[["self"]],["plain"]]],[11,"clone","","",33,[[["self"]],["css"]]],[11,"clone","","",34,[[["self"]],["javascript"]]],[11,"clone","rocket::response::status","",35,[[["self"]],["created"]]],[11,"clone","","",36,[[["self"]],["accepted"]]],[11,"clone","","",37,[[["self"]],["badrequest"]]],[11,"clone","","",38,[[["self"]],["notfound"]]],[11,"clone","","",39,[[["self"]],["custom"]]],[11,"clone","rocket::outcome","",3,[[["self"]],["outcome"]]],[11,"clone","rocket::config","",45,[[["self"]],["environment"]]],[11,"clone","rocket","",0,[[["self"]],["config"]]],[11,"clone","rocket::config","",43,[[["self"]],["configbuilder"]]],[11,"clone","","",47,[[["self"]],["limits"]]],[11,"clone","rocket::fairing","",57,[[["self"]],["kind"]]],[11,"clone","rocket","",1,[[["self"]],["route"]]],[11,"drop","","",49,[[["self"]]]],[11,"drop","rocket::data","",173,[[["self"]]]],[11,"drop","rocket::error","",61,[[["self"]]]],[11,"deref_mut","rocket::local","",170,[[["self"]],["response"]]],[11,"deref_mut","rocket::response","",23,[[["self"]],["file"]]],[11,"deref","rocket::local","",170,[[["self"]],["response"]]],[11,"deref","rocket::request","",11,[[["self"]],["t"]]],[11,"deref","","",12,[[["self"]],["t"]]],[11,"deref","rocket","",13,[[["self"]],["t"]]],[11,"deref","rocket::response","",23,[[["self"]],["file"]]],[11,"fmt","rocket::config","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::local","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::request","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::request","",171,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::response","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::response","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::response::content","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::response::status","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::outcome","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::config","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::config","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::fairing","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::error","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::config","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","Pretty prints a Request. This is primarily used by Rocket's logging infrastructure.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::outcome","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::config","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket::error","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"bitor","rocket::fairing","",57,[[["self"],["self"]],["self"]]],[11,"hash","rocket::request","",7,N],[11,"hash","rocket","",13,N],[11,"hash","rocket::response","",21,N],[11,"hash","rocket::outcome","",3,N],[11,"hash","rocket::config","",45,N],[11,"into_result","rocket::outcome","",3,[[["self"]],["result"]]],[11,"from_error","","",3,N],[11,"from_ok","","",3,N],[11,"from_str","rocket::config","",46,[[["str"]],["result"]]],[11,"from_str","","Parses a configuration environment from a string. Should be used indirectly via `str`'s `parse` method.",45,[[["str"]],["result"]]],[11,"read","rocket::response","",23,N],[11,"read_to_end","","",23,[[["self"],["vec"]],["result",["usize"]]]],[11,"read","rocket::data","",173,N],[11,"seek","rocket::response","",23,[[["self"],["seekfrom"]],["result",["u64"]]]],[11,"write","","",23,N],[11,"flush","","",23,[[["self"]],["result"]]],[11,"description","rocket::config","",44,[[["self"]],["str"]]],[11,"description","rocket::error","",61,[[["self"]],["str"]]],[11,"from_uri_param","rocket::request","",11,N],[11,"from_uri_param","","",12,N],[11,"default","","Returns a default value to be used when the form field does not exist. If this returns `None`, then the field is required. Otherwise, this should return `Some(default_value)`. The default implementation simply returns `None`.",18,[[],["option"]]],[11,"try_from","rocket::config","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",42,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",42,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",42,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",42,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",42,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",42,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",42,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",42,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",42,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",42,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",42,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",42,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",42,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",42,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",42,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",42,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",42,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",42,[[["self"]],["option",["btreemap"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",42,[[["self"]],["option",["btreemap"]]]],[11,"is_table","","Tests whether this value is a table.",42,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",42,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",42,[[["self"]],["str"]]],[11,"bytes","rocket::http::hyper::header","Get the most common byte range header (\"bytes=from-to\")",65,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",65,[[["vec"]],["range"]]],[11,"new","","Creates a new, empty headers map.",174,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",174,N],[11,"get_raw","","Access the raw value of a header.",174,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",174,N],[11,"append_raw","","Append a value to raw value of this header.",174,N],[11,"remove_raw","","Remove a header set by set_raw",174,N],[11,"get","","Get a reference to the header field's value, if it exists.",174,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",174,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",174,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",174,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",174,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",174,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",174,N],[11,"close","","A constructor to easily create a `Connection: close` header.",87,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",87,[[],["connection"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",88,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",88,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",88,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",88,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",88,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",88,[[],["contenttype"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",106,[[["t"],["quality"]],["qualityitem"]]],[11,"new","","Creates a new `Origin` header.",109,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"star","","A constructor to easily create `Accept: */*`.",121,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",121,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",121,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",121,[[],["accept"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",122,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",122,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",122,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",122,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",122,N],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",122,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",122,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",122,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",122,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Creates a new Protocol with the given name and version",123,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",126,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",126,[[["u64"]],["stricttransportsecurity"]]],[11,"new","rocket::http::hyper","Creates a new server with the provided handler.",176,[[["l"]],["server"]]],[11,"keep_alive","","Controls keep-alive for this server.",176,N],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",176,N],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",176,N],[11,"local_addr","","Get the address that the server is listening on.",176,[[["self"]],["result",["socketaddr","error"]]]],[11,"http","","Creates a new server that will handle `HttpStream`s.",176,[[["to"]],["result",["server","error"]]]],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",176,[[["a"],["s"]],["result",["server","error"]]]],[11,"handle","","Binds to a socket and starts handling connections.",176,[[["self"],["h"]],["result",["listening","error"]]]],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",176,[[["self"],["h"],["usize"]],["result",["listening","error"]]]],[11,"is","rocket::http::hyper::net","Is the underlying type in this trait object a `T`?",129,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",129,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",129,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",129,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"is","","Is the underlying type in this trait object a `T`?",129,[[["self"]],["bool"]]],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",129,[[["self"]],["option"]]],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",129,[[["self"]],["option"]]],[11,"downcast","","If the underlying type is `T`, extract it.",129,[[["box",["networkstream"]]],["result",["box","box"]]]],[11,"new","","Start listening to an address over HTTP.",180,[[["to"]],["result",["httplistener","error"]]]],[11,"new","","Start listening to an address over HTTPS.",182,[[["to"],["s"]],["result",["httpslistener","error"]]]],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",182,[[["httplistener"],["s"]],["httpslistener"]]],[11,"new","","Create a new connector using the provided SSL implementation.",183,[[["s"]],["httpsconnector",["httpconnector"]]]],[11,"with_connector","","Create a new connector using the provided SSL implementation.",183,[[["s"],["c"]],["httpsconnector"]]],[11,"safe","rocket::http::hyper","Whether a method is considered \"safe\", meaning the request is essentially read-only.",135,[[["self"]],["bool"]]],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",135,[[["self"]],["bool"]]],[11,"into_inner","rocket::http::hyper::h1","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",184,[[["self"]],["box",["networkstream"]]]],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",184,[[["self"]],["networkstream"]]],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",184,[[["self"]],["networkstream"]]],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",184,[[["box",["networkstream"]]],["http11message"]]],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",184,[[["self"]],["result",["error"]]]],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",185,[[["c"]],["http11protocol"]]],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",137,[[["self"]],["r"]]],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",137,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",137,[[["self"]],["r"]]],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",138,[[["self"]],["w"]]],[11,"get_ref","","Access the inner Writer.",138,[[["self"]],["w"]]],[11,"get_mut","","Access the inner Writer mutably.",138,[[["self"]],["w"]]],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",138,[[["self"]],["result",["enderror"]]]],[11,"as_str","rocket::http::hyper::mime","",140,[[["self"]],["str"]]],[11,"as_str","","",141,[[["self"]],["str"]]],[11,"get_param","","",142,[[["self"],["a"]],["option",["value"]]]],[11,"as_str","","",143,[[["self"]],["str"]]],[11,"as_str","","",144,[[["self"]],["str"]]],[11,"status","rocket::http::hyper","The status of this response.",145,[[["self"]],["statuscode"]]],[11,"headers","","The headers of this response.",145,[[["self"]],["headers"]]],[11,"construct","","Construct a Response from its constituent parts.",145,[[["httpversion"],["httpwriter",["write"]],["statuscode"],["headers"]],["response",["fresh"]]]],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",145,N],[11,"new","","Creates a new Response that can be used to write to a network stream.",145,[[["write"],["headers"]],["response",["fresh"]]]],[11,"send","","Writes the body and ends the response.",145,N],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",145,[[["self"]],["result",["response","error"]]]],[11,"status_mut","","Get a mutable reference to the status.",145,[[["self"]],["statuscode"]]],[11,"headers_mut","","Get a mutable reference to the Headers.",145,[[["self"]],["headers"]]],[11,"end","","Flushes all writing of a response to the client.",145,[[["self"]],["result",["error"]]]],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",146,[[["bufreader"],["socketaddr"]],["result",["request","error"]]]],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",146,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",146,[[["self"]],["option"]]],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",146,[[["self"]],["option"]]],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",146,N],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",148,[[["self"]],["option",["str"]]]],[11,"class","","Determine the class of a status code, based on its first digit.",148,[[["self"]],["statusclass"]]],[11,"is_informational","","Check if class is Informational.",148,[[["self"]],["bool"]]],[11,"is_success","","Check if class is Success.",148,[[["self"]],["bool"]]],[11,"is_redirection","","Check if class is Redirection.",148,[[["self"]],["bool"]]],[11,"is_client_error","","Check if class is ClientError.",148,[[["self"]],["bool"]]],[11,"is_server_error","","Check if class is ServerError.",148,[[["self"]],["bool"]]],[11,"is_strange_status","","Check if class is NoClass",148,[[["self"]],["bool"]]],[11,"parse","rocket::http::uri","Parses the string `string` into an `Absolute`. Parsing will never allocate. Returns an `Error` if `string` is not a valid absolute URI.",187,[[["str"]],["result",["absolute","error"]]]],[11,"scheme","","Returns the scheme part of the absolute URI.",187,[[["self"]],["str"]]],[11,"authority","","Returns the authority part of the absolute URI, if there is one.",187,[[["self"]],["option",["authority"]]]],[11,"origin","","Returns the origin part of the absolute URI, if there is one.",187,[[["self"]],["option",["origin"]]]],[11,"parse","","Parses the string `string` into an `Authority`. Parsing will never allocate. Returns an `Error` if `string` is not a valid authority URI.",188,[[["str"]],["result",["authority","error"]]]],[11,"user_info","","Returns the user info part of the authority URI, if there is one.",188,[[["self"]],["option",["str"]]]],[11,"host","","Returns the host part of the authority URI.",188,[[["self"]],["str"]]],[11,"port","","Returns the port part of the authority URI, if there is one.",188,[[["self"]],["option",["u16"]]]],[11,"into_path_buf","","Creates a `PathBuf` from a `Segments` iterator. The returned `PathBuf` is percent-decoded. If a segment is equal to \"..\", the previous segment (if any) is skipped.",151,[[["self"],["bool"]],["result",["pathbuf","segmenterror"]]]],[11,"write_raw","","Writes `string` to `self`.",189,[[["self"],["s"]],["result",["error"]]]],[11,"write_named_value","","Writes the named value `value` by prefixing `name` followed by `=` to the value. Any nested names are also prefixed as necessary.",189,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"write_value","","Writes the unnamed value `value`. Any nested names are prefixed as necessary.",189,[[["self"],["t"]],["result",["error"]]]],[11,"refresh","","Refreshes the formatter.",189,N],[11,"index","","Returns the byte index into the text where the error occurred if it is known.",190,[[["self"]],["option",["usize"]]]],[11,"parse","","Parses the string `string` into a `Uri`. Parsing will never allocate. Returns an `Error` if `string` is not a valid URI.",153,[[["str"]],["result",["uri","error"]]]],[11,"origin","","Returns the internal instance of `Origin` if `self` is a `Uri::Origin`. Otherwise, returns `None`.",153,[[["self"]],["option",["origin"]]]],[11,"authority","","Returns the internal instance of `Authority` if `self` is a `Uri::Authority`. Otherwise, returns `None`.",153,[[["self"]],["option",["authority"]]]],[11,"absolute","","Returns the internal instance of `Absolute` if `self` is a `Uri::Absolute`. Otherwise, returns `None`.",153,[[["self"]],["option",["absolute"]]]],[11,"percent_encode","","Returns a URL-encoded version of the string. Any characters outside of visible ASCII-range are encoded as well as ' ', '\"', '#', '<', '>', '`', '?', '{', '}', '%', and '/'.",153,[[["str"]],["cow",["str"]]]],[11,"percent_decode","","Returns a URL-decoded version of the string. If the percent encoded values are not valid UTF-8, an `Err` is returned.",153,N],[11,"percent_decode_lossy","","Returns a URL-decoded version of the path. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",153,N],[11,"parse","","Parses the string `string` into an `Origin`. Parsing will never allocate. Returns an `Error` if `string` is not a valid origin URI.",191,[[["str"]],["result",["origin","error"]]]],[11,"parse_owned","","Parses the string `string` into an `Origin`. Parsing will never allocate. This method should be used instead of `Origin::parse()` when the source URI is already a `String`. Returns an `Error` if `string` is not a valid origin URI.",191,[[["string"]],["result",["origin","error"]]]],[11,"is_normalized","","Returns `true` if `self` is normalized. Otherwise, returns `false`.",191,[[["self"]],["bool"]]],[11,"to_normalized","","Normalizes `self`.",191,[[["self"]],["origin"]]],[11,"path","","Returns the path part of this URI.",191,[[["self"]],["str"]]],[11,"query","","Returns the query part of this URI without the question mark, if there is any.",191,[[["self"]],["option",["str"]]]],[11,"clear_query","","Removes the query part of this URI, if there is any.",191,N],[11,"segments","","Returns an iterator over the segments of the path in this URI. Skips empty segments.",191,[[["self"]],["segments"]]],[11,"segment_count","","Returns the number of segments in the URI. Empty segments, which are invalid according to RFC#3986, are not counted.",191,[[["self"]],["usize"]]],[11,"new","rocket::http::uncased","Returns a reference to an `UncasedStr` from an `&str`.",192,[[["str"]],["uncasedstr"]]],[11,"as_str","","Returns `self` as an `&str`.",192,[[["self"]],["str"]]],[11,"into_uncased","","Converts a `Box<UncasedStr>` into an `Uncased` without copying or allocating.",192,[[["box",["uncasedstr"]]],["uncased"]]],[11,"new","","Creates a new `Uncased` string from `string` without allocating.",193,[[["s"]],["uncased"]]],[11,"into_string","","Converts `self` into an owned `String`, allocating if necessary.",193,[[["self"]],["string"]]],[11,"into_boxed_uncased","","Converts `self` into a `Box<UncasedStr>`.",193,[[["self"]],["box",["uncasedstr"]]]],[11,"supports_payload","rocket::http","Returns `true` if an HTTP request with the method represented by `self` always supports a payload.",158,[[["self"]],["bool"]]],[11,"as_str","","Returns the string representation of `self`.",158,[[["self"]],["str"]]],[11,"from_str","","Constructs an `&RawStr` from an `&str` at no cost.",194,[[["str"]],["rawstr"]]],[11,"percent_decode","","Returns a percent-decoded version of the string.",194,[[["self"]],["result",["cow","utf8error"]]]],[11,"percent_decode_lossy","","Returns a percent-decoded version of the string. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",194,[[["self"]],["cow",["str"]]]],[11,"url_decode","","Returns a URL-decoded version of the string. This is identical to percent decoding except that `+` characters are converted into spaces. This is the encoding used by form values.",194,[[["self"]],["result",["string","utf8error"]]]],[11,"url_decode_lossy","","Returns a URL-decoded version of the string.",194,[[["self"]],["string"]]],[11,"html_escape","","Returns an HTML escaped version of `self`. Allocates only when characters need to be escaped.",194,[[["self"]],["cow",["str"]]]],[11,"as_str","","Converts `self` into an `&str`.",194,[[["self"]],["str"]]],[11,"as_uncased_str","","Converts `self` into an `&UncasedStr`.",194,[[["self"]],["uncasedstr"]]],[11,"get","","Returns a reference to the `Cookie` inside this container with the name `name`. If no such cookie exists, returns `None`.",195,[[["self"],["str"]],["option",["cookie"]]]],[11,"get_private","","Returns a reference to the `Cookie` inside this collection with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",195,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to this collection.",195,N],[11,"add_private","","Adds `cookie` to the collection. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity. The cookie can later be retrieved using `get_private` and removed using `remove_private`.",195,N],[11,"remove","","Removes `cookie` from this collection and generates a \"removal\" cookies to send to the client on response. For correctness, `cookie` must contain the same `path` and `domain` as the cookie that was initially set. Failure to provide the initial `path` and `domain` will result in cookies that are not properly removed.",195,N],[11,"remove_private","","Removes the private `cookie` from the collection.",195,N],[11,"iter","","Returns an iterator over all of the cookies present in this collection.",195,N],[11,"new","","Creates an empty cookie jar.",196,[[],["cookiejar"]]],[11,"get","","Returns a reference to the `Cookie` inside this jar with the name `name`. If no such cookie exists, returns `None`.",196,[[["self"],["str"]],["option",["cookie"]]]],[11,"add_original","","Adds an \"original\" `cookie` to this jar. If an original cookie with the same name already exists, it is replaced with `cookie`. Cookies added with `add` take precedence and are not replaced by this method.",196,N],[11,"add","","Adds `cookie` to this jar. If a cookie with the same name already exists, it is replaced with `cookie`.",196,N],[11,"remove","","Removes `cookie` from this jar. If an original cookie with the same name as `cookie` is present in the jar, a removal cookie will be present in the `delta` computation. To properly generate the removal cookie, `cookie` must contain the same `path` and `domain` as the cookie that was initially set.",196,N],[11,"force_remove","","Removes `cookie` from this jar completely. This method differs from `remove` in that no delta cookie is created under any condition. Neither the `delta` nor `iter` methods will return a cookie that is removed using this method.",196,N],[11,"clear","","Removes all cookies from this cookie jar.",196,N],[11,"delta","","Returns an iterator over cookies that represent the changes to this jar over time. These cookies can be rendered directly as `Set-Cookie` header values to affect the changes made to this jar on the client.",196,[[["self"]],["delta"]]],[11,"iter","","Returns an iterator over all of the cookies present in this jar.",196,[[["self"]],["iter"]]],[11,"private","","Returns a `PrivateJar` with `self` as its parent jar using the key `key` to sign/encrypt and verify/decrypt cookies added/retrieved from the child jar.",196,[[["self"],["key"]],["privatejar"]]],[11,"signed","","Returns a `SignedJar` with `self` as its parent jar using the key `key` to sign/verify cookies added/retrieved from the child jar.",196,[[["self"],["key"]],["signedjar"]]],[11,"new","","Construct an empty vector",197,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",197,[[["usize"]],["smallvec"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",197,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",197,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",197,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",197,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",197,N],[11,"inline_size","","The maximum number of elements this vector can hold inline",197,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",197,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",197,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",197,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",197,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",197,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",197,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",197,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",197,N],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",197,N],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",197,N],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",197,N],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",197,N],[11,"as_slice","","Extracts a slice containing the entire vector.",197,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",197,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",197,N],[11,"clear","","Remove all elements from the vector.",197,N],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",197,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",197,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",197,N],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",197,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",197,[[["self"]],["result",["smallvec"]]]],[11,"retain","","Retains only the elements specified by the predicate.",197,N],[11,"dedup","","Removes consecutive duplicate elements.",197,N],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",197,N],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",197,N],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",197,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",197,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",197,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",197,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",197,N],[11,"new","","Returns an empty header collection.",198,[[],["headermap"]]],[11,"contains","","Returns true if `self` contains a header with the name `name`.",198,[[["self"],["str"]],["bool"]]],[11,"len","","Returns the number of values stored in the map.",198,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are no headers stored in the map. Otherwise returns `false`.",198,[[["self"]],["bool"]]],[11,"get","","Returns an iterator over all of the values stored in `self` for the header with name `name`. The headers are returned in FIFO order.",198,N],[11,"get_one","","Returns the first value stored for the header with name `name` if there is one.",198,[[["self"],["str"]],["option",["str"]]]],[11,"replace","","Replace any header that matches the name of `header.name` with `header`. If there is no such header in `self`, add `header`. If the matching header had multiple values, all of the values are removed, and only the value in `header` will remain.",198,[[["self"],["h"]],["bool"]]],[11,"replace_raw","","A convenience method to replace a header using a raw name and value. Aliases `replace(Header::new(name, value))`. Should be used rarely.",198,[[["self"],["n"],["v"]],["bool"]]],[11,"replace_all","","Replaces all of the values for a header with name `name` with `values`. This a low-level method and should rarely be used.",198,N],[11,"add","","Adds `header` into the map. If a header with `header.name` was previously added, that header will have one more value.",198,N],[11,"add_raw","","A convenience method to add a header using a raw name and value. Aliases `add(Header::new(name, value))`. Should be used rarely.",198,N],[11,"add_all","","Adds all of the values to a header with name `name`. This a low-level method and should rarely be used. `values` will be empty when this method returns.",198,N],[11,"remove","","Remove all of the values for header with name `name`.",198,N],[11,"remove_all","","Removes all of the headers stored in this map and returns a vector containing them. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",198,[[["self"]],["vec",["header"]]]],[11,"iter","","Returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",198,N],[11,"into_iter","","Consumes `self` and returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",198,N],[11,"weight","","Retrieve the weight of the media type, if there is any.",159,[[["self"]],["option",["f32"]]]],[11,"weight_or","","Retrieve the weight of the media type or a given default value.",159,[[["self"],["f32"]],["f32"]]],[11,"media_type","","Borrow the internal `MediaType`.",159,[[["self"]],["mediatype"]]],[11,"is_strict","","Returns `true` if `self` is `SameSite::Strict` and `false` otherwise.",160,[[["self"]],["bool"]]],[11,"is_lax","","Returns `true` if `self` is `SameSite::Lax` and `false` otherwise.",160,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if `self` is `SameSite::None` and `false` otherwise.",160,[[["self"]],["bool"]]],[11,"from_master","","Derives new signing/encryption keys from a master key.",199,N],[11,"generate","","Generates signing/encryption keys from a secure, random source. Keys are generated nondeterministically.",199,[[],["key"]]],[11,"try_generate","","Attempts to generate signing/encryption keys from a secure, random source. Keys are generated nondeterministically. If randomness cannot be retrieved from the underlying operating system, returns `None`.",199,[[],["option",["key"]]]],[11,"signing","","Returns the raw bytes of a key suitable for signing cookies.",199,N],[11,"encryption","","Returns the raw bytes of a key suitable for encrypting cookies.",199,N],[11,"new","","Constructs a new header. This method should be used rarely and only for non-standard headers. Instead, prefer to use the `Into<Header>` implementations of many types, including [`ContentType`] and all of the headers in `http::hyper::header`.",163,[[["n"],["v"]],["header"]]],[11,"name","","Returns the name of this header with casing preserved. To do a case-insensitive equality check, use `.name` directly.",163,[[["self"]],["str"]]],[11,"value","","Returns the value of this header.",163,[[["self"]],["str"]]],[11,"new","","Creates a new `Cookie` with the given name and value.",200,[[["n"],["v"]],["cookie"]]],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",200,[[["n"]],["cookie"]]],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",200,[[["n"],["v"]],["cookiebuilder"]]],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",200,[[["s"]],["result",["cookie","parseerror"]]]],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",200,[[["s"]],["result",["cookie","parseerror"]]]],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",200,[[["self"]],["encodedcookie"]]],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",200,[[["self"]],["cookie"]]],[11,"name","","Returns the name of `self`.",200,[[["self"]],["str"]]],[11,"value","","Returns the value of `self`.",200,[[["self"]],["str"]]],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",200,N],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `HttpOnly`, `Some(false)` when `http_only` was manually set to `false`, and `None` otherwise.",200,[[["self"]],["option",["bool"]]]],[11,"secure","","Returns whether this cookie was marked `Secure` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `Secure`, `Some(false)` when `secure` was manually set to `false`, and `None` otherwise.",200,[[["self"]],["option",["bool"]]]],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",200,[[["self"]],["option",["samesite"]]]],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",200,[[["self"]],["option",["duration"]]]],[11,"path","","Returns the `Path` of the cookie if one was specified.",200,[[["self"]],["option",["str"]]]],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",200,[[["self"]],["option",["str"]]]],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",200,[[["self"]],["option",["tm"]]]],[11,"set_name","","Sets the name of `self` to `name`.",200,N],[11,"set_value","","Sets the value of `self` to `value`.",200,N],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",200,N],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",200,N],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",200,N],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",200,N],[11,"set_path","","Sets the `path` of `self` to `path`.",200,N],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",200,N],[11,"set_expires","","Sets the expires field of `self` to `time`.",200,N],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",200,N],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",200,[[["self"]],["option",["str"]]]],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",200,[[["self"]],["option",["str"]]]],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",200,[[["self"]],["option",["str"]]]],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",200,[[["self"]],["option",["str"]]]],[11,"new","","Creates a new `ContentType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",164,[[["t"],["s"]],["contenttype"]]],[11,"parse_flexible","","Flexibly parses `name` into a `ContentType` . The parse is flexible because, in addition to stricly correct content types, it recognizes the following shorthands:  * \"any\" - `ContentType::Any`  * \"binary\" - `ContentType::Binary`  * \"html\" - `ContentType::HTML`  * \"plain\" - `ContentType::Plain`  * \"json\" - `ContentType::JSON`  * \"msgpack\" - `ContentType::MsgPack`  * \"form\" - `ContentType::Form`  * \"js\" - `ContentType::JavaScript`  * \"css\" - `ContentType::CSS`  * \"multipart\" - `ContentType::FormData`  * \"xml\" - `ContentType::XML` ",164,[[["str"]],["option",["contenttype"]]]],[11,"from_extension","","Returns the Content-Type associated with the extension `ext` . Not all extensions are recognized. If an extensions is not recognized, `None` is returned. The currently recognized extensions are:  * txt - `ContentType::Plain`  * html - `ContentType::HTML`  * htm - `ContentType::HTML`  * xml - `ContentType::XML`  * csv - `ContentType::CSV`  * js - `ContentType::JavaScript`  * css - `ContentType::CSS`  * json - `ContentType::JSON`  * png - `ContentType::PNG`  * gif - `ContentType::GIF`  * bmp - `ContentType::BMP`  * jpeg - `ContentType::JPEG`  * jpg - `ContentType::JPEG`  * webp - `ContentType::WEBP`  * svg - `ContentType::SVG`  * ico - `ContentType::Icon`  * flac - `ContentType::FLAC`  * wav - `ContentType::WAV`  * webm - `ContentType::WEBM`  * weba - `ContentType::WEBA`  * ogg - `ContentType::OGG`  * ogv - `ContentType::OGG`  * pdf - `ContentType::PDF`  * ttf - `ContentType::TTF`  * otf - `ContentType::OTF`  * woff - `ContentType::WOFF`  * woff2 - `ContentType::WOFF2`  * mp4 - `ContentType::MP4`  * mpeg4 - `ContentType::MP4`  * wasm - `ContentType::WASM`  * aac - `ContentType::AAC`  * ics - `ContentType::Calendar`  * bin - `ContentType::Binary`  * mpg - `ContentType::MPEG`  * mpeg - `ContentType::MPEG`  * tar - `ContentType::TAR`  * gz - `ContentType::GZIP`  * tif - `ContentType::TIFF`  * tiff - `ContentType::TIFF`  * mov - `ContentType::MOV` ",164,[[["str"]],["option",["contenttype"]]]],[11,"with_params","","Creates a new `ContentType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",164,[[["t"],["s"],["p"]],["contenttype"]]],[11,"media_type","","Borrows the inner `MediaType` of `self`.",164,[[["self"]],["mediatype"]]],[18,"Any","","Content Type for any media type: `*/*`. ",164,N],[18,"Binary","","Content Type for binary data: `application/octet-stream`. ",164,N],[18,"HTML","","Content Type for HTML: `text/html; charset=utf-8`. ",164,N],[18,"Plain","","Content Type for plain text: `text/plain; charset=utf-8`. ",164,N],[18,"JSON","","Content Type for JSON: `application/json`. ",164,N],[18,"MsgPack","","Content Type for MsgPack: `application/msgpack`. ",164,N],[18,"Form","","Content Type for forms: `application/x-www-form-urlencoded`. ",164,N],[18,"JavaScript","","Content Type for JavaScript: `application/javascript`. ",164,N],[18,"CSS","","Content Type for CSS: `text/css; charset=utf-8`. ",164,N],[18,"FormData","","Content Type for multipart form data: `multipart/form-data`. ",164,N],[18,"XML","","Content Type for XML: `text/xml; charset=utf-8`. ",164,N],[18,"CSV","","Content Type for CSV: `text/csv; charset=utf-8`. ",164,N],[18,"PNG","","Content Type for PNG: `image/png`. ",164,N],[18,"GIF","","Content Type for GIF: `image/gif`. ",164,N],[18,"BMP","","Content Type for BMP: `image/bmp`. ",164,N],[18,"JPEG","","Content Type for JPEG: `image/jpeg`. ",164,N],[18,"WEBP","","Content Type for WEBP: `image/webp`. ",164,N],[18,"SVG","","Content Type for SVG: `image/svg+xml`. ",164,N],[18,"Icon","","Content Type for Icon: `image/x-icon`. ",164,N],[18,"WEBM","","Content Type for WEBM: `video/webm`. ",164,N],[18,"WEBA","","Content Type for WEBM Audio: `audio/webm`. ",164,N],[18,"OGG","","Content Type for OGG Video: `video/ogg`. ",164,N],[18,"FLAC","","Content Type for FLAC: `audio/flac`. ",164,N],[18,"WAV","","Content Type for WAV: `audio/wav`. ",164,N],[18,"PDF","","Content Type for PDF: `application/pdf`. ",164,N],[18,"TTF","","Content Type for TTF: `application/font-sfnt`. ",164,N],[18,"OTF","","Content Type for OTF: `application/font-sfnt`. ",164,N],[18,"WOFF","","Content Type for WOFF: `application/font-woff`. ",164,N],[18,"WOFF2","","Content Type for WOFF2: `font/woff2`. ",164,N],[18,"JsonApi","","Content Type for JSON API: `application/vnd.api+json`. ",164,N],[18,"WASM","","Content Type for WASM: `application/wasm`. ",164,N],[18,"TIFF","","Content Type for TIFF: `image/tiff`. ",164,N],[18,"AAC","","Content Type for AAC Audio: `audio/aac`. ",164,N],[18,"Calendar","","Content Type for iCalendar: `text/calendar`. ",164,N],[18,"MPEG","","Content Type for MPEG Video: `video/mpeg`. ",164,N],[18,"TAR","","Content Type for tape archive: `application/x-tar`. ",164,N],[18,"GZIP","","Content Type for gzipped binary: `application/gzip`. ",164,N],[18,"MOV","","Content Type for quicktime video: `video/quicktime`. ",164,N],[18,"MP4","","Content Type for MPEG4 Video: `video/mp4`. ",164,N],[11,"is_informational","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"is_success","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"is_redirection","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"is_client_error","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"is_server_error","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"is_unknown","","Returns `true` if `self` is a `StatusClass` of",165,[[["self"]],["bool"]]],[11,"new","","Constructs a new `Accept` header from one or more media types.",201,[[["t"]],["accept"]]],[11,"preferred","","Retrieve the client's preferred media type. This method follows [RFC 7231 5.3.2]. If the list of media types is empty, this method returns a media type of any with no quality value: (`*/*`).",201,[[["self"]],["qmediatype"]]],[11,"first","","Retrieve the first media type in `self`, if any.",201,[[["self"]],["option",["qmediatype"]]]],[11,"iter","","Returns an iterator over all of the (quality) media types in `self`. Media types are returned in the order in which they appear in the header.",201,N],[11,"media_types","","Returns an iterator over all of the (bare) media types in `self`. Media types are returned in the order in which they appear in the header.",201,N],[18,"Any","","An `Accept` header with the single media type for  any media type :  * / * ",201,N],[18,"Binary","","An `Accept` header with the single media type for  binary data :  application / octet-stream ",201,N],[18,"HTML","","An `Accept` header with the single media type for  HTML :  text / html ",201,N],[18,"Plain","","An `Accept` header with the single media type for  plain text :  text / plain ",201,N],[18,"JSON","","An `Accept` header with the single media type for  JSON :  application / json ",201,N],[18,"MsgPack","","An `Accept` header with the single media type for  MsgPack :  application / msgpack ",201,N],[18,"Form","","An `Accept` header with the single media type for  forms :  application / x-www-form-urlencoded ",201,N],[18,"JavaScript","","An `Accept` header with the single media type for  JavaScript :  application / javascript ",201,N],[18,"CSS","","An `Accept` header with the single media type for  CSS :  text / css ",201,N],[18,"FormData","","An `Accept` header with the single media type for  multipart form data :  multipart / form-data ",201,N],[18,"XML","","An `Accept` header with the single media type for  XML :  text / xml ",201,N],[18,"CSV","","An `Accept` header with the single media type for  CSV :  text / csv ",201,N],[18,"PNG","","An `Accept` header with the single media type for  PNG :  image / png ",201,N],[18,"GIF","","An `Accept` header with the single media type for  GIF :  image / gif ",201,N],[18,"BMP","","An `Accept` header with the single media type for  BMP :  image / bmp ",201,N],[18,"JPEG","","An `Accept` header with the single media type for  JPEG :  image / jpeg ",201,N],[18,"WEBP","","An `Accept` header with the single media type for  WEBP :  image / webp ",201,N],[18,"SVG","","An `Accept` header with the single media type for  SVG :  image / svg+xml ",201,N],[18,"Icon","","An `Accept` header with the single media type for  Icon :  image / x-icon ",201,N],[18,"WEBM","","An `Accept` header with the single media type for  WEBM :  video / webm ",201,N],[18,"WEBA","","An `Accept` header with the single media type for  WEBM Audio :  audio / webm ",201,N],[18,"OGG","","An `Accept` header with the single media type for  OGG Video :  video / ogg ",201,N],[18,"FLAC","","An `Accept` header with the single media type for  FLAC :  audio / flac ",201,N],[18,"WAV","","An `Accept` header with the single media type for  WAV :  audio / wav ",201,N],[18,"PDF","","An `Accept` header with the single media type for  PDF :  application / pdf ",201,N],[18,"TTF","","An `Accept` header with the single media type for  TTF :  application / font-sfnt ",201,N],[18,"OTF","","An `Accept` header with the single media type for  OTF :  application / font-sfnt ",201,N],[18,"WOFF","","An `Accept` header with the single media type for  WOFF :  application / font-woff ",201,N],[18,"WOFF2","","An `Accept` header with the single media type for  WOFF2 :  font / woff2 ",201,N],[18,"JsonApi","","An `Accept` header with the single media type for  JSON API :  application / vnd.api+json ",201,N],[18,"WASM","","An `Accept` header with the single media type for  WASM :  application / wasm ",201,N],[18,"TIFF","","An `Accept` header with the single media type for  TIFF :  image / tiff ",201,N],[18,"AAC","","An `Accept` header with the single media type for  AAC Audio :  audio / aac ",201,N],[18,"Calendar","","An `Accept` header with the single media type for  iCalendar :  text / calendar ",201,N],[18,"MPEG","","An `Accept` header with the single media type for  MPEG Video :  video / mpeg ",201,N],[18,"TAR","","An `Accept` header with the single media type for  tape archive :  application / x-tar ",201,N],[18,"GZIP","","An `Accept` header with the single media type for  gzipped binary :  application / gzip ",201,N],[18,"MOV","","An `Accept` header with the single media type for  quicktime video :  video / quicktime ",201,N],[18,"MP4","","An `Accept` header with the single media type for  MPEG4 Video :  video / mp4 ",201,N],[11,"new","","Creates a new `MediaType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",202,[[["t"],["s"]],["mediatype"]]],[11,"with_params","","Creates a new `MediaType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",202,[[["t"],["s"],["p"]],["mediatype"]]],[11,"parse_flexible","","Flexibly parses `name` into a `MediaType` . The parse is flexible because, in addition to stricly correct media types, it recognizes the following shorthands:  * \"any\" - `MediaType::Any`  * \"binary\" - `MediaType::Binary`  * \"html\" - `MediaType::HTML`  * \"plain\" - `MediaType::Plain`  * \"json\" - `MediaType::JSON`  * \"msgpack\" - `MediaType::MsgPack`  * \"form\" - `MediaType::Form`  * \"js\" - `MediaType::JavaScript`  * \"css\" - `MediaType::CSS`  * \"multipart\" - `MediaType::FormData`  * \"xml\" - `MediaType::XML` ",202,[[["str"]],["option",["mediatype"]]]],[11,"from_extension","","Returns the Media-Type associated with the extension `ext` . Not all extensions are recognized. If an extensions is not recognized, `None` is returned. The currently recognized extensions are:  * txt - `MediaType::Plain`  * html - `MediaType::HTML`  * htm - `MediaType::HTML`  * xml - `MediaType::XML`  * csv - `MediaType::CSV`  * js - `MediaType::JavaScript`  * css - `MediaType::CSS`  * json - `MediaType::JSON`  * png - `MediaType::PNG`  * gif - `MediaType::GIF`  * bmp - `MediaType::BMP`  * jpeg - `MediaType::JPEG`  * jpg - `MediaType::JPEG`  * webp - `MediaType::WEBP`  * svg - `MediaType::SVG`  * ico - `MediaType::Icon`  * flac - `MediaType::FLAC`  * wav - `MediaType::WAV`  * webm - `MediaType::WEBM`  * weba - `MediaType::WEBA`  * ogg - `MediaType::OGG`  * ogv - `MediaType::OGG`  * pdf - `MediaType::PDF`  * ttf - `MediaType::TTF`  * otf - `MediaType::OTF`  * woff - `MediaType::WOFF`  * woff2 - `MediaType::WOFF2`  * mp4 - `MediaType::MP4`  * mpeg4 - `MediaType::MP4`  * wasm - `MediaType::WASM`  * aac - `MediaType::AAC`  * ics - `MediaType::Calendar`  * bin - `MediaType::Binary`  * mpg - `MediaType::MPEG`  * mpeg - `MediaType::MPEG`  * tar - `MediaType::TAR`  * gz - `MediaType::GZIP`  * tif - `MediaType::TIFF`  * tiff - `MediaType::TIFF`  * mov - `MediaType::MOV` ",202,[[["str"]],["option",["mediatype"]]]],[11,"top","","Returns the top-level type for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",202,[[["self"]],["uncasedstr"]]],[11,"sub","","Returns the subtype for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",202,[[["self"]],["uncasedstr"]]],[11,"specificity","","Returns a `u8` representing how specific the top-level type and subtype of this media type are.",202,[[["self"]],["u8"]]],[11,"exact_eq","","Compares `self` with `other` and returns `true` if `self` and `other` are exactly equal to each other, including with respect to their parameters.",202,[[["self"],["mediatype"]],["bool"]]],[11,"params","","Returns an iterator over the (key, value) pairs of the media type's parameter list. The iterator will be empty if the media type has no parameters.",202,N],[18,"Any","","Media Type for any media type: `*/*`. ",202,N],[18,"Binary","","Media Type for binary data: `application/octet-stream`. ",202,N],[18,"HTML","","Media Type for HTML: `text/html; charset=utf-8`. ",202,N],[18,"Plain","","Media Type for plain text: `text/plain; charset=utf-8`. ",202,N],[18,"JSON","","Media Type for JSON: `application/json`. ",202,N],[18,"MsgPack","","Media Type for MsgPack: `application/msgpack`. ",202,N],[18,"Form","","Media Type for forms: `application/x-www-form-urlencoded`. ",202,N],[18,"JavaScript","","Media Type for JavaScript: `application/javascript`. ",202,N],[18,"CSS","","Media Type for CSS: `text/css; charset=utf-8`. ",202,N],[18,"FormData","","Media Type for multipart form data: `multipart/form-data`. ",202,N],[18,"XML","","Media Type for XML: `text/xml; charset=utf-8`. ",202,N],[18,"CSV","","Media Type for CSV: `text/csv; charset=utf-8`. ",202,N],[18,"PNG","","Media Type for PNG: `image/png`. ",202,N],[18,"GIF","","Media Type for GIF: `image/gif`. ",202,N],[18,"BMP","","Media Type for BMP: `image/bmp`. ",202,N],[18,"JPEG","","Media Type for JPEG: `image/jpeg`. ",202,N],[18,"WEBP","","Media Type for WEBP: `image/webp`. ",202,N],[18,"SVG","","Media Type for SVG: `image/svg+xml`. ",202,N],[18,"Icon","","Media Type for Icon: `image/x-icon`. ",202,N],[18,"WEBM","","Media Type for WEBM: `video/webm`. ",202,N],[18,"WEBA","","Media Type for WEBM Audio: `audio/webm`. ",202,N],[18,"OGG","","Media Type for OGG Video: `video/ogg`. ",202,N],[18,"FLAC","","Media Type for FLAC: `audio/flac`. ",202,N],[18,"WAV","","Media Type for WAV: `audio/wav`. ",202,N],[18,"PDF","","Media Type for PDF: `application/pdf`. ",202,N],[18,"TTF","","Media Type for TTF: `application/font-sfnt`. ",202,N],[18,"OTF","","Media Type for OTF: `application/font-sfnt`. ",202,N],[18,"WOFF","","Media Type for WOFF: `application/font-woff`. ",202,N],[18,"WOFF2","","Media Type for WOFF2: `font/woff2`. ",202,N],[18,"JsonApi","","Media Type for JSON API: `application/vnd.api+json`. ",202,N],[18,"WASM","","Media Type for WASM: `application/wasm`. ",202,N],[18,"TIFF","","Media Type for TIFF: `image/tiff`. ",202,N],[18,"AAC","","Media Type for AAC Audio: `audio/aac`. ",202,N],[18,"Calendar","","Media Type for iCalendar: `text/calendar`. ",202,N],[18,"MPEG","","Media Type for MPEG Video: `video/mpeg`. ",202,N],[18,"TAR","","Media Type for tape archive: `application/x-tar`. ",202,N],[18,"GZIP","","Media Type for gzipped binary: `application/gzip`. ",202,N],[18,"MOV","","Media Type for quicktime video: `video/quicktime`. ",202,N],[18,"MP4","","Media Type for MPEG4 Video: `video/mp4`. ",202,N],[11,"is_known","","Returns `true` if this MediaType is known to Rocket. In other words, returns `true` if there is an associated constant for `self`.",202,[[["self"]],["bool"]]],[11,"is_any","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Any`. ",202,[[["self"]],["bool"]]],[11,"is_binary","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Binary`. ",202,[[["self"]],["bool"]]],[11,"is_html","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::HTML`. ",202,[[["self"]],["bool"]]],[11,"is_plain","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Plain`. ",202,[[["self"]],["bool"]]],[11,"is_json","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JSON`. ",202,[[["self"]],["bool"]]],[11,"is_msgpack","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MsgPack`. ",202,[[["self"]],["bool"]]],[11,"is_form","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Form`. ",202,[[["self"]],["bool"]]],[11,"is_javascript","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JavaScript`. ",202,[[["self"]],["bool"]]],[11,"is_css","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::CSS`. ",202,[[["self"]],["bool"]]],[11,"is_form_data","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::FormData`. ",202,[[["self"]],["bool"]]],[11,"is_xml","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::XML`. ",202,[[["self"]],["bool"]]],[11,"is_csv","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::CSV`. ",202,[[["self"]],["bool"]]],[11,"is_png","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::PNG`. ",202,[[["self"]],["bool"]]],[11,"is_gif","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::GIF`. ",202,[[["self"]],["bool"]]],[11,"is_bmp","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::BMP`. ",202,[[["self"]],["bool"]]],[11,"is_jpeg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JPEG`. ",202,[[["self"]],["bool"]]],[11,"is_webp","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBP`. ",202,[[["self"]],["bool"]]],[11,"is_svg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::SVG`. ",202,[[["self"]],["bool"]]],[11,"is_icon","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Icon`. ",202,[[["self"]],["bool"]]],[11,"is_webm","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBM`. ",202,[[["self"]],["bool"]]],[11,"is_weba","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBA`. ",202,[[["self"]],["bool"]]],[11,"is_ogg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::OGG`. ",202,[[["self"]],["bool"]]],[11,"is_flac","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::FLAC`. ",202,[[["self"]],["bool"]]],[11,"is_wav","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WAV`. ",202,[[["self"]],["bool"]]],[11,"is_pdf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::PDF`. ",202,[[["self"]],["bool"]]],[11,"is_ttf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TTF`. ",202,[[["self"]],["bool"]]],[11,"is_otf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::OTF`. ",202,[[["self"]],["bool"]]],[11,"is_woff","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WOFF`. ",202,[[["self"]],["bool"]]],[11,"is_woff2","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WOFF2`. ",202,[[["self"]],["bool"]]],[11,"is_json_api","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JsonApi`. ",202,[[["self"]],["bool"]]],[11,"is_wasm","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WASM`. ",202,[[["self"]],["bool"]]],[11,"is_tiff","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TIFF`. ",202,[[["self"]],["bool"]]],[11,"is_aac","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::AAC`. ",202,[[["self"]],["bool"]]],[11,"is_ical","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Calendar`. ",202,[[["self"]],["bool"]]],[11,"is_mpeg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MPEG`. ",202,[[["self"]],["bool"]]],[11,"is_tar","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TAR`. ",202,[[["self"]],["bool"]]],[11,"is_gzip","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::GZIP`. ",202,[[["self"]],["bool"]]],[11,"is_mov","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MOV`. ",202,[[["self"]],["bool"]]],[11,"is_mp4","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MP4`. ",202,[[["self"]],["bool"]]],[11,"indices","","Panics if `self` is not an `Indexed`.",166,N],[11,"coerce","","Panics if `self` is not an `Indexed`.",166,[[["self"]],["indexed"]]],[11,"coerce_lifetime","","Panics if `self` is not an `Indexed`.",166,[[["self"]],["indexed"]]],[11,"checked_from","","",166,[[["t"],["t"]],["option",["indexed"]]]],[11,"unchecked_from","","",166,[[["t"],["t"]],["indexed"]]],[11,"is_indexed","","Whether this string is derived from indexes or not.",166,[[["self"]],["bool"]]],[11,"is_empty","","Whether this string is derived from indexes or not.",166,[[["self"]],["bool"]]],[11,"from_cow_source","","Retrieves the string `self` corresponds to. If `self` is derived from indexes, the corresponding subslice of `source` is returned. Otherwise, the concrete string is returned.",166,[[["self"],["option"]],["t"]]],[11,"from_source","","Retrieves the string `self` corresponds to. If `self` is derived from indexes, the corresponding subslice of `string` is returned. Otherwise, the concrete string is returned.",166,[[["self"],["option"]],["t"]]],[11,"new","","Creates a new `Status` with `code` and `reason`. This should be used only to construct non-standard HTTP statuses. Use an associated constant for standard statuses.",168,[[["u16"],["str"]],["status"]]],[11,"class","","Returns the class of a given status.",168,[[["self"]],["statusclass"]]],[18,"Continue","","[`Status`] with code  100  and reason  Continue .",168,N],[18,"SwitchingProtocols","","[`Status`] with code  101  and reason  Switching Protocols .",168,N],[18,"Processing","","[`Status`] with code  102  and reason  Processing .",168,N],[18,"Ok","","[`Status`] with code  200  and reason  OK .",168,N],[18,"Created","","[`Status`] with code  201  and reason  Created .",168,N],[18,"Accepted","","[`Status`] with code  202  and reason  Accepted .",168,N],[18,"NonAuthoritativeInformation","","[`Status`] with code  203  and reason  Non-Authoritative Information .",168,N],[18,"NoContent","","[`Status`] with code  204  and reason  No Content .",168,N],[18,"ResetContent","","[`Status`] with code  205  and reason  Reset Content .",168,N],[18,"PartialContent","","[`Status`] with code  206  and reason  Partial Content .",168,N],[18,"MultiStatus","","[`Status`] with code  207  and reason  Multi-Status .",168,N],[18,"AlreadyReported","","[`Status`] with code  208  and reason  Already Reported .",168,N],[18,"ImUsed","","[`Status`] with code  226  and reason  IM Used .",168,N],[18,"MultipleChoices","","[`Status`] with code  300  and reason  Multiple Choices .",168,N],[18,"MovedPermanently","","[`Status`] with code  301  and reason  Moved Permanently .",168,N],[18,"Found","","[`Status`] with code  302  and reason  Found .",168,N],[18,"SeeOther","","[`Status`] with code  303  and reason  See Other .",168,N],[18,"NotModified","","[`Status`] with code  304  and reason  Not Modified .",168,N],[18,"UseProxy","","[`Status`] with code  305  and reason  Use Proxy .",168,N],[18,"TemporaryRedirect","","[`Status`] with code  307  and reason  Temporary Redirect .",168,N],[18,"PermanentRedirect","","[`Status`] with code  308  and reason  Permanent Redirect .",168,N],[18,"BadRequest","","[`Status`] with code  400  and reason  Bad Request .",168,N],[18,"Unauthorized","","[`Status`] with code  401  and reason  Unauthorized .",168,N],[18,"PaymentRequired","","[`Status`] with code  402  and reason  Payment Required .",168,N],[18,"Forbidden","","[`Status`] with code  403  and reason  Forbidden .",168,N],[18,"NotFound","","[`Status`] with code  404  and reason  Not Found .",168,N],[18,"MethodNotAllowed","","[`Status`] with code  405  and reason  Method Not Allowed .",168,N],[18,"NotAcceptable","","[`Status`] with code  406  and reason  Not Acceptable .",168,N],[18,"ProxyAuthenticationRequired","","[`Status`] with code  407  and reason  Proxy Authentication Required .",168,N],[18,"RequestTimeout","","[`Status`] with code  408  and reason  Request Timeout .",168,N],[18,"Conflict","","[`Status`] with code  409  and reason  Conflict .",168,N],[18,"Gone","","[`Status`] with code  410  and reason  Gone .",168,N],[18,"LengthRequired","","[`Status`] with code  411  and reason  Length Required .",168,N],[18,"PreconditionFailed","","[`Status`] with code  412  and reason  Precondition Failed .",168,N],[18,"PayloadTooLarge","","[`Status`] with code  413  and reason  Payload Too Large .",168,N],[18,"UriTooLong","","[`Status`] with code  414  and reason  URI Too Long .",168,N],[18,"UnsupportedMediaType","","[`Status`] with code  415  and reason  Unsupported Media Type .",168,N],[18,"RangeNotSatisfiable","","[`Status`] with code  416  and reason  Range Not Satisfiable .",168,N],[18,"ExpectationFailed","","[`Status`] with code  417  and reason  Expectation Failed .",168,N],[18,"ImATeapot","","[`Status`] with code  418  and reason  I'm a teapot .",168,N],[18,"MisdirectedRequest","","[`Status`] with code  421  and reason  Misdirected Request .",168,N],[18,"UnprocessableEntity","","[`Status`] with code  422  and reason  Unprocessable Entity .",168,N],[18,"Locked","","[`Status`] with code  423  and reason  Locked .",168,N],[18,"FailedDependency","","[`Status`] with code  424  and reason  Failed Dependency .",168,N],[18,"UpgradeRequired","","[`Status`] with code  426  and reason  Upgrade Required .",168,N],[18,"PreconditionRequired","","[`Status`] with code  428  and reason  Precondition Required .",168,N],[18,"TooManyRequests","","[`Status`] with code  429  and reason  Too Many Requests .",168,N],[18,"RequestHeaderFieldsTooLarge","","[`Status`] with code  431  and reason  Request Header Fields Too Large .",168,N],[18,"UnavailableForLegalReasons","","[`Status`] with code  451  and reason  Unavailable For Legal Reasons .",168,N],[18,"InternalServerError","","[`Status`] with code  500  and reason  Internal Server Error .",168,N],[18,"NotImplemented","","[`Status`] with code  501  and reason  Not Implemented .",168,N],[18,"BadGateway","","[`Status`] with code  502  and reason  Bad Gateway .",168,N],[18,"ServiceUnavailable","","[`Status`] with code  503  and reason  Service Unavailable .",168,N],[18,"GatewayTimeout","","[`Status`] with code  504  and reason  Gateway Timeout .",168,N],[18,"HttpVersionNotSupported","","[`Status`] with code  505  and reason  HTTP Version Not Supported .",168,N],[18,"VariantAlsoNegotiates","","[`Status`] with code  506  and reason  Variant Also Negotiates .",168,N],[18,"InsufficientStorage","","[`Status`] with code  507  and reason  Insufficient Storage .",168,N],[18,"LoopDetected","","[`Status`] with code  508  and reason  Loop Detected .",168,N],[18,"NotExtended","","[`Status`] with code  510  and reason  Not Extended .",168,N],[18,"NetworkAuthenticationRequired","","[`Status`] with code  511  and reason  Network Authentication Required .",168,N],[11,"from_code","","Returns a Status given a standard status code `code`. If `code` is not a known status code, `None` is returned.",168,[[["u16"]],["option",["status"]]]]],"paths":[[3,"Config"],[3,"Route"],[3,"Catcher"],[4,"Outcome"],[3,"LocalRequest"],[3,"Client"],[3,"FormItem"],[4,"FormParseError"],[4,"FormDataError"],[3,"Request"],[4,"FormItems"],[3,"LenientForm"],[3,"Form"],[3,"State"],[8,"FromRequest"],[8,"FromParam"],[8,"FromSegments"],[8,"FromForm"],[8,"FromFormValue"],[8,"FromQuery"],[3,"Content"],[4,"Body"],[3,"Redirect"],[3,"NamedFile"],[3,"Stream"],[3,"ResponseBuilder"],[3,"Response"],[3,"Flash"],[3,"Json"],[3,"Xml"],[3,"MsgPack"],[3,"Html"],[3,"Plain"],[3,"Css"],[3,"JavaScript"],[3,"Created"],[3,"Accepted"],[3,"BadRequest"],[3,"NotFound"],[3,"Custom"],[8,"Responder"],[8,"IntoOutcome"],[4,"Value"],[3,"ConfigBuilder"],[4,"ConfigError"],[4,"Environment"],[4,"LoggingLevel"],[3,"Limits"],[4,"Transform"],[3,"Data"],[8,"FromData"],[8,"FromDataSimple"],[8,"Handler"],[8,"Cloneable"],[6,"Outcome"],[3,"Info"],[3,"AdHoc"],[3,"Kind"],[8,"Fairing"],[4,"LaunchErrorKind"],[4,"RouteUriError"],[3,"LaunchError"],[3,"LastModified"],[3,"Allow"],[3,"AcceptRanges"],[4,"Range"],[3,"Referer"],[3,"ContentLanguage"],[4,"IfNoneMatch"],[3,"AccessControlRequestMethod"],[3,"Host"],[3,"Prefer"],[4,"Vary"],[3,"UserAgent"],[4,"DispositionParam"],[4,"IfMatch"],[3,"AcceptLanguage"],[3,"AccessControlAllowMethods"],[3,"Basic"],[3,"Upgrade"],[3,"Date"],[3,"IfModifiedSince"],[3,"Quality"],[3,"AcceptEncoding"],[4,"Expect"],[3,"Expires"],[3,"AccessControlAllowHeaders"],[3,"Connection"],[3,"ContentType"],[3,"ETag"],[3,"Location"],[3,"Authorization"],[4,"ContentRangeSpec"],[4,"IfRange"],[3,"From"],[4,"Charset"],[3,"HttpDate"],[3,"PreferenceApplied"],[3,"CacheControl"],[3,"IfUnmodifiedSince"],[4,"ProtocolName"],[3,"Bearer"],[4,"CacheDirective"],[3,"ContentEncoding"],[3,"AccessControlRequestHeaders"],[4,"Preference"],[3,"QualityItem"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[3,"Origin"],[3,"ContentDisposition"],[4,"RangeUnit"],[3,"TransferEncoding"],[3,"ContentRange"],[3,"AccessControlMaxAge"],[4,"Pragma"],[4,"ConnectionOption"],[3,"ContentLength"],[3,"AcceptCharset"],[4,"Encoding"],[3,"AccessControlExposeHeaders"],[3,"Accept"],[3,"EntityTag"],[3,"Protocol"],[8,"Scheme"],[4,"AccessControlAllowOrigin"],[3,"StrictTransportSecurity"],[4,"DispositionType"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[3,"HttpStream"],[8,"SslClient"],[8,"SslServer"],[4,"HttpsStream"],[4,"Method"],[4,"RequestUri"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Incoming"],[4,"TopLevel"],[4,"Value"],[3,"Mime"],[4,"Attr"],[4,"SubLevel"],[3,"Response"],[3,"Request"],[4,"Error"],[4,"StatusCode"],[8,"Handler"],[8,"UriDisplay"],[3,"Segments"],[8,"FromUriParam"],[4,"Uri"],[4,"SegmentError"],[8,"IntoCollection"],[8,"IntoOwned"],[8,"Normalize"],[4,"Method"],[3,"QMediaType"],[4,"SameSite"],[4,"Source"],[4,"MediaParams"],[3,"Header"],[3,"ContentType"],[4,"StatusClass"],[4,"Indexed"],[8,"Array"],[3,"Status"],[3,"Rocket"],[3,"LocalResponse"],[3,"Query"],[3,"Datetime"],[3,"DataStream"],[3,"Headers"],[3,"AccessControlAllowCredentials"],[3,"Server"],[4,"Fresh"],[4,"Streaming"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"Absolute"],[3,"Authority"],[3,"Formatter"],[3,"Error"],[3,"Origin"],[3,"UncasedStr"],[3,"Uncased"],[3,"RawStr"],[4,"Cookies"],[3,"CookieJar"],[3,"SmallVec"],[3,"HeaderMap"],[3,"Key"],[3,"Cookie"],[3,"Accept"],[3,"MediaType"]]};
searchIndex["rocket_app"]={"doc":"An example Rust web application.","items":[[5,"main","rocket_app","",N,[[]]],[0,"app","","Rocket app configuration.",N,N],[5,"start","rocket_app::app","",N,[[]]],[0,"customers","","`/customers` ",N,N],[5,"get","rocket_app::app::customers","`GET /customers/<id>` ",N,[[["customerid"],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_get","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[5,"create","","`PUT /customers` ",N,[[["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_create","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[7,"static_rocket_route_info_for_get","","Rocket code generated static route info.",N,N],[7,"static_rocket_route_info_for_create","","Rocket code generated static route info.",N,N],[0,"orders","rocket_app::app","`/orders` ",N,N],[3,"Create","rocket_app::app::orders","",N,N],[12,"customer","","",0,N],[3,"ProductQuantity","","",N,N],[5,"get","","`GET /orders/<id>` ",N,[[["orderid"],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_get","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[5,"create","","`PUT /orders` ",N,[[["json",["create"]],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_create","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[5,"add_or_update_product","","`POST /orders/<id>/products/<product_id>` ",N,[[["orderid"],["productid"],["json",["productquantity"]],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_add_or_update_product","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[7,"static_rocket_route_info_for_get","","Rocket code generated static route info.",N,N],[7,"static_rocket_route_info_for_create","","Rocket code generated static route info.",N,N],[7,"static_rocket_route_info_for_add_or_update_product","","Rocket code generated static route info.",N,N],[17,"_IMPL_DESERIALIZE_FOR_Create","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_ProductQuantity","","",N,N],[0,"products","rocket_app::app","`/products` ",N,N],[3,"Get","rocket_app::app::products","",N,N],[12,"id","","",1,N],[12,"title","","",1,N],[12,"price","","",1,N],[3,"Create","","",N,N],[12,"title","","",2,N],[12,"price","","",2,N],[5,"get","","`GET /products/<id>` ",N,[[["productid"],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_get","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[5,"create","","`PUT /products` ",N,[[["json",["create"]],["state",["resolver"]]],["result",["json","error"]]]],[5,"rocket_route_fn_create","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[5,"set_title","","`POST /products/<id>/title/<title>` ",N,[[["productid"],["string"],["state",["resolver"]]],["result",["error"]]]],[5,"rocket_route_fn_set_title","","Rocket code generated wrapping route function.",N,[[["request"],["data"]],["outcome"]]],[7,"static_rocket_route_info_for_get","","Rocket code generated static route info.",N,N],[7,"static_rocket_route_info_for_create","","Rocket code generated static route info.",N,N],[7,"static_rocket_route_info_for_set_title","","Rocket code generated static route info.",N,N],[17,"_IMPL_SERIALIZE_FOR_Get","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Create","","",N,N],[0,"domain","rocket_app","Domain modules.",N,N],[3,"Resolver","rocket_app::domain","Resolver for the domain.",N,N],[0,"error","","",N,N],[6,"Fallible","rocket_app::domain::error::err_msg","A common result with an `Error`.",N,N],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",3,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",3,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",3,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",3,[[["self"]],["compat"]]],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[14,"bail","","Exits a function early with an `Error`.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[0,"isize","rocket_app::domain::error::err_msg::_core","The pointer-sized signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::isize","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i8","rocket_app::domain::error::err_msg::_core","The 8-bit signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::i8","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i16","rocket_app::domain::error::err_msg::_core","The 16-bit signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::i16","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i32","rocket_app::domain::error::err_msg::_core","The 32-bit signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::i32","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i64","rocket_app::domain::error::err_msg::_core","The 64-bit signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::i64","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"i128","rocket_app::domain::error::err_msg::_core","The 128-bit signed integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::i128","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"usize","rocket_app::domain::error::err_msg::_core","The pointer-sized unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::usize","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u8","rocket_app::domain::error::err_msg::_core","The 8-bit unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::u8","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u16","rocket_app::domain::error::err_msg::_core","The 16-bit unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::u16","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u32","rocket_app::domain::error::err_msg::_core","The 32-bit unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::u32","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u64","rocket_app::domain::error::err_msg::_core","The 64-bit unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::u64","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"u128","rocket_app::domain::error::err_msg::_core","The 128-bit unsigned integer type.",N,N],[17,"MIN","rocket_app::domain::error::err_msg::_core::u128","The smallest value that can be represented by this integer type.",N,N],[17,"MAX","","The largest value that can be represented by this integer type.",N,N],[0,"f32","rocket_app::domain::error::err_msg::_core","This module provides constants which are specific to the implementation of the `f32` floating point data type.",N,N],[17,"RADIX","rocket_app::domain::error::err_msg::_core::f32","The radix or base of the internal representation of `f32`.",N,N],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",N,N],[17,"DIGITS","","Approximate number of significant digits in base 10.",N,N],[17,"EPSILON","","[Machine epsilon] value for `f32`.",N,N],[17,"MIN","","Smallest finite `f32` value.",N,N],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",N,N],[17,"MAX","","Largest finite `f32` value.",N,N],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",N,N],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",N,N],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",N,N],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",N,N],[17,"NAN","","Not a Number (NaN).",N,N],[17,"INFINITY","","Infinity (∞).",N,N],[17,"NEG_INFINITY","","Negative infinity (-∞).",N,N],[0,"consts","","Basic mathematical constants.",N,N],[17,"PI","rocket_app::domain::error::err_msg::_core::f32::consts","Archimedes' constant (π)",N,N],[17,"FRAC_PI_2","","π/2",N,N],[17,"FRAC_PI_3","","π/3",N,N],[17,"FRAC_PI_4","","π/4",N,N],[17,"FRAC_PI_6","","π/6",N,N],[17,"FRAC_PI_8","","π/8",N,N],[17,"FRAC_1_PI","","1/π",N,N],[17,"FRAC_2_PI","","2/π",N,N],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",N,N],[17,"SQRT_2","","sqrt(2)",N,N],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",N,N],[17,"E","","Euler's number (e)",N,N],[17,"LOG2_E","","log2(e)",N,N],[17,"LOG2_10","","log2(10)",N,N],[17,"LOG10_E","","log10(e)",N,N],[17,"LOG10_2","","log10(2)",N,N],[17,"LN_2","","ln(2)",N,N],[17,"LN_10","","ln(10)",N,N],[0,"f64","rocket_app::domain::error::err_msg::_core","This module provides constants which are specific to the implementation of the `f64` floating point data type.",N,N],[17,"RADIX","rocket_app::domain::error::err_msg::_core::f64","The radix or base of the internal representation of `f64`.",N,N],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",N,N],[17,"DIGITS","","Approximate number of significant digits in base 10.",N,N],[17,"EPSILON","","[Machine epsilon] value for `f64`.",N,N],[17,"MIN","","Smallest finite `f64` value.",N,N],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",N,N],[17,"MAX","","Largest finite `f64` value.",N,N],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",N,N],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",N,N],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",N,N],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",N,N],[17,"NAN","","Not a Number (NaN).",N,N],[17,"INFINITY","","Infinity (∞).",N,N],[17,"NEG_INFINITY","","Negative infinity (-∞).",N,N],[0,"consts","","Basic mathematical constants.",N,N],[17,"PI","rocket_app::domain::error::err_msg::_core::f64::consts","Archimedes' constant (π)",N,N],[17,"FRAC_PI_2","","π/2",N,N],[17,"FRAC_PI_3","","π/3",N,N],[17,"FRAC_PI_4","","π/4",N,N],[17,"FRAC_PI_6","","π/6",N,N],[17,"FRAC_PI_8","","π/8",N,N],[17,"FRAC_1_PI","","1/π",N,N],[17,"FRAC_2_PI","","2/π",N,N],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",N,N],[17,"SQRT_2","","sqrt(2)",N,N],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",N,N],[17,"E","","Euler's number (e)",N,N],[17,"LOG2_10","","log2(10)",N,N],[17,"LOG2_E","","log2(e)",N,N],[17,"LOG10_2","","log10(2)",N,N],[17,"LOG10_E","","log10(e)",N,N],[17,"LN_2","","ln(2)",N,N],[17,"LN_10","","ln(10)",N,N],[0,"num","rocket_app::domain::error::err_msg::_core","Numeric traits and functions for the built-in numeric types.",N,N],[3,"NonZeroU8","rocket_app::domain::error::err_msg::_core::num","An integer that is known not to equal zero.",N,N],[3,"NonZeroU16","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU32","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU64","","An integer that is known not to equal zero.",N,N],[3,"NonZeroU128","","An integer that is known not to equal zero.",N,N],[3,"NonZeroUsize","","An integer that is known not to equal zero.",N,N],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",N,N],[12,"0","","",4,N],[4,"FpCategory","","A classification of floating point numbers.",N,N],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",5,N],[13,"Infinite","","Positive or negative infinity.",5,N],[13,"Zero","","Positive or negative zero.",5,N],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",5,N],[13,"Normal","","A regular floating point number.",5,N],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",N,N],[3,"ParseIntError","","An error which can be returned when parsing an integer.",N,N],[0,"prelude","rocket_app::domain::error::err_msg::_core","The libcore prelude",N,N],[0,"v1","rocket_app::domain::error::err_msg::_core::prelude","The core prelude",N,N],[8,"Sync","rocket_app::domain::error::err_msg::_core::prelude::v1","Types for which it is safe to share references between threads.",N,N],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",6,[[["self"]],["t"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",7,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",7,N],[10,"into_iter","","Creates an iterator from a value.",7,N],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",8,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",8,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",8,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",8,[[["self"],["p"]],["option"]]],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",10,[[["t"]],["self"]]],[8,"Sized","","Types with a constant size known at compile time.",N,N],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",N,N],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",11,N],[13,"Err","","Contains the error value",11,N],[4,"Option","","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",12,N],[13,"Some","","Some value `T`",12,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",13,N],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",14,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",14,[[["self"],["rhs"]],["bool"]]],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",15,N],[8,"Send","","Types that can be transferred across thread boundaries.",N,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",16,N],[10,"next","","Advances the iterator and returns the next value.",16,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",16,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",16,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",16,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",16,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",16,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",16,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",16,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",16,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",16,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",16,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",16,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",16,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",16,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",16,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",16,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",16,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",16,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",16,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",16,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",16,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",16,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",16,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",16,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",16,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",16,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",16,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",16,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",16,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",16,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",16,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",16,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",16,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",16,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",16,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",16,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",16,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",16,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",16,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",16,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",16,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",16,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",16,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",16,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",16,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",16,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",16,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",16,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",16,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",16,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",16,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",16,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",16,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",16,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",16,[[["self"],["i"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",18,N],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",19,[[["self"]],["t"]]],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",N,N],[10,"clone","","Returns a copy of the value.",20,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",20,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",21,N],[10,"call_once","","Performs the call operation.",21,N],[8,"Default","","A trait for giving a type a useful default value.",N,N],[10,"default","","Returns the \"default value\" for a type.",22,[[],["self"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",23,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",23,[[["self"]],["bool"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",24,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",24,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",24,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",24,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",24,[[["self"],["rhs"]],["bool"]]],[5,"drop","","Disposes of a value.",N,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",25,N],[0,"intrinsics","rocket_app::domain::error::err_msg::_core","rustc compiler intrinsics.",N,N],[5,"atomic_cxchg","rocket_app::domain::error::err_msg::_core::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",N,N],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",N,N],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",N,N],[5,"atomic_load_unordered","","",N,N],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",N,N],[5,"atomic_store_unordered","","",N,N],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",N,N],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",N,N],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",N,N],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",N,N],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",N,N],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",N,N],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",N,N],[5,"atomic_max","","",N,N],[5,"atomic_max_acq","","",N,N],[5,"atomic_max_rel","","",N,N],[5,"atomic_max_acqrel","","",N,N],[5,"atomic_max_relaxed","","",N,N],[5,"atomic_min","","",N,N],[5,"atomic_min_acq","","",N,N],[5,"atomic_min_rel","","",N,N],[5,"atomic_min_acqrel","","",N,N],[5,"atomic_min_relaxed","","",N,N],[5,"atomic_umin","","",N,N],[5,"atomic_umin_acq","","",N,N],[5,"atomic_umin_rel","","",N,N],[5,"atomic_umin_acqrel","","",N,N],[5,"atomic_umin_relaxed","","",N,N],[5,"atomic_umax","","",N,N],[5,"atomic_umax_acq","","",N,N],[5,"atomic_umax_rel","","",N,N],[5,"atomic_umax_acqrel","","",N,N],[5,"atomic_umax_relaxed","","",N,N],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",N,N],[5,"atomic_fence","","",N,N],[5,"atomic_fence_acq","","",N,N],[5,"atomic_fence_rel","","",N,N],[5,"atomic_fence_acqrel","","",N,N],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",N,N],[5,"atomic_singlethreadfence_acq","","",N,N],[5,"atomic_singlethreadfence_rel","","",N,N],[5,"atomic_singlethreadfence_acqrel","","",N,N],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",N,[[["t"]],["t"]]],[5,"abort","","Aborts the execution of the process.",N,N],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",N,N],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",N,N],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",N,[[["bool"]],["bool"]]],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",N,[[["bool"]],["bool"]]],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",N,N],[5,"size_of","","The size of a type in bytes.",N,[[],["usize"]]],[5,"move_val_init","","Moves a value to an uninitialized memory location.",N,N],[5,"min_align_of","","",N,[[],["usize"]]],[5,"pref_align_of","","",N,[[],["usize"]]],[5,"size_of_val","","The size of the referenced value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of_val","","",N,[[["t"]],["usize"]]],[5,"type_name","","Gets a static string slice containing the name of a type.",N,[[],["str"]]],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",N,[[],["u64"]]],[5,"init","","Creates a value initialized to zero.",N,[[],["t"]]],[5,"uninit","","Creates an uninitialized value.",N,[[],["t"]]],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",N,[[],["bool"]]],[5,"offset","","Calculates the offset from a pointer.",N,N],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",N,N],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination must not overlap.",N,N],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source and destination may overlap.",N,N],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",N,N],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",N,N],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",N,N],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",N,N],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",N,N],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",N,N],[5,"unaligned_volatile_load","","Perform a volatile load from the `src` pointer The pointer is not required to be aligned.",N,N],[5,"unaligned_volatile_store","","Perform a volatile store to the `dst` pointer. The pointer is not required to be aligned.",N,N],[5,"sqrtf32","","Returns the square root of an `f32`",N,[[["f32"]],["f32"]]],[5,"sqrtf64","","Returns the square root of an `f64`",N,[[["f64"]],["f64"]]],[5,"powif32","","Raises an `f32` to an integer power.",N,[[["f32"],["i32"]],["f32"]]],[5,"powif64","","Raises an `f64` to an integer power.",N,[[["f64"],["i32"]],["f64"]]],[5,"sinf32","","Returns the sine of an `f32`.",N,[[["f32"]],["f32"]]],[5,"sinf64","","Returns the sine of an `f64`.",N,[[["f64"]],["f64"]]],[5,"cosf32","","Returns the cosine of an `f32`.",N,[[["f32"]],["f32"]]],[5,"cosf64","","Returns the cosine of an `f64`.",N,[[["f64"]],["f64"]]],[5,"powf32","","Raises an `f32` to an `f32` power.",N,[[["f32"],["f32"]],["f32"]]],[5,"powf64","","Raises an `f64` to an `f64` power.",N,[[["f64"],["f64"]],["f64"]]],[5,"expf32","","Returns the exponential of an `f32`.",N,[[["f32"]],["f32"]]],[5,"expf64","","Returns the exponential of an `f64`.",N,[[["f64"]],["f64"]]],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",N,[[["f32"]],["f32"]]],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",N,[[["f64"]],["f64"]]],[5,"logf32","","Returns the natural logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"logf64","","Returns the natural logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",N,[[["f32"]],["f32"]]],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",N,[[["f64"]],["f64"]]],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",N,[[["f32"],["f32"],["f32"]],["f32"]]],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",N,[[["f64"],["f64"],["f64"]],["f64"]]],[5,"fabsf32","","Returns the absolute value of an `f32`.",N,[[["f32"]],["f32"]]],[5,"fabsf64","","Returns the absolute value of an `f64`.",N,[[["f64"]],["f64"]]],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",N,[[["f32"],["f32"]],["f32"]]],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",N,[[["f64"],["f64"]],["f64"]]],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",N,[[["f32"]],["f32"]]],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",N,[[["f64"]],["f64"]]],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",N,[[["f32"]],["f32"]]],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",N,[[["f64"]],["f64"]]],[5,"truncf32","","Returns the integer part of an `f32`.",N,[[["f32"]],["f32"]]],[5,"truncf64","","Returns the integer part of an `f64`.",N,[[["f64"]],["f64"]]],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",N,[[["f32"]],["f32"]]],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",N,[[["f64"]],["f64"]]],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",N,[[["f32"]],["f32"]]],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",N,[[["f64"]],["f64"]]],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",N,[[["f32"]],["f32"]]],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",N,[[["f64"]],["f64"]]],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",N,[[["t"],["t"]],["t"]]],[5,"ctpop","","Returns the number of bits set in an integer type `T`",N,[[["t"]],["t"]]],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",N,[[["t"]],["t"]]],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",N,[[["t"]],["t"]]],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",N,[[["t"]],["t"]]],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",N,[[["t"]],["t"]]],[5,"bswap","","Reverses the bytes in an integer type `T`.",N,[[["t"]],["t"]]],[5,"bitreverse","","Reverses the bits in an integer type `T`.",N,[[["t"]],["t"]]],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",N,N],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",N,N],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",N,N],[5,"exact_div","","Performs an exact division, resulting in undefined behavior where `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`",N,[[["t"],["t"]],["t"]]],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",N,[[["t"],["t"]],["t"]]],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",N,[[["t"],["t"]],["t"]]],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",N,[[["t"],["t"]],["t"]]],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",N,[[["t"],["t"]],["t"]]],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",N,[[["t"],["t"]],["t"]]],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",N,[[["t"],["t"]],["t"]]],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",N,[[["t"],["t"]],["t"]]],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",N,[[["t"]],["u64"]]],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",N,N],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their docs). Probably will never become stable.",N,N],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",N,N],[0,"mem","rocket_app::domain::error::err_msg::_core","Basic functions for dealing with memory.",N,N],[5,"forget","rocket_app::domain::error::err_msg::_core::mem","Takes ownership and \"forgets\" about the value without running its destructor.",N,N],[5,"size_of","","Returns the size of a type in bytes.",N,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",N,[[],["bool"]]],[5,"zeroed","","Creates a value whose bytes are all zero.",N,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",N,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",N,N],[5,"replace","","Moves `src` into the referenced `dest`, returning the previous `dest` value.",N,[[["t"],["t"]],["t"]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",N,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",N,N],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",N,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",N,N],[19,"MaybeUninit","","A newtype to construct uninitialized instances of `T`",N,N],[0,"ptr","rocket_app::domain::error::err_msg::_core","Manually manage memory through raw pointers.",N,N],[5,"null","rocket_app::domain::error::err_msg::_core::ptr","Creates a null raw pointer.",N,N],[5,"null_mut","","Creates a null mutable raw pointer.",N,N],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either.",N,N],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two regions of memory beginning at `x` and `y`. The two regions must not overlap.",N,N],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous `dst` value.",N,N],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",N,N],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",N,N],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",N,N],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",N,N],[5,"eq","","Compare raw pointers for equality.",N,N],[3,"NonNull","","`*mut T` but non-zero and covariant.",N,N],[0,"hint","rocket_app::domain::error::err_msg::_core","Hints to compiler that affects how code should be emitted or optimized.",N,N],[5,"unreachable_unchecked","rocket_app::domain::error::err_msg::_core::hint","Informs the compiler that this point in the code is not reachable, enabling further optimizations.",N,N],[0,"marker","rocket_app::domain::error::err_msg::_core","Primitive traits and types representing basic properties of types.",N,N],[8,"Unsize","rocket_app::domain::error::err_msg::_core::marker","Types that can be \"unsized\" to a dynamically-sized type.",N,N],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",N,N],[8,"Unpin","","Types which can be safely moved after being pinned.",N,N],[3,"Pinned","","A type which does not implement `Unpin`.",N,N],[0,"ops","rocket_app::domain::error::err_msg::_core","Overloadable operators.",N,N],[8,"Generator","rocket_app::domain::error::err_msg::_core::ops","The trait implemented by builtin generator types.",N,N],[16,"Yield","","The type of value this generator yields.",26,N],[16,"Return","","The type of value this generator returns.",26,N],[10,"resume","","Resumes the execution of this generator.",26,[[["self"]],["generatorstate"]]],[8,"Neg","","The unary negation operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",27,N],[10,"neg","","Performs the unary `-` operation.",27,N],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",N,N],[12,"start","","The lower bound of the range (inclusive).",28,N],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",N,N],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",N,N],[8,"Div","","The division operator `/`.",N,N],[16,"Output","","The resulting type after applying the `/` operator.",29,N],[10,"div","","Performs the `/` operation.",29,N],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",N,N],[12,"start","","The lower bound of the range (inclusive).",30,N],[12,"end","","The upper bound of the range (exclusive).",30,N],[8,"Add","","The addition operator `+`.",N,N],[16,"Output","","The resulting type after applying the `+` operator.",31,N],[10,"add","","Performs the `+` operation.",31,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",32,N],[13,"Excluded","","An exclusive bound.",32,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",32,N],[8,"ShlAssign","","The left shift assignment operator `<<=`.",N,N],[10,"shl_assign","","Performs the `<<=` operation.",33,N],[8,"Try","","A trait for customizing the behavior of the `?` operator.",N,N],[16,"Ok","","The type of this value when viewed as successful.",34,N],[16,"Error","","The type of this value when viewed as failed.",34,N],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",34,[[["self"]],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",34,N],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",34,N],[4,"GeneratorState","","The result of a generator resumption.",N,N],[13,"Yielded","","The generator suspended with a value.",35,N],[13,"Complete","","The generator completed with a return value.",35,N],[8,"Mul","","The multiplication operator `*`.",N,N],[16,"Output","","The resulting type after applying the `*` operator.",36,N],[10,"mul","","Performs the `*` operation.",36,N],[8,"RemAssign","","The remainder assignment operator `%=`.",N,N],[10,"rem_assign","","Performs the `%=` operation.",37,N],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",N,N],[12,"end","","The upper bound of the range (exclusive).",38,N],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[10,"start_bound","","Start index bound.",39,[[["self"]],["bound"]]],[10,"end_bound","","End index bound.",39,[[["self"]],["bound"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",39,[[["self"],["u"]],["bool"]]],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",N,N],[16,"Output","","The returned type after indexing.",40,N],[10,"index","","Performs the indexing (`container[index]`) operation.",40,N],[8,"BitOr","","The bitwise OR operator `|`.",N,N],[16,"Output","","The resulting type after applying the `|` operator.",41,N],[10,"bitor","","Performs the `|` operation.",41,N],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `>>` operator.",42,N],[10,"shr","","Performs the `>>` operation.",42,N],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",N,N],[12,"end","","The upper bound of the range (inclusive)",43,N],[8,"BitXor","","The bitwise XOR operator `^`.",N,N],[16,"Output","","The resulting type after applying the `^` operator.",44,N],[10,"bitxor","","Performs the `^` operation.",44,N],[8,"Sub","","The subtraction operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",45,N],[10,"sub","","Performs the `-` operation.",45,N],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",N,N],[10,"bitxor_assign","","Performs the `^=` operation.",46,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",N,N],[10,"deref_mut","","Mutably dereferences the value.",47,N],[8,"Not","","The unary logical negation operator `!`.",N,N],[16,"Output","","The resulting type after applying the `!` operator.",48,N],[10,"not","","Performs the unary `!` operation.",48,N],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",N,N],[10,"bitand_assign","","Performs the `&=` operation.",49,N],[8,"MulAssign","","The multiplication assignment operator `*=`.",N,N],[10,"mul_assign","","Performs the `*=` operation.",50,N],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `<<` operator.",51,N],[10,"shl","","Performs the `<<` operation.",51,N],[8,"ShrAssign","","The right shift assignment operator `>>=`.",N,N],[10,"shr_assign","","Performs the `>>=` operation.",52,N],[8,"AddAssign","","The addition assignment operator `+=`.",N,N],[10,"add_assign","","Performs the `+=` operation.",53,N],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",N,N],[10,"bitor_assign","","Performs the `|=` operation.",54,N],[8,"DivAssign","","The division assignment operator `/=`.",N,N],[10,"div_assign","","Performs the `/=` operation.",55,N],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",N,N],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",56,N],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",57,N],[10,"deref","","Dereferences the value.",57,N],[8,"Rem","","The remainder operator `%`.",N,N],[16,"Output","","The resulting type after applying the `%` operator.",58,N],[10,"rem","","Performs the `%` operation.",58,N],[3,"RangeFull","","An unbounded range (`..`).",N,N],[8,"BitAnd","","The bitwise AND operator `&`.",N,N],[16,"Output","","The resulting type after applying the `&` operator.",59,N],[10,"bitand","","Performs the `&` operation.",59,N],[8,"SubAssign","","The subtraction assignment operator `-=`.",N,N],[10,"sub_assign","","Performs the `-=` operation.",60,N],[0,"cmp","rocket_app::domain::error::err_msg::_core","Functionality for ordering and comparison.",N,N],[4,"Ordering","rocket_app::domain::error::err_msg::_core::cmp","An `Ordering` is the result of a comparison between two values.",N,N],[13,"Less","","An ordering where a compared value is less [than another].",61,N],[13,"Equal","","An ordering where a compared value is equal [to another].",61,N],[13,"Greater","","An ordering where a compared value is greater [than another].",61,N],[3,"Reverse","","A helper struct for reverse ordering.",N,N],[12,"0","","",62,N],[5,"min","","Compares and returns the minimum of two values.",N,[[["t"],["t"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",N,[[["t"],["t"]],["t"]]],[0,"clone","rocket_app::domain::error::err_msg::_core","The `Clone` trait for types that cannot be 'implicitly copied'.",N,N],[0,"default","","The `Default` trait for types which may have meaningful default values.",N,N],[0,"convert","","Traits for conversions between types.",N,N],[5,"identity","rocket_app::domain::error::err_msg::_core::convert","An identity function.",N,[[["t"]],["t"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",N,N],[16,"Error","","The type returned in the event of a conversion error.",63,N],[10,"try_into","","Performs the conversion.",63,[[["self"]],["result"]]],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",64,N],[10,"try_from","","Performs the conversion.",64,[[["t"]],["result"]]],[0,"borrow","rocket_app::domain::error::err_msg::_core","A module for working with borrowed data.",N,N],[8,"Borrow","rocket_app::domain::error::err_msg::_core::borrow","A trait for borrowing data.",N,N],[10,"borrow","","Immutably borrows from an owned value.",65,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",N,N],[10,"borrow_mut","","Mutably borrows from an owned value.",66,[[["self"]],["borrowed"]]],[0,"any","rocket_app::domain::error::err_msg::_core","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",N,N],[8,"Any","rocket_app::domain::error::err_msg::_core::any","A type to emulate dynamic typing.",N,N],[10,"get_type_id","","Gets the `TypeId` of `self`.",67,[[["self"]],["typeid"]]],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",N,N],[0,"array","rocket_app::domain::error::err_msg::_core","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths.",N,N],[8,"FixedSizeArray","rocket_app::domain::error::err_msg::_core::array","Utility trait implemented only on arrays of fixed size",N,N],[10,"as_slice","","Converts the array to immutable slice",68,N],[10,"as_mut_slice","","Converts the array to mutable slice",68,N],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to an array fails.",N,N],[0,"ascii","rocket_app::domain::error::err_msg::_core","Operations on ASCII strings and characters.",N,N],[3,"EscapeDefault","rocket_app::domain::error::err_msg::_core::ascii","An iterator over the escaped version of a byte.",N,N],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",N,[[["u8"]],["escapedefault"]]],[0,"sync","rocket_app::domain::error::err_msg::_core","Synchronization primitives",N,N],[0,"atomic","rocket_app::domain::error::err_msg::_core::sync","Atomic types",N,N],[5,"spin_loop_hint","rocket_app::domain::error::err_msg::_core::sync::atomic","Save power or switch hyperthreads in a busy-wait spin-loop.",N,N],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",N,N],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",N,N],[4,"Ordering","","Atomic memory orderings",N,N],[13,"Relaxed","","No ordering constraints, only atomic operations.",69,N],[13,"Release","","When coupled with a store, all previous operations become ordered before any load of this value with [`Acquire`] (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an [`Acquire`] (or stronger) load of this value.",69,N],[13,"Acquire","","When coupled with a load, if the loaded value was written by a store operation with [`Release`] (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.",69,N],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`] together: For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.",69,N],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.",69,N],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",N,N],[3,"AtomicI8","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU8","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI16","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU16","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI32","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU32","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicI64","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicU64","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",N,N],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",N,N],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",N,N],[5,"fence","","An atomic fence.",N,N],[5,"compiler_fence","","A compiler memory fence.",N,N],[0,"cell","rocket_app::domain::error::err_msg::_core","Shareable mutable containers.",N,N],[3,"Cell","rocket_app::domain::error::err_msg::_core::cell","A mutable memory location.",N,N],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",N,N],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",N,N],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",N,N],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",N,N],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",N,N],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",N,N],[0,"char","rocket_app::domain::error::err_msg::_core","A character type.",N,N],[17,"MAX","rocket_app::domain::error::err_msg::_core::char","The highest valid code point a `char` can have.",N,N],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",N,N],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",N,N],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",N,N],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",N,N],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",N,N],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",N,N],[5,"from_digit","","Converts a digit in the given radix to a `char`.",N,[[["u32"],["u32"]],["option",["char"]]]],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",N,N],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `char` and `str` methods are based on.",N,N],[3,"ParseCharError","","An error which can be returned when parsing a char.",N,N],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code points.",N,N],[5,"from_u32","","Converts a `u32` to a `char`.",N,[[["u32"]],["option",["char"]]]],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",N,[[["i"]],["decodeutf16"]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",N,N],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",N,[[["u32"]],["char"]]],[3,"UnicodeVersion","","Represents a Unicode Version.",N,N],[12,"major","","Major version.",70,N],[12,"minor","","Minor version.",70,N],[12,"micro","","Micro (or Update) version.",70,N],[0,"panic","rocket_app::domain::error::err_msg::_core","Panic support in the standard library.",N,N],[3,"PanicInfo","rocket_app::domain::error::err_msg::_core::panic","A struct providing information about a panic.",N,N],[3,"Location","","A struct containing information about the location of a panic.",N,N],[0,"panicking","rocket_app::domain::error::err_msg::_core","Panic support for libcore",N,N],[5,"panic","rocket_app::domain::error::err_msg::_core::panicking","",N,N],[5,"panic_fmt","","",N,N],[0,"pin","rocket_app::domain::error::err_msg::_core","Types which pin data to its location in memory",N,N],[3,"Pin","rocket_app::domain::error::err_msg::_core::pin","A pinned pointer.",N,N],[0,"iter","rocket_app::domain::error::err_msg::_core","Composable external iteration.",N,N],[3,"Rev","rocket_app::domain::error::err_msg::_core::iter","A double-ended iterator with the direction inverted.",N,N],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",N,N],[3,"Cycle","","An iterator that repeats endlessly.",N,N],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",N,N],[3,"Chain","","An iterator that strings two iterators together.",N,N],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",N,N],[3,"Map","","An iterator that maps the values of `iter` with `f`.",N,N],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",N,N],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",N,N],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",N,N],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",N,N],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",N,N],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",N,N],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",N,N],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",N,N],[3,"Scan","","An iterator to maintain state while iterating another iterator.",N,N],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",N,N],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",N,N],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",N,N],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",N,N],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",N,N],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",71,[[["i"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",N,N],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",72,[[["i"]],["self"]]],[3,"Once","","An iterator that yields an element exactly once.",N,N],[8,"Step","","Objects that can be stepped over in both directions.",N,N],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",73,[[["self"],["self"]],["option",["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning itself",73,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning itself",73,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result",73,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result",73,[[["self"]],["self"]]],[10,"add_usize","","Add an usize, returning None on overflow",73,[[["self"],["usize"]],["option"]]],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",N,N],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",N,[[["t"]],["repeat"]]],[8,"FromIterator","","Conversion from an `Iterator`.",N,N],[10,"from_iter","","Creates a value from an iterator.",74,[[["t"]],["self"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",N,N],[3,"Repeat","","An iterator that repeats an element endlessly.",N,N],[5,"once","","Creates an iterator that yields an element exactly once.",N,[[["t"]],["once"]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",N,[[["f"]],["repeatwith"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",N,N],[3,"Empty","","An iterator that yields nothing.",N,N],[5,"empty","","Creates an iterator that yields nothing.",N,[[],["empty"]]],[0,"option","rocket_app::domain::error::err_msg::_core","Optional values.",N,N],[3,"Iter","rocket_app::domain::error::err_msg::_core::option","An iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",N,N],[0,"raw","rocket_app::domain::error::err_msg::_core","Contains struct definitions for the layout of compiler built-in types.",N,N],[3,"TraitObject","rocket_app::domain::error::err_msg::_core::raw","The representation of a trait object like `&SomeTrait`.",N,N],[12,"data","","",75,N],[12,"vtable","","",75,N],[0,"result","rocket_app::domain::error::err_msg::_core","Error handling with the `Result` type.",N,N],[3,"Iter","rocket_app::domain::error::err_msg::_core::result","An iterator over a reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",N,N],[0,"ffi","rocket_app::domain::error::err_msg::_core","Utilities related to FFI bindings.",N,N],[4,"c_void","rocket_app::domain::error::err_msg::_core::ffi","Equivalent to C's `void` type when used as a [pointer].",N,N],[0,"slice","rocket_app::domain::error::err_msg::_core","Slice management and manipulation",N,N],[0,"memchr","rocket_app::domain::error::err_msg::_core::slice","Pure rust memchr implementation, taken from rust-memchr",N,N],[5,"memchr","rocket_app::domain::error::err_msg::_core::slice::memchr","Return the first index matching the byte `x` in `text`.",N,N],[5,"memrchr","","Return the last index matching the byte `x` in `text`.",N,N],[8,"SliceIndex","rocket_app::domain::error::err_msg::_core::slice","A helper trait used for indexing operations.",N,N],[16,"Output","","The output type returned by methods.",76,N],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",76,[[["self"],["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",76,[[["self"],["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",76,N],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",76,N],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",76,N],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",76,N],[3,"Iter","","Immutable slice iterator",N,N],[3,"IterMut","","Mutable slice iterator.",N,N],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",N,N],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",N,N],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",N,N],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",N,N],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"Windows","","An iterator over overlapping subslices of length `size`.",N,N],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",N,N],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time).",N,N],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",N,N],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`], except that a mutable slice is returned.",N,N],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[5,"from_mut","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[0,"str","rocket_app::domain::error::err_msg::_core","String manipulation",N,N],[0,"pattern","rocket_app::domain::error::err_msg::_core::str","The string Pattern API.",N,N],[8,"Pattern","rocket_app::domain::error::err_msg::_core::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",77,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",77,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",77,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",77,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",77,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",78,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",78,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",78,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",79,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",79,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",79,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",79,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",80,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",80,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",80,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[0,"lossy","rocket_app::domain::error::err_msg::_core::str","",N,N],[3,"Utf8Lossy","rocket_app::domain::error::err_msg::_core::str::lossy","Lossy UTF-8 string.",N,N],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",N,N],[3,"Utf8LossyChunk","","",N,N],[12,"valid","","Sequence of valid chars. Can be empty between broken UTF-8 chars.",81,N],[12,"broken","","Single broken char, empty if none. Empty iff iterator item is last.",81,N],[8,"FromStr","rocket_app::domain::error::err_msg::_core::str","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",82,N],[10,"from_str","","Parses a string `s` to return a value of this type.",82,[[["str"]],["result"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[3,"Chars","","An iterator over the [`char`]s of a string slice.",N,N],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a UTF-8-like encoding).",N,[[["i"]],["option",["u32"]]]],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"Split","","Created with the method [`split`].",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[3,"RMatches","","Created with the method [`rmatches`].",N,N],[3,"Lines","","An iterator over the lines of a string, as string slices.",N,N],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[5,"utf8_char_width","","Given a first byte, determines how many bytes are in this UTF-8 character.",N,[[["u8"]],["usize"]]],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[0,"hash","rocket_app::domain::error::err_msg::_core","Generic hashing support.",N,N],[8,"Hash","rocket_app::domain::error::err_msg::_core::hash","A hashable type.",N,N],[10,"hash","","Feeds this value into the given [`Hasher`].",83,N],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",83,N],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",N,N],[10,"finish","","Returns the hash value for the values written so far.",84,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",84,N],[11,"write_u8","","Writes a single `u8` into this hasher.",84,N],[11,"write_u16","","Writes a single `u16` into this hasher.",84,N],[11,"write_u32","","Writes a single `u32` into this hasher.",84,N],[11,"write_u64","","Writes a single `u64` into this hasher.",84,N],[11,"write_u128","","Writes a single `u128` into this hasher.",84,N],[11,"write_usize","","Writes a single `usize` into this hasher.",84,N],[11,"write_i8","","Writes a single `i8` into this hasher.",84,N],[11,"write_i16","","Writes a single `i16` into this hasher.",84,N],[11,"write_i32","","Writes a single `i32` into this hasher.",84,N],[11,"write_i64","","Writes a single `i64` into this hasher.",84,N],[11,"write_i128","","Writes a single `i128` into this hasher.",84,N],[11,"write_isize","","Writes a single `isize` into this hasher.",84,N],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",N,N],[16,"Hasher","","Type of the hasher that will be created.",85,N],[10,"build_hasher","","Creates a new hasher.",85,N],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[0,"fmt","rocket_app::domain::error::err_msg::_core","Utilities for formatting and printing strings.",N,N],[4,"Alignment","rocket_app::domain::error::err_msg::_core::fmt","Possible alignments returned by `Formatter::align`",N,N],[13,"Left","","Indication that contents should be left-aligned.",86,N],[13,"Right","","Indication that contents should be right-aligned.",86,N],[13,"Center","","Indication that contents should be center-aligned.",86,N],[6,"Result","","The type returned by formatter methods.",N,N],[3,"Error","","The error type which is returned from formatting a message into a stream.",N,N],[8,"Write","","A collection of methods that are required to format a message into a stream.",N,N],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",87,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",87,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",87,[[["self"],["arguments"]],["result",["error"]]]],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",N,N],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",N,N],[8,"Debug","","`?` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",88,[[["self"],["formatter"]],["result",["error"]]]],[8,"Display","","Format trait for an empty format, `{}`.",N,N],[10,"fmt","","Formats the value using the given formatter.",89,[[["self"],["formatter"]],["result",["error"]]]],[8,"Octal","","`o` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",90,[[["self"],["formatter"]],["result",["error"]]]],[8,"Binary","","`b` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",91,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerHex","","`x` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",92,[[["self"],["formatter"]],["result",["error"]]]],[8,"UpperHex","","`X` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",93,[[["self"],["formatter"]],["result",["error"]]]],[8,"Pointer","","`p` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",94,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerExp","","`e` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",95,[[["self"],["formatter"]],["result",["error"]]]],[8,"UpperExp","","`E` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",96,[[["self"],["formatter"]],["result",["error"]]]],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",N,[[["write"],["arguments"]],["result",["error"]]]],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",N,N],[0,"time","rocket_app::domain::error::err_msg::_core","Temporal quantification.",N,N],[3,"Duration","rocket_app::domain::error::err_msg::_core::time","A `Duration` type to represent a span of time, typically used for system timeouts.",N,N],[0,"unicode","rocket_app::domain::error::err_msg::_core","",N,N],[0,"derived_property","rocket_app::domain::error::err_msg::_core::unicode","",N,N],[5,"Cased","rocket_app::domain::error::err_msg::_core::unicode::derived_property","",N,[[["char"]],["bool"]]],[5,"Case_Ignorable","","",N,[[["char"]],["bool"]]],[0,"conversions","rocket_app::domain::error::err_msg::_core::unicode","",N,N],[5,"to_upper","rocket_app::domain::error::err_msg::_core::unicode::conversions","",N,N],[5,"to_lower","","",N,N],[0,"property","rocket_app::domain::error::err_msg::_core::unicode","",N,N],[5,"Pattern_White_Space","rocket_app::domain::error::err_msg::_core::unicode::property","",N,[[["char"]],["bool"]]],[0,"future","rocket_app::domain::error::err_msg::_core","Asynchronous values.",N,N],[8,"Future","rocket_app::domain::error::err_msg::_core::future","A future represents an asychronous computation.",N,N],[16,"Output","","The result of the `Future`.",97,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",97,[[["pin"],["localwaker"]],["poll"]]],[0,"task","rocket_app::domain::error::err_msg::_core","Types and Traits for working with asynchronous tasks.",N,N],[8,"UnsafeWake","rocket_app::domain::error::err_msg::_core::task","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",98,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",98,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",98,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",98,N],[4,"Poll","","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",99,N],[13,"Pending","","Represents that a value is not ready yet.",99,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[0,"alloc","rocket_app::domain::error::err_msg::_core","Memory allocation APIs",N,N],[3,"Excess","rocket_app::domain::error::err_msg::_core::alloc","Represents the combination of a starting address and a total capacity of the returned block.",N,N],[12,"0","","",100,N],[12,"1","","",100,N],[3,"Layout","","Layout of a block of memory.",N,N],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints.",N,N],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator.",N,N],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",N,N],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard library’s default though the `#[global_allocator]` attributes.",N,N],[10,"alloc","","Allocate memory as described by the given `layout`.",101,N],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer with the given `layout`.",101,N],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",101,N],[11,"realloc","","Shink or grow a block of memory to the given `new_size`. The block is described by the given `ptr` pointer and `layout`.",101,N],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",N,N],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",102,[[["self"],["layout"]],["result",["nonnull","allocerr"]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",102,N],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",102,N],[11,"realloc","","Returns a pointer suitable for holding data described by a new layout with `layout`’s alginment and a size given by `new_size`. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit the new layout.",102,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",102,[[["self"],["layout"]],["result",["nonnull","allocerr"]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",102,[[["self"],["layout"]],["result",["excess","allocerr"]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",102,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["excess","allocerr"]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_size`.",102,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["cannotreallocinplace"]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_size`.",102,[[["self"],["nonnull",["u8"]],["layout"],["usize"]],["result",["cannotreallocinplace"]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",102,[[["self"]],["result",["nonnull","allocerr"]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",102,N],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",102,[[["self"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",102,[[["self"],["nonnull"],["usize"],["usize"]],["result",["nonnull","allocerr"]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",102,[[["self"],["nonnull"],["usize"]],["result",["allocerr"]]]],[14,"debug_assert","rocket_app::domain::error::err_msg::_core","Ensure that a boolean expression is `true` at runtime.",N,N],[14,"write","","Write formatted data into a buffer.",N,N],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",N,N],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",N,N],[0,"arch","","Platform dependent vendor intrinsics.",N,N],[0,"x86_64","rocket_app::domain::error::err_msg::_core::arch","Platform-specific intrinsics for the `x86_64` platform.",N,N],[5,"_mm_max_pd","rocket_app::domain::error::err_msg::_core::arch::x86_64","Return a new vector with the maximum values from corresponding elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_set_m128i","","Set packed __m256i returned vector with the supplied values.",N,[[["__m128i"],["__m128i"]],["__m256i"]]],[5,"_mm_comile_sd","","Compare the lower element of `a` and `b` for less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cvtsi64_ss","","Convert a 64 bit integer to a 32 bit float. The result vector is the input vector `a` with the lowest 32 bit float replaced by the converted integer.",N,[[["__m128"],["i64"]],["__m128"]]],[5,"_mm_hsub_pi32","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[2 x i32]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_MM_ROUND_DOWN","","See `_mm_setcsr`",N,N],[5,"_mm_cvtsi64x_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i64"]],["__m128i"]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in place.",N,N],[5,"_mm_loadr_pd","","Load 2 double-precision (64-bit) floating-point elements from memory into the returned vector in reverse order. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cmpistrz","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if any character in `b` was null. and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm256_max_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_bslli_epi128","","Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_adds_epu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_shuffle_epi32","","Shuffle 32-bit integers in `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a 256-bit vector of `[8 x float]` to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_bextr_u32","","Extracts bits in range [`start`, `start` + `length`) from `a` into the least significant bits of the result.",N,[[["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm256_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_FROUND_TO_POS_INF","","round up",N,N],[5,"_mm_cmplt_sd","","Return a new vector with the low element of `a` replaced by the less-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_MM_HINT_T1","","See `_mm_prefetch`.",N,N],[5,"_blsfill_u64","","Sets all bits of `x` below the least significant one.",N,[[["u64"]],["u64"]]],[5,"_mm_extract_epi32","","Extract an 32-bit integer from `a` selected with `imm8`",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_sqrt_ss","","Return the square root of the first single-precision (32-bit) floating-point element in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[5,"_mm_storel_epi64","","Store the lower 64-bit integer `a` to a memory location.",N,N],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` up to an integer value, and store the results as packed single-precision floating-point elements.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_set_epi16","","Set packed 16-bit integers in returned vector with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m256i"]]],[5,"_bextr_u64","","Extracts bits in range [`start`, `start` + `length`) from `a` into the least significant bits of the result.",N,[[["u64"],["u32"],["u32"]],["u64"]]],[5,"_mm256_maskstore_epi32","","Store packed 32-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_min_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return the corresponding minimum values.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_setr_pd","","Set packed double-precision (64-bit) floating-point elements in returned vector with the supplied values in reverse order.",N,[[["f64"],["f64"],["f64"],["f64"]],["__m256d"]]],[5,"_mm256_inserti128_si256","","Copy `a` to `dst`, then insert 128 bits (of integer data) from `b` at the location specified by `imm8`.",N,[[["__m256i"],["__m128i"],["i32"]],["__m256i"]]],[5,"_mm_sra_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",N,N],[5,"_mm_cmpnge_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not greater than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_maskload_pd","","Load packed double-precision (64-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm_cvtsi32_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_m_paddusb","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_packus_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_max_sd","","Return a new vector with the low element of `a` replaced by the maximum of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_setcsr","","Set the MXCSR register with the 32-bit unsigned integer value.",N,N],[5,"_mm_abs_pi16","","Compute the absolute value of packed 8-bit integers in `a`, and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[5,"_mm256_load_pd","","Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cvttsd_si32","","Convert the lower double-precision (64-bit) floating-point element in `a` to a 32-bit integer with truncation.",N,[[["__m128d"]],["i32"]]],[5,"_mm256_or_pd","","Compute the bitwise OR packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_mask_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",N,N],[5,"_mm256_mulhrs_epi16","","Multiply packed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Truncate each intermediate integer to the 18 most significant bits, round by adding 1, and return bits `[16:1]`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_max_ss","","Compare the first single-precision (32-bit) floating-point element of `a` and `b`, and return the maximum value in the first element of the return value, the other elements are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer vector are all zeros.",N,[[["__m128i"],["__m128i"]],["i32"]]],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",N,N],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",N,[[["__m256d"]],["__m256i"]]],[5,"_mm256_mpsadbw_epu8","","Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in `a` compared to those in `b`, and store the 16-bit results in dst. Eight SADs are performed for each 128-bit lane using one quadruplet from `b` and eight quadruplets from `a`. One quadruplet is selected from `b` starting at on the offset specified in `imm8`. Eight quadruplets are formed from sequential 8-bit integers selected from `a` starting at the offset specified in `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmplt_ss","","Compare the lowest `f32` of both inputs for less than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is less than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_testnzc_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cmpistri","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8` and return the generated index. Similar to [`_mm_cmpestri`] with the exception that [`_mm_cmpestri`] requires the lengths of `a` and `b` to be explicitly specified.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",N,[[["u32"]],["u32"]]],[5,"_mm_setr_pi32","","Set packed 32-bit integers in dst with the supplied values in reverse order.",N,[[["i32"],["i32"]],["__m64"]]],[5,"_m_psubw","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the given `strategy`.",N,N],[5,"_mm_comile_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than or equal to the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]` into a 128-bit floating-point vector of `[2 x double]`.",N,[[["__m128"]],["__m128d"]]],[5,"_MM_SET_EXCEPTION_STATE","","See `_mm_setcsr`",N,N],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `mask`",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_m_pavgw","","Computes the rounded averages of the packed unsigned 16-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpistrm","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return the generated mask.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_extract_epi8","","Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m256i"],["i32"]],["i8"]]],[5,"_popcnt32","","Counts the bits that are set.",N,[[["i32"]],["i32"]]],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",N,N],[5,"_mm_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[17,"_MM_ROUND_NEAREST","","See `_mm_setcsr`",N,N],[5,"_mm256_set_ps","","Set packed single-precision (32-bit) floating-point elements in returned vector with the supplied values.",N,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["__m256"]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of operation from the current SHA1 state variable `a`, add that value to the scheduled values (unsigned 32-bit integers) in `b`, and returns the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_min_epi32","","Compare packed 32-bit integers in `a` and `b`, and return packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi64","","Load packed 64-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `n` bytes, and return the low 16 bytes.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_mulhi_epi16","","Multiply the packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_sub_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_setr_epi16","","Set packed 16-bit integers in returned vector with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m256i"]]],[5,"_mm_cmpngt_sd","","Return a new vector with the low element of `a` replaced by the not-greater-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_bextr2_u64","","Extracts bits of `a` specified by `control` into the least significant bits of the result.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm_testz_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_bsrli_si128","","Shift `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_and_pd","","Compute the bitwise AND of a packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_hsub_ps","","Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_store_pd","","Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_mullo_epi32","","Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and return the low 16 bits of the intermediate integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mulhrs_pi16","","Multiplies packed 16-bit signed integer values, truncates the 32-bit products to the 18 most significant bits by right-shifting, rounds the truncated value by adding 1, and writes bits `[16:1]` to the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_fnmsub_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_add_epi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit floating-point vector of `[2 x double]`.",N,[[["__m128i"]],["__m128d"]]],[5,"_mm_adds_pu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_avg_epu8","","Average packed unsigned 8-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the content of `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `b`.",N,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of `x` and sets all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_insert_epi32","","Return a copy of `a` with the 32-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mullo_epi16","","Multiply the packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_subs_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpgt_epi16","","Compare packed 16-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtps_pd","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128"]],["__m256d"]]],[5,"_mm_fmsub_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`,  and subtract the lower element in `c` from the intermediate result. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_lddqu_si128","","Load 128-bits of integer data from unaligned memory. This intrinsic may perform better than `_mm_loadu_si128` when the data crosses a cache line boundary.",N,N],[5,"_mm_add_si64","","Adds two signed or unsigned 64-bit integer values, returning the lower 64 bits of the sum.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_srli_epi64","","Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_MM_MASK_INEXACT","","See `_mm_setcsr`",N,N],[5,"_mm_comige_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than or equal to the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_fnmadd_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadd_epi32","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[4 x i32]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_maskstore_epi64","","Store packed 64-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_extract_pi16","","Extracts 16-bit element from a 64-bit vector of `[4 x i16]` and returns it, as specified by the immediate integer operand.",N,[[["__m64"],["i32"]],["i32"]]],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in `a`, find if it is in `b` (Default)",N,N],[5,"_mm256_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_sd","","Return a new vector with the low element of `a` replaced by the not-less-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_testc_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srl_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_and_ps","","Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_setr_ps","","Set packed single-precision (32-bit) floating-point elements in returned vector with the supplied values in reverse order.",N,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["__m256"]]],[5,"_m_paddd","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by `a` and `b` are equal",N,N],[5,"_mm256_mask_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit floating-point vector of `[4 x float]`.",N,[[["__m128i"]],["__m128"]]],[5,"_m_psubb","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[3,"__m128i","","128-bit wide integer vector type, x86-specific",N,N],[5,"_mm256_storeu2_m128","","Store the high and low 128-bit halves (each composed of 4 packed single-precision (32-bit) floating-point elements) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_xrstors","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_set_epi64","","Initializes both 64-bit values in a 128-bit vector of `[2 x i64]` with the specified 64-bit integer values.",N,[[["__m64"],["__m64"]],["__m128i"]]],[5,"_blsi_u32","","Extract lowest set isolated bit.",N,[[["u32"]],["u32"]]],[5,"_mm256_max_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",N,N],[5,"_mm256_floor_pd","","Round packed double-precision (64-bit) floating point elements in `a` toward negative infinity.",N,[[["__m256d"]],["__m256d"]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of `x`.",N,[[["u32"]],["u32"]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_mm_insert_epi16","","Return a new vector where the `imm8` element of `a` is replaced with `i`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4 x double]` to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_set1_pi8","","Broadcast 8-bit integer a to all all elements of dst.",N,[[["i8"]],["__m64"]]],[5,"_mm_rcp_ss","","Return the approximate reciprocal of the first single-precision (32-bit) floating-point element in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm256_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_storel_pi","","Store the lower half of `a` (64 bits) into memory.",N,N],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point element in `b` down to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the intrinsic result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_mfence","","Perform a serializing operation on all load-from-memory and store-to-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_srai_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_SIDD_UNIT_MASK","","Mask only: return the byte mask",N,N],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point element in `b` down to an integer value, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copy the upper element from `a` to the upper element of the intrinsic result.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of `x` and sets all other bits.",N,[[["u32"]],["u32"]]],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",N,N],[17,"_MM_FROUND_TO_ZERO","","truncate",N,N],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",N,[[],["__m128i"]]],[5,"_mm_set1_pi32","","Broadcast 32-bit integer a to all all elements of dst.",N,[[["i32"]],["__m64"]]],[5,"_mm256_testnzc_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm_load_pd1","","Load a double-precision (64-bit) floating-point element from memory into both elements of returned vector.",N,N],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",N,N],[5,"_mm256_packs_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpeq_sd","","Return a new vector with the low element of `a` replaced by the equality comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",N,N],[5,"_mm256_loadu2_m128i","","Load two 128-bit values (composed of integer data) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm_unpacklo_pi32","","Unpacks the lower element from two `i32x2` vectors and interleaves them into the result: `[a.0, b.0]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_broadcast_ps","","Broadcast 128 bits from memory (composed of 4 packed single-precision (32-bit) floating-point elements) to all elements of the returned vector.",N,[[["__m128"]],["__m256"]]],[5,"_mm_min_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_adds_pi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_fxsave","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR` registers to the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u16"]],["i32"]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",N,[[["f32"]],["__m128"]]],[5,"_xsaveopt","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_ucomigt_sd","","Compare the lower element of `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `b`.",N,[[["__m128d"],["__m128i"]],["__m128d"]]],[5,"_mm_insert_epi8","","Return a copy of `a` with the 8-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm_blend_epi32","","Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_add_epi64","","Add packed 64-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_adds_epu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpord_pd","","Compare corresponding elements in `a` and `b` to see if neither is `NaN`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"__cpuid_count","","Returns the result of the `cpuid` instruction for a given `leaf` (`EAX`) and `sub_leaf` (`ECX`).",N,[[["u32"],["u32"]],["cpuidresult"]]],[5,"_mm_adds_pi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sllv_epi64","","Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point elements in `a` by packed elements in `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_storer_ps","","Store four 32-bit floats into aligned memory in reverse order.",N,N],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",N,[[["u32"]],["u32"]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u16"]],["i32"]]],[5,"_mm_srl_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm_cvtps_pi8","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 8-bit integers, and returns theem in the lower 4 elements of the result.",N,[[["__m128"]],["__m64"]]],[5,"_mm_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[4 x i32]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_fmsub_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and subtract the lower element in `c` from the intermediate result. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 32-bit integer `v`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_min_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return packed minimum.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of `x`.",N,[[["u64"]],["u64"]]],[17,"_MM_HINT_T2","","See `_mm_prefetch`.",N,N],[5,"_m_pextrw","","Extracts 16-bit element from a 64-bit vector of `[4 x i16]` and returns it, as specified by the immediate integer operand.",N,[[["__m64"],["i32"]],["i32"]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_m_pavgb","","Computes the rounded averages of the packed unsigned 8-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_fmadd_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_srl_epi64","","Shift packed 64-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_mask_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastq_epi64","","Broadcast the low packed 64-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_or_ps","","Compute the bitwise OR packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_packus_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_insert_epi64","","Return a copy of `a` with the 64-bit integer from `i` inserted at a location specified by `imm8`.",N,[[["__m128i"],["i64"],["i32"]],["__m128i"]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]` to a 128-bit aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_lzcnt_u64","","Counts the leading most significant zero bits.",N,[[["u64"]],["u64"]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_insert_epi16","","Copy `a` to result, and insert the 16-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i16"],["i32"]],["__m256i"]]],[5,"_mm_set_epi32","","Set packed 32-bit integers with the supplied values.",N,[[["i32"],["i32"],["i32"],["i32"]],["__m128i"]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u32"]],["i32"]]],[5,"_mm_set1_pd","","Broadcast double-precision (64-bit) floating-point value a to all elements of the return value.",N,[[["f64"]],["__m128d"]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x double]` from a 128-bit floating-point vector of `[2 x double]`. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm_sha1msg2_epu32","","Perform the final calculation for the next four SHA1 message values (unsigned 32-bit integers) using the intermediate result in `a` and the previous message values in `b`, and returns the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",N,[[["__m256i"]],["__m256"]]],[5,"_mm_mul_epi32","","Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`, and return the signed 64-bit result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_sign_pi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_m_paddsw","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_movemask_epi8","","Create mask from the most significant bit of each 8-bit element in `a`, return the result.",N,[[["__m256i"]],["i32"]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a` to 32-bit integers. The upper eight elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_storeu_si128","","Store 128-bits of integer data from `a` into memory.",N,N],[5,"_mm_storeu_ps","","Store four 32-bit floats into memory. There are no restrictions on memory alignment. For aligned memory `_mm_store_ps` may be faster.",N,N],[5,"_mm_packus_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using unsigned saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_cmpneq_sd","","Return a new vector with the low element of `a` replaced by the not-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_popcnt64","","Counts the bits that are set.",N,[[["i64"]],["i32"]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zeroupper","","Zero the upper 128 bits of all YMM registers; the lower 128-bits of the registers are unmodified.",N,N],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_slli_si128","","Shift `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of `a` using the control in `imm8`. The high 64 bits of 128-bit lanes of `a` are copied to the output.",N,[[["__m256i"],["i32"]],["__m256i"]]],[17,"_MM_FROUND_TO_NEG_INF","","round down",N,N],[5,"_mm_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_storeh_pi","","Store the upper half of `a` (64 bits) into memory.",N,N],[5,"_mm256_cmpeq_epi8","","Compare packed 8-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_testc_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpnle_sd","","Return a new vector with the low element of `a` replaced by the not-less-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_mulhi_pu16","","Multiplies packed 16-bit unsigned integer values and writes the high-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_SIDD_LEAST_SIGNIFICANT","","Index only: return the least significant bit (Default)",N,N],[5,"_mm_div_sd","","Return a new vector with the low element of `a` replaced by the result of diving the lower element of `a` by the lower element of `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_abs_epi32","","Compute the absolute value of each of the packed 32-bit signed integers in `a` and return the 32-bit unsigned integer",N,[[["__m128i"]],["__m128i"]]],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",N,N],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",N,N],[5,"_mm_setr_epi16","","Set packed 16-bit integers with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m128i"]]],[5,"_mm_cmpestrm","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return the generated mask.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all elements of the 256-bit returned value",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_loadl_epi64","","Load 64-bit integer from memory into first element of returned vector.",N,N],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",N,N],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",N,N],[5,"_mm_movpi64_epi64","","Moves the 64-bit operand to a 128-bit integer vector, zeroing the upper bits.",N,[[["__m64"]],["__m128i"]]],[5,"_mm256_add_epi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_mullo_epi16","","Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers, and return the low 16 bits of the intermediate integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_broadcast_sd","","Broadcast a double-precision (64-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f64"]],["__m256d"]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]` into a 128-bit integer vector.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm_add_pi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sign_epi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the result. Elements in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_min_pd","","Return a new vector with the minimum values from corresponding elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_blsmsk_u32","","Get mask up to lowest set bit.",N,[[["u32"]],["u32"]]],[5,"_mm256_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cvtps_pi16","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 16-bit integers.",N,[[["__m128"]],["__m64"]]],[5,"_mm256_srli_si256","","Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_avg_epu16","","Average packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",N,[[["__m256d"]],["__m128d"]]],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",N,N],[5,"_mm_loadr_ps","","Load four `f32` values from aligned memory into a `__m128` in reverse order.",N,N],[5,"_mm256_extract_epi64","","Extract a 64-bit integer from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["i64"]]],[5,"_MM_SET_ROUNDING_MODE","","See `_mm_setcsr`",N,N],[5,"_mm256_cmpgt_epi16","","Compare packed 16-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_maskload_epi32","","Load packed 32-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_clmulepi64_si128","","Perform a carry-less multiplication of two 64-bit polynomials over the finite field GF(2^k).",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[17,"_MM_MASK_DIV_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm256_max_epi8","","Compare packed 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtepi32_ps","","Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m256i"]],["__m256"]]],[5,"_mm_sll_epi32","","Shift packed 32-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_sll_epi64","","Shift packed 64-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_xor_si256","","Compute the bitwise XOR of 256 bits (representing integer data) in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sha1msg1_epu32","","Perform an intermediate calculation for the next four SHA1 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and returning the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_maskmove_si64","","Conditionally copies the values from each 8-bit element in the first 64-bit integer vector operand to the specified memory location, as specified by the most significant bit in the corresponding element in the second 64-bit integer vector operand.",N,N],[5,"_mm256_mask_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a 32-byte aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon)",N,N],[5,"_mm_mullo_pi16","","Multiplies packed 16-bit integer values and writes the low-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_comilt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_sqrt_ps","","Return the square root of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_setr_epi8","","Set packed 8-bit integers with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m128i"]]],[3,"__m64","","64-bit wide integer vector type, x86-specific",N,N],[5,"_mm_max_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastd_epi32","","Broadcast the low packed 32-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_packs_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvttsd_si64x","","Alias for `_mm_cvttsd_si64`",N,[[["__m128d"]],["i64"]]],[5,"_mm256_madd_epi16","","Multiply packed signed 16-bit integers in `a` and `b`, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_xsetbv","","Copy 64-bits from `val` to the extended control register (`XCR`) specified by `a`.",N,N],[5,"_mm_comineq_sd","","Compare the lower element of `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cvtss_sd","","Convert the lower single-precision (32-bit) floating-point element in `b` to a double-precision (64-bit) floating-point element, store the result in the lower element of the return value, and copy the upper element from `a` to the upper element the return value.",N,[[["__m128d"],["__m128"]],["__m128d"]]],[5,"_mm_sqrt_sd","","Return a new vector with the low element of `a` replaced by the square root of the lower element `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer vector. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_avg_epu8","","Average packed unsigned 8-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",N,[[["__m256i"]],["__m128i"]]],[5,"_mm_cvttps_pi32","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m64"]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",N,[[["__m256"]],["__m256d"]]],[5,"_mm_cmpngt_pd","","Compare corresponding elements in `a` and `b` for not-greater-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_epi16","","Compare packed 16-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpunord_sd","","Return a new vector with the low element of `a` replaced by the result of comparing both of the lower elements of `a` and `b` to `NaN`. If either is equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0` otherwise.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_mul_su32","","Multiplies 32-bit unsigned integer values contained in the lower bits of the two 64-bit integer vectors and returns the 64-bit unsigned product.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_storer_pd","","Store 2 double-precision (64-bit) floating-point elements from `a` into memory in reverse order. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_packs_pi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_unpackhi_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_MASK_UNDERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm_set_pd1","","Broadcast double-precision (64-bit) floating-point value a to all elements of the return value.",N,[[["f64"]],["__m128d"]]],[5,"_mm_cvtpi32x2_ps","","Converts the two 32-bit signed integer values from each 64-bit vector operand of `[2 x i32]` into a 128-bit vector of `[4 x float]`.",N,[[["__m64"],["__m64"]],["__m128"]]],[5,"_mm256_sllv_epi32","","Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvttpd_pi32","","Converts the two double-precision floating-point elements of a 128-bit vector of `[2 x double]` into two signed 32-bit integer values, returned in a 64-bit vector of `[2 x i32]`. If the result of either conversion is inexact, the result is truncated (rounded towards zero) regardless of the current MXCSR setting.",N,[[["__m128d"]],["__m64"]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer vector are all zeros.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_set_epi64x","","Set packed 64-bit integers with the supplied values, from highest to lowest.",N,[[["i64"],["i64"]],["__m128i"]]],[5,"_mm256_cmpeq_epi32","","Compare packed 32-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mul_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_MM_MASK_OVERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm_min_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",N,N],[5,"_mm_cmpneq_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input elements are not equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_setzero_si256","","Return vector of type __m256i with all elements set to zero.",N,[[],["__m256i"]]],[5,"_mm_srlv_epi64","","Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomile_sd","","Compare the lower element of `a` and `b` for less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_add_ps","","Adds __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_abs_epi16","","Compute the absolute value of each of the packed 16-bit signed integers in `a` and return the 16-bit unsigned integer",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_ORD_S","","Ordered (signaling)",N,N],[5,"_mm_adds_epi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_xor_pd","","Compute the bitwise OR of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sllv_epi64","","Shift packed 64-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtsd_ss","","Convert the lower double-precision (64-bit) floating-point element in `b` to a single-precision (32-bit) floating-point element, store the result in the lower element of the return value, and copy the upper element from `a` to the upper element the return value.",N,[[["__m128"],["__m128d"]],["__m128"]]],[5,"_mm256_set1_pd","","Broadcast double-precision (64-bit) floating-point value `a` to all elements of returned vector.",N,[[["f64"]],["__m256d"]]],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",N,N],[5,"_m_paddw","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u32"]],["i32"]]],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values highest to lowest.",N,[[["f32"],["f32"],["f32"],["f32"]],["__m128"]]],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",N,N],[5,"_mm_unpackhi_pi8","","Unpacks the upper four elements from two `i8x8` vectors and interleaves them into the result: `[a.4, b.4, a.5, b.5, a.6, b.6, a.7, b.7]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hsub_pi16","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in `b`, Then zero elements according to `imm8`.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_testc_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_mm_cvtps_pi32","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m64"]]],[5,"_mm_cvttss_si32","","Convert the lowest 32 bit float in the input vector to a 32 bit integer with truncation.",N,[[["__m128"]],["i32"]]],[5,"_mm_setr_pi8","","Set packed 8-bit integers in dst with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m64"]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a` to 64-bit integers. The upper four elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_rdseed64_step","","Read a 64-bit NIST SP800-90B and SP800-90C compliant random value and store in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u64"]],["i32"]]],[5,"_mm_unpackhi_pi16","","Unpacks the upper two elements from two `i16x4` vectors and interleaves them into the result: `[a.2, b.2, a.3, b.3]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_mm_tzcnt_64","","Counts the number of trailing least significant zero bits.",N,[[["u64"]],["i64"]]],[17,"_MM_MASK_INVALID","","See `_mm_setcsr`",N,N],[5,"_mm256_max_epi32","","Compare packed 32-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",N,N],[5,"_mm_cmpestrs","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if any character in a was null, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_shuffle_epi32","","Shuffle 32-bit integers in 128-bit lanes of `a` using the control in `imm8`.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blend_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using control mask `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm_add_epi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_addsub_pd","","Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_xsaves64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`",N,N],[5,"_MM_SET_EXCEPTION_MASK","","See `_mm_setcsr`",N,N],[5,"_mm256_undefined_pd","","Return vector of type `__m256d` with undefined elements.",N,[[],["__m256d"]]],[17,"_XCR_XFEATURE_ENABLED_MASK","","`XFEATURE_ENABLED_MASK` for `XCR`",N,N],[5,"_mm_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_load_ps","","Load four `f32` values from aligned memory into a `__m128`. If the pointer is not aligned to a 128-bit boundary (16 bytes) a general protection fault will be triggered (fatal program crash).",N,N],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_movemask_ps","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128"]],["i32"]]],[5,"_bswap","","Return an integer with the reversed byte order of x",N,[[["i32"]],["i32"]]],[5,"_tzcnt_u64","","Counts the number of trailing least significant zero bits.",N,[[["u64"]],["u64"]]],[17,"_SIDD_BIT_MASK","","Mask only: return the bit mask",N,N],[5,"_m_pmulhuw","","Multiplies packed 16-bit unsigned integer values and writes the high-order 16 bits of each 32-bit product to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_MM_EXCEPT_MASK","","See `_MM_GET_EXCEPTION_STATE`",N,N],[5,"_mm256_mask_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_cmpeq_epi16","","Compare packed 16-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_setzero_pd","","Return vector of type __m256d with all elements set to zero.",N,[[],["__m256d"]]],[5,"_mm_andnot_pd","","Compute the bitwise NOT of `a` and then AND with `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_max_epi32","","Compare packed 32-bit integers in `a` and `b`, and return packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi8","","Compute the absolute value of packed 8-bit signed integers in `a` and return the unsigned results.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi64","","Shift packed 64-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtsd_si32","","Convert the lower double-precision (64-bit) floating-point element in a to a 32-bit integer.",N,[[["__m128d"]],["i32"]]],[17,"_SIDD_CMP_RANGES","","For each character in `a`, determine if `b[0] <= c <= b[1] or b[1] <= c <= b[2]...`",N,N],[5,"_mm256_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of `a` using the control in `imm8`. The low 64 bits of 128-bit lanes of `a` are copied to the output.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_setr_epi32","","Set packed 32-bit integers with the supplied values in reverse order.",N,[[["i32"],["i32"],["i32"],["i32"]],["__m128i"]]],[5,"_mm256_load_si256","","Load 256-bits of integer data from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_hadd_pi32","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[2 x i32]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_permutevar8x32_ps","","Shuffle eight 32-bit foating-point elements in `a` across lanes using the corresponding 32-bit integer index in `idx`.",N,[[["__m256"],["__m256i"]],["__m256"]]],[5,"__get_cpuid_max","","Returns the highest-supported `leaf` (`EAX`) and sub-leaf (`ECX`) `cpuid` values.",N,N],[5,"_mm_movepi64_pi64","","Returns the lower 64 bits of a 128-bit integer vector as a 64-bit integer.",N,[[["__m128i"]],["__m64"]]],[5,"_mm_permute_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` using the control in `imm8`.",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_load1_pd","","Load a double-precision (64-bit) floating-point element from memory into both elements of returned vector.",N,N],[5,"_mm_min_epi8","","Compare packed 8-bit integers in `a` and `b` and return packed minimum values in dst.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_min_ss","","Compare the first single-precision (32-bit) floating-point element of `a` and `b`, and return the minimum value in the first element of the return value, the other elements are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_add_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtsd_si64x","","Alias for `_mm_cvtsd_si64`",N,[[["__m128d"]],["i64"]]],[5,"_mm_shuffle_pi16","","Shuffles the 4 16-bit integers from a 64-bit integer vector to the destination, as specified by the immediate value operand.",N,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_cmpneq_ss","","Compare the lowest `f32` of both inputs for inequality. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",N,[[["__m128"]],["i32"]]],[5,"_mm_extract_epi16","","Return the `imm8` element of `a`.",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit __m128i vector, returning a vector containing its value in its first position, and its index in its second position; all other elements are set to zero.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_pi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point element in `b` up to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the intrinsic result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_min_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_store_pd1","","Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_sll_epi32","","Shift packed 32-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",N,[[["__m256"]],["__m128"]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into memory using `mask`.",N,N],[5,"_mm_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm_undefined_ps","","Return vector of type __m128 with undefined elements.",N,[[],["__m128"]]],[5,"_mm_load_pd","","Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into the returned vector. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_blci_u64","","Sets all bits of `x` to 1 except for the least significant zero bit.",N,[[["u64"]],["u64"]]],[5,"_xrstor64","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_cmpnle_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not less than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpge_pd","","Compare corresponding elements in `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",N,N],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_store1_pd","","Store the lower double-precision (64-bit) floating-point element from `a` into 2 contiguous elements in memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cmpestrz","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if any character in `b` was null, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point elements in `b` from `a`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_set_pd","","Set packed double-precision (64-bit) floating-point elements in the return value with the supplied values.",N,[[["f64"],["f64"]],["__m128d"]]],[5,"_mm256_cvtepi32_pd","","Convert packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128i"]],["__m256d"]]],[5,"_mm_maskload_ps","","Load packed single-precision (32-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm_shuffle_ps","","Shuffle packed single-precision (32-bit) floating-point elements in `a` and `b` using `mask`.",N,[[["__m128"],["__m128"],["u32"]],["__m128"]]],[5,"_mm_add_sd","","Return a new vector with the low element of `a` replaced by the sum of the low elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_set_epi8","","Set packed 8-bit integers with the supplied values.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m128i"]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a` and the rest set to zero.",N,[[["f32"]],["__m128"]]],[5,"_mm256_loadu2_m128","","Load two 128-bit values (composed of 4 packed single-precision (32-bit) floating-point elements) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm_adds_pu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpge_ss","","Compare the lowest `f32` of both inputs for greater than or equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is greater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` within 256-bit lanes using the control in `b`.",N,[[["__m256d"],["__m256i"]],["__m256d"]]],[5,"_mm_ucomieq_sd","","Compare the lower element of `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",N,N],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]` into a 128-bit floating-point vector of `[4 x float]`.",N,[[["__m128d"]],["__m128"]]],[5,"_mm256_testz_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using mask `imm4`",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_and_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_getcsr","","Get the unsigned 32-bit value of the MXCSR control and status register.",N,[[],["u32"]]],[5,"_mm_lfence","","Perform a serializing operation on all load-from-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm_cvt_ps2pi","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m64"]]],[5,"_mm_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",N,N],[5,"_mm_ucomilt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_comieq_sd","","Compare the lower element of `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",N,N],[5,"_mm_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cmpgt_epi32","","Compare packed 32-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_store_si128","","Store 128-bits of integer data from `a` into memory.",N,N],[5,"_mm256_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of a 128-bit vector of `[2 x double]`. The high-order bits are copied from the high-order bits of the first operand.",N,N],[5,"_mm256_extractf128_si256","","Extract 128 bits (composed of integer data) from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_blcs_u32","","Sets the least significant zero bit of `x`.",N,[[["u32"]],["u32"]]],[3,"__m256i","","256-bit wide integer vector type, x86-specific",N,N],[5,"_mm_set1_epi16","","Broadcast 16-bit integer `a` to all elements.",N,[[["i16"]],["__m128i"]]],[5,"_mm_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in `a` to packed 16-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_blsmsk_u64","","Get mask up to lowest set bit.",N,[[["u64"]],["u64"]]],[5,"_mm_set1_epi8","","Broadcast 8-bit integer `a` to all elements.",N,[[["i8"]],["__m128i"]]],[5,"_mm_ucomigt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_avg_pu16","","Computes the rounded averages of the packed unsigned 16-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_maskload_ps","","Load packed single-precision (32-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_mm256_movemask_ps","","Set each bit of the returned mask based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in `a`.",N,[[["__m256"]],["i32"]]],[5,"_mm256_mul_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_maskstore_ps","","Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.",N,N],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",N,N],[5,"_mm_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_set_epi16","","Set packed 16-bit integers with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["__m128i"]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b` occupies the higher half of result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_mask_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_setr_m128d","","Set packed __m256d returned vector with the supplied values.",N,[[["__m128d"],["__m128d"]],["__m256d"]]],[5,"_mm_cmp_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_store_si256","","Store 256-bits of integer data from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper 128 bits of the result are undefined.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi64","","Compare packed 64-bit integers in `a` and `b` for equality.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_MASK_DENORM","","See `_mm_setcsr`",N,N],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",N,[[["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm256_broadcast_pd","","Broadcast 128 bits from memory (composed of 2 packed double-precision (64-bit) floating-point elements) to all elements of the returned vector.",N,[[["__m128d"]],["__m256d"]]],[5,"_m_paddusw","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sfence","","Perform a serializing operation on all store-to-memory instructions that were issued prior to this instruction.",N,N],[5,"_mm_max_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastb_epi8","","Broadcast the low packed 8-bit integer from `a` to all elements of the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_cvtsd_f64","","Return the lower double-precision (64-bit) floating-point element of \"a\".",N,[[["__m128d"]],["f64"]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",N,[[["__m128"]],["i32"]]],[5,"_mm256_setr_m128","","Set packed __m256 returned vector with the supplied values.",N,[[["__m128"],["__m128"]],["__m256"]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",N,[[["__m256"]],["__m256i"]]],[5,"_mm_adds_epu8","","Add packed unsigned 8-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_MM_GET_ROUNDING_MODE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_m_pshufw","","Shuffles the 4 16-bit integers from a 64-bit integer vector to the destination, as specified by the immediate value operand.",N,[[["__m64"],["i32"]],["__m64"]]],[5,"_blsr_u64","","Resets the lowest set bit of `x`.",N,[[["u64"]],["u64"]]],[5,"_mm_cmpeq_ss","","Compare the lowest `f32` of both inputs for equality. The lowest 32 bits of the result will be `0xffffffff` if the two inputs are equal, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_xor_si128","","Compute the bitwise XOR of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_set1_pi16","","Broadcast 16-bit integer a to all all elements of dst.",N,[[["i16"]],["__m64"]]],[5,"_mm_rsqrt_ps","","Return the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_sll_epi16","","Shift packed 16-bit integers in `a` left by `count` while shifting in zeros, and return the result",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x float]` from a 128-bit floating-point vector of `[4 x float]`. The lower 128 bits contain the value of the source vector. The upper 128 bits are set to zero.",N,[[["__m128"]],["__m256"]]],[5,"_mm256_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_maskstore_pd","","Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",N,N],[5,"_mm_mask_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_MM_GET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_mm256_undefined_ps","","Return vector of type `__m256` with undefined elements.",N,[[],["__m256"]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_broadcast_ss","","Broadcast a single-precision (32-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f32"]],["__m128"]]],[5,"_mm256_unpackhi_pd","","Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cmpord_sd","","Return a new vector with the low element of `a` replaced by the result of comparing both of the lower elements of `a` and `b` to `NaN`. If neither are equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0` otherwise.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_hadds_epi16","","Horizontally add adjacent pairs of 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp counter.",N,[[],["i64"]]],[5,"_mm_srl_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_undefined_si256","","Return vector of type __m256i with undefined elements.",N,[[],["__m256i"]]],[5,"_blcs_u64","","Sets the least significant zero bit of `x`.",N,[[["u64"]],["u64"]]],[5,"_mm_slli_epi64","","Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmple_pd","","Compare corresponding elements in `a` and `b` for less-than-or-equal",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit integers, and store the results in dst.",N,[[["__m128i"]],["__m256i"]]],[5,"_pext_u32","","Gathers the bits of `x` specified by the `mask` into the contiguous low order bit positions of the result.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm256_storeu_ps","","Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm256_set1_epi8","","Broadcast 8-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastb`.",N,[[["i8"]],["__m256i"]]],[5,"_mm256_round_pd","","Round packed double-precision (64-bit) floating point elements in `a` according to the flag `b`. The value of `b` may be as follows:",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all elements of the 128-bit returned value",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_cmp_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_xsaves","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`",N,N],[5,"_mm256_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cvtepi32_pd","","Convert the lower two packed 32-bit integers in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128i"]],["__m128d"]]],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",N,N],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_sd","","Return a new vector with the low element of `a` replaced by multiplying the low elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_broadcastd_epi32","","Broadcast the low packed 32-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_set1_epi32","","Broadcast 32-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastd`.",N,[[["i32"]],["__m256i"]]],[5,"_mm256_packus_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the high-order values of the two `__m128d` interleaved input elements, i.e.:",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_rsqrt_ps","","Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in `a`, and return the results. The maximum relative error for this approximation is less than 1.5*2^-12.",N,[[["__m256"]],["__m256"]]],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",N,N],[5,"_mm_sign_epi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_pext_u64","","Gathers the bits of `x` specified by the `mask` into the contiguous low order bit positions of the result.",N,[[["u64"],["u64"]],["u64"]]],[17,"_MM_FLUSH_ZERO_ON","","See `_mm_setcsr`",N,N],[5,"_mm_cvtpu8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_srai_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cvtpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` down to an integer value, and store the results as packed single-precision floating-point elements.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_extractf128_pd","","Extract 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a`, selected with `imm8`.",N,[[["__m256d"],["i32"]],["__m128d"]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of `x` and clears all bits above that bit.",N,[[["u64"]],["u64"]]],[5,"_mm_maskload_epi32","","Load packed 32-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",N,N],[5,"_mm_stream_sd","","Non-temporal store of `a.0` into `p`.",N,N],[5,"_mm_cmpge_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is greater than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_setzero_ps","","Return vector of type __m256 with all elements set to zero.",N,[[],["__m256"]]],[5,"_mm_or_pd","","Compute the bitwise OR of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_broadcastss_ps","","Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of the 256-bit returned value.",N,[[["__m128"]],["__m256"]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit integers.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_UNORD_S","","Unordered (signaling)",N,N],[5,"_mm_set1_epi64x","","Broadcast 64-bit integer `a` to all elements.",N,[[["i64"]],["__m128i"]]],[5,"_mm256_loadu_pd","","Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from `p` into all elements.",N,N],[5,"_mm_cmpngt_ss","","Compare the lowest `f32` of both inputs for not-greater-than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not greater than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_maskload_epi64","","Load packed 64-bit integers from memory pointed by `mem_addr` using `mask` (elements are zeroed out when the highest bit is not set in the corresponding element).",N,N],[5,"_mm256_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cmpgt_epi64","","Compare packed 64-bit integers in `a` and `b` for greater-than, return the results.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_xsavec","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm256_maskstore_ps","","Store packed single-precision (32-bit) floating-point elements from `a` into memory using `mask`.",N,N],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",N,N],[5,"_mm_cmpnlt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not less than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ss","","Compare the lowest `f32` of both inputs for greater than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is greater than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvttsd_si64","","Convert the lower double-precision (64-bit) floating-point element in `a` to a 64-bit integer with truncation.",N,[[["__m128d"]],["i64"]]],[5,"_mm_packs_epi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvtpd_pi32","","Converts the two double-precision floating-point elements of a 128-bit vector of `[2 x double]` into two signed 32-bit integer values, returned in a 64-bit vector of `[2 x i32]`.",N,[[["__m128d"]],["__m64"]]],[5,"_mm_adds_epi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpestri","","Compare packed strings `a` and `b` with lengths `la` and `lb` using the control in `imm8` and return the generated index. Similar to [`_mm_cmpistri`] with the exception that [`_mm_cmpistri`] implicitly determines the length of `a` and `b`.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_m_pmovmskb","","Takes the most significant bit from each 8-bit element in a 64-bit integer vector to create a 16-bit mask value. Zero-extends the value to 32-bit integer and writes it to the destination.",N,[[["__m64"]],["i32"]]],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",N,N],[5,"_mm_cmpnge_pd","","Compare corresponding elements in `a` and `b` for not-greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtss_si64","","Convert the lowest 32 bit float in the input vector to a 64 bit integer.",N,[[["__m128"]],["i64"]]],[5,"_m_paddsb","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",N,N],[5,"_mm_hadd_ps","","Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_xrstor","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cmpnle_pd","","Compare corresponding elements in `a` and `b` for not-less-than-or-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",N,[[["__m256d"]],["__m256"]]],[5,"_MM_GET_EXCEPTION_MASK","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_blcic_u32","","Sets the least significant zero bit of `x` and clears all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm256_srai_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_setr_m128i","","Set packed __m256i returned vector with the supplied values.",N,[[["__m128i"],["__m128i"]],["__m256i"]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed vectors of 8 32-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in locations of indices 0, 1, 4, 5; while sums of elements from `b` are locations 2, 3, 6, 7.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_setr_epi32","","Set packed 32-bit integers in returned vector with the supplied values in reverse order.",N,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["__m256i"]]],[5,"_andn_u64","","Bitwise logical `AND` of inverted `a` with `b`.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm_setr_pi16","","Set packed 16-bit integers in dst with the supplied values in reverse order.",N,[[["i16"],["i16"],["i16"],["i16"]],["__m64"]]],[5,"_mm_loadu_si128","","Load 128-bits of integer data from memory into a new vector.",N,N],[5,"_mm256_maskstore_pd","","Store packed double-precision (64-bit) floating-point elements from `a` into memory using `mask`.",N,N],[5,"_mm256_blend_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p` and the other elements set to zero.",N,N],[5,"_mm_set_sd","","Copy double-precision (64-bit) floating-point element `a` to the lower element of the packed 64-bit return value.",N,[[["f64"]],["__m128d"]]],[17,"_MM_FLUSH_ZERO_OFF","","See `_mm_setcsr`",N,N],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `imm2`",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_sllv_epi32","","Shift packed 32-bit integers in `a` left by the amount specified by the corresponding element in `count` while shifting in zeros, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_shuffle_epi8","","Shuffle bytes from `a` according to the content of `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmplt_pd","","Compare corresponding elements in `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_addsub_ps","","Alternatively add and subtract packed single-precision (32-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m256d"]],["__m128"]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm_ucomieq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are equal, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpge_sd","","Return a new vector with the low element of `a` replaced by the greater-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_sha256msg1_epu32","","Perform an intermediate calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_testz_ps","","Compute the bitwise AND of 256 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256"],["__m256"]],["i32"]]],[5,"_mm256_andnot_pd","","Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in `a` and then AND with `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_srav_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x float]`.",N,[[["__m256"]],["f32"]]],[5,"_mm_avg_pu8","","Computes the rounded averages of the packed unsigned 8-bit integer values and writes the averages to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_subs_pu8","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_testnzc_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_cmpgt_epi32","","Compare packed 32-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of a 128-bit vector of `[2 x double]`. The low-order bits are copied from the low-order bits of the first operand.",N,N],[5,"_mm_ucomilt_sd","","Compare the lower element of `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_pdep_u32","","Scatter contiguous low order bits of `a` to the result at the positions specified by the `mask`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm256_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer vector are all ones.",N,[[["__m128i"]],["i32"]]],[5,"_mm256_extracti128_si256","","Extract 128 bits (of integer data) from `a` selected with `imm8`.",N,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm_add_pi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hadd_pi16","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_xsave","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_andnot_si128","","Compute the bitwise NOT of 128 bits (representing integer data) in `a` and then AND with `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpistrs","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and returns `1` if any character in `a` was null, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_permute_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `imm8`.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_broadcastb_epi8","","Broadcast the low packed 8-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_mask_i32gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed vectors of 4 64-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in even locations, while sums of elements from `b` are returned in odd locations.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_rdrand64_step","","Read a hardware generated 64-bit random value and store the result in val. Return 1 if a random value was generated, and 0 otherwise.",N,[[["u64"]],["i32"]]],[5,"_mm_cmplt_epi16","","Compare packed 16-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_rcp_ps","","Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`, and return the results. The maximum relative error for this approximation is less than 1.5*2^-12.",N,[[["__m256"]],["__m256"]]],[5,"_mm256_hadd_epi32","","Horizontally add adjacent pairs of 32-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpeq_pd","","Compare corresponding elements in `a` and `b` for equality.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_set_epi64x","","Set packed 64-bit integers in returned vector with the supplied values.",N,[[["i64"],["i64"],["i64"],["i64"]],["__m256i"]]],[5,"_mm_sign_epi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Elements in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_bzhi_u64","","Zero higher bits of `a` >= `index`.",N,[[["u64"],["u32"]],["u64"]]],[17,"_MM_ROUND_TOWARD_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm256_set_epi8","","Set packed 8-bit integers in returned vector with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m256i"]]],[5,"_mm256_mul_ps","","Add packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element of a 128-bit integer vector and clears the upper element.",N,N],[5,"_mm_movemask_pi8","","Takes the most significant bit from each 8-bit element in a 64-bit integer vector to create a 16-bit mask value. Zero-extends the value to 32-bit integer and writes it to the destination.",N,[[["__m64"]],["i32"]]],[5,"_mm256_maddubs_epi16","","Vertically multiply each unsigned 8-bit integer from `a` with the corresponding signed 8-bit integer from `b`, producing intermediate signed 16-bit integers. Horizontally add adjacent pairs of intermediate signed 16-bit integers",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_set_pi32","","Set packed 32-bit integers in dst with the supplied values.",N,[[["i32"],["i32"]],["__m64"]]],[5,"_mm_fmadd_sd","","Multiply the lower double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the upper element from `a` to the upper elements of the result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_sll_epi64","","Shift packed 64-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m256"]],["__m256i"]]],[17,"_MM_EXCEPT_OVERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm256_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm256_storeu2_m128d","","Store the high and low 128-bit halves (each composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",N,N],[5,"_mm256_sign_epi8","","Negate packed 8-bit integers in `a` when the corresponding signed 8-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_undefined_si128","","Return vector of type __m128i with undefined elements.",N,[[],["__m128i"]]],[5,"_mm_sha256msg2_epu32","","Perform the final calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from `a` and `b`, and return the result.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_andnot_ps","","Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in `a` and then AND with `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp counter and the `IA32_TSC_AUX MSR`.",N,N],[5,"_mm_and_pd","","Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",N,N],[5,"_mm_cmpord_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. Returns four floats that have one of two possible bit patterns. The element in the output vector will be `0xffffffff` if the input elements in `a` and `b` are ordered (i.e., neither of them is a NaN), or 0 otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_movemask_pd","","Set each bit of the returned mask based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in `a`.",N,[[["__m256d"]],["i32"]]],[5,"_mm256_load_ps","","Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into result. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cvtsi64x_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i64"]],["__m128d"]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",N,[[["f32"]],["__m128"]]],[5,"_mm_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_add_pd","","Add packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",N,N],[5,"_mm256_insertf128_pd","","Copy `a` to result, then insert 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `b` into result at the location specified by `imm8`.",N,[[["__m256d"],["__m128d"],["i32"]],["__m256d"]]],[5,"_m_psubusb","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_mul_epi32","","Multiply the low 32-bit integers from each packed 64-bit element in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtss_si32","","Convert the lowest 32 bit float in the input vector to a 32 bit integer.",N,[[["__m128"]],["i32"]]],[5,"_mm_cvtsd_si64","","Convert the lower double-precision (64-bit) floating-point element in a to a 64-bit integer.",N,[[["__m128d"]],["i64"]]],[5,"_mm_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_hadd_pd","","Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_storeu_pd","","Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_or_si128","","Compute the bitwise OR of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_dp_ps","","Conditionally multiply the packed single-precision (32-bit) floating-point elements in `a` and `b` using the high 4 bits in `imm8`, sum the four products, and conditionally return the sum  using the low 4 bits of `imm8`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm256_or_si256","","Compute the bitwise OR of 256 bits (representing integer data) in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_srlv_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi32","","Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers using signed saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",N,N],[5,"_mm_cmplt_epi32","","Compare packed 32-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_m_paddb","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sra_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_blcic_u64","","Sets the least significant zero bit of `x` and clears all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_pause","","Provide a hint to the processor that the code sequence is a spin-wait loop.",N,N],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_maskload_pd","","Load packed double-precision (64-bit) floating-point elements from memory into result using `mask` (elements are zeroed out when the high bit of the corresponding element is not set).",N,N],[5,"_pdep_u64","","Scatter contiguous low order bits of `a` to the result at the positions specified by the `mask`.",N,[[["u64"],["u64"]],["u64"]]],[17,"_MM_ROUND_MASK","","See `_MM_GET_ROUNDING_MODE`",N,N],[5,"_mm256_insert_epi64","","Copy `a` to result, and insert the 64-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i64"],["i32"]],["__m256i"]]],[5,"_mm_rsqrt_ss","","Return the approximate reciprocal square root of the fist single-precision (32-bit) floating-point elements in `a`, the other elements are unchanged.",N,[[["__m128"]],["__m128"]]],[5,"_m_pminub","","Compares the packed 8-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pd","","Compare corresponding elements in `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_andn_u32","","Bitwise logical `AND` of inverted `a` with `b`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm256_div_pd","","Compute the division of each of the 4 packed 64-bit floating-point elements in `a` by the corresponding packed elements in `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`. Positive differences greater than 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are saturated to 8000h.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sqrt_pd","","Return the square root of packed double-precision (64-bit) floating point elements in `a`.",N,[[["__m256d"]],["__m256d"]]],[5,"_mm_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in `a` to packed 32-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`, and return the results.",N,[[["__m256"]],["__m256"]]],[5,"_mm256_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`.",N,[[["__m256i"],["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_unpacklo_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the lower half of `a` and `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_xsavec64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm256_set_m128","","Set packed __m256 returned vector with the supplied values.",N,[[["__m128"],["__m128"]],["__m256"]]],[5,"_mm_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point elements in \"a\" to packed single-precision (32-bit) floating-point elements",N,[[["__m128d"]],["__m128"]]],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters (Default)",N,N],[5,"_mm256_store_ps","","Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 32-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_cmpistra","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if `b` did not contain a null character and the resulting mask was zero, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_min_sd","","Return a new vector with the low element of `a` replaced by the minimum of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_SIDD_MOST_SIGNIFICANT","","Index only: return the most significant bit",N,N],[5,"_mm_sub_pi32","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpestrc","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if the resulting mask was non-zero, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm256_srli_epi64","","Shift packed 64-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_andnot_si256","","Compute the bitwise NOT of 256 bits (representing integer data) in `a` and then AND with `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_crc32_u64","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 64-bit integer `v`.",N,[[["u64"],["u64"]],["u64"]]],[5,"_mm_aesenclast_si128","","Perform the last round of an AES encryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_bzhi_u32","","Zero higher bits of `a` >= `index`.",N,[[["u32"],["u32"]],["u32"]]],[5,"_mm_and_si128","","Compute the bitwise AND of 128 bits (representing integer data) in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit) floating-point elements from \"a\", and return the results.",N,[[["__m256d"]],["__m256d"]]],[5,"_mm256_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and alternatively subtract and add packed elements in `c` from/to the intermediate result.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",N,N],[5,"_mm256_xor_pd","","Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cmpnge_ss","","Compare the lowest `f32` of both inputs for not-greater-than-or-equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not greater than or equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtt_ps2pi","","Convert the two lower packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m64"]]],[5,"_mm_rcp_ps","","Return the approximate reciprocal of packed single-precision (32-bit) floating-point elements in `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm256_sign_epi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_hadd_epi16","","Horizontally add adjacent pairs of 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the low-order values of the two `__m128d` interleaved input elements, i.e.:",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_sqrt_ps","","Return the square root of packed single-precision (32-bit) floating point elements in `a`.",N,[[["__m256"]],["__m256"]]],[5,"_mm_shuffle_pi8","","Shuffle packed 8-bit integers in `a` according to shuffle control mask in the corresponding 8-bit element of `b`, and return the results",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmple_ss","","Compare the lowest `f32` of both inputs for less than or equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is less than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_loadu_pd","","Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into the returned vector. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` using the control in `b`.",N,[[["__m128"],["__m128i"]],["__m128"]]],[5,"_mm_slli_epi32","","Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_move_epi64","","Return a vector where the low element is extracted from `a` and its upper element is zero.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_setr_epi64x","","Set packed 64-bit integers in returned vector with the supplied values in reverse order.",N,[[["i64"],["i64"],["i64"],["i64"]],["__m256i"]]],[5,"_mm_store_ps","","Store four 32-bit floats into aligned memory.",N,N],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x double]` to a memory location.",N,N],[5,"_m_pinsrw","","Copies data from the 64-bit vector of `[4 x i16]` to the destination, and inserts the lower 16-bits of an integer operand at the 16-bit offset specified by the immediate operand `n`.",N,[[["__m64"],["i32"],["i32"]],["__m64"]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_comieq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_set1_epi32","","Broadcast 32-bit integer `a` to all elements.",N,[[["i32"]],["__m128i"]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` down to an integer value, and store the results as packed double-precision floating-point elements.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm256_lddqu_si256","","Load 256-bits of integer data from unaligned memory into result. This intrinsic may perform better than `_mm256_loadu_si256` when the data crosses a cache line boundary.",N,N],[5,"_mm_ucomile_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is less than or equal to the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see `vendor::_MM_SET_ROUNDING_MODE`",N,N],[5,"_mm_cmpgt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is greater than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sha256rnds2_epu32","","Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from `a`, an initial SHA256 state (A,B,E,F) from `b`, and a pre-computed sum of the next 2 round message values (unsigned 32-bit integers) and the corresponding round constants from `k`, and store the updated SHA256 state (A,B,E,F) in dst.",N,[[["__m128i"],["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_max_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_insert_epi8","","Copy `a` to result, and insert the 8-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i8"],["i32"]],["__m256i"]]],[5,"_mm_cmpgt_pi32","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_broadcastsi128_si256","","Broadcast 128 bits of integer data from a to all 128-bit lanes in the 256-bit returned value.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm_testz_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_cvtsi128_si64x","","Return the lowest element of `a`.",N,[[["__m128i"]],["i64"]]],[17,"_MM_EXCEPT_INVALID","","See `_mm_setcsr`",N,N],[3,"CpuidResult","","Result of the `cpuid` instruction.",N,N],[12,"eax","","EAX register.",103,N],[12,"ebx","","EBX register.",103,N],[12,"ecx","","ECX register.",103,N],[12,"edx","","EDX register.",103,N],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 16-bit integer `v`.",N,[[["u32"],["u16"]],["u32"]]],[5,"_mm_min_pu8","","Compares the packed 8-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_set1_ps","","Broadcast single-precision (32-bit) floating-point value `a` to all elements of returned vector.",N,[[["f32"]],["__m256"]]],[5,"_mm_cmpord_ss","","Check if the lowest `f32` of both inputs are ordered. The lowest 32 bits of the result will be `0xffffffff` if neither of `a.extract(0)` or `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_srl_epi64","","Shift packed 64-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_storeu2_m128i","","Store the high and low 128-bit halves (each composed of integer data) from `a` into memory two different 128-bit locations. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm256_alignr_epi8","","Concatenate pairs of 16-byte blocks in `a` and `b` into a 32-byte temporary result, shift the result right by `n` bytes, and return the low 16 bytes.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmp_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",N,N],[5,"_mm256_permute2f128_si256","","Shuffle 258-bits (composed of integer data) selected by `imm8` from `a` and `b`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_aesimc_si128","","Perform the `InvMixColumns` transformation on `a`.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_cvtsi128_si64","","Return the lowest element of `a`.",N,[[["__m128i"]],["i64"]]],[5,"_mm_mask_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_setr_epi64","","Constructs a 128-bit integer vector, initialized in reverse order with the specified 64-bit integral values.",N,[[["__m64"],["__m64"]],["__m128i"]]],[5,"_mm_set_pi8","","Set packed 8-bit integers in dst with the supplied values.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m64"]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed vectors of 4 64-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in even locations, while sums of elements from `b` are returned in odd locations.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_permute_pd","","Shuffle double-precision (64-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmpeq_epi8","","Compare packed 8-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_srai_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign bits.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_set1_epi64x","","Broadcast 64-bit integer `a` to all elements of returned vector. This intrinsic may generate the `vpbroadcastq`.",N,[[["i64"]],["__m256i"]]],[3,"__m256","","256-bit wide set of eight `f32` types, x86-specific",N,N],[5,"has_cpuid","","Does the host support the `cpuid` instruction?",N,[[],["bool"]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a` to 64-bit integers. The upper twelve elements of `a` are unused.",N,[[["__m128i"]],["__m256i"]]],[5,"_m_psubd","","Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_srli_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[17,"_MM_EXCEPT_UNDERFLOW","","See `_mm_setcsr`",N,N],[5,"_mm256_testc_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x double]`.",N,[[["__m256d"]],["f64"]]],[5,"_mm_store1_ps","","Store the lowest 32 bit float of `a` repeated four times into aligned memory.",N,N],[5,"_mm_add_epi32","","Add packed 32-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_permute_ps","","Shuffle single-precision (32-bit) floating-point elements in `a` within 128-bit lanes using the control in `imm8`.",N,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_unpacklo_pi16","","Unpacks the lower two elements from two `i16x4` vectors and interleaves them into the result: `[a.0 b.0 a.1 b.1]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm256_div_ps","","Compute the division of each of the 8 packed 32-bit floating-point elements in `a` by the corresponding packed elements in `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"__cpuid","","See `__cpuid_count`.",N,[[["u32"]],["cpuidresult"]]],[5,"_mm256_broadcast_ss","","Broadcast a single-precision (32-bit) floating-point element from memory to all elements of the returned vector.",N,[[["f32"]],["__m256"]]],[5,"_mm_cmplt_epi8","","Compare packed 8-bit integers in `a` and `b` for less-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_cvtpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m256d"]],["__m128i"]]],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negate results only before the end of the string",N,N],[5,"_mm_load_si128","","Load 128-bits of integer data from memory into a new vector.",N,N],[5,"_mm_cmplt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is less than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_max_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return packed maximum values",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of `x` and clears all other bits.",N,[[["u64"]],["u64"]]],[5,"_mm_cmpgt_pi16","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_permute4x64_pd","","Shuffle 64-bit floating-point elements in `a` across lanes using the control in `imm8`.",N,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the accumulated CRC32 value for unsigned 8-bit integer `v`.",N,[[["u32"],["u8"]],["u32"]]],[5,"_mm_loadl_pi","","Load two floats from `p` into the lower half of a `__m128`. The upper half is copied from the upper half of `a`.",N,N],[5,"_mm256_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half of each 128-bit lane in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_loaddup_pd","","Load a double-precision (64-bit) floating-point element from memory into both elements of return vector.",N,N],[5,"_mm_broadcastss_ps","","Broadcast the low single-precision (32-bit) floating-point element from `a` to all elements of the 128-bit returned value.",N,[[["__m128"]],["__m128"]]],[5,"_mm_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128d"]],["__m128i"]]],[5,"_mm_extract_epi64","","Extract an 64-bit integer from `a` selected with `imm8`",N,[[["__m128i"],["i32"]],["i64"]]],[17,"_CMP_TRUE_US","","True (unordered, signaling)",N,N],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",N,N],[5,"_mm256_cmpgt_epi8","","Compare packed 8-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_cmp_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b` based on the comparison operand specified by `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_ucomineq_sd","","Compare the lower element of `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_bextr2_u32","","Extracts bits of `a` specified by `control` into the least significant bits of the result.",N,[[["u32"],["u32"]],["u32"]]],[5,"_bswap64","","Return an integer with the reversed byte order of x",N,[[["i64"]],["i64"]]],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",N,N],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed vectors of 8 32-bit floating points `a` and `b`. In the result, sums of elements from `a` are returned in locations of indices 0, 1, 4, 5; while sums of elements from `b` are locations 2, 3, 6, 7.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_blsr_u32","","Resets the lowest set bit of `x`.",N,[[["u32"]],["u32"]]],[5,"_fxrstor64","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU registers from the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_aesdeclast_si128","","Perform the last round of an AES decryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_srav_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in sign bits.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x double]` from two 128-bit vector parameters of `[2 x double]`, using the immediate-value parameter as a specifier.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result.",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_slli_si256","","Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_cmpgt_pi8","","Compares whether each element of `a` is greater than the corresponding element of `b` returning `0` for `false` and `-1` for `true`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point element in `b` using the `rounding` parameter, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copy the upper element from `a` to the upper element of the intrinsic result. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_move_ss","","Return a `__m128` with the first component from `b` and the remaining components from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpunord_pd","","Compare corresponding elements in `a` and `b` to see if either is `NaN`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_undefined_pd","","Return vector of type __m128d with undefined elements.",N,[[],["__m128d"]]],[5,"_mm_max_pu8","","Compares the packed 8-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of `a` using the control in `imm8`.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_ceil_ps","","Round packed single-precision (32-bit) floating point elements in `a` toward positive infinity.",N,[[["__m256"]],["__m256"]]],[5,"_mm_cvtpi8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_loadh_pi","","Set the upper two single-precision floating-point values with 64 bits of data loaded from the address `p`; the lower two values are passed through from `a`.",N,N],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_blsi_u64","","Extract lowest set isolated bit.",N,[[["u64"]],["u64"]]],[5,"_mm_extract_si64","","Extracts the bit range specified by `y` from the lower 64 bits of `x`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_sub_pd","","Subtract packed double-precision (64-bit) floating-point elements in `b` from packed elements in `a`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cvtpu16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_MM_GET_EXCEPTION_STATE","","See `_mm_setcsr`",N,[[],["u32"]]],[5,"_mm_cmpnlt_pd","","Compare corresponding elements in `a` and `b` for not-less-than.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_loadu_ps","","Load four `f32` values from memory into a `__m128`. There are no restrictions on memory alignment. For aligned memory `_mm_load_ps` may be faster.",N,N],[17,"_MM_FLUSH_ZERO_MASK","","See `_MM_GET_FLUSH_ZERO_MODE`",N,N],[5,"_blci_u32","","Sets all bits of `x` to 1 except for the least significant zero bit.",N,[[["u32"]],["u32"]]],[5,"_mm256_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in `imm8`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_xrstors64","","Perform a full or partial restore of the enabled processor states using the state information stored in memory at `mem_addr`.",N,N],[5,"_mm_subs_pu16","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpistrc","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return `1` if the resulting mask was non-zero, and `0` otherwise.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[5,"_mm_fnmadd_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to the lower element in `c`. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_broadcastsd_pd","","Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of the 128-bit returned value.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_cvtsi64_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i64"]],["__m128i"]]],[5,"_mm_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm256_loadu_ps","","Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm256_srlv_epi32","","Shift packed 32-bit integers in `a` right by the amount specified by the corresponding element in `count` while shifting in zeros,",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_packs_pi16","","Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers using signed saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",N,[[["__m256i"]],["__m256d"]]],[5,"_mm256_unpacklo_pd","","Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in `a` and `b`.",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_cvttss_si64","","Convert the lowest 32 bit float in the input vector to a 64 bit integer with truncation.",N,[[["__m128"]],["i64"]]],[5,"_mm_cvtsi32_si128","","Return a vector whose lowest element is `a` and all higher elements are `0`.",N,[[["i32"]],["__m128i"]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper 128 bits of the result are undefined.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm256_testz_si256","","Compute the bitwise AND of 256 bits (representing integer data) in `a` and `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if the result is zero, otherwise set `CF` to 0. Return the `ZF` value.",N,[[["__m256i"],["__m256i"]],["i32"]]],[5,"_mm_aesenc_si128","","Perform one round of an AES encryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomineq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are not equal, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_slli_epi32","","Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_max_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_hadds_pi16","","Horizontally add the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`. Positive sums greater than 7FFFh are saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_mulhi_epi16","","Multiply the packed 16-bit integers in `a` and `b`, producing intermediate 32-bit integers and returning the high 16 bits of the intermediate integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpistro","","Compare packed strings with implicit lengths in `a` and `b` using the control in `imm8`, and return bit `0` of the resulting bit mask.",N,[[["__m128i"],["__m128i"],["i32"]],["i32"]]],[17,"_MM_HINT_NTA","","See `_mm_prefetch`.",N,N],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in `a`.",N,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision (64-bit) floating-point elements in `a` to/from packed elements in `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_min_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_fxrstor","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU registers from the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[17,"_MM_EXCEPT_DENORM","","See `_mm_setcsr`",N,N],[5,"_mm_min_pi16","","Compares the packed 16-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hadds_epi16","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`. Positive sums greater than 7FFFh are saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_extract_epi16","","Extract a 16-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m256i"],["i32"]],["i16"]]],[5,"_mm_comige_sd","","Compare the lower element of `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_shuffle_epi8","","Shuffle bytes from `a` according to the content of `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_div_ps","","Divides __m128 vectors.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_unpacklo_pi8","","Unpacks the lower four elements from two `i8x8` vectors and interleaves them into the result: `[a.0, b.0, a.1, b.1, a.2, b.2, a.3, b.3]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) floating-point elements from `a`, and return the results.",N,[[["__m256"]],["__m256"]]],[5,"_mm256_set1_epi16","","Broadcast 16-bit integer `a` to all all elements of returned vector. This intrinsic may generate the `vpbroadcastw`.",N,[[["i16"]],["__m256i"]]],[5,"_mulx_u64","","Unsigned multiply without affecting flags.",N,[[["u64"],["u64"],["u64"]],["u64"]]],[17,"_MM_ROUND_UP","","See `_mm_setcsr`",N,N],[5,"_mm256_max_epu8","","Compare packed unsigned 8-bit integers in `a` and `b`, and return the packed maximum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_storeu_pd","","Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm256_set_m128d","","Set packed __m256d returned vector with the supplied values.",N,[[["__m128d"],["__m128d"]],["__m256d"]]],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",N,N],[5,"_m_pmaxub","","Compares the packed 8-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[17,"_SIDD_NEGATIVE_POLARITY","","Negate results",N,N],[5,"_mm256_sign_epi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Results are zeroed out when the corresponding element in `b` is zero.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cmpeq_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input elements were equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_min_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return packed minimum values.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_ps","","Unpack and interleave single-precision (32-bit) floating-point elements from the higher half of `a` and `b`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpgt_sd","","Return a new vector with the low element of `a` replaced by the greater-than comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_max_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and return packed maximum values",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[17,"_MM_EXCEPT_INEXACT","","See `_mm_setcsr`",N,N],[5,"_mm_setzero_si64","","Constructs a 64-bit integer vector initialized to zero.",N,[[],["__m64"]]],[5,"_mm256_set_epi32","","Set packed 32-bit integers in returned vector with the supplied values.",N,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["__m256i"]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128 bits of the result are undefined.",N,[[["__m128"]],["__m256"]]],[5,"_mm_cmpestra","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return `1` if `b` did not contain a null character and the resulting mask was zero, and `0` otherwise.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers.",N,[[["__m128"]],["__m128i"]]],[5,"_m_psubsb","","Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_set_pi16","","Set packed 16-bit integers in dst with the supplied values.",N,[[["i16"],["i16"],["i16"],["i16"]],["__m64"]]],[5,"_xgetbv","","Reads the contents of the extended control register `XCR` specified in `xcr_no`.",N,[[["u32"]],["u64"]]],[5,"_mm_sign_pi16","","Negate packed 16-bit integers in `a` when the corresponding signed 16-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpnle_ss","","Compare the lowest `f32` of both inputs for not-less-than-or-equal. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not less than or equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_broadcastsd_pd","","Broadcast the low double-precision (64-bit) floating-point element from `a` to all elements of the 256-bit returned value.",N,[[["__m128d"]],["__m256d"]]],[5,"_mm_fnmsub_ss","","Multiply the lower single-precision (32-bit) floating-point elements in `a` and `b`, and subtract packed elements in `c` from the negated intermediate result. Store the result in the lower element of the returned value, and copy the 3 upper elements from `a` to the upper elements of the result.",N,[[["__m128"],["__m128"],["__m128"]],["__m128"]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) floating-point elements from `a`.",N,[[["__m128"]],["__m128"]]],[5,"_mm_mask_i32gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_xor_ps","","Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",N,[[["u32"]],["i32"]]],[5,"_mm256_blend_epi32","","Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i32gather_epi32","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_cvtsi128_si32","","Return the lowest element of `a`.",N,[[["__m128i"]],["i32"]]],[5,"_mm256_insertf128_si256","","Copy `a` to result, then insert 128 bits from `b` into result at the location specified by `imm8`.",N,[[["__m256i"],["__m128i"],["i32"]],["__m256i"]]],[5,"_m_psubusw","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_blendv_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `c` as a mask.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_add_epi16","","Add packed 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_alignr_pi8","","Concatenates the two 64-bit integer vector operands, and right-shifts the result by the number of bytes specified in the immediate operand.",N,[[["__m64"],["__m64"],["i32"]],["__m64"]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]` into a 128-bit integer vector.",N,[[["__m128"]],["__m128i"]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",N,[[],["__m128"]]],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",N,N],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit) floating-point elements.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_min_epi32","","Compare packed 32-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu16","","Add packed unsigned 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_add_epi64","","Add packed 64-bit integers in `a` and \"b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_min_epu32","","Compare packed unsigned 32-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[17,"_MM_MASK_MASK","","See `_MM_GET_EXCEPTION_MASK`",N,N],[3,"__m128","","128-bit wide set of four `f32` types, x86-specific",N,N],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed double-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_min_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return packed minimum values",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_insert_si64","","Inserts the `[length:0]` bits of `y` into `x` at `index`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_stream_pi","","Store 64-bits of integer data from a into memory using a non-temporal memory hint.",N,N],[5,"_mm_comigt_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than the one from `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_cmpneq_pd","","Compare corresponding elements in `a` and `b` for not-equal.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_set_pd","","Set packed double-precision (64-bit) floating-point elements in returned vector with the supplied values.",N,[[["f64"],["f64"],["f64"],["f64"]],["__m256d"]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_srli_si128","","Shift `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_extractf128_ps","","Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `a`, selected with `imm8`.",N,[[["__m256"],["i32"]],["__m128"]]],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",N,N],[5,"_mm_cmpunord_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. Returns four floats that have one of two possible bit patterns. The element in the output vector will be `0xffffffff` if the input elements in `a` and `b` are unordered (i.e., at least on of them is a NaN), or 0 otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm256_setr_epi8","","Set packed 8-bit integers in returned vector with the supplied values in reverse order.",N,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["__m256i"]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values lowest to highest.",N,[[["f32"],["f32"],["f32"],["f32"]],["__m128"]]],[5,"_mm256_srli_epi16","","Shift packed 16-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_movemask_pd","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128d"]],["i32"]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit integers in `a` using saturation.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvtpi16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.",N,[[["__m64"]],["__m128"]]],[5,"_mm_maddubs_pi16","","Multiplies corresponding pairs of packed 8-bit unsigned integer values contained in the first source operand and packed 8-bit signed integer values contained in the second source operand, adds pairs of contiguous products with signed saturation, and writes the 16-bit sums to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer vector are all ones.",N,[[["__m128i"],["__m128i"]],["i32"]]],[5,"_mm256_add_ps","","Add packed single-precision (32-bit) floating-point elements in `a` and `b`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm256_mask_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm_cvtps_pd","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed double-precision (64-bit) floating-point elements.",N,[[["__m128"]],["__m128d"]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point element from `a`.",N,[[["__m128d"]],["__m128d"]]],[5,"_xsaveopt64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm256_testnzc_pd","","Compute the bitwise AND of 256 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 256-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m256d"],["__m256d"]],["i32"]]],[5,"_mm_mullo_epi32","","Multiply the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and returns the lowest 32-bit, whatever they might be, reinterpreted as a signed integer. While `pmulld __m128i::splat(2), __m128i::splat(2)` returns the obvious `__m128i::splat(4)`, due to wrapping arithmetic `pmulld __m128i::splat(i32::MAX), __m128i::splat(2)` would return a negative number.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m128"]],["__m128i"]]],[5,"_mm256_permute2x128_si256","","Shuffle 128-bits of integer data selected by `imm8` from `a` and `b`.",N,[[["__m256i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_subs_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_broadcastq_epi64","","Broadcast the low packed 64-bit integer from `a` to all elements of the 128-bit returned value.",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_i64gather_ps","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point element in `b` up to an integer value, store the result as a double-precision floating-point element in the lower element of the intrisic result, and copy the upper element from `a` to the upper element of the intrinsic result.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x i32]`.",N,[[["__m256i"]],["i32"]]],[5,"_mm_set1_epi64","","Initializes both values in a 128-bit vector of `[2 x i64]` with the specified 64-bit value.",N,[[["__m64"]],["__m128i"]]],[5,"_mm256_blendv_ps","","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `c` as a mask.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_sign_pi32","","Negate packed 32-bit integers in `a` when the corresponding signed 32-bit integer in `b` is negative, and return the results. Element in result are zeroed out when the corresponding element in `b` is zero.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_permute2f128_pd","","Shuffle 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) selected by `imm8` from `a` and `b`.",N,[[["__m256d"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmpgt_epi8","","Compare packed 8-bit integers in `a` and `b` for greater-than.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel shuffle and permute intrinsics.",N,[[["u32"],["u32"],["u32"],["u32"]],["u32"]]],[5,"_mm_max_epu16","","Compare packed unsigned 16-bit integers in `a` and `b`, and return packed maximum.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_mulhrs_epi16","","Multiply packed 16-bit signed integer values, truncate the 32-bit product to the 18 most significant bits by right-shifting, round the truncated value by adding 1, and write bits `[16:1]` to the destination.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_min_epi8","","Compare packed 8-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_insertf128_ps","","Copy `a` to result, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from `b` into result at the location specified by `imm8`.",N,[[["__m256"],["__m128"],["i32"]],["__m256"]]],[5,"_mm_testc_pd","","Compute the bitwise AND of 128 bits (representing double-precision (64-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 64-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return the `CF` value.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm256_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m256"]],["__m256i"]]],[5,"_mm_cvtsi32_ss","","Convert a 32 bit integer to a 32 bit float. The result vector is the input vector `a` with the lowest 32 bit float replaced by the converted integer.",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_cmpgt_epi64","","Compare packed 64-bit integers in `a` and `b` for greater-than.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of `x` and clears all other bits.",N,[[["u32"]],["u32"]]],[5,"_mm256_mul_epu32","","Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_m_maskmovq","","Conditionally copies the values from each 8-bit element in the first 64-bit integer vector operand to the specified memory location, as specified by the most significant bit in the corresponding element in the second 64-bit integer vector operand.",N,N],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point elements in `a` using the `rounding` parameter, and store the results as packed single-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and alternatively add and subtract packed elements in `c` to/from the intermediate result.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm_stream_ss","","Non-temporal store of `a.0` into `p`.",N,N],[5,"_mm_max_pi16","","Compares the packed 16-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point elements in `a` and `b`, and add the intermediate result to packed elements in `c`.",N,[[["__m256d"],["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm_clflush","","Invalidate and flush the cache line that contains `p` from all levels of the cache hierarchy.",N,N],[5,"_blcmsk_u32","","Sets the least significant zero bit of `x` and clears all bits above that bit.",N,[[["u32"]],["u32"]]],[5,"_mm_setr_pd","","Set packed double-precision (64-bit) floating-point elements in the return value with the supplied values in reverse order.",N,[[["f64"],["f64"]],["__m128d"]]],[5,"_mm_cvtpi32_ps","","Converts two elements of a 64-bit vector of `[2 x i32]` into two floating point values and writes them to the lower 64-bits of the destination. The remaining higher order elements of the destination are copied from the corresponding elements in the first operand.",N,[[["__m128"],["__m64"]],["__m128"]]],[5,"_mm256_sad_epu8","","Compute the absolute differences of packed unsigned 8-bit integers in `a` and `b`, then horizontally sum each consecutive 8 differences to produce four unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of the 64-bit return value",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_floor_ps","","Round packed single-precision (32-bit) floating point elements in `a` toward negative infinity.",N,[[["__m256"]],["__m256"]]],[5,"_mm_cmpngt_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is not greater than the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_xsave64","","Perform a full or partial save of the enabled processor states to memory at `mem_addr`.",N,N],[5,"_mm_sll_epi16","","Shift packed 16-bit integers in `a` left by `count` while shifting in zeros.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmp_ss","","Compare the lower single-precision (32-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of returned vector, and copy the upper 3 packed elements from `a` to the upper elements of returned vector.",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",N,N],[5,"_mm256_loadu_si256","","Load 256-bits of integer data from memory into result. `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_cmpunord_ss","","Check if the lowest `f32` of both inputs are unordered. The lowest 32 bits of the result will be `0xffffffff` if any of `a.extract(0)` or `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_i64gather_pd","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_comilt_sd","","Compare the lower element of `a` and `b` for less-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",N,N],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",N,[[["__m256i"],["i32"]],["__m256i"]]],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",N,N],[5,"_mm_max_epi8","","Compare packed 8-bit integers in `a` and `b` and return packed maximum values in dst.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_madd_epi16","","Multiply and then horizontally add signed 16 bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_store_ss","","Store the lowest 32 bit float of `a` into memory.",N,N],[5,"_mm_unpackhi_pi32","","Unpacks the upper element from two `i32x2` vectors and interleaves them into the result: `[a.1, b.1]`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_cmpnlt_ss","","Compare the lowest `f32` of both inputs for not-less-than. The lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not less than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_sub_sd","","Return a new vector with the low element of `a` replaced by subtracting the low element by `b` from the low element of `a`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_aesdec_si128","","Perform one round of an AES decryption flow on data (state) in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_sra_epi16","","Shift packed 16-bit integers in `a` right by `count` while shifting in sign bits.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm_cvtsi64_sd","","Return `a` with its lower element replaced by `b` after converting it to an `f64`.",N,[[["__m128d"],["i64"]],["__m128d"]]],[5,"_mm_movemask_epi8","","Return a mask of the most significant bit of each element in `a`.",N,[[["__m128i"]],["i32"]]],[5,"_mm_avg_epu16","","Average packed unsigned 16-bit integers in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_maddubs_epi16","","Multiply corresponding pairs of packed 8-bit unsigned integer values contained in the first source operand and packed 8-bit signed integer values contained in the second source operand, add pairs of contiguous products with signed saturation, and writes the 16-bit sums to the corresponding bits in the destination.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_max_ps","","Compare packed single-precision (32-bit) floating-point elements in `a` and `b`, and return the corresponding maximum values.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cvtss_f32","","Extract the lowest 32 bit float from the input vector.",N,[[["__m128"]],["f32"]]],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",N,N],[5,"_mm256_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half of each 128-bit lane of `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_comigt_sd","","Compare the lower element of `a` and `b` for greater-than.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_m_psubsw","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a` using saturation.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_abs_pi32","","Compute the absolute value of packed 32-bit integers in `a`, and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[5,"_mm_hadd_epi16","","Horizontally add the adjacent pairs of values contained in 2 packed 128-bit vectors of `[8 x i16]`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `mask`",N,[[["__m128d"],["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm_slli_epi16","","Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using the mask `imm8`.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_adds_epi16","","Add packed 16-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x double]`. The lower 64 bits are set to the lower 64 bits of the second parameter. The upper 64 bits are set to the upper 64 bits of the first parameter.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_round_ps","","Round packed single-precision (32-bit) floating point elements in `a` according to the flag `b`. The value of `b` may be as follows:",N,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit integers in `a`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_cmple_ps","","Compare each of the four floats in `a` to the corresponding element in `b`. The result in the output vector will be `0xffffffff` if the input element in `a` is less than or equal to the corresponding element in `b`, or `0` otherwise.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpnge_sd","","Return a new vector with the low element of `a` replaced by the not-greater-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[17,"_MM_EXCEPT_DIV_ZERO","","See `_mm_setcsr`",N,N],[5,"_mm_maskstore_epi64","","Store packed 64-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point elements with all zeros.",N,[[],["__m128d"]]],[5,"_mm_cmp_sd","","Compare the lower double-precision (64-bit) floating-point element in `a` and `b` based on the comparison operand specified by `imm8`, store the result in the lower element of returned vector, and copy the upper element from `a` to the upper element of returned vector.",N,[[["__m128d"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the absolute values of the differences to the corresponding bits in the destination. Then sums of the absolute differences are returned according to the bit fields in the immediate operand.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_loadu2_m128d","","Load two 128-bit values (composed of 2 packed double-precision (64-bit) floating-point elements) from memory, and combine them into a 256-bit value. `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.",N,N],[5,"_mm256_add_epi8","","Add packed 8-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_m_pmaxsw","","Compares the packed 16-bit signed integers of `a` and `b` writing the greatest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_storeu_si256","","Store 256-bits of integer data from `a` into memory.    `mem_addr` does not need to be aligned on any particular boundary.",N,N],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b` occupies the lower half of result.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_cmpeq_epi64","","Compare packed 64-bit integers in `a` and `b` for equality",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_srl_epi32","","Shift packed 32-bit integers in `a` right by `count` while shifting in zeros.",N,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8. If mask is set, load the value from `src` in that position instead.",N,N],[5,"_mm256_insert_epi32","","Copy `a` to result, and insert the 32-bit integer `i` into result at the location specified by `index`.",N,[[["__m256i"],["i32"],["i32"]],["__m256i"]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit integers",N,[[["__m128i"]],["__m128i"]]],[5,"_mm256_bsrli_epi128","","Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in `a` and `b`, producing intermediate 32-bit integers and returning the high 16 bits of the intermediate integers.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_extract_ps","","Extract a single-precision (32-bit) floating-point element from `a`, selected with `imm8`",N,[[["__m128"],["i32"]],["i32"]]],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",N,N],[5,"_mm_cmpeq_epi32","","Compare packed 32-bit integers in `a` and `b` for equality.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm256_permute2f128_ps","","Shuffle 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) selected by `imm8` from `a` and `b`.",N,[[["__m256"],["__m256"],["i32"]],["__m256"]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_insert_pi16","","Copies data from the 64-bit vector of `[4 x i16]` to the destination, and inserts the lower 16-bits of an integer operand at the 16-bit offset specified by the immediate operand `n`.",N,[[["__m64"],["i32"],["i32"]],["__m64"]]],[17,"_MM_HINT_T0","","See `_mm_prefetch`.",N,N],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_cvtepi32_ps","","Convert packed 32-bit integers in `a` to packed single-precision (32-bit) floating-point elements.",N,[[["__m128i"]],["__m128"]]],[5,"_mm_sub_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_srli_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_blsfill_u32","","Sets all bits of `x` below the least significant one.",N,[[["u32"]],["u32"]]],[5,"_mm256_zeroall","","Zero the contents of all XMM or YMM registers.",N,N],[5,"_m_psadbw","","Subtracts the corresponding 8-bit unsigned integer values of the two 64-bit vector operands and computes the absolute value for each of the difference. Then sum of the 8 absolute differences is written to the bits `[15:0]` of the destination; the remaining bits `[63:16]` are cleared.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm256_slli_epi16","","Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",N,N],[5,"_mm256_extract_epi32","","Extract a 32-bit integer from `a`, selected with `imm8`.",N,[[["__m256i"],["i32"]],["i32"]]],[5,"_mm_cvtpi32_pd","","Converts the two signed 32-bit integer elements of a 64-bit vector of `[2 x i32]` into two double-precision floating-point values, returned in a 128-bit vector of `[2 x double]`.",N,[[["__m64"]],["__m128d"]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",N,[[["__m128i"],["__m128i"],["__m128i"]],["__m128i"]]],[5,"_mm_ucomige_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if the value from `a` is greater than or equal to the one from `b`, or `0` otherwise. This instruction will not signal an exception if either argument is a quiet NaN.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_fxsave64","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR` registers to the 512-byte-long 16-byte-aligned memory region `mem_addr`.",N,N],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point element in `b` using the `rounding` parameter, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copy the upper 3 packed elements from `a` to the upper elements of the instrinsic result. Rounding is done according to the rounding parameter, which can be one of:",N,[[["__m128"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_ceil_pd","","Round packed double-precision (64-bit) floating point elements in `a` toward positive infinity.",N,[[["__m256d"]],["__m256d"]]],[5,"_mm256_min_epi16","","Compare packed 16-bit integers in `a` and `b`, and return the packed minimum values.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm256_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point elements in `a` to packed 32-bit integers with truncation.",N,[[["__m256d"]],["__m128i"]]],[5,"_mm_extract_epi8","","Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit integer containing the zero-extended integer data.",N,[[["__m128i"],["i32"]],["i32"]]],[5,"_m_pminsw","","Compares the packed 16-bit signed integers of `a` and `b` writing the smallest value into the result.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_sha1rnds4_epu32","","Perform four rounds of SHA1 operation using an initial SHA1 state (A,B,C,D) from `a` and some pre-computed sum of the next 4 round message values (unsigned 32-bit integers), and state variable E from `b`, and return the updated SHA1 state (A,B,C,D). `func` contains the logic functions and round constants.",N,[[["__m128i"],["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point elements in `a` up to an integer value, and store the results as packed double-precision floating-point elements.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_store_pd","","Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from `a` into memory. `mem_addr` must be aligned on a 16-byte boundary or a general-protection exception may be generated.",N,N],[5,"_mm_maskstore_epi32","","Store packed 32-bit integers from `a` into memory pointed by `mem_addr` using `mask` (elements are not stored when the highest bit is not set in the corresponding element).",N,N],[5,"_mm_bslli_si128","","Shift `a` left by `imm8` bytes while shifting in zeros.",N,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_comineq_ss","","Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns `1` if they are not equal, or `0` otherwise.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm_sqrt_pd","","Return a new vector with the square root of each of the values in `a`.",N,[[["__m128d"]],["__m128d"]]],[5,"_mm_testnzc_ps","","Compute the bitwise AND of 128 bits (representing single-precision (32-bit) floating-point elements) in `a` and `b`, producing an intermediate 128-bit value, and set `ZF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise NOT of `a` and then AND with `b`, producing an intermediate value, and set `CF` to 1 if the sign bit of each 32-bit element in the intermediate value is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values are zero, otherwise return 0.",N,[[["__m128"],["__m128"]],["i32"]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",N,[[["__m128i"]],["__m256i"]]],[5,"_mm256_sub_ps","","Subtract packed single-precision (32-bit) floating-point elements in `b` from packed elements in `a`.",N,[[["__m256"],["__m256"]],["__m256"]]],[5,"_mm_cvt_pi2ps","","Converts two elements of a 64-bit vector of `[2 x i32]` into two floating point values and writes them to the lower 64-bits of the destination. The remaining higher order elements of the destination are copied from the corresponding elements in the first operand.",N,[[["__m128"],["__m64"]],["__m128"]]],[5,"_mm256_slli_epi64","","Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros, return the results;",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned memory location. To minimize caching, the data is flagged as non-temporal (unlikely to be used again soon).",N,N],[5,"_mm_cmple_sd","","Return a new vector with the low element of `a` replaced by the less-than-or-equal comparison of the lower elements of `a` and `b`.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_adds_epi8","","Add packed 8-bit integers in `a` and `b` using saturation.",N,[[["__m256i"],["__m256i"]],["__m256i"]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other components are copied from `a`.",N,[[["__m128"],["__m128"]],["__m128"]]],[5,"_mm_i32gather_epi64","","Return values from `slice` at offsets determined by `offsets * scale`, where `scale` is between 1 and 8.",N,N],[5,"_mm_sad_pu8","","Subtracts the corresponding 8-bit unsigned integer values of the two 64-bit vector operands and computes the absolute value for each of the difference. Then sum of the 8 absolute differences is written to the bits `[15:0]` of the destination; the remaining bits `[63:16]` are cleared.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_abs_pi8","","Compute the absolute value of packed 8-bit integers in `a` and return the unsigned results.",N,[[["__m64"]],["__m64"]]],[5,"_mm256_min_pd","","Compare packed double-precision (64-bit) floating-point elements in `a` and `b`, and return packed minimum values",N,[[["__m256d"],["__m256d"]],["__m256d"]]],[5,"_mm256_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point elements in `a` and `b`, and add the negated intermediate result to packed elements in `c`.",N,[[["__m256"],["__m256"],["__m256"]],["__m256"]]],[5,"_mm_sub_si64","","Subtracts signed or unsigned 64-bit integer values and writes the difference to the corresponding bits in the destination.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_ucomige_sd","","Compare the lower element of `a` and `b` for greater-than-or-equal.",N,[[["__m128d"],["__m128d"]],["i32"]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a non-temporal memory hint.",N,N],[5,"_mm_cmpestro","","Compare packed strings in `a` and `b` with lengths `la` and `lb` using the control in `imm8`, and return bit `0` of the resulting bit mask.",N,[[["__m128i"],["i32"],["__m128i"],["i32"],["i32"]],["i32"]]],[5,"_mm_hsubs_pi16","","Horizontally subtracts the adjacent pairs of values contained in 2 packed 64-bit vectors of `[4 x i16]`. Positive differences greater than 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are saturated to 8000h.",N,[[["__m64"],["__m64"]],["__m64"]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in `a` and `b`, and pack the results.",N,[[["__m128d"],["__m128d"]],["__m128d"]]],[5,"_mm256_srli_epi32","","Shift packed 32-bit integers in `a` right by `imm8` while shifting in zeros",N,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half of `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results (Default)",N,N],[5,"_mm_mul_epu32","","Multiply the low unsigned 32-bit integers from each packed 64-bit element in `a` and `b`.",N,[[["__m128i"],["__m128i"]],["__m128i"]]],[14,"unreachable","rocket_app::domain::error::err_msg::_core","A utility macro for indicating unreachable code.",N,N],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",N,N],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",N,N],[14,"panic","","Entry point of thread panic, for details, see std::macros",N,N],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",N,N],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",N,N],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",N,N],[8,"AsFail","rocket_app::domain::error::err_msg","The `AsFail` trait",N,N],[10,"as_fail","","Converts a reference to `Self` into a dynamic trait object of `Fail`.",104,[[["self"]],["fail"]]],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",105,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",105,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",105,[[["self"],["f"]],["result",["context"]]]],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[3,"Context","","An error with context around it.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Backtrace","","A `Backtrace`.",N,N],[5,"err_msg","rocket_app::domain::error","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[6,"Error","","The main error type ",N,N],[0,"id","rocket_app::domain","Contains the shared `Id` type. ",N,N],[3,"Id","rocket_app::domain::id","An id.",N,N],[3,"NextId","","Generate a new `Id` randomly. ",N,N],[8,"IdProvider","","A builder for a new id.",N,N],[10,"id","","",106,[[["self"]],["result",["id","error"]]]],[11,"new","","",107,[[],["self"]]],[11,"new","","",108,[[],["self"]]],[11,"next","","",108,[[["self"]],["id"]]],[0,"version","rocket_app::domain","Contains the shared `Version` type. ",N,N],[3,"Version","rocket_app::domain::version","A version.",N,N],[11,"new","","",109,[[],["self"]]],[11,"next","","",109,[[["self"]]]],[0,"customers","rocket_app::domain","Domain module for customers. ",N,N],[0,"commands","rocket_app::domain::customers","Commands for modifying customer state. ",N,N],[0,"create_customer","rocket_app::domain::customers::commands","Contains the `CreateCustomerCommand` type. ",N,N],[3,"CreateCustomer","rocket_app::domain::customers::commands::create_customer","Input for a `CreateCustomerCommand`. ",N,N],[12,"id","","",110,N],[6,"Result","","",N,N],[8,"CreateCustomerCommand","","Create a customer. ",N,N],[10,"create_customer","","",111,[[["self"],["createcustomer"]],["result"]]],[11,"create_customer_command","rocket_app::domain","",112,N],[0,"model","rocket_app::domain::customers","Contains the `Customer` entity. ",N,N],[3,"CustomerData","rocket_app::domain::customers::model","Data for a customer. ",N,N],[12,"id","","",113,N],[12,"version","","",113,N],[3,"Customer","","A customer. ",N,N],[0,"store","","Persistent customer storage. ",N,N],[6,"CustomerId","","",N,N],[6,"NextCustomerId","","",N,N],[6,"CustomerVersion","","",N,N],[11,"to_data","","",114,[[["self"]],["customerdata"]]],[11,"into_data","","",114,[[["self"]],["customerdata"]]],[11,"new","","",114,[[["tid"]],["result",["error"]]]],[11,"customer_id_provider","rocket_app::domain","",112,N],[0,"queries","rocket_app::domain::customers","Queries for fetching customer state. ",N,N],[0,"get_customer","rocket_app::domain::customers::queries","Contains the `GetCustomerQuery` type. ",N,N],[3,"GetCustomer","rocket_app::domain::customers::queries::get_customer","Input for a `GetCustomerQuery`. ",N,N],[12,"id","","",115,N],[6,"Result","","",N,N],[8,"GetCustomerQuery","","Get a customer entity. ",N,N],[10,"get_customer","","",116,[[["self"],["getcustomer"]],["result"]]],[11,"get_customer_query","rocket_app::domain","",112,N],[0,"get_customer_with_orders","rocket_app::domain::customers::queries","Contains the `GetCustomerWithOrdersQuery` type. ",N,N],[3,"GetCustomerWithOrders","rocket_app::domain::customers::queries::get_customer_with_orders","Input for a `GetCustomerWithOrdersQuery`. ",N,N],[12,"id","","",117,N],[3,"CustomerWithOrders","","An order with a order summary for each of its line items. ",N,N],[12,"id","","",118,N],[12,"orders","","",118,N],[3,"CustomerOrder","","An individual order. ",N,N],[12,"id","","",119,N],[6,"Result","","",N,N],[8,"GetCustomerWithOrdersQuery","","Get a customer along with their orders. ",N,N],[10,"get_customer_with_orders","","",120,[[["self"],["getcustomerwithorders"]],["result"]]],[11,"get_customer_with_orders_query","rocket_app::domain","",112,N],[0,"resolver","rocket_app::domain::customers","Contains the `CustomersResolver` type. ",N,N],[3,"CustomersResolver","rocket_app::domain::customers::resolver","Resolver for customers.",N,N],[0,"orders","rocket_app::domain","Domain module for orders. ",N,N],[0,"commands","rocket_app::domain::orders","Commands for modifying order state. ",N,N],[0,"add_or_update_product","rocket_app::domain::orders::commands","Contains the `AddOrUpdateProductCommand` type. ",N,N],[3,"AddOrUpdateProduct","rocket_app::domain::orders::commands::add_or_update_product","Input for an `AddOrUpdateProductCommand`. ",N,N],[12,"id","","",121,N],[12,"product_id","","",121,N],[12,"quantity","","",121,N],[6,"Result","","",N,N],[8,"AddOrUpdateProductCommand","","Add or update a product line item on an order. ",N,N],[10,"add_or_update_product","","",122,[[["self"],["addorupdateproduct"]],["result"]]],[11,"add_or_update_product_command","rocket_app::domain","",112,N],[0,"create_order","rocket_app::domain::orders::commands","Contains the `CreateOrderCommand` type. ",N,N],[3,"CreateOrder","rocket_app::domain::orders::commands::create_order","Input for a `CreateOrderCommand`. ",N,N],[12,"id","","",123,N],[12,"customer_id","","",123,N],[6,"Result","","",N,N],[8,"CreateOrderCommand","","Create a new order. ",N,N],[10,"create_order","","",124,[[["self"],["createorder"]],["result"]]],[11,"create_order_command","rocket_app::domain","",112,N],[0,"model","rocket_app::domain::orders","Contains the `Order` and `OrderLineItem` entities.",N,N],[3,"Quantity","rocket_app::domain::orders::model","An order item quantity.",N,N],[3,"OrderData","","Data for an order. ",N,N],[12,"id","","",125,N],[12,"version","","",125,N],[12,"customer_id","","",125,N],[3,"LineItemData","","Data for a single order line item. ",N,N],[12,"id","","",126,N],[12,"version","","",126,N],[12,"product_id","","",126,N],[12,"price","","",126,N],[12,"quantity","","",126,N],[3,"Order","","An order and its line items.",N,N],[3,"OrderLineItem","","An order and one of its line items.",N,N],[4,"IntoLineItem","","An attempt to turn an order into a line item.",N,N],[13,"InOrder","","",127,N],[13,"NotInOrder","","",127,N],[0,"store","","Persistent order storage. ",N,N],[6,"OrderId","","",N,N],[6,"NextOrderId","","",N,N],[6,"OrderVersion","","",N,N],[6,"LineItemId","","",N,N],[6,"NextLineItemId","","",N,N],[6,"LineItemVersion","","",N,N],[11,"into_data","","",128,N],[11,"to_data","","",128,N],[11,"set_quantity","","",128,[[["self"],["tquantity"]],["result",["error"]]]],[11,"into_data","","",129,N],[11,"to_data","","",129,N],[11,"into_line_item_for_product","","",129,[[["self"],["productid"]],["intolineitem"]]],[11,"new","","",129,[[["tid"],["customer"]],["result",["error"]]]],[11,"contains_product","","",129,[[["self"],["productid"]],["bool"]]],[11,"add_product","","",129,[[["self"],["tid"],["product"],["tquantity"]],["result",["error"]]]],[11,"order_id_provider","rocket_app::domain","",112,N],[11,"line_item_id_provider","","",112,N],[0,"queries","rocket_app::domain::orders","Queries for fetching order state. ",N,N],[0,"get_order","rocket_app::domain::orders::queries","Contains the `GetOrderQuery` type. ",N,N],[3,"GetOrder","rocket_app::domain::orders::queries::get_order","Input for a `GetOrderQuery`. ",N,N],[12,"id","","",130,N],[6,"Result","","",N,N],[8,"GetOrderQuery","","Get an order entity. ",N,N],[10,"get_order","","",131,[[["self"],["getorder"]],["result"]]],[11,"get_order_query","rocket_app::domain","",112,N],[0,"get_order_with_products","rocket_app::domain::orders::queries","Contains the `GetOrderWithProductsQuery` type. ",N,N],[3,"GetOrderWithProducts","rocket_app::domain::orders::queries::get_order_with_products","Input for a `GetOrderWithProductsQuery`. ",N,N],[12,"id","","",132,N],[3,"OrderWithProducts","","An order with a product summary for each of its line items. ",N,N],[12,"id","","",133,N],[12,"line_items","","",133,N],[3,"ProductLineItem","","An individual line item with a product summary. ",N,N],[12,"line_item_id","","",134,N],[12,"product_id","","",134,N],[12,"title","","",134,N],[12,"price","","",134,N],[12,"quantity","","",134,N],[6,"Result","","",N,N],[8,"GetOrderWithProductsQuery","","Get an order along with a product summary for each line item. ",N,N],[10,"get_order_with_products","","",135,[[["self"],["getorderwithproducts"]],["result"]]],[11,"get_order_with_products_query","rocket_app::domain","",112,N],[0,"get_order_summaries_for_customer","rocket_app::domain::orders::queries","Contains the `GetOrderSummariesForCustomerQuery` type. ",N,N],[3,"GetOrderSummariesForCustomer","rocket_app::domain::orders::queries::get_order_summaries_for_customer","Input for a `GetOrderSummariesForCustomerQuery`. ",N,N],[12,"id","","",136,N],[3,"OrderSummary","","An individual order summary. ",N,N],[12,"id","","",137,N],[6,"Result","","",N,N],[8,"GetOrderSummariesForCustomerQuery","","Get a collection of order summaries for a customer. ",N,N],[10,"get_order_summaries_for_customer","","",138,[[["self"],["getordersummariesforcustomer"]],["result"]]],[11,"get_order_summaries_for_customer_query","rocket_app::domain","",112,N],[0,"resolver","rocket_app::domain::orders","Contains the `OrdersResolver` type. ",N,N],[3,"OrdersResolver","rocket_app::domain::orders::resolver","Resolver for orders.",N,N],[0,"products","rocket_app::domain","Domain module for products. ",N,N],[0,"commands","rocket_app::domain::products","Commands for modifying product state. ",N,N],[0,"create_product","rocket_app::domain::products::commands","Contains the `CreateProductCommand` type. ",N,N],[3,"CreateProduct","rocket_app::domain::products::commands::create_product","Input for a `CreateProductCommand`. ",N,N],[12,"id","","",139,N],[12,"title","","",139,N],[12,"price","","",139,N],[6,"Result","","",N,N],[8,"CreateProductCommand","","Create a new product. ",N,N],[10,"create_product","","",140,[[["self"],["createproduct"]],["result"]]],[11,"create_product_command","rocket_app::domain","",112,N],[0,"set_product_title","rocket_app::domain::products::commands","Contains the `SetProductTitleCommand`. ",N,N],[3,"SetProductTitle","rocket_app::domain::products::commands::set_product_title","Input for a `SetProductTitleCommand`. ",N,N],[12,"id","","",141,N],[12,"title","","",141,N],[6,"Result","","",N,N],[8,"SetProductTitleCommand","","Set a new title for a product. ",N,N],[10,"set_product_title","","",142,[[["self"],["setproducttitle"]],["result"]]],[11,"set_product_title_command","rocket_app::domain","",112,N],[0,"model","rocket_app::domain::products","Contains the `Product` entity. ",N,N],[3,"Title","rocket_app::domain::products::model","A product title.",N,N],[3,"Price","","A produce price.",N,N],[3,"ProductData","","Data for a product. ",N,N],[12,"id","","",143,N],[12,"version","","",143,N],[12,"title","","",143,N],[12,"price","","",143,N],[3,"Product","","A product with some simple metadata. ",N,N],[0,"store","","Persistent storage for products. ",N,N],[6,"ProductId","","",N,N],[6,"NextProductId","","",N,N],[6,"ProductVersion","","",N,N],[11,"into_data","","",144,[[["self"]],["productdata"]]],[11,"to_data","","",144,[[["self"]],["productdata"]]],[11,"new","","",144,[[["tid"],["ttitle"],["tprice"]],["result",["error"]]]],[11,"set_title","","",144,[[["self"],["ttitle"]],["result",["error"]]]],[11,"product_id_provider","rocket_app::domain","",112,N],[0,"queries","rocket_app::domain::products","Queries for fetching product state. ",N,N],[0,"get_product","rocket_app::domain::products::queries","Contains the `GetProductQuery` type. ",N,N],[3,"GetProduct","rocket_app::domain::products::queries::get_product","Input for a `GetProductQuery`. ",N,N],[12,"id","","",145,N],[6,"Result","","",N,N],[8,"GetProductQuery","","Get a product entity. ",N,N],[10,"get_product","","",146,[[["self"],["getproduct"]],["result"]]],[11,"get_product_query","rocket_app::domain","",112,N],[0,"get_product_summaries","rocket_app::domain::products::queries","Contains the `GetProductSummariesQuery` type. ",N,N],[3,"GetProductSummaries","rocket_app::domain::products::queries::get_product_summaries","Input for a `GetProductSummariesQuery`. ",N,N],[12,"ids","","",147,N],[3,"ProductSummary","","An individual product summary. ",N,N],[12,"id","","",148,N],[12,"title","","",148,N],[12,"price","","",148,N],[6,"Result","","",N,N],[8,"GetProductSummariesQuery","","Get a collection of product summaries. ",N,N],[10,"get_product_summaries","","",149,[[["self"],["getproductsummaries"]],["result"]]],[11,"get_product_summaries_query","rocket_app::domain","",112,N],[0,"resolver","rocket_app::domain::products","Contains the `ProductsResolver` type. ",N,N],[3,"ProductsResolver","rocket_app::domain::products::resolver","Resolver for products.",N,N],[0,"entity","rocket_app::domain","Defines the constraints that all entities must satisfy.",N,N],[0,"logger","rocket_app","",N,N],[17,"LOG_LEVEL_ENV","rocket_app::logger","",N,N],[17,"LOG_STYLE_ENV","","",N,N],[14,"rocket_uri_macro_get","rocket_app","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_create","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_get","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_create","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_add_or_update_product","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_get","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_create","","Rocket code generated wrapping URI macro.",N,N],[14,"rocket_uri_macro_set_title","","Rocket code generated wrapping URI macro.",N,N],[11,"into","rocket_app::app::orders","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into_collection","","",0,[[["self"]],["smallvec"]]],[11,"mapped","","",0,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",0,[[["self"]],["result",["parseerr"]]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"into_collection","","",150,[[["self"]],["smallvec"]]],[11,"mapped","","",150,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",150,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::app::products","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into_collection","","",1,[[["self"]],["smallvec"]]],[11,"mapped","","",1,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",1,[[["self"]],["result",["parseerr"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into_collection","","",2,[[["self"]],["smallvec"]]],[11,"mapped","","",2,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",2,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain","",112,[[["self"]],["u"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into_collection","","",112,[[["self"]],["smallvec"]]],[11,"mapped","","",112,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",112,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg","",151,[[["self"]],["u"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into_iter","","",151,[[["self"]],["i"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"into_collection","","",151,[[["self"]],["smallvec"]]],[11,"mapped","","",151,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",151,[[["self"]],["result",["parseerr"]]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_string","","",152,[[["self"]],["string"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"into_collection","","",152,[[["self"]],["smallvec"]]],[11,"mapped","","",152,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",152,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",152,[[["self"]],["fail"]]],[11,"into","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"]],["u"]]],[11,"to_string","","",153,[[["self"]],["string"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"into_collection","","",153,[[["self"]],["smallvec"]]],[11,"mapped","","",153,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",153,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",153,[[["self"],["k"]],["bool"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_string","","",154,[[["self"]],["string"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"into_collection","","",154,[[["self"]],["smallvec"]]],[11,"mapped","","",154,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",154,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",154,[[["self"],["k"]],["bool"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_string","","",155,[[["self"]],["string"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"into_collection","","",155,[[["self"]],["smallvec"]]],[11,"mapped","","",155,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",155,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",155,[[["self"],["k"]],["bool"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_string","","",156,[[["self"]],["string"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"into_collection","","",156,[[["self"]],["smallvec"]]],[11,"mapped","","",156,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",156,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",156,[[["self"],["k"]],["bool"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_string","","",157,[[["self"]],["string"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"into_collection","","",157,[[["self"]],["smallvec"]]],[11,"mapped","","",157,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",157,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",157,[[["self"],["k"]],["bool"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"into_collection","","",158,[[["self"]],["smallvec"]]],[11,"mapped","","",158,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",158,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",158,[[["self"],["k"]],["bool"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into_collection","","",4,[[["self"]],["smallvec"]]],[11,"mapped","","",4,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",4,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",4,[[["self"],["k"]],["bool"]]],[11,"rand","","",4,[[["r"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into_collection","","",5,[[["self"]],["smallvec"]]],[11,"mapped","","",5,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",5,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",5,[[["self"],["k"]],["bool"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_string","","",159,[[["self"]],["string"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"into_collection","","",159,[[["self"]],["smallvec"]]],[11,"mapped","","",159,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",159,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",159,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",159,[[["self"]],["fail"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_string","","",160,[[["self"]],["string"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"into_collection","","",160,[[["self"]],["smallvec"]]],[11,"mapped","","",160,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",160,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",160,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",160,[[["self"]],["fail"]]],[11,"into","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"transform","","",11,[[["request"],["data"]],["transform",["outcome","outcome"]]]],[11,"from_data","","",11,[[["request"],["transform",["outcome","outcome"]]],["outcome",["data"]]]],[11,"into_collection","","",11,[[["self"]],["smallvec"]]],[11,"mapped","","",11,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",11,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",11,[[["self"],["k"]],["bool"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"transform","","",12,[[["request"],["data"]],["transform",["outcome","outcome"]]]],[11,"from_data","","",12,[[["request"],["transform",["outcome","outcome"]]],["outcome",["data"]]]],[11,"into_collection","","",12,[[["self"]],["smallvec"]]],[11,"mapped","","",12,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",12,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",12,[[["self"],["k"]],["bool"]]],[11,"rand","","",12,[[["r"]],["t"]]],[11,"into","rocket_app::domain::error::err_msg::_core::mem","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"into_collection","","",161,[[["self"]],["smallvec"]]],[11,"mapped","","",161,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",161,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",161,[[["self"],["k"]],["bool"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"into_collection","","",162,[[["self"]],["smallvec"]]],[11,"mapped","","",162,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",162,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",162,[[["self"],["k"]],["bool"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"into_collection","","",163,[[["self"]],["smallvec"]]],[11,"mapped","","",163,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",163,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"into_collection","","",164,[[["self"]],["smallvec"]]],[11,"mapped","","",164,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",164,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",164,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"into_collection","","",165,[[["self"]],["smallvec"]]],[11,"mapped","","",165,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",165,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",165,[[["self"],["k"]],["bool"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"into_collection","","",166,[[["self"]],["smallvec"]]],[11,"mapped","","",166,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",166,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",166,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::ops","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"into_iter","","",28,[[["self"]],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into_collection","","",28,[[["self"]],["smallvec"]]],[11,"mapped","","",28,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",28,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",28,[[["self"],["k"]],["bool"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"into_iter","","",167,[[["self"]],["i"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"into_collection","","",167,[[["self"]],["smallvec"]]],[11,"mapped","","",167,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",167,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",167,[[["self"],["k"]],["bool"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into_collection","","",30,[[["self"]],["smallvec"]]],[11,"mapped","","",30,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",30,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",30,[[["self"],["k"]],["bool"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into_collection","","",32,[[["self"]],["smallvec"]]],[11,"mapped","","",32,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",32,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",32,[[["self"],["k"]],["bool"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into_collection","","",35,[[["self"]],["smallvec"]]],[11,"mapped","","",35,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",35,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",35,[[["self"],["k"]],["bool"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into_collection","","",38,[[["self"]],["smallvec"]]],[11,"mapped","","",38,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",38,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",38,[[["self"],["k"]],["bool"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into_collection","","",43,[[["self"]],["smallvec"]]],[11,"mapped","","",43,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",43,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",43,[[["self"],["k"]],["bool"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"into_collection","","",168,[[["self"]],["smallvec"]]],[11,"mapped","","",168,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",168,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",168,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into_collection","","",61,[[["self"]],["smallvec"]]],[11,"mapped","","",61,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",61,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",61,[[["self"],["k"]],["bool"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into_collection","","",62,[[["self"]],["smallvec"]]],[11,"mapped","","",62,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",62,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",62,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"into_collection","","",169,[[["self"]],["smallvec"]]],[11,"mapped","","",169,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",169,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",169,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::array","",170,[[["self"]],["u"]]],[11,"to_string","","",170,[[["self"]],["string"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"into_collection","","",170,[[["self"]],["smallvec"]]],[11,"mapped","","",170,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",170,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",170,[[["self"]],["fail"]]],[11,"into","rocket_app::domain::error::err_msg::_core::ascii","",171,[[["self"]],["u"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into_iter","","",171,[[["self"]],["i"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"into_collection","","",171,[[["self"]],["smallvec"]]],[11,"mapped","","",171,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",171,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::sync::atomic","",172,[[["self"]],["u"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"into_collection","","",172,[[["self"]],["smallvec"]]],[11,"mapped","","",172,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",172,[[["self"]],["result",["parseerr"]]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"into_collection","","",173,[[["self"]],["smallvec"]]],[11,"mapped","","",173,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",173,[[["self"]],["result",["parseerr"]]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into_collection","","",69,[[["self"]],["smallvec"]]],[11,"mapped","","",69,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",69,[[["self"]],["result",["parseerr"]]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"into_collection","","",174,[[["self"]],["smallvec"]]],[11,"mapped","","",174,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",174,[[["self"]],["result",["parseerr"]]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"into_collection","","",175,[[["self"]],["smallvec"]]],[11,"mapped","","",175,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",175,[[["self"]],["result",["parseerr"]]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"into_collection","","",176,[[["self"]],["smallvec"]]],[11,"mapped","","",176,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",176,[[["self"]],["result",["parseerr"]]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"into_collection","","",177,[[["self"]],["smallvec"]]],[11,"mapped","","",177,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",177,[[["self"]],["result",["parseerr"]]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"into_collection","","",178,[[["self"]],["smallvec"]]],[11,"mapped","","",178,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",178,[[["self"]],["result",["parseerr"]]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"into_collection","","",179,[[["self"]],["smallvec"]]],[11,"mapped","","",179,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",179,[[["self"]],["result",["parseerr"]]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"into_collection","","",180,[[["self"]],["smallvec"]]],[11,"mapped","","",180,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",180,[[["self"]],["result",["parseerr"]]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"into_collection","","",181,[[["self"]],["smallvec"]]],[11,"mapped","","",181,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",181,[[["self"]],["result",["parseerr"]]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"into_collection","","",182,[[["self"]],["smallvec"]]],[11,"mapped","","",182,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",182,[[["self"]],["result",["parseerr"]]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"into_collection","","",183,[[["self"]],["smallvec"]]],[11,"mapped","","",183,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",183,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"into_collection","","",184,[[["self"]],["smallvec"]]],[11,"mapped","","",184,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",184,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",184,[[["self"],["k"]],["bool"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"into_collection","","",185,[[["self"]],["smallvec"]]],[11,"mapped","","",185,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",185,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",185,[[["self"],["k"]],["bool"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_string","","",186,[[["self"]],["string"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"into_collection","","",186,[[["self"]],["smallvec"]]],[11,"mapped","","",186,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",186,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",186,[[["self"]],["fail"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_string","","",187,[[["self"]],["string"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"into_collection","","",187,[[["self"]],["smallvec"]]],[11,"mapped","","",187,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",187,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",187,[[["self"]],["fail"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_string","","",188,[[["self"]],["string"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"into_collection","","",188,[[["self"]],["smallvec"]]],[11,"mapped","","",188,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",188,[[["self"]],["result",["parseerr"]]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_string","","",189,[[["self"]],["string"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"into_collection","","",189,[[["self"]],["smallvec"]]],[11,"mapped","","",189,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",189,[[["self"]],["result",["parseerr"]]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"into_collection","","",190,[[["self"]],["smallvec"]]],[11,"mapped","","",190,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",190,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"]],["u"]]],[11,"to_string","","",191,[[["self"]],["string"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"into_iter","","",191,[[["self"]],["i"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"nfd","","",191,[[["self"]],["decompositions"]]],[11,"nfkd","","",191,[[["self"]],["decompositions"]]],[11,"nfc","","",191,[[["self"]],["recompositions"]]],[11,"nfkc","","",191,[[["self"]],["recompositions"]]],[11,"stream_safe","","",191,[[["self"]],["streamsafe"]]],[11,"into_collection","","",191,[[["self"]],["smallvec"]]],[11,"mapped","","",191,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",191,[[["self"]],["result",["parseerr"]]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_string","","",192,[[["self"]],["string"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"into_iter","","",192,[[["self"]],["i"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"nfd","","",192,[[["self"]],["decompositions"]]],[11,"nfkd","","",192,[[["self"]],["decompositions"]]],[11,"nfc","","",192,[[["self"]],["recompositions"]]],[11,"nfkc","","",192,[[["self"]],["recompositions"]]],[11,"stream_safe","","",192,[[["self"]],["streamsafe"]]],[11,"into_collection","","",192,[[["self"]],["smallvec"]]],[11,"mapped","","",192,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",192,[[["self"]],["result",["parseerr"]]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_string","","",193,[[["self"]],["string"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"into_iter","","",193,[[["self"]],["i"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"nfd","","",193,[[["self"]],["decompositions"]]],[11,"nfkd","","",193,[[["self"]],["decompositions"]]],[11,"nfc","","",193,[[["self"]],["recompositions"]]],[11,"nfkc","","",193,[[["self"]],["recompositions"]]],[11,"stream_safe","","",193,[[["self"]],["streamsafe"]]],[11,"into_collection","","",193,[[["self"]],["smallvec"]]],[11,"mapped","","",193,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",193,[[["self"]],["result",["parseerr"]]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_string","","",194,[[["self"]],["string"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"into_iter","","",194,[[["self"]],["i"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"nfd","","",194,[[["self"]],["decompositions"]]],[11,"nfkd","","",194,[[["self"]],["decompositions"]]],[11,"nfc","","",194,[[["self"]],["recompositions"]]],[11,"nfkc","","",194,[[["self"]],["recompositions"]]],[11,"stream_safe","","",194,[[["self"]],["streamsafe"]]],[11,"into_collection","","",194,[[["self"]],["smallvec"]]],[11,"mapped","","",194,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",194,[[["self"]],["result",["parseerr"]]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_string","","",195,[[["self"]],["string"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"into_iter","","",195,[[["self"]],["i"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"nfd","","",195,[[["self"]],["decompositions"]]],[11,"nfkd","","",195,[[["self"]],["decompositions"]]],[11,"nfc","","",195,[[["self"]],["recompositions"]]],[11,"nfkc","","",195,[[["self"]],["recompositions"]]],[11,"stream_safe","","",195,[[["self"]],["streamsafe"]]],[11,"into_collection","","",195,[[["self"]],["smallvec"]]],[11,"mapped","","",195,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",195,[[["self"]],["result",["parseerr"]]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_string","","",196,[[["self"]],["string"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"into_collection","","",196,[[["self"]],["smallvec"]]],[11,"mapped","","",196,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",196,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",196,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",196,[[["self"]],["fail"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_string","","",197,[[["self"]],["string"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"into_collection","","",197,[[["self"]],["smallvec"]]],[11,"mapped","","",197,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",197,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",197,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",197,[[["self"]],["fail"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_string","","",198,[[["self"]],["string"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"into_collection","","",198,[[["self"]],["smallvec"]]],[11,"mapped","","",198,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",198,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",198,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",198,[[["self"]],["fail"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"into_iter","","",199,[[["self"]],["i"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"into_collection","","",199,[[["self"]],["smallvec"]]],[11,"mapped","","",199,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",199,[[["self"]],["result",["parseerr"]]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into_collection","","",70,[[["self"]],["smallvec"]]],[11,"mapped","","",70,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",70,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",70,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::panic","",200,[[["self"]],["u"]]],[11,"to_string","","",200,[[["self"]],["string"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"into_collection","","",200,[[["self"]],["smallvec"]]],[11,"mapped","","",200,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",200,[[["self"]],["result",["parseerr"]]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_string","","",201,[[["self"]],["string"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"into_collection","","",201,[[["self"]],["smallvec"]]],[11,"mapped","","",201,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",201,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"]],["u"]]],[11,"to_string","","",202,[[["self"]],["string"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"into_collection","","",202,[[["self"]],["smallvec"]]],[11,"mapped","","",202,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",202,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",202,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::iter","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"into_iter","","",203,[[["self"]],["i"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"nfd","","",203,[[["self"]],["decompositions"]]],[11,"nfkd","","",203,[[["self"]],["decompositions"]]],[11,"nfc","","",203,[[["self"]],["recompositions"]]],[11,"nfkc","","",203,[[["self"]],["recompositions"]]],[11,"stream_safe","","",203,[[["self"]],["streamsafe"]]],[11,"into_collection","","",203,[[["self"]],["smallvec"]]],[11,"mapped","","",203,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",203,[[["self"]],["result",["parseerr"]]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"into_iter","","",204,[[["self"]],["i"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"nfd","","",204,[[["self"]],["decompositions"]]],[11,"nfkd","","",204,[[["self"]],["decompositions"]]],[11,"nfc","","",204,[[["self"]],["recompositions"]]],[11,"nfkc","","",204,[[["self"]],["recompositions"]]],[11,"stream_safe","","",204,[[["self"]],["streamsafe"]]],[11,"into_collection","","",204,[[["self"]],["smallvec"]]],[11,"mapped","","",204,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",204,[[["self"]],["result",["parseerr"]]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"into_iter","","",205,[[["self"]],["i"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"nfd","","",205,[[["self"]],["decompositions"]]],[11,"nfkd","","",205,[[["self"]],["decompositions"]]],[11,"nfc","","",205,[[["self"]],["recompositions"]]],[11,"nfkc","","",205,[[["self"]],["recompositions"]]],[11,"stream_safe","","",205,[[["self"]],["streamsafe"]]],[11,"into_collection","","",205,[[["self"]],["smallvec"]]],[11,"mapped","","",205,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",205,[[["self"]],["result",["parseerr"]]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"into_iter","","",206,[[["self"]],["i"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"nfd","","",206,[[["self"]],["decompositions"]]],[11,"nfkd","","",206,[[["self"]],["decompositions"]]],[11,"nfc","","",206,[[["self"]],["recompositions"]]],[11,"nfkc","","",206,[[["self"]],["recompositions"]]],[11,"stream_safe","","",206,[[["self"]],["streamsafe"]]],[11,"into_collection","","",206,[[["self"]],["smallvec"]]],[11,"mapped","","",206,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",206,[[["self"]],["result",["parseerr"]]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"into_iter","","",207,[[["self"]],["i"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"nfd","","",207,[[["self"]],["decompositions"]]],[11,"nfkd","","",207,[[["self"]],["decompositions"]]],[11,"nfc","","",207,[[["self"]],["recompositions"]]],[11,"nfkc","","",207,[[["self"]],["recompositions"]]],[11,"stream_safe","","",207,[[["self"]],["streamsafe"]]],[11,"into_collection","","",207,[[["self"]],["smallvec"]]],[11,"mapped","","",207,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",207,[[["self"]],["result",["parseerr"]]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"into_iter","","",208,[[["self"]],["i"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"into_collection","","",208,[[["self"]],["smallvec"]]],[11,"mapped","","",208,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",208,[[["self"]],["result",["parseerr"]]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"into_iter","","",209,[[["self"]],["i"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"nfd","","",209,[[["self"]],["decompositions"]]],[11,"nfkd","","",209,[[["self"]],["decompositions"]]],[11,"nfc","","",209,[[["self"]],["recompositions"]]],[11,"nfkc","","",209,[[["self"]],["recompositions"]]],[11,"stream_safe","","",209,[[["self"]],["streamsafe"]]],[11,"into_collection","","",209,[[["self"]],["smallvec"]]],[11,"mapped","","",209,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",209,[[["self"]],["result",["parseerr"]]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"into_iter","","",210,[[["self"]],["i"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"nfd","","",210,[[["self"]],["decompositions"]]],[11,"nfkd","","",210,[[["self"]],["decompositions"]]],[11,"nfc","","",210,[[["self"]],["recompositions"]]],[11,"nfkc","","",210,[[["self"]],["recompositions"]]],[11,"stream_safe","","",210,[[["self"]],["streamsafe"]]],[11,"into_collection","","",210,[[["self"]],["smallvec"]]],[11,"mapped","","",210,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",210,[[["self"]],["result",["parseerr"]]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"into_iter","","",211,[[["self"]],["i"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"nfd","","",211,[[["self"]],["decompositions"]]],[11,"nfkd","","",211,[[["self"]],["decompositions"]]],[11,"nfc","","",211,[[["self"]],["recompositions"]]],[11,"nfkc","","",211,[[["self"]],["recompositions"]]],[11,"stream_safe","","",211,[[["self"]],["streamsafe"]]],[11,"into_collection","","",211,[[["self"]],["smallvec"]]],[11,"mapped","","",211,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",211,[[["self"]],["result",["parseerr"]]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"into_iter","","",212,[[["self"]],["i"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"into_collection","","",212,[[["self"]],["smallvec"]]],[11,"mapped","","",212,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",212,[[["self"]],["result",["parseerr"]]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"into_iter","","",213,[[["self"]],["i"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"nfd","","",213,[[["self"]],["decompositions"]]],[11,"nfkd","","",213,[[["self"]],["decompositions"]]],[11,"nfc","","",213,[[["self"]],["recompositions"]]],[11,"nfkc","","",213,[[["self"]],["recompositions"]]],[11,"stream_safe","","",213,[[["self"]],["streamsafe"]]],[11,"into_collection","","",213,[[["self"]],["smallvec"]]],[11,"mapped","","",213,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",213,[[["self"]],["result",["parseerr"]]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"into_iter","","",214,[[["self"]],["i"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"nfd","","",214,[[["self"]],["decompositions"]]],[11,"nfkd","","",214,[[["self"]],["decompositions"]]],[11,"nfc","","",214,[[["self"]],["recompositions"]]],[11,"nfkc","","",214,[[["self"]],["recompositions"]]],[11,"stream_safe","","",214,[[["self"]],["streamsafe"]]],[11,"into_collection","","",214,[[["self"]],["smallvec"]]],[11,"mapped","","",214,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",214,[[["self"]],["result",["parseerr"]]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"into_iter","","",215,[[["self"]],["i"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"nfd","","",215,[[["self"]],["decompositions"]]],[11,"nfkd","","",215,[[["self"]],["decompositions"]]],[11,"nfc","","",215,[[["self"]],["recompositions"]]],[11,"nfkc","","",215,[[["self"]],["recompositions"]]],[11,"stream_safe","","",215,[[["self"]],["streamsafe"]]],[11,"into_collection","","",215,[[["self"]],["smallvec"]]],[11,"mapped","","",215,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",215,[[["self"]],["result",["parseerr"]]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"into_iter","","",216,[[["self"]],["i"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"nfd","","",216,[[["self"]],["decompositions"]]],[11,"nfkd","","",216,[[["self"]],["decompositions"]]],[11,"nfc","","",216,[[["self"]],["recompositions"]]],[11,"nfkc","","",216,[[["self"]],["recompositions"]]],[11,"stream_safe","","",216,[[["self"]],["streamsafe"]]],[11,"into_collection","","",216,[[["self"]],["smallvec"]]],[11,"mapped","","",216,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",216,[[["self"]],["result",["parseerr"]]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"into_iter","","",217,[[["self"]],["i"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"nfd","","",217,[[["self"]],["decompositions"]]],[11,"nfkd","","",217,[[["self"]],["decompositions"]]],[11,"nfc","","",217,[[["self"]],["recompositions"]]],[11,"nfkc","","",217,[[["self"]],["recompositions"]]],[11,"stream_safe","","",217,[[["self"]],["streamsafe"]]],[11,"into_collection","","",217,[[["self"]],["smallvec"]]],[11,"mapped","","",217,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",217,[[["self"]],["result",["parseerr"]]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"into_iter","","",218,[[["self"]],["i"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"nfd","","",218,[[["self"]],["decompositions"]]],[11,"nfkd","","",218,[[["self"]],["decompositions"]]],[11,"nfc","","",218,[[["self"]],["recompositions"]]],[11,"nfkc","","",218,[[["self"]],["recompositions"]]],[11,"stream_safe","","",218,[[["self"]],["streamsafe"]]],[11,"into_collection","","",218,[[["self"]],["smallvec"]]],[11,"mapped","","",218,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",218,[[["self"]],["result",["parseerr"]]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"into_iter","","",219,[[["self"]],["i"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"nfd","","",219,[[["self"]],["decompositions"]]],[11,"nfkd","","",219,[[["self"]],["decompositions"]]],[11,"nfc","","",219,[[["self"]],["recompositions"]]],[11,"nfkc","","",219,[[["self"]],["recompositions"]]],[11,"stream_safe","","",219,[[["self"]],["streamsafe"]]],[11,"into_collection","","",219,[[["self"]],["smallvec"]]],[11,"mapped","","",219,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",219,[[["self"]],["result",["parseerr"]]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"into_iter","","",220,[[["self"]],["i"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"nfd","","",220,[[["self"]],["decompositions"]]],[11,"nfkd","","",220,[[["self"]],["decompositions"]]],[11,"nfc","","",220,[[["self"]],["recompositions"]]],[11,"nfkc","","",220,[[["self"]],["recompositions"]]],[11,"stream_safe","","",220,[[["self"]],["streamsafe"]]],[11,"into_collection","","",220,[[["self"]],["smallvec"]]],[11,"mapped","","",220,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",220,[[["self"]],["result",["parseerr"]]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"into_iter","","",221,[[["self"]],["i"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"nfd","","",221,[[["self"]],["decompositions"]]],[11,"nfkd","","",221,[[["self"]],["decompositions"]]],[11,"nfc","","",221,[[["self"]],["recompositions"]]],[11,"nfkc","","",221,[[["self"]],["recompositions"]]],[11,"stream_safe","","",221,[[["self"]],["streamsafe"]]],[11,"into_collection","","",221,[[["self"]],["smallvec"]]],[11,"mapped","","",221,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",221,[[["self"]],["result",["parseerr"]]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"into_iter","","",222,[[["self"]],["i"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"nfd","","",222,[[["self"]],["decompositions"]]],[11,"nfkd","","",222,[[["self"]],["decompositions"]]],[11,"nfc","","",222,[[["self"]],["recompositions"]]],[11,"nfkc","","",222,[[["self"]],["recompositions"]]],[11,"stream_safe","","",222,[[["self"]],["streamsafe"]]],[11,"into_collection","","",222,[[["self"]],["smallvec"]]],[11,"mapped","","",222,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",222,[[["self"]],["result",["parseerr"]]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"into_iter","","",223,[[["self"]],["i"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"nfd","","",223,[[["self"]],["decompositions"]]],[11,"nfkd","","",223,[[["self"]],["decompositions"]]],[11,"nfc","","",223,[[["self"]],["recompositions"]]],[11,"nfkc","","",223,[[["self"]],["recompositions"]]],[11,"stream_safe","","",223,[[["self"]],["streamsafe"]]],[11,"into_collection","","",223,[[["self"]],["smallvec"]]],[11,"mapped","","",223,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",223,[[["self"]],["result",["parseerr"]]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"into_iter","","",224,[[["self"]],["i"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"nfd","","",224,[[["self"]],["decompositions"]]],[11,"nfkd","","",224,[[["self"]],["decompositions"]]],[11,"nfc","","",224,[[["self"]],["recompositions"]]],[11,"nfkc","","",224,[[["self"]],["recompositions"]]],[11,"stream_safe","","",224,[[["self"]],["streamsafe"]]],[11,"into_collection","","",224,[[["self"]],["smallvec"]]],[11,"mapped","","",224,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",224,[[["self"]],["result",["parseerr"]]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"into_iter","","",225,[[["self"]],["i"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"nfd","","",225,[[["self"]],["decompositions"]]],[11,"nfkd","","",225,[[["self"]],["decompositions"]]],[11,"nfc","","",225,[[["self"]],["recompositions"]]],[11,"nfkc","","",225,[[["self"]],["recompositions"]]],[11,"stream_safe","","",225,[[["self"]],["streamsafe"]]],[11,"into_collection","","",225,[[["self"]],["smallvec"]]],[11,"mapped","","",225,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",225,[[["self"]],["result",["parseerr"]]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"nfd","","",226,[[["self"]],["decompositions"]]],[11,"nfkd","","",226,[[["self"]],["decompositions"]]],[11,"nfc","","",226,[[["self"]],["recompositions"]]],[11,"nfkc","","",226,[[["self"]],["recompositions"]]],[11,"stream_safe","","",226,[[["self"]],["streamsafe"]]],[11,"into_collection","","",226,[[["self"]],["smallvec"]]],[11,"mapped","","",226,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",226,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::option","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"into_collection","","",227,[[["self"]],["smallvec"]]],[11,"mapped","","",227,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",227,[[["self"]],["result",["parseerr"]]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"into_collection","","",228,[[["self"]],["smallvec"]]],[11,"mapped","","",228,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",228,[[["self"]],["result",["parseerr"]]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"nfd","","",229,[[["self"]],["decompositions"]]],[11,"nfkd","","",229,[[["self"]],["decompositions"]]],[11,"nfc","","",229,[[["self"]],["recompositions"]]],[11,"nfkc","","",229,[[["self"]],["recompositions"]]],[11,"stream_safe","","",229,[[["self"]],["streamsafe"]]],[11,"into_collection","","",229,[[["self"]],["smallvec"]]],[11,"mapped","","",229,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",229,[[["self"]],["result",["parseerr"]]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"into_collection","","",230,[[["self"]],["smallvec"]]],[11,"mapped","","",230,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",230,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",230,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::raw","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into_collection","","",75,[[["self"]],["smallvec"]]],[11,"mapped","","",75,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",75,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::result","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"into_collection","","",231,[[["self"]],["smallvec"]]],[11,"mapped","","",231,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",231,[[["self"]],["result",["parseerr"]]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into_iter","","",232,[[["self"]],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"into_collection","","",232,[[["self"]],["smallvec"]]],[11,"mapped","","",232,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",232,[[["self"]],["result",["parseerr"]]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"into_iter","","",233,[[["self"]],["i"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"nfd","","",233,[[["self"]],["decompositions"]]],[11,"nfkd","","",233,[[["self"]],["decompositions"]]],[11,"nfc","","",233,[[["self"]],["recompositions"]]],[11,"nfkc","","",233,[[["self"]],["recompositions"]]],[11,"stream_safe","","",233,[[["self"]],["streamsafe"]]],[11,"into_collection","","",233,[[["self"]],["smallvec"]]],[11,"mapped","","",233,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",233,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::ffi","",234,[[["self"]],["u"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"into_collection","","",234,[[["self"]],["smallvec"]]],[11,"mapped","","",234,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",234,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"into_iter","","",235,[[["self"]],["i"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"into_collection","","",235,[[["self"]],["smallvec"]]],[11,"mapped","","",235,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",235,[[["self"]],["result",["parseerr"]]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into_iter","","",236,[[["self"]],["i"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"into_collection","","",236,[[["self"]],["smallvec"]]],[11,"mapped","","",236,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",236,[[["self"]],["result",["parseerr"]]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"into_iter","","",237,[[["self"]],["i"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"into_collection","","",237,[[["self"]],["smallvec"]]],[11,"mapped","","",237,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",237,[[["self"]],["result",["parseerr"]]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into_iter","","",238,[[["self"]],["i"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"into_collection","","",238,[[["self"]],["smallvec"]]],[11,"mapped","","",238,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",238,[[["self"]],["result",["parseerr"]]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"into_iter","","",239,[[["self"]],["i"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"into_collection","","",239,[[["self"]],["smallvec"]]],[11,"mapped","","",239,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",239,[[["self"]],["result",["parseerr"]]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"into_iter","","",240,[[["self"]],["i"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"into_collection","","",240,[[["self"]],["smallvec"]]],[11,"mapped","","",240,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",240,[[["self"]],["result",["parseerr"]]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"into_iter","","",241,[[["self"]],["i"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"into_collection","","",241,[[["self"]],["smallvec"]]],[11,"mapped","","",241,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",241,[[["self"]],["result",["parseerr"]]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into_iter","","",242,[[["self"]],["i"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"into_collection","","",242,[[["self"]],["smallvec"]]],[11,"mapped","","",242,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",242,[[["self"]],["result",["parseerr"]]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"into_iter","","",243,[[["self"]],["i"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"into_collection","","",243,[[["self"]],["smallvec"]]],[11,"mapped","","",243,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",243,[[["self"]],["result",["parseerr"]]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into_iter","","",244,[[["self"]],["i"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"into_collection","","",244,[[["self"]],["smallvec"]]],[11,"mapped","","",244,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",244,[[["self"]],["result",["parseerr"]]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"into_iter","","",245,[[["self"]],["i"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"into_collection","","",245,[[["self"]],["smallvec"]]],[11,"mapped","","",245,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",245,[[["self"]],["result",["parseerr"]]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"into_iter","","",246,[[["self"]],["i"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"into_collection","","",246,[[["self"]],["smallvec"]]],[11,"mapped","","",246,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",246,[[["self"]],["result",["parseerr"]]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into_iter","","",247,[[["self"]],["i"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"into_collection","","",247,[[["self"]],["smallvec"]]],[11,"mapped","","",247,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",247,[[["self"]],["result",["parseerr"]]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"into_iter","","",248,[[["self"]],["i"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"into_collection","","",248,[[["self"]],["smallvec"]]],[11,"mapped","","",248,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",248,[[["self"]],["result",["parseerr"]]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into_iter","","",249,[[["self"]],["i"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"into_collection","","",249,[[["self"]],["smallvec"]]],[11,"mapped","","",249,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",249,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::str::pattern","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into_collection","","",78,[[["self"]],["smallvec"]]],[11,"mapped","","",78,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",78,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",78,[[["self"],["k"]],["bool"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,N],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"into_collection","","",250,[[["self"]],["smallvec"]]],[11,"mapped","","",250,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",250,[[["self"]],["result",["parseerr"]]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"into_collection","","",251,[[["self"]],["smallvec"]]],[11,"mapped","","",251,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",251,[[["self"]],["result",["parseerr"]]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"into_collection","","",252,[[["self"]],["smallvec"]]],[11,"mapped","","",252,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",252,[[["self"]],["result",["parseerr"]]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"into_collection","","",253,[[["self"]],["smallvec"]]],[11,"mapped","","",253,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",253,[[["self"]],["result",["parseerr"]]]],[11,"to_string","rocket_app::domain::error::err_msg::_core::str::lossy","",254,[[["self"]],["string"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into_iter","","",255,[[["self"]],["i"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"into_collection","","",255,[[["self"]],["smallvec"]]],[11,"mapped","","",255,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",255,[[["self"]],["result",["parseerr"]]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into_collection","","",81,[[["self"]],["smallvec"]]],[11,"mapped","","",81,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",81,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",81,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::str","",256,[[["self"]],["u"]]],[11,"to_string","","",256,[[["self"]],["string"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"into_collection","","",256,[[["self"]],["smallvec"]]],[11,"mapped","","",256,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",256,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",256,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",256,[[["self"]],["fail"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"to_string","","",257,[[["self"]],["string"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,N],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"into_collection","","",257,[[["self"]],["smallvec"]]],[11,"mapped","","",257,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",257,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",257,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",257,[[["self"]],["fail"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"into_iter","","",258,[[["self"]],["i"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"nfd","","",258,[[["self"]],["decompositions"]]],[11,"nfkd","","",258,[[["self"]],["decompositions"]]],[11,"nfc","","",258,[[["self"]],["recompositions"]]],[11,"nfkc","","",258,[[["self"]],["recompositions"]]],[11,"stream_safe","","",258,[[["self"]],["streamsafe"]]],[11,"into_collection","","",258,[[["self"]],["smallvec"]]],[11,"mapped","","",258,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",258,[[["self"]],["result",["parseerr"]]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,N],[11,"from","","",259,[[["t"]],["t"]]],[11,"into_iter","","",259,[[["self"]],["i"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"into_collection","","",259,[[["self"]],["smallvec"]]],[11,"mapped","","",259,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",259,[[["self"]],["result",["parseerr"]]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"into_iter","","",260,[[["self"]],["i"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"into_collection","","",260,[[["self"]],["smallvec"]]],[11,"mapped","","",260,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",260,[[["self"]],["result",["parseerr"]]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"into_iter","","",261,[[["self"]],["i"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"into_collection","","",261,[[["self"]],["smallvec"]]],[11,"mapped","","",261,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",261,[[["self"]],["result",["parseerr"]]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"into_iter","","",262,[[["self"]],["i"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"into_collection","","",262,[[["self"]],["smallvec"]]],[11,"mapped","","",262,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",262,[[["self"]],["result",["parseerr"]]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"into_iter","","",263,[[["self"]],["i"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"into_collection","","",263,[[["self"]],["smallvec"]]],[11,"mapped","","",263,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",263,[[["self"]],["result",["parseerr"]]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,N],[11,"from","","",264,[[["t"]],["t"]]],[11,"into_iter","","",264,[[["self"]],["i"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"into_collection","","",264,[[["self"]],["smallvec"]]],[11,"mapped","","",264,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",264,[[["self"]],["result",["parseerr"]]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,N],[11,"from","","",265,[[["t"]],["t"]]],[11,"into_iter","","",265,[[["self"]],["i"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"into_collection","","",265,[[["self"]],["smallvec"]]],[11,"mapped","","",265,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",265,[[["self"]],["result",["parseerr"]]]],[11,"into","","",266,[[["self"]],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"into_iter","","",266,[[["self"]],["i"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"into_collection","","",266,[[["self"]],["smallvec"]]],[11,"mapped","","",266,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",266,[[["self"]],["result",["parseerr"]]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"into_iter","","",267,[[["self"]],["i"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"into_collection","","",267,[[["self"]],["smallvec"]]],[11,"mapped","","",267,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",267,[[["self"]],["result",["parseerr"]]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"into_iter","","",268,[[["self"]],["i"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"into_collection","","",268,[[["self"]],["smallvec"]]],[11,"mapped","","",268,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",268,[[["self"]],["result",["parseerr"]]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"into_iter","","",269,[[["self"]],["i"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"into_collection","","",269,[[["self"]],["smallvec"]]],[11,"mapped","","",269,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",269,[[["self"]],["result",["parseerr"]]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"into_iter","","",270,[[["self"]],["i"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"into_collection","","",270,[[["self"]],["smallvec"]]],[11,"mapped","","",270,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",270,[[["self"]],["result",["parseerr"]]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"into_iter","","",271,[[["self"]],["i"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"into_collection","","",271,[[["self"]],["smallvec"]]],[11,"mapped","","",271,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",271,[[["self"]],["result",["parseerr"]]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"into_iter","","",272,[[["self"]],["i"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"into_collection","","",272,[[["self"]],["smallvec"]]],[11,"mapped","","",272,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",272,[[["self"]],["result",["parseerr"]]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"into_iter","","",273,[[["self"]],["i"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"into_collection","","",273,[[["self"]],["smallvec"]]],[11,"mapped","","",273,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",273,[[["self"]],["result",["parseerr"]]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"into_iter","","",274,[[["self"]],["i"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"into_collection","","",274,[[["self"]],["smallvec"]]],[11,"mapped","","",274,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",274,[[["self"]],["result",["parseerr"]]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"into_iter","","",275,[[["self"]],["i"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"into_collection","","",275,[[["self"]],["smallvec"]]],[11,"mapped","","",275,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",275,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::hash","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"into_collection","","",276,[[["self"]],["smallvec"]]],[11,"mapped","","",276,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",276,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",276,[[["self"],["k"]],["bool"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"into_collection","","",277,[[["self"]],["smallvec"]]],[11,"mapped","","",277,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",277,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::fmt","",86,[[["self"]],["u"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into_collection","","",86,[[["self"]],["smallvec"]]],[11,"mapped","","",86,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",86,[[["self"]],["result",["parseerr"]]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_string","","",278,[[["self"]],["string"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"into_collection","","",278,[[["self"]],["smallvec"]]],[11,"mapped","","",278,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",278,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",278,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",278,[[["self"]],["fail"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"into_collection","","",279,[[["self"]],["smallvec"]]],[11,"mapped","","",279,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",279,[[["self"]],["result",["parseerr"]]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_string","","",280,[[["self"]],["string"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"into_collection","","",280,[[["self"]],["smallvec"]]],[11,"mapped","","",280,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",280,[[["self"]],["result",["parseerr"]]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"into_collection","","",281,[[["self"]],["smallvec"]]],[11,"mapped","","",281,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",281,[[["self"]],["result",["parseerr"]]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"into_collection","","",282,[[["self"]],["smallvec"]]],[11,"mapped","","",282,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",282,[[["self"]],["result",["parseerr"]]]],[11,"into","","",283,[[["self"]],["u"]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"get_type_id","","",283,[[["self"]],["typeid"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"try_into","","",283,[[["self"]],["result"]]],[11,"into_collection","","",283,[[["self"]],["smallvec"]]],[11,"mapped","","",283,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",283,[[["self"]],["result",["parseerr"]]]],[11,"into","","",284,[[["self"]],["u"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"get_type_id","","",284,[[["self"]],["typeid"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"try_into","","",284,[[["self"]],["result"]]],[11,"into_collection","","",284,[[["self"]],["smallvec"]]],[11,"mapped","","",284,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",284,[[["self"]],["result",["parseerr"]]]],[11,"into","","",285,[[["self"]],["u"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"get_type_id","","",285,[[["self"]],["typeid"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"try_into","","",285,[[["self"]],["result"]]],[11,"into_collection","","",285,[[["self"]],["smallvec"]]],[11,"mapped","","",285,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",285,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"]],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,N],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"get_type_id","","",286,[[["self"]],["typeid"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"try_into","","",286,[[["self"]],["result"]]],[11,"into_collection","","",286,[[["self"]],["smallvec"]]],[11,"mapped","","",286,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",286,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",286,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into_collection","","",99,[[["self"]],["smallvec"]]],[11,"mapped","","",99,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",99,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",99,[[["self"],["k"]],["bool"]]],[11,"into","","",287,[[["self"]],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,N],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"get_type_id","","",287,[[["self"]],["typeid"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"try_into","","",287,[[["self"]],["result"]]],[11,"into_collection","","",287,[[["self"]],["smallvec"]]],[11,"mapped","","",287,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",287,[[["self"]],["result",["parseerr"]]]],[11,"into","","",288,[[["self"]],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,N],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"get_type_id","","",288,[[["self"]],["typeid"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"try_into","","",288,[[["self"]],["result"]]],[11,"into_collection","","",288,[[["self"]],["smallvec"]]],[11,"mapped","","",288,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",288,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg::_core::alloc","",100,[[["self"]],["u"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into_collection","","",100,[[["self"]],["smallvec"]]],[11,"mapped","","",100,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",100,[[["self"]],["result",["parseerr"]]]],[11,"into","","",289,[[["self"]],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,N],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"get_type_id","","",289,[[["self"]],["typeid"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"try_into","","",289,[[["self"]],["result"]]],[11,"into_collection","","",289,[[["self"]],["smallvec"]]],[11,"mapped","","",289,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",289,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",289,[[["self"],["k"]],["bool"]]],[11,"into","","",290,[[["self"]],["u"]]],[11,"to_string","","",290,[[["self"]],["string"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,N],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"get_type_id","","",290,[[["self"]],["typeid"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"try_into","","",290,[[["self"]],["result"]]],[11,"into_collection","","",290,[[["self"]],["smallvec"]]],[11,"mapped","","",290,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",290,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",290,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",290,[[["self"]],["fail"]]],[11,"into","","",291,[[["self"]],["u"]]],[11,"to_string","","",291,[[["self"]],["string"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,N],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"get_type_id","","",291,[[["self"]],["typeid"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"try_into","","",291,[[["self"]],["result"]]],[11,"into_collection","","",291,[[["self"]],["smallvec"]]],[11,"mapped","","",291,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",291,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",291,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",291,[[["self"]],["fail"]]],[11,"into","","",292,[[["self"]],["u"]]],[11,"to_string","","",292,[[["self"]],["string"]]],[11,"to_owned","","",292,[[["self"]],["t"]]],[11,"clone_into","","",292,N],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"into_collection","","",292,[[["self"]],["smallvec"]]],[11,"mapped","","",292,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",292,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",292,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",292,[[["self"]],["fail"]]],[11,"into","rocket_app::domain::error::err_msg::_core::arch::x86_64","",293,[[["self"]],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,N],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"into_collection","","",293,[[["self"]],["smallvec"]]],[11,"mapped","","",293,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",293,[[["self"]],["result",["parseerr"]]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,N],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"into_collection","","",294,[[["self"]],["smallvec"]]],[11,"mapped","","",294,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",294,[[["self"]],["result",["parseerr"]]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,N],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"into_collection","","",295,[[["self"]],["smallvec"]]],[11,"mapped","","",295,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",295,[[["self"]],["result",["parseerr"]]]],[11,"into","","",296,[[["self"]],["u"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,N],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"into_collection","","",296,[[["self"]],["smallvec"]]],[11,"mapped","","",296,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",296,[[["self"]],["result",["parseerr"]]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into_collection","","",103,[[["self"]],["smallvec"]]],[11,"mapped","","",103,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",103,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",103,[[["self"],["k"]],["bool"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"to_owned","","",297,[[["self"]],["t"]]],[11,"clone_into","","",297,N],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"into_collection","","",297,[[["self"]],["smallvec"]]],[11,"mapped","","",297,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",297,[[["self"]],["result",["parseerr"]]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"to_owned","","",298,[[["self"]],["t"]]],[11,"clone_into","","",298,N],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"into_collection","","",298,[[["self"]],["smallvec"]]],[11,"mapped","","",298,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",298,[[["self"]],["result",["parseerr"]]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"to_owned","","",299,[[["self"]],["t"]]],[11,"clone_into","","",299,N],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"into_collection","","",299,[[["self"]],["smallvec"]]],[11,"mapped","","",299,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",299,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::error::err_msg","",300,[[["self"]],["u"]]],[11,"to_string","","",300,[[["self"]],["string"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"into_collection","","",300,[[["self"]],["smallvec"]]],[11,"mapped","","",300,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",300,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",300,[[["self"]],["fail"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"to_string","","",301,[[["self"]],["string"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"into_collection","","",301,[[["self"]],["smallvec"]]],[11,"mapped","","",301,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",301,[[["self"]],["result",["parseerr"]]]],[11,"as_fail","","",301,[[["self"]],["fail"]]],[11,"into","","",302,[[["self"]],["u"]]],[11,"to_string","","",302,[[["self"]],["string"]]],[11,"to_owned","","",302,[[["self"]],["t"]]],[11,"clone_into","","",302,N],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"get_type_id","","",302,[[["self"]],["typeid"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"try_into","","",302,[[["self"]],["result"]]],[11,"into_collection","","",302,[[["self"]],["smallvec"]]],[11,"mapped","","",302,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",302,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",302,[[["self"],["k"]],["bool"]]],[11,"as_fail","","",302,[[["self"]],["fail"]]],[11,"into","","",303,[[["self"]],["u"]]],[11,"to_string","","",303,[[["self"]],["string"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"get_type_id","","",303,[[["self"]],["typeid"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"try_into","","",303,[[["self"]],["result"]]],[11,"into_collection","","",303,[[["self"]],["smallvec"]]],[11,"mapped","","",303,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",303,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::id","",107,[[["self"]],["u"]]],[11,"to_string","","",107,[[["self"]],["string"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into_collection","","",107,[[["self"]],["smallvec"]]],[11,"mapped","","",107,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",107,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",107,[[["self"],["k"]],["bool"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into_collection","","",108,[[["self"]],["smallvec"]]],[11,"mapped","","",108,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",108,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::version","",109,[[["self"]],["u"]]],[11,"to_string","","",109,[[["self"]],["string"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into_collection","","",109,[[["self"]],["smallvec"]]],[11,"mapped","","",109,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",109,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",109,[[["self"],["k"]],["bool"]]],[11,"into","rocket_app::domain::customers::commands::create_customer","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into_collection","","",110,[[["self"]],["smallvec"]]],[11,"mapped","","",110,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",110,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::customers::model","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into_collection","","",113,[[["self"]],["smallvec"]]],[11,"mapped","","",113,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",113,[[["self"]],["result",["parseerr"]]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into_collection","","",114,[[["self"]],["smallvec"]]],[11,"mapped","","",114,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",114,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::customers::queries::get_customer","",115,[[["self"]],["u"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into_collection","","",115,[[["self"]],["smallvec"]]],[11,"mapped","","",115,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",115,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::customers::queries::get_customer_with_orders","",117,[[["self"]],["u"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into_collection","","",117,[[["self"]],["smallvec"]]],[11,"mapped","","",117,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",117,[[["self"]],["result",["parseerr"]]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into_collection","","",118,[[["self"]],["smallvec"]]],[11,"mapped","","",118,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",118,[[["self"]],["result",["parseerr"]]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into_collection","","",119,[[["self"]],["smallvec"]]],[11,"mapped","","",119,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",119,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::customers::resolver","",304,[[["self"]],["u"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"get_type_id","","",304,[[["self"]],["typeid"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"try_into","","",304,[[["self"]],["result"]]],[11,"into_collection","","",304,[[["self"]],["smallvec"]]],[11,"mapped","","",304,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",304,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::commands::add_or_update_product","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into_collection","","",121,[[["self"]],["smallvec"]]],[11,"mapped","","",121,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",121,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::commands::create_order","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into_collection","","",123,[[["self"]],["smallvec"]]],[11,"mapped","","",123,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",123,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::model","",305,[[["self"]],["u"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"get_type_id","","",305,[[["self"]],["typeid"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"try_into","","",305,[[["self"]],["result"]]],[11,"into_collection","","",305,[[["self"]],["smallvec"]]],[11,"mapped","","",305,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",305,[[["self"]],["result",["parseerr"]]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into_collection","","",125,[[["self"]],["smallvec"]]],[11,"mapped","","",125,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",125,[[["self"]],["result",["parseerr"]]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into_collection","","",126,[[["self"]],["smallvec"]]],[11,"mapped","","",126,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",126,[[["self"]],["result",["parseerr"]]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into_collection","","",129,[[["self"]],["smallvec"]]],[11,"mapped","","",129,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",129,[[["self"]],["result",["parseerr"]]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into_collection","","",128,[[["self"]],["smallvec"]]],[11,"mapped","","",128,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",128,[[["self"]],["result",["parseerr"]]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into_collection","","",127,[[["self"]],["smallvec"]]],[11,"mapped","","",127,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",127,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::queries::get_order","",130,[[["self"]],["u"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into_collection","","",130,[[["self"]],["smallvec"]]],[11,"mapped","","",130,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",130,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::queries::get_order_with_products","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into_collection","","",132,[[["self"]],["smallvec"]]],[11,"mapped","","",132,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",132,[[["self"]],["result",["parseerr"]]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into_collection","","",133,[[["self"]],["smallvec"]]],[11,"mapped","","",133,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",133,[[["self"]],["result",["parseerr"]]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into_collection","","",134,[[["self"]],["smallvec"]]],[11,"mapped","","",134,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",134,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::queries::get_order_summaries_for_customer","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into_collection","","",136,[[["self"]],["smallvec"]]],[11,"mapped","","",136,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",136,[[["self"]],["result",["parseerr"]]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"into_collection","","",137,[[["self"]],["smallvec"]]],[11,"mapped","","",137,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",137,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::orders::resolver","",306,[[["self"]],["u"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"get_type_id","","",306,[[["self"]],["typeid"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"try_into","","",306,[[["self"]],["result"]]],[11,"into_collection","","",306,[[["self"]],["smallvec"]]],[11,"mapped","","",306,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",306,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::commands::create_product","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"into_collection","","",139,[[["self"]],["smallvec"]]],[11,"mapped","","",139,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",139,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::commands::set_product_title","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"into_collection","","",141,[[["self"]],["smallvec"]]],[11,"mapped","","",141,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",141,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::model","",307,[[["self"]],["u"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"get_type_id","","",307,[[["self"]],["typeid"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"try_into","","",307,[[["self"]],["result"]]],[11,"into_collection","","",307,[[["self"]],["smallvec"]]],[11,"mapped","","",307,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",307,[[["self"]],["result",["parseerr"]]]],[11,"into","","",308,[[["self"]],["u"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"get_type_id","","",308,[[["self"]],["typeid"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"try_into","","",308,[[["self"]],["result"]]],[11,"into_collection","","",308,[[["self"]],["smallvec"]]],[11,"mapped","","",308,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",308,[[["self"]],["result",["parseerr"]]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"into_collection","","",143,[[["self"]],["smallvec"]]],[11,"mapped","","",143,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",143,[[["self"]],["result",["parseerr"]]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"into_collection","","",144,[[["self"]],["smallvec"]]],[11,"mapped","","",144,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",144,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::queries::get_product","",145,[[["self"]],["u"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"into_collection","","",145,[[["self"]],["smallvec"]]],[11,"mapped","","",145,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",145,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::queries::get_product_summaries","",147,[[["self"]],["u"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"into_collection","","",147,[[["self"]],["smallvec"]]],[11,"mapped","","",147,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",147,[[["self"]],["result",["parseerr"]]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"into_collection","","",148,[[["self"]],["smallvec"]]],[11,"mapped","","",148,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",148,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_app::domain::products::resolver","",309,[[["self"]],["u"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"get_type_id","","",309,[[["self"]],["typeid"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"try_into","","",309,[[["self"]],["result"]]],[11,"into_collection","","",309,[[["self"]],["smallvec"]]],[11,"mapped","","",309,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",309,[[["self"]],["result",["parseerr"]]]],[11,"report","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"]],["i32"]]],[11,"report","","",11,[[["self"]],["i32"]]],[11,"description","rocket_app::domain::error::err_msg::_core::num","",159,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::str","",257,[[["self"]],["str"]]],[11,"description","","",256,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::num","",160,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::alloc","",292,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::array","",170,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::char","",197,[[["self"]],["str"]]],[11,"description","","",196,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::alloc","",291,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::cell","",186,[[["self"]],["str"]]],[11,"description","","",187,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::alloc","",290,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::char","",198,[[["self"]],["str"]]],[11,"description","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"]],["str"]]],[11,"len","rocket_app::domain::error::err_msg::_core::iter","",223,[[["self"]],["usize"]]],[11,"len","rocket_app::domain::error::err_msg::_core::char","",192,[[["self"]],["usize"]]],[11,"len","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"]],["usize"]]],[11,"is_empty","","",235,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::iter","",212,[[["self"]],["usize"]]],[11,"is_empty","","",212,[[["self"]],["bool"]]],[11,"len","","",222,[[["self"]],["usize"]]],[11,"is_empty","","",222,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"]],["usize"]]],[11,"is_empty","rocket_app::domain::error::err_msg::_core::slice","",249,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::iter","",204,[[["self"]],["usize"]]],[11,"is_empty","","",204,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::str","",260,[[["self"]],["usize"]]],[11,"is_empty","","",260,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::slice","",236,[[["self"]],["usize"]]],[11,"is_empty","","",236,[[["self"]],["bool"]]],[11,"len","rocket_app::domain::error::err_msg::_core::iter","",203,[[["self"]],["usize"]]],[11,"is_empty","","",203,[[["self"]],["bool"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"len","","",209,[[["self"]],["usize"]]],[11,"is_empty","","",209,[[["self"]],["bool"]]],[11,"len","","",221,[[["self"]],["usize"]]],[11,"is_empty","","",221,[[["self"]],["bool"]]],[11,"is_empty","rocket_app::domain::error::err_msg::_core::slice","",248,[[["self"]],["bool"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",172,[[["bool"]],["atomicbool"]]],[11,"from","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["option"]],["option"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",173,N],[11,"from","rocket_app::domain::error::err_msg::_core::cell","",185,[[["t"]],["refcell"]]],[11,"from","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["t"]],["nonnull"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",183,[[["usize"]],["atomicusize"]]],[11,"from","","",181,[[["u64"]],["atomicu64"]]],[11,"from","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["option"]],["option"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",180,[[["i64"]],["atomici64"]]],[11,"from","","",177,[[["u16"]],["atomicu16"]]],[11,"from","","",182,[[["isize"]],["atomicisize"]]],[11,"from","rocket_app::domain::error::err_msg::_core::task","",287,[[["localwaker"]],["waker"]]],[11,"from","","",99,[[["t"]],["poll"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",179,[[["u32"]],["atomicu32"]]],[11,"from","rocket_app::domain::error::err_msg::_core::cell","",184,[[["t"]],["cell"]]],[11,"from","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["unique"]],["nonnull"]]],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",178,[[["i32"]],["atomici32"]]],[11,"from","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["t"]],["nonnull"]]],[11,"from","rocket_app::domain::error::err_msg::_core::cell","",190,[[["t"]],["unsafecell"]]],[11,"from","rocket_app::domain::error::err_msg::_core::num","",159,N],[11,"from","rocket_app::domain::error::err_msg::_core::sync::atomic","",174,[[["i8"]],["atomici8"]]],[11,"from","","",176,[[["i16"]],["atomici16"]]],[11,"from","","",175,[[["u8"]],["atomicu8"]]],[11,"from","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["t"]],["option"]]],[11,"rem_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"rem_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","rocket_app::domain::error::err_msg::_core::time","",286,N],[11,"div_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"div_assign","","",4,N],[11,"as_ref","rocket_app::domain::error::err_msg::_core::slice","",235,N],[11,"mul_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","rocket_app::domain::error::err_msg::_core::time","",286,N],[11,"mul_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"mul_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","rocket_app::domain::error::err_msg::_core::time","",286,N],[11,"sub_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"sub_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","rocket_app::domain::error::err_msg::_core::time","",286,N],[11,"add_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"add_assign","","",4,N],[11,"write_str","rocket_app::domain::error::err_msg::_core::fmt","",279,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",279,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","",279,[[["self"],["arguments"]],["result",["error"]]]],[11,"from_iter","rocket_app::domain::error::err_msg::_core::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",11,[[["i"]],["result"]]],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`][Option::None], no further elements are taken, and the [`None`][Option::None] is returned. Should no [`None`][Option::None] occur, a container with the values of each [`Option`] is returned.",12,[[["i"]],["option"]]],[11,"neg","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"]],["wrapping",["i128"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["i64"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["usize"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["u64"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["u32"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["i32"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["i8"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["u128"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["u8"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["u16"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["isize"]]]],[11,"neg","","",4,[[["self"]],["wrapping",["i16"]]]],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"shr_assign","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"sub","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"sub","","",4,N],[11,"sub","","",4,N],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"sub","","",4,N],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"sub","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"sub","","",4,N],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"sub","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["duration"]],["duration"]]],[11,"sub","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"sub","","",4,N],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"sub","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"sub","","",4,N],[11,"sub","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"shr","","",4,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"bitxor","","",4,N],[11,"bitxor","","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitxor","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"bitxor","","",4,N],[11,"not","","",4,[[["self"]],["wrapping",["u32"]]]],[11,"not","","",4,[[["self"]],["wrapping",["i8"]]]],[11,"not","","",4,[[["self"]],["wrapping",["i64"]]]],[11,"not","","",4,[[["self"]],["wrapping",["i32"]]]],[11,"not","","",4,[[["self"]],["wrapping",["u128"]]]],[11,"not","","",4,[[["self"]],["wrapping",["i128"]]]],[11,"not","","",4,[[["self"]],["wrapping",["usize"]]]],[11,"not","","",4,[[["self"]],["wrapping",["u16"]]]],[11,"not","","",4,[[["self"]],["wrapping",["u8"]]]],[11,"not","","",4,[[["self"]],["wrapping",["isize"]]]],[11,"not","","",4,[[["self"]],["wrapping",["i16"]]]],[11,"not","","",4,[[["self"]],["wrapping",["u64"]]]],[11,"into_result","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"]],["result",["noneerror"]]]],[11,"from_ok","","",12,[[["t"]],["option"]]],[11,"from_error","","",12,[[["noneerror"]],["option"]]],[11,"into_result","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"]],["result"]]],[11,"from_error","","",99,N],[11,"from_ok","","",99,N],[11,"into_result","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"]],["result"]]],[11,"from_ok","","",11,[[["t"]],["result"]]],[11,"from_error","","",11,[[["e"]],["result"]]],[11,"into_result","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"]],["result"]]],[11,"from_error","","",99,N],[11,"from_ok","","",99,N],[11,"drop","","",287,N],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",180,[[],["atomici64"]]],[11,"default","rocket_app::domain::error::err_msg::_core::iter","",226,[[],["empty"]]],[11,"default","rocket_app::domain::error::err_msg::_core::cell","Creates a `RefCell<T>`, with the `Default` value for T.",185,[[],["refcell"]]],[11,"default","rocket_app::domain::error::err_msg::_core::prelude::v1","Returns [`None`][Option::None].",12,[[],["option"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",177,[[],["atomicu16"]]],[11,"default","rocket_app::domain::error::err_msg::_core::time","",286,[[],["duration"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",176,[[],["atomici16"]]],[11,"default","","Creates a null `AtomicPtr<T>`.",173,[[],["atomicptr"]]],[11,"default","","",182,[[],["atomicisize"]]],[11,"default","rocket_app::domain::error::err_msg::_core::fmt","",278,[[],["error"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",179,[[],["atomicu32"]]],[11,"default","rocket_app::domain::error::err_msg::_core::hash","",276,[[],["buildhasherdefault"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",174,[[],["atomici8"]]],[11,"default","","",178,[[],["atomici32"]]],[11,"default","rocket_app::domain::error::err_msg::_core::cell","Creates a `Cell<T>`, with the `Default` value for T.",184,[[],["cell"]]],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",190,[[],["unsafecell"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",175,[[],["atomicu8"]]],[11,"default","rocket_app::domain::error::err_msg::_core::hash","",277,[[],["siphasher"]]],[11,"default","rocket_app::domain::error::err_msg::_core::marker","",165,[[],["phantomdata"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","Creates an `AtomicBool` initialized to `false`.",172,[[],["atomicbool"]]],[11,"default","rocket_app::domain::error::err_msg::_core::mem","",162,[[],["manuallydrop"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",183,[[],["atomicusize"]]],[11,"default","rocket_app::domain::error::err_msg::_core::cmp","",62,[[],["reverse"]]],[11,"default","rocket_app::domain::error::err_msg::_core::num","",4,[[],["wrapping"]]],[11,"default","rocket_app::domain::error::err_msg::_core::sync::atomic","",181,[[],["atomicu64"]]],[11,"rem","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"rem","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"rem","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"rem","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"rem","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"rem","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"rem","","",4,N],[11,"rem","","",4,N],[11,"rem","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"mul","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"mul","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"mul","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"mul","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"mul","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"mul","","",4,N],[11,"mul","","",4,N],[11,"mul","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"mul","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["u32"]],["duration"]]],[11,"mul","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"mul","","",4,N],[11,"build_hasher","rocket_app::domain::error::err_msg::_core::hash","",276,[[["self"]],["h"]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["isize"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["i8"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["u16"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["u128"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["u64"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["u32"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["u8"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["usize"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["i64"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["i128"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["i32"]]]],[11,"shl","","",4,[[["self"],["usize"]],["wrapping",["i16"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::panic","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",291,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::array","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::lossy","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",290,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::fmt","",280,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",292,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::panic","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str::pattern","",252,[[["self"]],["searchstep"]]],[11,"next_match_back","","",252,[[["self"]],["option"]]],[11,"next_reject_back","","",252,[[["self"]],["option"]]],[11,"next_back","","",251,[[["self"]],["searchstep"]]],[11,"next_match_back","","",251,[[["self"]],["option"]]],[11,"next_reject_back","","",251,[[["self"]],["option"]]],[11,"next_back","","",250,[[["self"]],["searchstep"]]],[11,"next_match_back","","",250,[[["self"]],["option"]]],[11,"next_back","","",253,[[["self"]],["searchstep"]]],[11,"next_match_back","","",253,[[["self"]],["option"]]],[11,"start_bound","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"]],["bound"]]],[11,"end_bound","","",30,[[["self"]],["bound"]]],[11,"start_bound","","",28,[[["self"]],["bound"]]],[11,"end_bound","","",28,[[["self"]],["bound"]]],[11,"start_bound","","",28,[[["self"]],["bound"]]],[11,"end_bound","","",28,[[["self"]],["bound"]]],[11,"start_bound","","",167,[[["self"]],["bound"]]],[11,"end_bound","","",167,[[["self"]],["bound"]]],[11,"start_bound","","",168,[[["self"]],["bound"]]],[11,"end_bound","","",168,[[["self"]],["bound"]]],[11,"start_bound","","",38,[[["self"]],["bound"]]],[11,"end_bound","","",38,[[["self"]],["bound"]]],[11,"start_bound","","",30,[[["self"]],["bound"]]],[11,"end_bound","","",30,[[["self"]],["bound"]]],[11,"start_bound","","",43,[[["self"]],["bound"]]],[11,"end_bound","","",43,[[["self"]],["bound"]]],[11,"start_bound","","",43,[[["self"]],["bound"]]],[11,"end_bound","","",43,[[["self"]],["bound"]]],[11,"start_bound","","",167,[[["self"]],["bound"]]],[11,"end_bound","","",167,[[["self"]],["bound"]]],[11,"start_bound","","",38,[[["self"]],["bound"]]],[11,"end_bound","","",38,[[["self"]],["bound"]]],[11,"product","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["i16"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u64"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i64"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i32"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u128"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u64"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i16"]]]],[11,"product","","",4,[[["i"]],["wrapping",["isize"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u8"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u16"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i64"]]]],[11,"product","","",4,[[["i"]],["wrapping",["usize"]]]],[11,"product","","",4,[[["i"]],["wrapping",["usize"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i128"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i32"]]]],[11,"product","rocket_app::domain::error::err_msg::_core::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",11,[[["i"]],["result"]]],[11,"product","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["i8"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i128"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u8"]]]],[11,"product","","",4,[[["i"]],["wrapping",["isize"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u32"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u32"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u16"]]]],[11,"product","","",4,[[["i"]],["wrapping",["i8"]]]],[11,"product","","",4,[[["i"]],["wrapping",["u128"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitand","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitand","","",4,N],[11,"bitand","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"get","rocket_app::domain::error::err_msg::_core::ops","",30,N],[11,"get_mut","","",30,N],[11,"get_unchecked","","",30,N],[11,"get_unchecked_mut","","",30,N],[11,"index","","",30,N],[11,"index_mut","","",30,N],[11,"get","","",43,N],[11,"get_mut","","",43,N],[11,"get_unchecked","","",43,N],[11,"get_unchecked_mut","","",43,N],[11,"index","","",43,N],[11,"index_mut","","",43,N],[11,"get","","",38,N],[11,"get_mut","","",38,N],[11,"get_unchecked","","",38,N],[11,"get_unchecked_mut","","",38,N],[11,"index","","",38,N],[11,"index_mut","","",38,N],[11,"get","","",168,[[["self"],["str"]],["option"]]],[11,"get_mut","","",168,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",168,N],[11,"get_unchecked_mut","","",168,N],[11,"index","","",168,N],[11,"index_mut","","",168,N],[11,"get","","",167,[[["self"],["str"]],["option"]]],[11,"get_mut","","",167,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",167,N],[11,"get_unchecked_mut","","",167,N],[11,"index","","",167,N],[11,"index_mut","","",167,N],[11,"get","","",38,[[["self"],["str"]],["option"]]],[11,"get_mut","","",38,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",38,N],[11,"get_unchecked_mut","","",38,N],[11,"index","","",38,N],[11,"index_mut","","",38,N],[11,"get","","",43,[[["self"],["str"]],["option"]]],[11,"get_mut","","",43,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",43,N],[11,"get_unchecked_mut","","",43,N],[11,"index","","",43,N],[11,"index_mut","","",43,N],[11,"get","","",30,[[["self"],["str"]],["option"]]],[11,"get_mut","","",30,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",30,N],[11,"get_unchecked_mut","","",30,N],[11,"index","","",30,N],[11,"index_mut","","",30,N],[11,"get","","",168,N],[11,"get_mut","","",168,N],[11,"get_unchecked","","",168,N],[11,"get_unchecked_mut","","",168,N],[11,"index","","",168,N],[11,"index_mut","","",168,N],[11,"get","","",28,N],[11,"get_mut","","",28,N],[11,"get_unchecked","","",28,N],[11,"get_unchecked_mut","","",28,N],[11,"index","","",28,N],[11,"index_mut","","",28,N],[11,"get","","",28,[[["self"],["str"]],["option"]]],[11,"get_mut","","",28,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",28,N],[11,"get_unchecked_mut","","",28,N],[11,"index","","",28,N],[11,"index_mut","","",28,N],[11,"get","","",167,N],[11,"get_mut","","",167,N],[11,"get_unchecked","","",167,N],[11,"get_unchecked_mut","","",167,N],[11,"index","","",167,N],[11,"index_mut","","",167,N],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",224,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",273,[[["self"]],["option",["str"]]]],[11,"next_back","","",270,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::result","",233,[[["self"]],["option"]]],[11,"next_back","","",231,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::slice","",240,[[["self"]],["option"]]],[11,"next_back","","",245,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",219,[[["self"]],["option"]]],[11,"try_rfold","","",219,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",219,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",262,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::slice","",249,[[["self"]],["option"]]],[11,"next_back","","",247,[[["self"]],["option"]]],[11,"next_back","","",237,[[["self"]],["option"]]],[11,"next_back","","",238,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::result","",232,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::slice","",236,[[["self"]],["option"]]],[11,"try_rfold","","",236,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",236,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",248,[[["self"]],["option"]]],[11,"next_back","","",246,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",221,[[["self"]],["option"]]],[11,"try_rfold","","",221,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",221,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",260,[[["self"]],["option",["u8"]]]],[11,"rfind","","",260,[[["self"],["p"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::option","",229,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",204,[[["self"]],["option"]]],[11,"try_rfold","","",204,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",204,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",263,[[["self"]],["option",["str"]]]],[11,"next_back","","",258,[[["self"]],["option",["char"]]]],[11,"next_back","","",267,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",216,[[["self"]],["option"]]],[11,"try_rfold","","",216,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","","",207,[[["self"]],["option"]]],[11,"try_rfold","","",207,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",207,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",222,[[["self"]],["option"]]],[11,"try_rfold","","",222,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",222,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",211,[[["self"]],["option"]]],[11,"try_rfold","","",211,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",211,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::option","",228,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",261,[[["self"]],["option",["str"]]]],[11,"next_back","","",272,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",212,[[["self"]],["option"]]],[11,"try_rfold","","",212,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",212,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::option","",227,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",208,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"]],["option"]]],[11,"try_rfold","","",235,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",235,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",264,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",223,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",259,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::slice","",239,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",210,[[["self"]],["option"]]],[11,"try_rfold","","",210,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",210,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",220,[[["self"]],["option"]]],[11,"try_rfold","","",220,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",220,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",271,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",226,[[["self"]],["option"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::ascii","",171,[[["self"]],["option",["u8"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",269,[[["self"]],["option",["str"]]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::iter","",203,[[["self"]],["option"]]],[11,"try_rfold","","",203,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",203,[[["self"],["acc"],["f"]],["acc"]]],[11,"rfind","","",203,[[["self"],["p"]],["option"]]],[11,"next_back","","",221,[[["self"]],["option"]]],[11,"try_rfold","","",221,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",221,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",209,[[["self"]],["option"]]],[11,"try_rfold","","",209,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",209,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","rocket_app::domain::error::err_msg::_core::str","",274,[[["self"]],["option",["str"]]]],[11,"next_back","","",268,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",237,[[["self"]],["option"]]],[11,"size_hint","","",237,N],[11,"next","","",239,[[["self"]],["option"]]],[11,"size_hint","","",239,N],[11,"next","rocket_app::domain::error::err_msg::_core::str::lossy","",255,[[["self"]],["option",["utf8lossychunk"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",236,[[["self"]],["option"]]],[11,"size_hint","","",236,N],[11,"count","","",236,[[["self"]],["usize"]]],[11,"nth","","",236,[[["self"],["usize"]],["option"]]],[11,"last","","",236,[[["self"]],["option"]]],[11,"try_fold","","",236,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",236,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",236,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",236,[[["self"],["p"]],["option",["usize"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","Overflow Behavior",212,[[["self"]],["option"]]],[11,"size_hint","","",212,N],[11,"nth","","",212,[[["self"],["usize"]],["option"]]],[11,"count","","",212,[[["self"]],["usize"]]],[11,"try_fold","","",212,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",212,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",258,[[["self"]],["option",["char"]]]],[11,"count","","",258,[[["self"]],["usize"]]],[11,"size_hint","","",258,N],[11,"last","","",258,[[["self"]],["option",["char"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",219,[[["self"]],["option"]]],[11,"size_hint","","",219,N],[11,"try_fold","","",219,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",219,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",264,[[["self"]],["option",["str"]]]],[11,"next","","",259,[[["self"]],["option"]]],[11,"count","","",259,[[["self"]],["usize"]]],[11,"size_hint","","",259,N],[11,"last","","",259,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,N],[11,"nth","","",30,[[["self"],["usize"]],["option"]]],[11,"last","","",30,[[["self"]],["option"]]],[11,"min","","",30,[[["self"]],["option"]]],[11,"max","","",30,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",204,[[["self"]],["option"]]],[11,"size_hint","","",204,N],[11,"try_fold","","",204,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",204,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",270,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",240,[[["self"]],["option"]]],[11,"size_hint","","",240,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",210,[[["self"]],["option"]]],[11,"size_hint","","",210,N],[11,"count","","",210,[[["self"]],["usize"]]],[11,"try_fold","","",210,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",210,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",215,[[["self"]],["option"]]],[11,"size_hint","","",215,N],[11,"try_fold","","",215,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",274,[[["self"]],["option",["str"]]]],[11,"size_hint","","",274,N],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,N],[11,"count","","",246,[[["self"]],["usize"]]],[11,"nth","","",246,[[["self"],["usize"]],["option"]]],[11,"last","","",246,[[["self"]],["option"]]],[11,"next","","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,N],[11,"count","","",248,[[["self"]],["usize"]]],[11,"nth","","",248,[[["self"],["usize"]],["option"]]],[11,"last","","",248,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",208,[[["self"]],["option"]]],[11,"size_hint","","",208,N],[11,"nth","","",208,[[["self"],["usize"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,N],[11,"count","","",247,[[["self"]],["usize"]]],[11,"nth","","",247,[[["self"],["usize"]],["option"]]],[11,"last","","",247,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",218,[[["self"]],["option"]]],[11,"size_hint","","",218,N],[11,"try_fold","","",218,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",209,[[["self"]],["option"]]],[11,"size_hint","","",209,N],[11,"try_fold","","",209,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",209,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",206,[[["self"]],["option"]]],[11,"size_hint","","",206,N],[11,"nth","","",206,[[["self"],["usize"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"]],["option"]]],[11,"size_hint","","",167,N],[11,"nth","","",167,[[["self"],["usize"]],["option"]]],[11,"last","","",167,[[["self"]],["option"]]],[11,"min","","",167,[[["self"]],["option"]]],[11,"max","","",167,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",203,[[["self"]],["option"]]],[11,"size_hint","","",203,N],[11,"try_fold","","",203,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",203,[[["self"],["acc"],["f"]],["acc"]]],[11,"find","","",203,[[["self"],["p"]],["option"]]],[11,"rposition","","",203,[[["self"],["p"]],["option",["usize"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"]],["option"]]],[11,"size_hint","","",235,N],[11,"count","","",235,[[["self"]],["usize"]]],[11,"nth","","",235,[[["self"],["usize"]],["option"]]],[11,"last","","",235,[[["self"]],["option"]]],[11,"try_fold","","",235,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",235,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",235,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",235,[[["self"],["p"]],["option",["usize"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",216,[[["self"]],["option"]]],[11,"nth","","",216,[[["self"],["usize"]],["option"]]],[11,"count","","",216,[[["self"]],["usize"]]],[11,"last","","",216,[[["self"]],["option"]]],[11,"size_hint","","",216,N],[11,"try_fold","","",216,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",216,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::char","",193,[[["self"]],["option",["char"]]]],[11,"size_hint","","",193,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",262,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",223,[[["self"]],["option"]]],[11,"size_hint","","",223,N],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",244,[[["self"]],["option"]]],[11,"size_hint","","",244,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",221,[[["self"]],["option"]]],[11,"nth","","",221,[[["self"],["usize"]],["option"]]],[11,"last","","",221,[[["self"]],["option"]]],[11,"count","","",221,[[["self"]],["usize"]]],[11,"size_hint","","",221,N],[11,"try_fold","","",221,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",221,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::char","",199,[[["self"]],["option",["result"]]]],[11,"size_hint","","",199,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",265,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,N],[11,"count","","",249,[[["self"]],["usize"]]],[11,"nth","","",249,[[["self"],["usize"]],["option"]]],[11,"last","","",249,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::char","",195,[[["self"]],["option",["char"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",207,[[["self"]],["option"]]],[11,"count","","",207,[[["self"]],["usize"]]],[11,"try_fold","","",207,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",207,[[["self"],["acc"],["f"]],["acc"]]],[11,"nth","","",207,[[["self"],["usize"]],["option"]]],[11,"find","","",207,[[["self"],["p"]],["option"]]],[11,"last","","",207,[[["self"]],["option"]]],[11,"size_hint","","",207,N],[11,"next","rocket_app::domain::error::err_msg::_core::option","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",272,[[["self"]],["option",["str"]]]],[11,"size_hint","","",272,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",221,[[["self"]],["option"]]],[11,"nth","","",221,[[["self"],["usize"]],["option"]]],[11,"last","","",221,[[["self"]],["option"]]],[11,"count","","",221,[[["self"]],["usize"]]],[11,"size_hint","","",221,N],[11,"try_fold","","",221,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",221,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::option","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,N],[11,"next","rocket_app::domain::error::err_msg::_core::char","",192,[[["self"]],["option",["char"]]]],[11,"size_hint","","",192,N],[11,"count","","",192,[[["self"]],["usize"]]],[11,"nth","","",192,[[["self"],["usize"]],["option",["char"]]]],[11,"last","","",192,[[["self"]],["option",["char"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",271,[[["self"]],["option",["str"]]]],[11,"size_hint","","",271,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,N],[11,"next","","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,N],[11,"next","rocket_app::domain::error::err_msg::_core::option","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",224,[[["self"]],["option"]]],[11,"size_hint","","",224,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",269,[[["self"]],["option",["str"]]]],[11,"next","","",273,[[["self"]],["option",["str"]]]],[11,"size_hint","","",273,N],[11,"next","","",261,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",213,[[["self"]],["option"]]],[11,"count","","",213,[[["self"]],["usize"]]],[11,"nth","","",213,[[["self"],["usize"]],["option"]]],[11,"last","","",213,[[["self"]],["option"]]],[11,"size_hint","","",213,N],[11,"try_fold","","",213,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",213,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::result","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",260,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",260,N],[11,"count","","",260,[[["self"]],["usize"]]],[11,"last","","",260,[[["self"]],["option"]]],[11,"nth","","",260,[[["self"],["usize"]],["option"]]],[11,"all","","",260,[[["self"],["f"]],["bool"]]],[11,"any","","",260,[[["self"],["f"]],["bool"]]],[11,"find","","",260,[[["self"],["p"]],["option"]]],[11,"position","","",260,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",260,[[["self"],["p"]],["option",["usize"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",220,[[["self"]],["option"]]],[11,"size_hint","","",220,N],[11,"try_fold","","",220,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",220,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",267,[[["self"]],["option"]]],[11,"next","","",263,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::char","",194,[[["self"]],["option",["char"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::str","",268,[[["self"]],["option"]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",241,[[["self"]],["option"]]],[11,"size_hint","","",241,N],[11,"next","","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,N],[11,"count","","",245,[[["self"]],["usize"]]],[11,"nth","","",245,[[["self"],["usize"]],["option"]]],[11,"last","","",245,[[["self"]],["option"]]],[11,"next","","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",266,[[["self"]],["option",["str"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",222,[[["self"]],["option"]]],[11,"size_hint","","",222,N],[11,"try_fold","","",222,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",222,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",217,[[["self"]],["option"]]],[11,"nth","","",217,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",217,N],[11,"try_fold","","",217,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","rocket_app::domain::error::err_msg::_core::ascii","",171,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",171,N],[11,"next","rocket_app::domain::error::err_msg::_core::str","",275,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",275,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",205,[[["self"]],["option"]]],[11,"size_hint","","",205,N],[11,"next","","",211,[[["self"]],["option"]]],[11,"size_hint","","",211,N],[11,"try_fold","","",211,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",211,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::slice","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,N],[11,"next","rocket_app::domain::error::err_msg::_core::iter","",214,[[["self"]],["option"]]],[11,"size_hint","","",214,N],[11,"try_fold","","",214,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",214,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","rocket_app::domain::error::err_msg::_core::result","",232,[[["self"]],["option"]]],[11,"size_hint","","",232,N],[11,"next","","",233,[[["self"]],["option"]]],[11,"size_hint","","",233,N],[11,"next","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"]],["option",["char"]]]],[11,"size_hint","","",191,N],[11,"count","","",191,[[["self"]],["usize"]]],[11,"last","","",191,[[["self"]],["option",["char"]]]],[11,"next","rocket_app::domain::error::err_msg::_core::ops","",28,[[["self"]],["option"]]],[11,"size_hint","","",28,N],[11,"nth","","",28,[[["self"],["usize"]],["option"]]],[11,"deref_mut","rocket_app::domain::error::err_msg::_core::pin","",202,N],[11,"deref_mut","rocket_app::domain::error::err_msg::_core::mem","",162,N],[11,"deref_mut","rocket_app::domain::error::err_msg::_core::cell","",189,[[["self"]],["t"]]],[11,"write","rocket_app::domain::error::err_msg::_core::hash","",277,N],[11,"finish","","",277,[[["self"]],["u64"]]],[11,"hash","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"hash","","",154,N],[11,"hash","","",158,N],[11,"hash","rocket_app::domain::error::err_msg::_core::time","",286,N],[11,"hash","rocket_app::domain::error::err_msg::_core::fmt","",278,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ops","",167,N],[11,"hash","rocket_app::domain::error::err_msg::_core::task","",99,N],[11,"hash","rocket_app::domain::error::err_msg::_core::marker","",166,N],[11,"hash","rocket_app::domain::error::err_msg::_core::option","",230,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ptr","",164,N],[11,"hash","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,N],[11,"hash","rocket_app::domain::error::err_msg::_core::num","",155,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ops","",35,N],[11,"hash","rocket_app::domain::error::err_msg::_core::num","",156,N],[11,"hash","rocket_app::domain::error::err_msg::_core::cmp","",62,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ops","",43,N],[11,"hash","","",32,N],[11,"hash","","",38,N],[11,"hash","","",30,N],[11,"hash","rocket_app::domain::error::err_msg::_core::num","",157,N],[11,"hash","rocket_app::domain::error::err_msg::_core::mem","",162,N],[11,"hash","rocket_app::domain::error::err_msg::_core::pin","",202,N],[11,"hash","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,N],[11,"hash","rocket_app::domain::error::err_msg::_core::marker","",165,N],[11,"hash","rocket_app::domain::error::err_msg::_core::any","",169,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ops","",28,N],[11,"hash","rocket_app::domain::error::err_msg::_core::mem","",161,N],[11,"hash","rocket_app::domain::error::err_msg::_core::num","",153,N],[11,"hash","rocket_app::domain::error::err_msg::_core::cmp","",61,N],[11,"hash","rocket_app::domain::error::err_msg::_core::ops","",168,N],[11,"into_iter","rocket_app::domain::error::err_msg::_core::prelude::v1","Returns a consuming iterator over the possibly contained value.",12,[[["self"]],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",11,[[["self"]],["intoiter"]]],[11,"deref","rocket_app::domain::error::err_msg::_core::mem","",162,N],[11,"deref","rocket_app::domain::error::err_msg::_core::pin","",202,N],[11,"deref","rocket_app::domain::error::err_msg::_core::cell","",188,[[["self"]],["t"]]],[11,"deref","","",189,[[["self"]],["t"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",212,[[["self"]],["enumerate"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",155,[[["self"]],["nonzerou32"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"]],["poll"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",225,[[["self"]],["repeatwith"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",248,[[["self"]],["chunksexact"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str::pattern","",78,[[["self"]],["searchstep"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::alloc","",290,[[["self"]],["layouterr"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",205,[[["self"]],["cycle"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",237,[[["self"]],["split"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str::pattern","",252,[[["self"]],["charpredicatesearcher"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",5,[[["self"]],["fpcategory"]]],[11,"clone","","",159,[[["self"]],["tryfrominterror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"]],["nonnull"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",294,[[["self"]],["__m64"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",257,[[["self"]],["utf8error"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",220,[[["self"]],["flatten"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"]],["nonzerousize"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",245,[[["self"]],["windows"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",272,[[["self"]],["linesany"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",168,[[["self"]],["rangefull"]]],[11,"clone","","",35,[[["self"]],["generatorstate"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"]],["wrapping"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",265,[[["self"]],["splitn"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",193,[[["self"]],["escapedebug"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",226,[[["self"]],["empty"]]],[11,"clone","","",217,[[["self"]],["take"]]],[11,"clone","","",222,[[["self"]],["inspect"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",264,[[["self"]],["rsplitterminator"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"]],["duration"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::option","",227,[[["self"]],["iter"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",260,[[["self"]],["bytes"]]],[11,"clone","","",269,[[["self"]],["matches"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",239,[[["self"]],["rsplit"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::task","",288,[[["self"]],["localwaker"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",274,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::hash","",277,[[["self"]],["siphasher"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"]],["typeid"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",216,[[["self"]],["skip"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",295,[[["self"]],["__m256i"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::hash","",276,[[["self"]],["buildhasherdefault"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::result","",231,[[["self"]],["iter"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",206,[[["self"]],["stepby"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"]],["ordering"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"]],["range"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",192,[[["self"]],["escapedefault"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",32,[[["self"]],["bound"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::alloc","",292,[[["self"]],["cannotreallocinplace"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"]],["iter"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",258,[[["self"]],["chars"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::alloc","",291,[[["self"]],["allocerr"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"]],["rangeinclusive"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"]],["pin"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",297,[[["self"]],["__m256"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",259,[[["self"]],["charindices"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str::pattern","",251,[[["self"]],["charslicesearcher"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",199,[[["self"]],["decodeutf16"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",271,[[["self"]],["lines"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",209,[[["self"]],["map"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",197,[[["self"]],["parsecharerror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",263,[[["self"]],["splitterminator"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",298,[[["self"]],["__m128"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::option","",229,[[["self"]],["intoiter"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"]],["nonzerou128"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::task","",287,[[["self"]],["waker"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",256,[[["self"]],["parseboolerror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::cell","Panics",185,[[["self"]],["refcell"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"]],["error"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::mem","",161,[[["self"]],["discriminant"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str::pattern","",253,[[["self"]],["strsearcher"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",223,[[["self"]],["once"]]],[11,"clone","","",215,[[["self"]],["takewhile"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"]],["cell"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",210,[[["self"]],["filter"]]],[11,"clone","","",203,[[["self"]],["rev"]]],[11,"clone","","",208,[[["self"]],["zip"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::alloc","",289,[[["self"]],["layout"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",195,[[["self"]],["touppercase"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",219,[[["self"]],["flatmap"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",299,[[["self"]],["__m256d"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::raw","",75,[[["self"]],["traitobject"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::option","",230,[[["self"]],["noneerror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",214,[[["self"]],["skipwhile"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"]],["nonzerou8"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str::pattern","",250,[[["self"]],["charsearcher"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",266,[[["self"]],["rsplitn"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",218,[[["self"]],["scan"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"]],["nonzerou64"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::slice","",246,[[["self"]],["chunks"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",207,[[["self"]],["chain"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",198,[[["self"]],["decodeutf16error"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::marker","",166,[[["self"]],["pinned"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",43,[[["self"]],["rangetoinclusive"]]],[11,"clone","","",38,[[["self"]],["rangeto"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",261,[[["self"]],["split"]]],[11,"clone","","",268,[[["self"]],["rmatchindices"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",70,[[["self"]],["unicodeversion"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",221,[[["self"]],["fuse"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",293,[[["self"]],["__m128i"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"]],["result"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",194,[[["self"]],["tolowercase"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",273,[[["self"]],["splitwhitespace"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",296,[[["self"]],["__m128d"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::result","",233,[[["self"]],["intoiter"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",262,[[["self"]],["rsplit"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::fmt","",280,[[["self"]],["arguments"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",267,[[["self"]],["matchindices"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::ops","",28,[[["self"]],["rangefrom"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::mem","",162,[[["self"]],["manuallydrop"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"]],["phantomdata"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",270,[[["self"]],["rmatches"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",224,[[["self"]],["repeat"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::cmp","",62,[[["self"]],["reverse"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::str","",275,[[["self"]],["encodeutf16"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",213,[[["self"]],["peekable"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",160,[[["self"]],["parseinterror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",196,[[["self"]],["chartryfromerror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::array","",170,[[["self"]],["tryfromsliceerror"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"]],["option"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::arch::x86_64","",103,[[["self"]],["cpuidresult"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::iter","",211,[[["self"]],["filtermap"]]],[11,"clone","","",204,[[["self"]],["cloned"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::sync::atomic","",69,[[["self"]],["ordering"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"]],["escapeunicode"]]],[11,"clone","rocket_app::domain::error::err_msg::_core::num","",154,[[["self"]],["nonzerou16"]]],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"shl_assign","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"div","","",4,N],[11,"div","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["u32"]],["duration"]]],[11,"div","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"div","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"div","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"div","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"div","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"div","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"div","","",4,N],[11,"div","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"div","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::cell","Panics",185,[[["self"],["refcell"]],["option",["ordering"]]]],[11,"lt","","Panics",185,[[["self"],["refcell"]],["bool"]]],[11,"le","","Panics",185,[[["self"],["refcell"]],["bool"]]],[11,"gt","","Panics",185,[[["self"],["refcell"]],["bool"]]],[11,"ge","","Panics",185,[[["self"],["refcell"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["wrapping"]],["bool"]]],[11,"le","","",4,[[["self"],["wrapping"]],["bool"]]],[11,"gt","","",4,[[["self"],["wrapping"]],["bool"]]],[11,"ge","","",4,[[["self"],["wrapping"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::ops","",35,[[["self"],["generatorstate"]],["option",["ordering"]]]],[11,"lt","","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"],["nonzerou128"]],["option",["ordering"]]]],[11,"lt","","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"le","","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"gt","","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"ge","","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"partial_cmp","","",155,[[["self"],["nonzerou32"]],["option",["ordering"]]]],[11,"lt","","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"le","","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"gt","","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"ge","","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"],["cell"]],["option",["ordering"]]]],[11,"lt","","",184,[[["self"],["cell"]],["bool"]]],[11,"le","","",184,[[["self"],["cell"]],["bool"]]],[11,"gt","","",184,[[["self"],["cell"]],["bool"]]],[11,"ge","","",184,[[["self"],["cell"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["phantomdata"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"],["nonzerousize"]],["option",["ordering"]]]],[11,"lt","","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"le","","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"gt","","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"ge","","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::marker","",166,[[["self"],["pinned"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"],["nonzerou8"]],["option",["ordering"]]]],[11,"lt","","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"le","","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"gt","","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"ge","","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",99,[[["self"],["poll"]],["bool"]]],[11,"le","","",99,[[["self"],["poll"]],["bool"]]],[11,"gt","","",99,[[["self"],["poll"]],["bool"]]],[11,"ge","","",99,[[["self"],["poll"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["nonzerou64"]],["option",["ordering"]]]],[11,"lt","","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"le","","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"gt","","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"ge","","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::option","",230,[[["self"],["noneerror"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"],["ordering"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["result"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["result"]],["bool"]]],[11,"le","","",11,[[["self"],["result"]],["bool"]]],[11,"gt","","",11,[[["self"],["result"]],["bool"]]],[11,"ge","","",11,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",286,[[["self"],["duration"]],["bool"]]],[11,"le","","",286,[[["self"],["duration"]],["bool"]]],[11,"gt","","",286,[[["self"],["duration"]],["bool"]]],[11,"ge","","",286,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"],["option"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["option"]],["bool"]]],[11,"le","","",12,[[["self"],["option"]],["bool"]]],[11,"gt","","",12,[[["self"],["option"]],["bool"]]],[11,"ge","","",12,[[["self"],["option"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["pin"]],["option",["ordering"]]]],[11,"lt","","",202,[[["self"],["pin"]],["bool"]]],[11,"le","","",202,[[["self"],["pin"]],["bool"]]],[11,"gt","","",202,[[["self"],["pin"]],["bool"]]],[11,"ge","","",202,[[["self"],["pin"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::cmp","",62,[[["self"],["reverse"]],["option",["ordering"]]]],[11,"lt","","",62,[[["self"],["reverse"]],["bool"]]],[11,"le","","",62,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",62,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",62,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::mem","",162,[[["self"],["manuallydrop"]],["option",["ordering"]]]],[11,"lt","","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"le","","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"gt","","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"ge","","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::num","",154,[[["self"],["nonzerou16"]],["option",["ordering"]]]],[11,"lt","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"le","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"gt","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"ge","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::char","",70,[[["self"],["unicodeversion"]],["option",["ordering"]]]],[11,"lt","","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"],["nonnull"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"],["typeid"]],["option",["ordering"]]]],[11,"lt","","",169,[[["self"],["typeid"]],["bool"]]],[11,"le","","",169,[[["self"],["typeid"]],["bool"]]],[11,"gt","","",169,[[["self"],["typeid"]],["bool"]]],[11,"ge","","",169,[[["self"],["typeid"]],["bool"]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"],["error"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::error::err_msg::_core::arch::x86_64","",103,[[["self"],["cpuidresult"]],["option",["ordering"]]]],[11,"lt","","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"le","","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"gt","","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"ge","","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"bitxor_assign","rocket_app::domain::error::err_msg::_core::num","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitxor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitor_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"bitand_assign","","",4,N],[11,"fmt","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["pin"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"],["poll"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"],["cell"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["duration"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::option","",230,[[["self"],["noneerror"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::char","",70,[[["self"],["unicodeversion"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::cell","Panics",185,[[["self"],["refcell"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::cmp","",62,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"],["option"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::arch::x86_64","",103,[[["self"],["cpuidresult"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",155,[[["self"],["nonzerou32"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::mem","",162,[[["self"],["manuallydrop"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"],["nonzerousize"]],["ordering"]]],[11,"cmp","","",156,[[["self"],["nonzerou64"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::ops","",35,[[["self"],["generatorstate"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::marker","",166,[[["self"],["pinned"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"],["nonzerou8"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"],["nonnull"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["phantomdata"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"],["nonzerou128"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"],["error"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["result"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"],["typeid"]],["ordering"]]],[11,"cmp","rocket_app::domain::error::err_msg::_core::num","",154,[[["self"],["nonzerou16"]],["ordering"]]],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"add","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"add","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"add","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"add","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"add","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["duration"]],["duration"]]],[11,"add","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"add","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,N],[11,"add","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",296,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::option","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",261,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",259,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",290,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",292,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::lossy","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",293,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",220,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::mem","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ffi","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::fmt","",280,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",265,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",273,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::any","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::pattern","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",275,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::pattern","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::array","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::hash","",277,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::result","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",294,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::panic","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::fmt","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::task","",288,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::any","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",219,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",291,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",299,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ascii","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cmp","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::panic","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::mem","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",269,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::option","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",274,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::pattern","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",267,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",295,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",271,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",266,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::option","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::task","",287,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::alloc","",289,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::pattern","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",264,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",262,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::any","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::result","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::option","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::cell","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",272,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::marker","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::result","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::pattern","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",263,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::ops","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",297,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::arch::x86_64","",298,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str::lossy","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",260,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::iter","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::slice","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::str","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::sync::atomic","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::num","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::char","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rocket_app::domain::error::err_msg::_core::hash","",276,[[["self"],["formatter"]],["result",["error"]]]],[11,"haystack","rocket_app::domain::error::err_msg::_core::str::pattern","",253,[[["self"]],["str"]]],[11,"next","","",253,[[["self"]],["searchstep"]]],[11,"next_match","","",253,[[["self"]],["option"]]],[11,"haystack","","",251,[[["self"]],["str"]]],[11,"next","","",251,[[["self"]],["searchstep"]]],[11,"next_match","","",251,[[["self"]],["option"]]],[11,"next_reject","","",251,[[["self"]],["option"]]],[11,"haystack","","",252,[[["self"]],["str"]]],[11,"next","","",252,[[["self"]],["searchstep"]]],[11,"next_match","","",252,[[["self"]],["option"]]],[11,"next_reject","","",252,[[["self"]],["option"]]],[11,"haystack","","",250,[[["self"]],["str"]]],[11,"next","","",250,[[["self"]],["searchstep"]]],[11,"next_match","","",250,[[["self"]],["option"]]],[11,"sum","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["u64"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i16"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i128"]]]],[11,"sum","rocket_app::domain::error::err_msg::_core::time","",286,[[["i"]],["duration"]]],[11,"sum","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["i8"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i32"]]]],[11,"sum","rocket_app::domain::error::err_msg::_core::time","",286,[[["i"]],["duration"]]],[11,"sum","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["u8"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i16"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i8"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i128"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u128"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u8"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u64"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u16"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["isize"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u128"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i64"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["usize"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u32"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["isize"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i32"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["usize"]]]],[11,"sum","rocket_app::domain::error::err_msg::_core::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",11,[[["i"]],["result"]]],[11,"sum","rocket_app::domain::error::err_msg::_core::num","",4,[[["i"]],["wrapping",["u32"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["u16"]]]],[11,"sum","","",4,[[["i"]],["wrapping",["i64"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"bitor","","",4,[[["self"],["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,N],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"bitor","","",4,[[["self"],["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"bitor","","",4,[[["self"],["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"bitor","","",4,[[["self"],["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"bitor","","",4,N],[11,"bitor","","",4,N],[11,"bitor","","",4,N],[11,"bitor","","",4,[[["self"],["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"poll","rocket_app::domain::error::err_msg::_core::pin","",202,[[["pin",["pin"]],["localwaker"]],["poll"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::mem","",161,[[["self"],["discriminant"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::alloc","",291,[[["self"],["allocerr"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"],["range"]],["bool"]]],[11,"ne","","",30,[[["self"],["range"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",5,[[["self"],["fpcategory"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["phantomdata"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::fmt","",278,[[["self"],["error"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::hash","",276,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::str::lossy","",81,[[["self"],["utf8lossychunk"]],["bool"]]],[11,"ne","","",81,[[["self"],["utf8lossychunk"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",159,[[["self"],["tryfrominterror"]],["bool"]]],[11,"ne","","",159,[[["self"],["tryfrominterror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::str","",257,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",257,[[["self"],["utf8error"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["wrapping"]],["bool"]]],[11,"ne","","",4,[[["self"],["wrapping"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::option","",230,[[["self"],["noneerror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::char","",196,[[["self"],["chartryfromerror"]],["bool"]]],[11,"ne","","",196,[[["self"],["chartryfromerror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"ne","","",153,[[["self"],["nonzerou8"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::alloc","",289,[[["self"],["layout"]],["bool"]]],[11,"ne","","",289,[[["self"],["layout"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::pin","",202,[[["self"],["pin"]],["bool"]]],[11,"ne","","",202,[[["self"],["pin"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::alloc","",292,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::char","",197,[[["self"],["parsecharerror"]],["bool"]]],[11,"ne","","",197,[[["self"],["parsecharerror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",28,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",28,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::task","",99,[[["self"],["poll"]],["bool"]]],[11,"ne","","",99,[[["self"],["poll"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"ne","","",155,[[["self"],["nonzerou32"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",38,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",38,[[["self"],["rangeto"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"ne","","",157,[[["self"],["nonzerou128"]],["bool"]]],[11,"eq","","",160,[[["self"],["parseinterror"]],["bool"]]],[11,"ne","","",160,[[["self"],["parseinterror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::cmp","",61,[[["self"],["ordering"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"ne","","",156,[[["self"],["nonzerou64"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::cmp","",62,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",62,[[["self"],["reverse"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::mem","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"ne","","",162,[[["self"],["manuallydrop"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"],["option"]],["bool"]]],[11,"ne","","",12,[[["self"],["option"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",43,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",43,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["duration"]],["bool"]]],[11,"ne","","",286,[[["self"],["duration"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::char","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",70,[[["self"],["unicodeversion"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ptr","",164,[[["self"],["nonnull"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::marker","",166,[[["self"],["pinned"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"ne","","",158,[[["self"],["nonzerousize"]],["bool"]]],[11,"eq","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"ne","","",154,[[["self"],["nonzerou16"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::str","",256,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",256,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::any","",169,[[["self"],["typeid"]],["bool"]]],[11,"ne","","",169,[[["self"],["typeid"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::cell","Panics",185,[[["self"],["refcell"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::arch::x86_64","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"ne","","",103,[[["self"],["cpuidresult"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",32,[[["self"],["bound"]],["bool"]]],[11,"ne","","",32,[[["self"],["bound"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::str::pattern","",78,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",78,[[["self"],["searchstep"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",168,[[["self"],["rangefull"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::char","",198,[[["self"],["decodeutf16error"]],["bool"]]],[11,"ne","","",198,[[["self"],["decodeutf16error"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"],["cell"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::ops","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",35,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["result"]],["bool"]]],[11,"ne","","",11,[[["self"],["result"]],["bool"]]],[11,"eq","rocket_app::domain::error::err_msg::_core::alloc","",290,[[["self"],["layouterr"]],["bool"]]],[11,"ne","","",290,[[["self"],["layouterr"]],["bool"]]],[11,"from","rocket_app::domain::error::err_msg::_core::pin","",202,[[["box"]],["pin",["box"]]]],[11,"from","rocket_app::domain::error::err_msg::_core::task","",287,[[["arc"]],["waker"]]],[11,"from_form_value","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["rawstr"]],["result",["option"]]]],[11,"default","","",12,[[],["option",["option"]]]],[11,"from_form_value","","",11,[[["rawstr"]],["result",["result"]]]],[11,"transform","","",11,[[["request"],["data"]],["transform",["outcome","outcome"]]]],[11,"from_data","","",11,[[["request"],["transform",["outcome","outcome"]]],["outcome",["result","data"]]]],[11,"transform","","",12,[[["request"],["data"]],["transform",["outcome","outcome"]]]],[11,"from_data","","",12,[[["request"],["transform",["outcome","outcome"]]],["outcome",["option","data"]]]],[11,"from_query","","",11,[[["query"]],["result",["result"]]]],[11,"from_query","","",12,[[["query"]],["result",["option"]]]],[11,"into_outcome","","",11,[[["self"],["status"]],["outcome"]]],[11,"or_forward","","",11,N],[11,"into_outcome","","",12,[[["self"],["e"]],["outcome"]]],[11,"or_forward","","",12,[[["self"],["f"]],["outcome"]]],[11,"into_outcome","","",11,[[["self"],["status"]],["outcome",["data"]]]],[11,"or_forward","","",11,[[["self"],["data"]],["outcome",["data"]]]],[11,"respond_to","","",11,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",12,[[["self"],["request"]],["result",["response","status"]]]],[11,"respond_to","","",11,[[["self"],["request"]],["result",["response","status"]]]],[11,"from_form","","",12,[[["formitems"],["bool"]],["result",["option"]]]],[11,"from_form","","",11,[[["formitems"],["bool"]],["result",["result"]]]],[11,"from_request","","",11,[[["request"]],["outcome",["result"]]]],[11,"from_request","","",12,[[["request"]],["outcome",["option"]]]],[11,"from_param","","",12,[[["rawstr"]],["result",["option"]]]],[11,"from_param","","",11,[[["rawstr"]],["result",["result"]]]],[11,"from_segments","","",12,[[["segments"]],["result",["option"]]]],[11,"from_segments","","",11,[[["segments"]],["result",["result"]]]],[11,"into_owned","","",12,N],[11,"as_result","","",11,[[["self"]],["result",["parseerr"]]]],[11,"unchecked_unwrap_ok","","",11,[[["self"]],["t"]]],[11,"unchecked_unwrap_err","","",11,[[["self"]],["e"]]],[11,"unchecked_unwrap","","",12,[[["self"]],["t"]]],[11,"unchecked_unwrap_none","","",12,N],[11,"void_unwrap","","Get the value out of an always-ok Result.",11,[[["self"]],["t"]]],[11,"void_unwrap_err","","Get the error out of an always-err Result.",11,[[["self"]],["e"]]],[11,"from","","",11,[[["result"]],["result",["unspecified"]]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::cell","",185,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::ops","",167,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::num","",154,[[["self"],["s"]],["result"]]],[11,"serialize","","",153,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::time","",286,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::cell","",184,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::num","",158,[[["self"],["s"]],["result"]]],[11,"serialize","","",157,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::ops","",30,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::fmt","",280,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::num","",156,[[["self"],["s"]],["result"]]],[11,"serialize","","",155,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::error::err_msg::_core::num","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::time","",286,[[["d"]],["result",["duration"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::num","",156,[[["d"]],["result",["nonzerou64"]]]],[11,"deserialize","","",158,[[["d"]],["result",["nonzerousize"]]]],[11,"deserialize","","",155,[[["d"]],["result",["nonzerou32"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::cell","",184,[[["d"]],["result",["cell"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::ops","",167,[[["d"]],["result",["rangeinclusive"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::prelude::v1","",12,[[["d"]],["result",["option"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::ops","",30,[[["d"]],["result",["range"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::num","",157,[[["d"]],["result",["nonzerou128"]]]],[11,"deserialize","","",153,[[["d"]],["result",["nonzerou8"]]]],[11,"deserialize","","",4,[[["d"]],["result",["wrapping"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::marker","",165,[[["d"]],["result",["phantomdata"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::num","",154,[[["d"]],["result",["nonzerou16"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::cell","",185,[[["d"]],["result",["refcell"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["d"]],["result",["result"]]]],[11,"deserialize","rocket_app::domain::error::err_msg::_core::marker","",165,[[["self"],["d"]],["result"]]],[11,"clone","rocket_app::domain::error::err_msg","",302,[[["self"]],["compat"]]],[11,"as_ref","","",301,[[["self"]],["fail"]]],[11,"description","","",302,[[["self"]],["str"]]],[11,"default","","",303,[[],["backtrace"]]],[11,"default","","",302,[[],["compat"]]],[11,"fmt","","",303,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",302,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_fail","","",3,[[["self"]],["fail"]]],[11,"as_fail","","",301,[[["self"]],["fail"]]],[11,"fmt","","",303,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",302,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","","",151,[[["self"]],["option",["fail"]]]],[11,"from","","",300,[[["d"]],["context"]]],[11,"from","","",301,[[["f"]],["error"]]],[11,"cause","","",300,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",300,[[["self"]],["option",["backtrace"]]]],[11,"eq","","",302,[[["self"],["compat"]],["bool"]]],[11,"ne","","",302,[[["self"],["compat"]],["bool"]]],[11,"compat","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"]],["result",["compat"]]]],[11,"context","","",11,[[["self"],["d"]],["result",["context"]]]],[11,"with_context","","",11,[[["self"],["f"]],["result",["context"]]]],[11,"compat","","",11,[[["self"]],["result",["compat"]]]],[11,"context","","",11,[[["self"],["d"]],["result",["context"]]]],[11,"with_context","","",11,[[["self"],["f"]],["result",["context"]]]],[11,"hash","rocket_app::domain::error::err_msg","",302,N],[11,"context","rocket_app::domain::error::err_msg::_core::prelude::v1","",11,[[["self"],["x"]],["result",["context"]]]],[11,"id","rocket_app::domain::id","",107,[[["self"]],["result",["id","error"]]]],[11,"id","","",108,[[["self"]],["result",["id","error"]]]],[11,"partial_cmp","","",107,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_app::domain::version","",109,[[["self"],["self"]],["option",["ordering"]]]],[11,"default","","",109,[[],["self"]]],[11,"default","rocket_app::domain::customers::resolver","",304,[[],["self"]]],[11,"default","rocket_app::domain::orders::resolver","",306,[[],["self"]]],[11,"default","rocket_app::domain::products::resolver","",309,[[],["self"]]],[11,"default","rocket_app::domain","",112,[[],["self"]]],[11,"cmp","rocket_app::domain::id","",107,[[["self"],["self"]],["ordering"]]],[11,"cmp","rocket_app::domain::version","",109,[[["self"],["self"]],["ordering"]]],[11,"eq","rocket_app::domain::id","",107,[[["self"],["self"]],["bool"]]],[11,"ne","","",107,[[["self"],["self"]],["bool"]]],[11,"eq","rocket_app::domain::version","",109,[[["self"],["self"]],["bool"]]],[11,"ne","","",109,[[["self"],["self"]],["bool"]]],[11,"clone","rocket_app::domain::id","",107,[[["self"]],["self"]]],[11,"clone","rocket_app::domain::version","",109,[[["self"]],["self"]]],[11,"clone","rocket_app::domain::customers::commands::create_customer","",110,[[["self"]],["createcustomer"]]],[11,"clone","rocket_app::domain::customers::model","",113,[[["self"]],["customerdata"]]],[11,"clone","rocket_app::domain::orders::commands::add_or_update_product","",121,[[["self"]],["addorupdateproduct"]]],[11,"clone","rocket_app::domain::orders::commands::create_order","",123,[[["self"]],["createorder"]]],[11,"clone","rocket_app::domain::orders::model","",125,[[["self"]],["orderdata"]]],[11,"clone","","",126,[[["self"]],["lineitemdata"]]],[11,"clone","rocket_app::domain::products::commands::create_product","",139,[[["self"]],["createproduct"]]],[11,"clone","rocket_app::domain::products::commands::set_product_title","",141,[[["self"]],["setproducttitle"]]],[11,"clone","rocket_app::domain::products::model","",143,[[["self"]],["productdata"]]],[11,"fmt","rocket_app::domain::id","",107,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","rocket_app::domain::version","",109,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","rocket_app::domain::id","",107,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","rocket_app::domain::version","",109,[[["self"],["formatter"]],["fmtresult"]]],[11,"hash","rocket_app::domain::id","",107,[[["self"],["h"]]]],[11,"hash","rocket_app::domain::version","",109,[[["self"],["h"]]]],[11,"try_from","rocket_app::domain::id","",107,[[["str"]],["result"]]],[11,"try_from","rocket_app::domain::orders::model","",305,[[["u32"]],["result"]]],[11,"try_from","rocket_app::domain::products::model","",307,[[["string"]],["result"]]],[11,"try_from","","",307,[[["str"]],["result"]]],[11,"try_from","","",308,[[["f32"]],["result"]]],[11,"serialize","rocket_app::app::products","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::id","",107,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::version","",109,[[["self"],["s"]],["result"]]],[11,"serialize","rocket_app::domain::customers::model","",113,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::customers::queries::get_customer_with_orders","",118,[[["self"],["__s"]],["result"]]],[11,"serialize","","",119,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::orders::model","",125,[[["self"],["__s"]],["result"]]],[11,"serialize","","",126,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::orders::queries::get_order_with_products","",133,[[["self"],["__s"]],["result"]]],[11,"serialize","","",134,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::orders::queries::get_order_summaries_for_customer","",137,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::products::model","",143,[[["self"],["__s"]],["result"]]],[11,"serialize","rocket_app::domain::products::queries::get_product_summaries","",148,[[["self"],["__s"]],["result"]]],[11,"deserialize","rocket_app::app::orders","",0,[[["__d"]],["result"]]],[11,"deserialize","","",150,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::app::products","",2,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::id","",107,[[["d"]],["result"]]],[11,"deserialize","rocket_app::domain::version","",109,[[["d"]],["result"]]],[11,"deserialize","rocket_app::domain::customers::commands::create_customer","",110,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::customers::model","",113,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::customers::queries::get_customer","",115,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::customers::queries::get_customer_with_orders","",117,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::commands::add_or_update_product","",121,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::commands::create_order","",123,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::model","",125,[[["__d"]],["result"]]],[11,"deserialize","","",126,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::queries::get_order","",130,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::queries::get_order_with_products","",132,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::orders::queries::get_order_summaries_for_customer","",136,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::products::commands::create_product","",139,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::products::commands::set_product_title","",141,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::products::model","",143,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::products::queries::get_product","",145,[[["__d"]],["result"]]],[11,"deserialize","rocket_app::domain::products::queries::get_product_summaries","",147,[[["__d"]],["result"]]],[11,"from_param","rocket_app::domain::id","",107,[[["rawstr"]],["result"]]],[11,"downcast_ref","rocket_app::domain::error::err_msg","Attempts to downcast this failure to a concrete type by reference.",3,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",3,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",3,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",3,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",3,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",3,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_chain`.",3,[[["self"]],["causes"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",152,[[["e"]],["syncfailure"]]],[11,"new_unchecked","rocket_app::domain::error::err_msg::_core::num","Create a non-zero without checking the value.",153,[[["u8"]],["nonzerou8"]]],[11,"new","","Create a non-zero if the given value is not zero.",153,[[["u8"]],["option",["nonzerou8"]]]],[11,"get","","Returns the value as a primitive type.",153,[[["self"]],["u8"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",154,[[["u16"]],["nonzerou16"]]],[11,"new","","Create a non-zero if the given value is not zero.",154,[[["u16"]],["option",["nonzerou16"]]]],[11,"get","","Returns the value as a primitive type.",154,[[["self"]],["u16"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",155,[[["u32"]],["nonzerou32"]]],[11,"new","","Create a non-zero if the given value is not zero.",155,[[["u32"]],["option",["nonzerou32"]]]],[11,"get","","Returns the value as a primitive type.",155,[[["self"]],["u32"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",156,[[["u64"]],["nonzerou64"]]],[11,"new","","Create a non-zero if the given value is not zero.",156,[[["u64"]],["option",["nonzerou64"]]]],[11,"get","","Returns the value as a primitive type.",156,[[["self"]],["u64"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",157,[[["u128"]],["nonzerou128"]]],[11,"new","","Create a non-zero if the given value is not zero.",157,[[["u128"]],["option",["nonzerou128"]]]],[11,"get","","Returns the value as a primitive type.",157,[[["self"]],["u128"]]],[11,"new_unchecked","","Create a non-zero without checking the value.",158,[[["usize"]],["nonzerousize"]]],[11,"new","","Create a non-zero if the given value is not zero.",158,[[["usize"]],["option",["nonzerousize"]]]],[11,"get","","Returns the value as a primitive type.",158,[[["self"]],["usize"]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["usize"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["usize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["usize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["usize"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["usize"]]],["wrapping",["usize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["usize"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["usize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["usize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["u8"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["u8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["u8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["u8"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["u8"]]],["wrapping",["u8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["u8"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["u8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["u8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["u16"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["u16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["u16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["u16"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["u16"]]],["wrapping",["u16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["u16"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["u16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["u16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["u32"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["u32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["u32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["u32"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["u32"]]],["wrapping",["u32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["u32"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["u32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["u64"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["u64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["u64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["u64"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["u64"]]],["wrapping",["u64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["u64"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["u64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["u64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["u128"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["u128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["u128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["u128"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["u128"]]],["wrapping",["u128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["u128"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["u128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["u128"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["isize"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["isize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["isize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["isize"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["isize"]]],["wrapping",["isize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["isize"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["isize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["isize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["i8"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["i8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["i8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["i8"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["i8"]]],["wrapping",["i8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["i8"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["i8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["i8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["i16"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["i16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["i16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["i16"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["i16"]]],["wrapping",["i16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["i16"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["i16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["i16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["i32"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["i32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["i32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["i32"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["i32"]]],["wrapping",["i32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["i32"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["i32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["i32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["i64"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["i64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["i64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["i64"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["i64"]]],["wrapping",["i64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["i64"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["i64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["i64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",4,[[],["wrapping",["i128"]]]],[11,"max_value","","Returns the largest value that can be represented by this integer type.",4,[[],["wrapping",["i128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",4,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",4,[[["self"]],["wrapping",["i128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",4,[[["self"]],["wrapping",["i128"]]]],[11,"from_be","","Converts an integer from big endian to the target's endianness.",4,[[["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"from_le","","Converts an integer from little endian to the target's endianness.",4,[[["wrapping",["i128"]]],["wrapping",["i128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",4,[[["self"]],["wrapping",["i128"]]]],[11,"to_le","","Converts `self` to little endian from the target's endianness.",4,[[["self"]],["wrapping",["i128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4,[[["self"],["u32"]],["wrapping",["i128"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["isize"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["isize"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["i8"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["i8"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["i32"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["i32"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["i64"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["i64"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at the boundary of the type.",4,[[["self"]],["wrapping",["i128"]]]],[11,"signum","","Returns a number representing sign of `self`.",4,[[["self"]],["wrapping",["i128"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",4,[[["self"]],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",4,[[["self"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["usize"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["u8"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["u16"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["u32"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["u64"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,[[["self"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",4,[[["self"]],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",4,[[["self"]],["wrapping",["u128"]]]],[11,"is_ok","rocket_app::domain::error::err_msg::_core::prelude::v1","Returns `true` if the result is [`Ok`].",11,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",11,[[["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",11,[[["self"]],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",11,[[["self"]],["option"]]],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",11,[[["self"]],["result"]]],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",11,[[["self"]],["result"]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",11,[[["self"],["f"]],["result"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a contained [`Ok`] value, or a fallback function to a contained [`Err`] value.",11,[[["self"],["f"],["m"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",11,[[["self"],["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",11,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",11,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",11,[[["self"],["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",11,[[["self"],["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",11,[[["self"],["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",11,[[["self"],["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",11,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",11,[[["self"],["f"]],["t"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",11,[[["self"]],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",11,[[["self"],["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",11,[[["self"]],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",11,[[["self"],["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",11,[[["self"]],["t"]]],[11,"deref_ok","","Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.",11,[[["self"]],["result"]]],[11,"deref_err","","Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.",11,[[["self"]],["result"]]],[11,"deref","","Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.",11,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",11,[[["self"]],["option",["result"]]]],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",12,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",12,[[["self"]],["bool"]]],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",12,[[["self"]],["option"]]],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",12,[[["self"]],["option"]]],[11,"as_pin_ref","","Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`",12,[[["pin",["option"]]],["option",["pin"]]]],[11,"as_pin_mut","","Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`",12,[[["pin",["option"]]],["option",["pin"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",12,[[["self"],["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",12,[[["self"]],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",12,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",12,[[["self"],["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",12,[[["self"],["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",12,[[["self"],["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",12,[[["self"],["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",12,[[["self"],["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",12,[[["self"],["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",12,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",12,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",12,[[["self"],["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",12,[[["self"],["f"]],["option"]]],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",12,[[["self"],["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",12,[[["self"],["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",12,[[["self"],["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",12,[[["self"],["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",12,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",12,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",12,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`] in its place without deinitializing either one.",12,[[["self"],["t"]],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",12,[[["self"]],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",12,[[["self"]],["option"]]],[11,"unwrap_or_default","","Returns the contained value or a default",12,[[["self"]],["t"]]],[11,"deref","","Converts from `&Option<T>` to `Option<&T::Target>`.",12,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",12,[[["self"]],["result",["option"]]]],[11,"new","rocket_app::domain::error::err_msg::_core::mem","Wrap a value to be manually dropped.",162,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extract the value from the `ManuallyDrop` container.",162,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",162,N],[11,"uninitialized","","Create a new `MaybeUninit` in an uninitialized state.",163,[[],["maybeuninit"]]],[11,"zeroed","","Create a new `MaybeUninit` in an uninitialized state, with the memory being filled with `0` bytes.  It depends on `T` whether that already makes for proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized, but `MaybeUninit<&'static i32>::zeroed()` is not because references must not be null.",163,[[],["maybeuninit"]]],[11,"set","","Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.",163,N],[11,"into_inner","","Extract the value from the `MaybeUninit` container.  This is a great way to ensure that the data will get dropped, because the resulting `T` is subject to the usual drop handling.",163,[[["self"]],["t"]]],[11,"get_ref","","Get a reference to the contained value.",163,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the contained value.",163,[[["self"]],["t"]]],[11,"as_ptr","","Get a pointer to the contained value. Reading from this pointer will be undefined behavior unless the `MaybeUninit` is initialized.",163,N],[11,"as_mut_ptr","","Get a mutable pointer to the contained value. Reading from this pointer will be undefined behavior unless the `MaybeUninit` is initialized.",163,N],[11,"dangling","rocket_app::domain::error::err_msg::_core::ptr","Creates a new `NonNull` that is dangling, but well-aligned.",164,[[],["nonnull"]]],[11,"new_unchecked","","Creates a new `NonNull`.",164,N],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",164,N],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",164,N],[11,"as_ref","","Dereferences the content.",164,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",164,[[["self"]],["t"]]],[11,"cast","","Cast to a pointer of another type",164,[[["self"]],["nonnull"]]],[11,"contains","rocket_app::domain::error::err_msg::_core::ops","Returns `true` if `item` is contained in the range.",28,[[["self"],["u"]],["bool"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing `start..=end`.",167,[[["idx"],["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",167,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",167,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",167,N],[11,"contains","","Returns `true` if `item` is contained in the range.",167,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",167,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",30,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",30,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",38,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",43,[[["self"],["u"]],["bool"]]],[11,"reverse","rocket_app::domain::error::err_msg::_core::cmp","Reverses the `Ordering`.",61,[[["self"]],["ordering"]]],[11,"then","","Chains two orderings.",61,[[["self"],["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",61,[[["self"],["f"]],["ordering"]]],[11,"is","rocket_app::domain::error::err_msg::_core::any","Returns `true` if the boxed type is the same as `T`.",67,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",67,[[["self"]],["option"]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",67,[[["self"]],["option"]]],[11,"is","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["option"]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["option"]]],[11,"is","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["option"]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",67,[[["self"]],["option"]]],[11,"of","","Returns the `TypeId` of the type this generic function has been instantiated with.",169,[[],["typeid"]]],[11,"new","rocket_app::domain::error::err_msg::_core::sync::atomic","Creates a new `AtomicBool`.",172,[[["bool"]],["atomicbool"]]],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",172,[[["self"]],["bool"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",172,[[["self"]],["bool"]]],[11,"load","","Loads a value from the bool.",172,[[["self"],["ordering"]],["bool"]]],[11,"store","","Stores a value into the bool.",172,N],[11,"swap","","Stores a value into the bool, returning the previous value.",172,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",172,[[["self"],["bool"],["bool"],["ordering"]],["bool"]]],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",172,[[["self"],["bool"],["bool"],["ordering"],["ordering"]],["result",["bool","bool"]]]],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",172,[[["self"],["bool"],["bool"],["ordering"],["ordering"]],["result",["bool","bool"]]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",172,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",172,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",172,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",172,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"new","","Creates a new `AtomicPtr`.",173,N],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",173,N],[11,"into_inner","","Consumes the atomic and returns the contained value.",173,N],[11,"load","","Loads a value from the pointer.",173,N],[11,"store","","Stores a value into the pointer.",173,N],[11,"swap","","Stores a value into the pointer, returning the previous value.",173,N],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",173,N],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",173,N],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",173,N],[11,"new","","Creates a new atomic integer.",174,[[["i8"]],["atomici8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",174,[[["self"]],["i8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",174,[[["self"]],["i8"]]],[11,"load","","Loads a value from the atomic integer.",174,[[["self"],["ordering"]],["i8"]]],[11,"store","","Stores a value into the atomic integer.",174,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",174,[[["self"],["i8"],["i8"],["ordering"]],["i8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",174,[[["self"],["i8"],["i8"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",174,[[["self"],["i8"],["i8"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",174,[[["self"],["f"],["ordering"],["ordering"]],["result",["i8","i8"]]]],[11,"fetch_max","","Maximum with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",174,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"new","","Creates a new atomic integer.",175,[[["u8"]],["atomicu8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",175,[[["self"]],["u8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",175,[[["self"]],["u8"]]],[11,"load","","Loads a value from the atomic integer.",175,[[["self"],["ordering"]],["u8"]]],[11,"store","","Stores a value into the atomic integer.",175,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",175,[[["self"],["u8"],["u8"],["ordering"]],["u8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",175,[[["self"],["u8"],["u8"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",175,[[["self"],["u8"],["u8"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",175,[[["self"],["f"],["ordering"],["ordering"]],["result",["u8","u8"]]]],[11,"fetch_max","","Maximum with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",175,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"new","","Creates a new atomic integer.",176,[[["i16"]],["atomici16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",176,[[["self"]],["i16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",176,[[["self"]],["i16"]]],[11,"load","","Loads a value from the atomic integer.",176,[[["self"],["ordering"]],["i16"]]],[11,"store","","Stores a value into the atomic integer.",176,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",176,[[["self"],["i16"],["i16"],["ordering"]],["i16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",176,[[["self"],["i16"],["i16"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",176,[[["self"],["i16"],["i16"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",176,[[["self"],["f"],["ordering"],["ordering"]],["result",["i16","i16"]]]],[11,"fetch_max","","Maximum with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",176,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"new","","Creates a new atomic integer.",177,[[["u16"]],["atomicu16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",177,[[["self"]],["u16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",177,[[["self"]],["u16"]]],[11,"load","","Loads a value from the atomic integer.",177,[[["self"],["ordering"]],["u16"]]],[11,"store","","Stores a value into the atomic integer.",177,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",177,[[["self"],["u16"],["u16"],["ordering"]],["u16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",177,[[["self"],["u16"],["u16"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",177,[[["self"],["u16"],["u16"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",177,[[["self"],["f"],["ordering"],["ordering"]],["result",["u16","u16"]]]],[11,"fetch_max","","Maximum with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",177,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"new","","Creates a new atomic integer.",178,[[["i32"]],["atomici32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",178,[[["self"]],["i32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",178,[[["self"]],["i32"]]],[11,"load","","Loads a value from the atomic integer.",178,[[["self"],["ordering"]],["i32"]]],[11,"store","","Stores a value into the atomic integer.",178,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",178,[[["self"],["i32"],["i32"],["ordering"]],["i32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",178,[[["self"],["i32"],["i32"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",178,[[["self"],["i32"],["i32"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",178,[[["self"],["f"],["ordering"],["ordering"]],["result",["i32","i32"]]]],[11,"fetch_max","","Maximum with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",178,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"new","","Creates a new atomic integer.",179,[[["u32"]],["atomicu32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",179,[[["self"]],["u32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",179,[[["self"]],["u32"]]],[11,"load","","Loads a value from the atomic integer.",179,[[["self"],["ordering"]],["u32"]]],[11,"store","","Stores a value into the atomic integer.",179,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",179,[[["self"],["u32"],["u32"],["ordering"]],["u32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",179,[[["self"],["u32"],["u32"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",179,[[["self"],["u32"],["u32"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",179,[[["self"],["f"],["ordering"],["ordering"]],["result",["u32","u32"]]]],[11,"fetch_max","","Maximum with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",179,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"new","","Creates a new atomic integer.",180,[[["i64"]],["atomici64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",180,[[["self"]],["i64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",180,[[["self"]],["i64"]]],[11,"load","","Loads a value from the atomic integer.",180,[[["self"],["ordering"]],["i64"]]],[11,"store","","Stores a value into the atomic integer.",180,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i64"],["i64"],["ordering"]],["i64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i64"],["i64"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",180,[[["self"],["i64"],["i64"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",180,[[["self"],["f"],["ordering"],["ordering"]],["result",["i64","i64"]]]],[11,"fetch_max","","Maximum with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",180,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"new","","Creates a new atomic integer.",181,[[["u64"]],["atomicu64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",181,[[["self"]],["u64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",181,[[["self"]],["u64"]]],[11,"load","","Loads a value from the atomic integer.",181,[[["self"],["ordering"]],["u64"]]],[11,"store","","Stores a value into the atomic integer.",181,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u64"],["u64"],["ordering"]],["u64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u64"],["u64"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",181,[[["self"],["u64"],["u64"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",181,[[["self"],["f"],["ordering"],["ordering"]],["result",["u64","u64"]]]],[11,"fetch_max","","Maximum with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",181,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"new","","Creates a new atomic integer.",182,[[["isize"]],["atomicisize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",182,[[["self"]],["isize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",182,[[["self"]],["isize"]]],[11,"load","","Loads a value from the atomic integer.",182,[[["self"],["ordering"]],["isize"]]],[11,"store","","Stores a value into the atomic integer.",182,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["isize"],["isize"],["ordering"]],["isize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["isize"],["isize"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",182,[[["self"],["isize"],["isize"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",182,[[["self"],["f"],["ordering"],["ordering"]],["result",["isize","isize"]]]],[11,"fetch_max","","Maximum with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",182,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"new","","Creates a new atomic integer.",183,[[["usize"]],["atomicusize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",183,[[["self"]],["usize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",183,[[["self"]],["usize"]]],[11,"load","","Loads a value from the atomic integer.",183,[[["self"],["ordering"]],["usize"]]],[11,"store","","Stores a value into the atomic integer.",183,N],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["usize"],["usize"],["ordering"]],["usize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["usize"],["usize"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",183,[[["self"],["usize"],["usize"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that returns an optional new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else `Err(previous_value)`.",183,[[["self"],["f"],["ordering"],["ordering"]],["result",["usize","usize"]]]],[11,"fetch_max","","Maximum with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",183,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"get","rocket_app::domain::error::err_msg::_core::cell","Returns a copy of the contained value.",184,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns the new value.",184,[[["self"],["f"]],["t"]]],[11,"new","","Creates a new `Cell` containing the given value.",184,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",184,N],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",184,N],[11,"replace","","Replaces the contained value, and returns it.",184,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",184,[[["self"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",184,N],[11,"get_mut","","Returns a mutable reference to the underlying data.",184,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",184,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",184,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",184,N],[11,"new","","Creates a new `RefCell` containing `value`.",185,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",185,[[["self"]],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",185,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",185,[[["self"],["f"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",185,N],[11,"borrow","","Immutably borrows the wrapped value.",185,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",185,[[["self"]],["result",["ref","borrowerror"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",185,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",185,[[["self"]],["result",["refmut","borrowmuterror"]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",185,N],[11,"get_mut","","Returns a mutable reference to the underlying data.",185,[[["self"]],["t"]]],[11,"clone","","Copies a `Ref`.",188,[[["ref"]],["ref"]]],[11,"map","","Make a new `Ref` for a component of the borrowed data.",188,[[["ref"],["f"]],["ref"]]],[11,"map_split","","Split a `Ref` into multiple `Ref`s for different components of the borrowed data.",188,N],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",189,[[["refmut"],["f"]],["refmut"]]],[11,"map_split","","Split a `RefMut` into multiple `RefMut`s for different components of the borrowed data.",189,N],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",190,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",190,[[["self"]],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",190,N],[11,"unpaired_surrogate","rocket_app::domain::error::err_msg::_core::char","Returns the unpaired surrogate which caused this error.",198,[[["self"]],["u16"]]],[11,"payload","rocket_app::domain::error::err_msg::_core::panic","Returns the payload associated with the panic.",200,[[["self"]],["any"]]],[11,"message","","If the `panic!` macro from the `core` crate (not from `std`) was used with a formatting string and some additional arguments, returns that message ready to be used for example with [`fmt::write`]",200,[[["self"]],["option",["arguments"]]]],[11,"location","","Returns information about the location from which the panic originated, if available.",200,[[["self"]],["option",["location"]]]],[11,"file","","Returns the name of the source file from which the panic originated.",201,[[["self"]],["str"]]],[11,"line","","Returns the line number from which the panic originated.",201,[[["self"]],["u32"]]],[11,"column","","Returns the column from which the panic originated.",201,[[["self"]],["u32"]]],[11,"new","rocket_app::domain::error::err_msg::_core::pin","Construct a new `Pin` around a pointer to some data of a type that implements `Unpin`.",202,[[["p"]],["pin"]]],[11,"new_unchecked","","Construct a new `Pin` around a reference to some data of a type that may or may not implement `Unpin`.",202,[[["p"]],["pin"]]],[11,"as_ref","","Get a pinned shared reference from this pinned pointer.",202,[[["self"]],["pin"]]],[11,"as_mut","","Get a pinned mutable reference from this pinned pointer.",202,[[["self"]],["pin"]]],[11,"set","","Assign a new value to the memory behind the pinned reference.",202,N],[11,"map_unchecked","","Construct a new pin by mapping the interior value.",202,[[["pin"],["f"]],["pin"]]],[11,"get_ref","","Get a shared reference out of a pin.",202,[[["pin"]],["t"]]],[11,"into_ref","","Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.",202,[[["pin"]],["pin"]]],[11,"get_mut","","Get a mutable reference to the data inside of this `Pin`.",202,[[["pin"]],["t"]]],[11,"get_mut_unchecked","","Get a mutable reference to the data inside of this `Pin`.",202,[[["pin"]],["t"]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",202,[[["pin"],["f"]],["pin"]]],[11,"peek","rocket_app::domain::error::err_msg::_core::iter","Returns a reference to the next() value without advancing the iterator.",213,[[["self"]],["option"]]],[11,"as_slice","rocket_app::domain::error::err_msg::_core::slice","View the underlying data as a subslice of the original data.",235,N],[11,"into_slice","","View the underlying data as a subslice of the original data.",236,N],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",248,N],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",249,N],[11,"from_str","rocket_app::domain::error::err_msg::_core::str::lossy","",254,[[["str"]],["utf8lossy"]]],[11,"from_bytes","","",254,N],[11,"chunks","","",254,[[["self"]],["utf8lossychunksiter"]]],[11,"valid_up_to","rocket_app::domain::error::err_msg::_core::str","Returns the index in the given string up to which valid UTF-8 was verified.",257,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",257,[[["self"]],["option",["usize"]]]],[11,"as_str","","View the underlying data as a subslice of the original data.",258,[[["self"]],["str"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",259,[[["self"]],["str"]]],[11,"new","rocket_app::domain::error::err_msg::_core::hash","Creates a new `SipHasher` with the two initial keys set to 0.",277,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",277,[[["u64"],["u64"]],["siphasher"]]],[11,"pad_integral","rocket_app::domain::error::err_msg::_core::fmt","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",279,[[["self"],["bool"],["str"],["str"]],["result",["error"]]]],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",279,[[["self"],["str"]],["result",["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",279,[[["self"],["str"]],["result",["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",279,[[["self"],["arguments"]],["result",["error"]]]],[11,"flags","","Flags for formatting",279,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",279,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",279,[[["self"]],["option",["alignment"]]]],[11,"width","","Optionally specified integer width that the output should be.",279,[[["self"]],["option",["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",279,[[["self"]],["option",["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",279,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",279,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",279,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",279,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",279,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",279,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",279,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",279,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",279,[[["self"]],["debugmap"]]],[11,"field","","Adds a new field to the generated struct output.",281,[[["self"],["str"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",281,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the map output.",282,[[["self"],["debug"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map output.",282,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",282,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the list output.",283,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list output.",283,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",283,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the set output.",284,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set output.",284,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",284,[[["self"]],["result",["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",285,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",285,[[["self"]],["result",["error"]]]],[11,"new","rocket_app::domain::error::err_msg::_core::time","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",286,[[["u64"],["u32"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",286,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",286,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",286,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",286,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",286,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole milliseconds.",286,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole microseconds.",286,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",286,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained by this `Duration`.",286,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained by this `Duration`.",286,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this `Duration`.",286,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",286,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",286,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",286,[[["self"],["u32"]],["option",["duration"]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",286,[[["self"],["u32"]],["option",["duration"]]]],[11,"as_float_secs","","Returns the number of seconds contained by this `Duration` as `f64`.",286,[[["self"]],["f64"]]],[11,"from_float_secs","","Creates a new `Duration` from the specified number of seconds.",286,[[["f64"]],["duration"]]],[11,"mul_f64","","Multiply `Duration` by `f64`.",286,[[["self"],["f64"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",286,[[["self"],["f64"]],["duration"]]],[11,"div_duration","","Divide `Duration` by `Duration` and return `f64`.",286,[[["self"],["duration"]],["f64"]]],[11,"map","rocket_app::domain::error::err_msg::_core::task","Change the ready value of this `Poll` with the closure provided",99,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",99,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",99,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",99,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",99,[[["self"],["f"]],["poll",["result"]]]],[11,"new","","Constructs a new `Waker` directly.",287,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",287,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",287,[[["self"],["waker"]],["bool"]]],[11,"will_wake_local","","Returns whether or not this `Waker` and `other` `LocalWaker` awaken the same task.",287,[[["self"],["localwaker"]],["bool"]]],[11,"new","","Constructs a new `LocalWaker` directly.",288,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"as_waker","","Borrows this `LocalWaker` as a `Waker`.",288,[[["self"]],["waker"]]],[11,"into_waker","","Converts this `LocalWaker` into a `Waker`.",288,[[["self"]],["waker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",288,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",288,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",288,[[["self"],["waker"]],["bool"]]],[11,"from_size_align","rocket_app::domain::error::err_msg::_core::alloc","Constructs a `Layout` from a given `size` and `align`, or returns `LayoutErr` if either of the following conditions are not met:",289,[[["usize"],["usize"]],["result",["layout","layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",289,[[["usize"],["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",289,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this layout.",289,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",289,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",289,[[["t"]],["layout"]]],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",289,[[["self"],["usize"]],["layout"]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",289,[[["self"],["usize"]],["usize"]]],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",289,[[["self"],["usize"]],["result",["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",289,[[["self"],["layout"]],["result",["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",289,[[["self"],["usize"]],["result",["layout","layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",289,[[["self"],["layout"]],["result",["layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",289,[[["usize"]],["result",["layout","layouterr"]]]],[11,"description","","",292,[[["self"]],["str"]]],[11,"new","rocket_app::domain::error::err_msg","Creates a new context without an underlying error message.",300,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",300,[[["self"]],["d"]]],[11,"map","","Maps `Context<D>` to `Context<T>` by applying a function to the contained context.",300,[[["self"],["f"]],["context"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",301,[[["box",["error"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",301,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",301,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",301,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",301,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",301,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",301,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",301,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",301,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",301,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",301,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",301,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",301,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",301,[[["self"]],["causes"]]],[11,"into_inner","","Unwraps this into the inner error.",302,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",302,[[["self"]],["e"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",303,[[],["backtrace"]]]],"paths":[[3,"Create"],[3,"Get"],[3,"Create"],[8,"Fail"],[3,"Wrapping"],[4,"FpCategory"],[8,"AsMut"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Ord"],[8,"From"],[4,"Result"],[4,"Option"],[8,"Extend"],[8,"PartialEq"],[8,"FnMut"],[8,"Iterator"],[8,"AsRef"],[8,"Fn"],[8,"Into"],[8,"Clone"],[8,"FnOnce"],[8,"Default"],[8,"ExactSizeIterator"],[8,"PartialOrd"],[8,"Drop"],[8,"Generator"],[8,"Neg"],[3,"RangeFrom"],[8,"Div"],[3,"Range"],[8,"Add"],[4,"Bound"],[8,"ShlAssign"],[8,"Try"],[4,"GeneratorState"],[8,"Mul"],[8,"RemAssign"],[3,"RangeTo"],[8,"RangeBounds"],[8,"Index"],[8,"BitOr"],[8,"Shr"],[3,"RangeToInclusive"],[8,"BitXor"],[8,"Sub"],[8,"BitXorAssign"],[8,"DerefMut"],[8,"Not"],[8,"BitAndAssign"],[8,"MulAssign"],[8,"Shl"],[8,"ShrAssign"],[8,"AddAssign"],[8,"BitOrAssign"],[8,"DivAssign"],[8,"IndexMut"],[8,"Deref"],[8,"Rem"],[8,"BitAnd"],[8,"SubAssign"],[4,"Ordering"],[3,"Reverse"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[8,"FixedSizeArray"],[4,"Ordering"],[3,"UnicodeVersion"],[8,"Product"],[8,"Sum"],[8,"Step"],[8,"FromIterator"],[3,"TraitObject"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf8LossyChunk"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[4,"Alignment"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Future"],[8,"UnsafeWake"],[4,"Poll"],[3,"Excess"],[8,"GlobalAlloc"],[8,"Alloc"],[3,"CpuidResult"],[8,"AsFail"],[8,"ResultExt"],[8,"IdProvider"],[3,"Id"],[3,"NextId"],[3,"Version"],[3,"CreateCustomer"],[8,"CreateCustomerCommand"],[3,"Resolver"],[3,"CustomerData"],[3,"Customer"],[3,"GetCustomer"],[8,"GetCustomerQuery"],[3,"GetCustomerWithOrders"],[3,"CustomerWithOrders"],[3,"CustomerOrder"],[8,"GetCustomerWithOrdersQuery"],[3,"AddOrUpdateProduct"],[8,"AddOrUpdateProductCommand"],[3,"CreateOrder"],[8,"CreateOrderCommand"],[3,"OrderData"],[3,"LineItemData"],[4,"IntoLineItem"],[3,"OrderLineItem"],[3,"Order"],[3,"GetOrder"],[8,"GetOrderQuery"],[3,"GetOrderWithProducts"],[3,"OrderWithProducts"],[3,"ProductLineItem"],[8,"GetOrderWithProductsQuery"],[3,"GetOrderSummariesForCustomer"],[3,"OrderSummary"],[8,"GetOrderSummariesForCustomerQuery"],[3,"CreateProduct"],[8,"CreateProductCommand"],[3,"SetProductTitle"],[8,"SetProductTitleCommand"],[3,"ProductData"],[3,"Product"],[3,"GetProduct"],[8,"GetProductQuery"],[3,"GetProductSummaries"],[3,"ProductSummary"],[8,"GetProductSummariesQuery"],[3,"ProductQuantity"],[3,"Causes"],[3,"SyncFailure"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"NonNull"],[3,"PhantomData"],[3,"Pinned"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"TypeId"],[3,"TryFromSliceError"],[3,"EscapeDefault"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"CharTryFromError"],[3,"ParseCharError"],[3,"DecodeUtf16Error"],[3,"DecodeUtf16"],[3,"PanicInfo"],[3,"Location"],[3,"Pin"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Flatten"],[3,"Fuse"],[3,"Inspect"],[3,"Once"],[3,"Repeat"],[3,"RepeatWith"],[3,"Empty"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"c_void"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Utf8Lossy"],[3,"Utf8LossyChunksIter"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"EncodeUtf16"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Error"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugMap"],[3,"DebugList"],[3,"DebugSet"],[3,"DebugTuple"],[3,"Duration"],[3,"Waker"],[3,"LocalWaker"],[3,"Layout"],[3,"LayoutErr"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"__m128i"],[3,"__m64"],[3,"__m256i"],[3,"__m128d"],[3,"__m256"],[3,"__m128"],[3,"__m256d"],[3,"Context"],[3,"Error"],[3,"Compat"],[3,"Backtrace"],[3,"CustomersResolver"],[3,"Quantity"],[3,"OrdersResolver"],[3,"Title"],[3,"Price"],[3,"ProductsResolver"]]};
searchIndex["rocket_codegen"]={"doc":"Rocket - Code Generation","items":[[23,"route","rocket_codegen","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"get","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"put","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"post","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"delete","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"head","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"patch","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"options","","Attribute to generate a [`Route`] and associated metadata.",N,N],[23,"catch","","Attribute to generate a [`Catcher`] and associated metadata.",N,N],[24,"FromFormValue","","Derive for the [`FromFormValue`] trait.",N,N],[24,"FromForm","","Derive for the [`FromForm`] trait.",N,N],[24,"Responder","","Derive for the [`Responder`] trait.",N,N],[24,"UriDisplay","","Derive for the [`UriDisplay`] trait.",N,N],[14,"routes","","Generates a [`Vec`] of [`Route`]s from a set of route paths.",N,N],[14,"catchers","","Generates a [`Vec`] of [`Catcher`]s from a set of catcher paths.",N,N],[14,"uri","","Type safe generation of route URIs.",N,N]],"paths":[]};
searchIndex["rocket_contrib"]={"doc":"This crate contains officially sanctioned contributor libraries that provide functionality commonly used by Rocket applications.","items":[[0,"json","rocket_contrib","Automatic JSON (de)serialization support.",N,N],[3,"Json","rocket_contrib::json","The JSON type: implements [`FromData`] and [`Responder`], allowing you to easily consume and respond with JSON.",N,N],[12,"0","","",0,N],[3,"JsonValue","","An arbitrary JSON value.",N,N],[12,"0","","",1,N],[4,"JsonError","","An error returned by the [`Json`] data guard when incoming data fails to serialize as JSON.",N,N],[13,"Io","","An I/O error occurred while reading the incoming request data.",2,N],[13,"Parse","","The client's data was received successfully but failed to parse as valid JSON or as the requested type. The `&str` value in `.0` is the raw data received from the user, while the `Error` in `.1` is the deserialization error from `serde`.",2,N],[11,"into_inner","","Consumes the JSON wrapper and returns the wrapped item.",0,[[["self"]],["t"]]],[0,"serve","rocket_contrib","Custom handler and options for static file serving.",N,N],[3,"Options","rocket_contrib::serve","A bitset representing configurable options for the [`StaticFiles`] handler.",N,N],[3,"StaticFiles","","Custom handler for serving static files.",N,N],[18,"None","","`Options` representing the empty set. No dotfiles or index pages are rendered. This is different than the default, which enables `Index`.",3,N],[18,"Index","","`Options` enabling responding to requests for a directory with the `index.html` file in that directory, if it exists. When this is enabled, the [`StaticFiles`] handler will respond to requests for a directory `/foo` with the file `${root}/foo/index.html` if it exists. This is enabled by default.",3,N],[18,"DotFiles","","`Options` enabling returning dot files. When this is enabled, the [`StaticFiles`] handler will respond to requests for files or directories beginning with `.`. This is not enabled by default.",3,N],[11,"contains","","Returns `true` if `self` is a superset of `other`. In other words, returns `true` if all of the options in `other` are also in `self`.",3,[[["self"],["options"]],["bool"]]],[11,"from","","Constructs a new `StaticFiles` that serves files from the file system `path`. By default, [`Options::Index`] is enabled. To serve static files with other options, use [`StaticFiles::new()`].",4,[[["p"]],["self"]]],[11,"new","","Constructs a new `StaticFiles` that serves files from the file system `path` with `options` enabled.",4,[[["p"],["options"]],["self"]]],[14,"json","rocket_contrib","A macro to create ad-hoc JSON serializable values using JSON syntax.",N,N],[11,"into","rocket_contrib::json","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"transform","","",0,[[["request"],["data"]],["transform",["outcome","outcome"]]]],[11,"from_data","","",0,[[["request"],["transform",["outcome","outcome"]]],["outcome",["data"]]]],[11,"into_collection","","",0,[[["self"]],["smallvec"]]],[11,"mapped","","",0,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",0,[[["self"]],["result",["parseerr"]]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into_collection","","",1,[[["self"]],["smallvec"]]],[11,"mapped","","",1,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",1,[[["self"]],["result",["parseerr"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into_collection","","",2,[[["self"]],["smallvec"]]],[11,"mapped","","",2,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",2,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_contrib::serve","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into_collection","","",3,[[["self"]],["smallvec"]]],[11,"mapped","","",3,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",3,[[["self"]],["result",["parseerr"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"handle","","",4,[[["self"],["request"],["data"]],["outcome",["response","status","data"]]]],[11,"clone_handler","","",4,[[["self"]],["box",["handler"]]]],[11,"into_collection","","",4,[[["self"]],["smallvec"]]],[11,"mapped","","",4,[[["self"],["f"]],["smallvec"]]],[11,"as_result","","",4,[[["self"]],["result",["parseerr"]]]],[11,"into","rocket_contrib::json","",1,[[["self"]],["value"]]],[11,"into","rocket_contrib::serve","",4,[[["self"]],["vec",["route"]]]],[11,"default","rocket_contrib::json","",1,[[],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["jsonvalue"]],["bool"]]],[11,"ne","","",1,[[["self"],["jsonvalue"]],["bool"]]],[11,"from","","",1,[[["value"]],["jsonvalue"]]],[11,"clone","","",1,[[["self"]],["jsonvalue"]]],[11,"clone","rocket_contrib::serve","",3,[[["self"]],["options"]]],[11,"clone","","",4,[[["self"]],["staticfiles"]]],[11,"deref_mut","rocket_contrib::json","",0,[[["self"]],["t"]]],[11,"deref_mut","","",1,N],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref","","",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_contrib::serve","",3,[[["self"],["formatter"]],["result"]]],[11,"bitor","","",3,[[["self"],["self"]],["self"]]],[11,"serialize","rocket_contrib::json","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"transform","","",0,[[["request"],["data"]],["transform",["outcome"]]]],[11,"from_data","","",0,[[["request"],["transformed"]],["outcome"]]],[11,"respond_to","","",0,[[["self"],["request"]],["result"]]],[11,"respond_to","","",1,[[["self"],["request"]],["result"]]],[11,"handle","rocket_contrib::serve","",4,[[["self"],["request"],["data"]],["outcome"]]]],"paths":[[3,"Json"],[3,"JsonValue"],[4,"JsonError"],[3,"Options"],[3,"StaticFiles"]]};
searchIndex["rocket_http"]={"doc":"Types that map to concepts in HTTP.","items":[[3,"Cookie","rocket_http","Representation of an HTTP cookie.",N,N],[4,"SameSite","","The `SameSite` cookie attribute.",N,N],[13,"Strict","","The \"Strict\" `SameSite` attribute.",0,N],[13,"Lax","","The \"Lax\" `SameSite` attribute.",0,N],[13,"None","","No `SameSite` attribute.",0,N],[3,"ContentType","","Representation of HTTP Content-Types.",N,N],[12,"0","","",1,N],[3,"Accept","","The HTTP Accept header.",N,N],[3,"QMediaType","","A `MediaType` with an associated quality value.",N,N],[12,"0","","",2,N],[12,"1","","",2,N],[3,"Status","","Structure representing an HTTP status: an integer code and a reason phrase.",N,N],[12,"code","","The HTTP status code associated with this status.",3,N],[12,"reason","","The HTTP reason phrase associated with this status.",3,N],[3,"Header","","Simple representation of an HTTP header.",N,N],[12,"name","","The name of the header.",4,N],[12,"value","","The value of the header.",4,N],[3,"HeaderMap","","A collection of headers, mapping a header name to its many ordered values.",N,N],[3,"RawStr","","A reference to a string inside of a raw HTTP message.",N,N],[3,"MediaType","","An HTTP media type.",N,N],[4,"Method","","Representation of HTTP methods.",N,N],[13,"Get","","",5,N],[13,"Put","","",5,N],[13,"Post","","",5,N],[13,"Delete","","",5,N],[13,"Options","","",5,N],[13,"Head","","",5,N],[13,"Trace","","",5,N],[13,"Connect","","",5,N],[13,"Patch","","",5,N],[4,"StatusClass","","Enumeration of HTTP status classes.",N,N],[13,"Informational","","Indicates a provisional response: a status code of 1XX.",6,N],[13,"Success","","Indicates that a request has succeeded: a status code of 2XX.",6,N],[13,"Redirection","","Indicates that further action needs to be taken by the user agent in order to fulfill the request: a status code of 3XX.",6,N],[13,"ClientError","","Intended for cases in which the client seems to have erred: a status code of 4XX.",6,N],[13,"ServerError","","Indicates cases in which the server is aware that it has erred or is incapable of performing the request: a status code of 5XX.",6,N],[13,"Unknown","","Indicates that the status code is nonstandard and unknown: all other status codes.",6,N],[4,"Cookies","","Collection of one or more HTTP cookies.",N,N],[0,"hyper","","Re-exported hyper HTTP library types.",N,N],[0,"mime","rocket_http::hyper","Re-exporting the mime crate, for convenience.",N,N],[4,"TopLevel","rocket_http::hyper::mime","",N,N],[13,"Star","","",7,N],[13,"Text","","",7,N],[13,"Image","","",7,N],[13,"Audio","","",7,N],[13,"Video","","",7,N],[13,"Application","","",7,N],[13,"Multipart","","",7,N],[13,"Message","","",7,N],[13,"Model","","",7,N],[13,"Ext","","",7,N],[6,"Param","","",N,N],[4,"Value","","",N,N],[13,"Utf8","","",8,N],[13,"Ext","","",8,N],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",N,N],[12,"0","","",9,N],[12,"1","","",9,N],[12,"2","","",9,N],[14,"mime","","Easily create a Mime without having to import so many enums.",N,N],[4,"Attr","","",N,N],[13,"Charset","","",10,N],[13,"Boundary","","",10,N],[13,"Q","","",10,N],[13,"Ext","","",10,N],[4,"SubLevel","","",N,N],[13,"Star","","",11,N],[13,"Plain","","",11,N],[13,"Html","","",11,N],[13,"Xml","","",11,N],[13,"Javascript","","",11,N],[13,"Css","","",11,N],[13,"EventStream","","",11,N],[13,"Json","","",11,N],[13,"WwwFormUrlEncoded","","",11,N],[13,"Msgpack","","",11,N],[13,"OctetStream","","",11,N],[13,"FormData","","",11,N],[13,"Png","","",11,N],[13,"Gif","","",11,N],[13,"Bmp","","",11,N],[13,"Jpeg","","",11,N],[13,"Mpeg","","",11,N],[13,"Mp4","","",11,N],[13,"Ogg","","",11,N],[13,"Ext","","",11,N],[0,"header","rocket_http::hyper","Reexported Hyper header types.",N,N],[3,"Accept","rocket_http::hyper::header","`Accept` header, defined in RFC7231",N,N],[12,"0","","",12,N],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",N,N],[12,"0","","",13,N],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",N,N],[12,"0","","",14,N],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",N,N],[12,"0","","",15,N],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",N,N],[12,"0","","",16,N],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",N,N],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",N,N],[12,"0","","",17,N],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",N,N],[12,"0","","",18,N],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",N,N],[12,"0","","",19,N],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",N,N],[12,"0","","",20,N],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",N,N],[12,"0","","",21,N],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",N,N],[12,"0","","",22,N],[3,"Allow","","`Allow` header, defined in RFC7231",N,N],[12,"0","","",23,N],[3,"Authorization","","`Authorization` header, defined in RFC7235",N,N],[12,"0","","",24,N],[3,"Basic","","Credential holder for Basic Authentication",N,N],[12,"username","","The username as a possibly empty string",25,N],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",25,N],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",N,N],[12,"token","","Actual bearer token as a string",26,N],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",N,N],[12,"0","","",27,N],[3,"Connection","","`Connection` header, defined in RFC7230",N,N],[12,"0","","",28,N],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",N,N],[12,"disposition","","The disposition",29,N],[12,"parameters","","Disposition parameters",29,N],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",N,N],[12,"0","","",30,N],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",N,N],[12,"0","","",31,N],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",N,N],[12,"0","","",32,N],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",N,N],[12,"0","","",33,N],[3,"ContentType","","`Content-Type` header, defined in RFC7231",N,N],[12,"0","","",34,N],[3,"Date","","`Date` header, defined in RFC7231",N,N],[12,"0","","",35,N],[3,"ETag","","`ETag` header, defined in RFC7232",N,N],[12,"0","","",36,N],[3,"EntityTag","","An entity tag, defined in RFC7232",N,N],[12,"weak","","Weakness indicator for the tag",37,N],[3,"Expires","","`Expires` header, defined in RFC7234",N,N],[12,"0","","",38,N],[3,"From","","`From` header, defined in RFC7231",N,N],[12,"0","","",39,N],[3,"Headers","","A map of header fields on requests and responses.",N,N],[3,"Host","","The `Host` header.",N,N],[12,"hostname","","The hostname, such a example.domain.",40,N],[12,"port","","An optional port number.",40,N],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",N,N],[12,"0","","",41,N],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",N,N],[12,"0","","",42,N],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",N,N],[12,"0","","",43,N],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",N,N],[12,"0","","",44,N],[3,"Location","","`Location` header, defined in RFC7231",N,N],[12,"0","","",45,N],[3,"Origin","","The `Origin` header.",N,N],[12,"scheme","","The scheme, such as http or https",46,N],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",46,N],[3,"Prefer","","`Prefer` header, defined in RFC7240",N,N],[12,"0","","",47,N],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",N,N],[12,"0","","",48,N],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",N,N],[12,"name","","The protocol identifier",49,N],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",49,N],[3,"Quality","","Represents a quality used in quality values.",N,N],[12,"0","","",50,N],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",N,N],[12,"item","","The actual contents of the field.",51,N],[12,"quality","","The quality (client or server preference) for the value.",51,N],[3,"Referer","","`Referer` header, defined in RFC7231",N,N],[12,"0","","",52,N],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",N,N],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",53,N],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",53,N],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",N,N],[12,"0","","",54,N],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",N,N],[12,"0","","",55,N],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",N,N],[12,"0","","",56,N],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",N,N],[13,"Any","","Allow all origins",57,N],[13,"Null","","A hidden origin",57,N],[13,"Value","","Allow one particular origin",57,N],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",N,N],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",58,N],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",58,N],[13,"Last","","Get last x bytes (\"-x\")",58,N],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",N,N],[13,"NoCache","","\"no-cache\"",59,N],[13,"NoStore","","\"no-store\"",59,N],[13,"NoTransform","","\"no-transform\"",59,N],[13,"OnlyIfCached","","\"only-if-cached\"",59,N],[13,"MaxAge","","\"max-age=delta\"",59,N],[13,"MaxStale","","\"max-stale=delta\"",59,N],[13,"MinFresh","","\"min-fresh=delta\"",59,N],[13,"MustRevalidate","","\"must-revalidate\"",59,N],[13,"Public","","\"public\"",59,N],[13,"Private","","\"private\"",59,N],[13,"ProxyRevalidate","","\"proxy-revalidate\"",59,N],[13,"SMaxAge","","\"s-maxage=delta\"",59,N],[13,"Extension","","Extension directives. Optionally include an argument.",59,N],[4,"Charset","","A Mime charset.",N,N],[13,"Us_Ascii","","US ASCII",60,N],[13,"Iso_8859_1","","ISO-8859-1",60,N],[13,"Iso_8859_2","","ISO-8859-2",60,N],[13,"Iso_8859_3","","ISO-8859-3",60,N],[13,"Iso_8859_4","","ISO-8859-4",60,N],[13,"Iso_8859_5","","ISO-8859-5",60,N],[13,"Iso_8859_6","","ISO-8859-6",60,N],[13,"Iso_8859_7","","ISO-8859-7",60,N],[13,"Iso_8859_8","","ISO-8859-8",60,N],[13,"Iso_8859_9","","ISO-8859-9",60,N],[13,"Iso_8859_10","","ISO-8859-10",60,N],[13,"Shift_Jis","","Shift_JIS",60,N],[13,"Euc_Jp","","EUC-JP",60,N],[13,"Iso_2022_Kr","","ISO-2022-KR",60,N],[13,"Euc_Kr","","EUC-KR",60,N],[13,"Iso_2022_Jp","","ISO-2022-JP",60,N],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",60,N],[13,"Iso_8859_6_E","","ISO-8859-6-E",60,N],[13,"Iso_8859_6_I","","ISO-8859-6-I",60,N],[13,"Iso_8859_8_E","","ISO-8859-8-E",60,N],[13,"Iso_8859_8_I","","ISO-8859-8-I",60,N],[13,"Gb2312","","GB2312",60,N],[13,"Big5","","Big5",60,N],[13,"Koi8_R","","KOI8-R",60,N],[13,"Ext","","An arbitrary charset specified as a string",60,N],[4,"ConnectionOption","","Values that can be in the `Connection` header.",N,N],[13,"KeepAlive","","The `keep-alive` connection value.",61,N],[13,"Close","","The `close` connection value.",61,N],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",61,N],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",N,N],[13,"Bytes","","Byte range",62,N],[12,"range","rocket_http::hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",62,N],[12,"instance_length","","Total length of the instance, can be omitted if unknown",62,N],[13,"Unregistered","rocket_http::hyper::header","Custom range, with unit not registered at IANA",62,N],[12,"unit","rocket_http::hyper::header::ContentRangeSpec","other-range-unit",62,N],[12,"resp","","other-range-resp",62,N],[4,"DispositionParam","rocket_http::hyper::header","A parameter to the disposition type",N,N],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",63,N],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",63,N],[4,"DispositionType","","The implied disposition of the content of the HTTP body",N,N],[13,"Inline","","Inline implies default processing",64,N],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",64,N],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",64,N],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",N,N],[13,"Chunked","","The `chunked` encoding.",65,N],[13,"Gzip","","The `gzip` encoding.",65,N],[13,"Deflate","","The `deflate` encoding.",65,N],[13,"Compress","","The `compress` encoding.",65,N],[13,"Identity","","The `identity` encoding.",65,N],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",65,N],[4,"Expect","","The `Expect` header.",N,N],[13,"Continue","","The value `100-continue`.",66,N],[4,"IfMatch","","`If-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",67,N],[13,"Items","","Only the listed items are a match",67,N],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",N,N],[13,"Any","","Any value is a match",68,N],[13,"Items","","Only the listed items are a match",68,N],[4,"IfRange","","`If-Range` header, defined in RFC7233",N,N],[13,"EntityTag","","The entity-tag the client has of the resource",69,N],[13,"Date","","The date when the client retrieved the resource",69,N],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",N,N],[13,"NoCache","","Corresponds to the `no-cache` value.",70,N],[13,"Ext","","Every value other than `no-cache`.",70,N],[4,"Preference","","Prefer contains a list of these preferences.",N,N],[13,"RespondAsync","","\"respond-async\"",71,N],[13,"ReturnRepresentation","","\"return=representation\"",71,N],[13,"ReturnMinimal","","\"return=minimal\"",71,N],[13,"HandlingStrict","","\"handling=strict\"",71,N],[13,"HandlingLeniant","","\"handling=leniant\"",71,N],[13,"Wait","","\"wait=delta\"",71,N],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",71,N],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",N,N],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",72,N],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",72,N],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",72,N],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",72,N],[13,"Unregistered","","Any other protocol name not known to hyper",72,N],[4,"Range","","`Range` header, defined in RFC7233",N,N],[13,"Bytes","","Byte range",73,N],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",73,N],[4,"RangeUnit","","Range Units, described in RFC7233",N,N],[13,"Bytes","","Indicating byte-range requests are supported.",74,N],[13,"None","","Reserved as keyword, indicating no ranges are supported.",74,N],[13,"Unregistered","","The given range unit is not registered at IANA.",74,N],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",N,N],[13,"NoReferrer","","`no-referrer`",75,N],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",75,N],[13,"SameOrigin","","`same-origin`",75,N],[13,"Origin","","`origin`",75,N],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",75,N],[13,"UnsafeUrl","","`unsafe-url`",75,N],[13,"StrictOrigin","","`strict-origin`",75,N],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",75,N],[4,"Vary","","`Vary` header, defined in RFC7231",N,N],[13,"Any","","Any value is a match",76,N],[13,"Items","","Only the listed items are a match",76,N],[8,"Scheme","","An Authorization scheme to be used in the header.",N,N],[10,"scheme","","An optional Scheme name.",77,[[],["option",["str"]]]],[10,"fmt_scheme","","Format the Scheme data into a header value.",77,[[["self"],["formatter"]],["result",["error"]]]],[5,"q","","Convenience function to create a `Quality` from a float.",N,[[["f32"]],["quality"]]],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",N,[[["t"]],["qualityitem"]]],[0,"uri","rocket_http","Types for URIs and traits for rendering URI components.",N,N],[3,"Error","rocket_http::uri","Error emitted on URI parse failure.",N,N],[3,"Authority","","A URI with an authority only: `user:pass@host:8000`.",N,N],[3,"Origin","","A URI with an absolute path and optional query: `/path?query`.",N,N],[3,"Absolute","","A URI with a scheme, authority, path, and query: `http://user:pass@domain.com:4444/path?query`.",N,N],[3,"Formatter","","A struct used to format strings for [`UriDisplay`].",N,N],[3,"Segments","","Iterator over the segments of an absolute URI path. Skips empty segments.",N,N],[12,"0","","",78,N],[4,"Uri","","An `enum` encapsulating any of the possible URI variants.",N,N],[13,"Origin","","An origin URI.",79,N],[13,"Authority","","An authority URI.",79,N],[13,"Absolute","","An absolute URI.",79,N],[13,"Asterisk","","An asterisk: exactly `*`.",79,N],[4,"SegmentError","","Errors which can occur when attempting to interpret a segment string as a valid path segment.",N,N],[13,"Utf8","","The segment contained invalid UTF8 characters when percent decoded.",80,N],[13,"BadStart","","The segment started with the wrapped invalid character.",80,N],[13,"BadChar","","The segment contained the wrapped invalid character.",80,N],[13,"BadEnd","","The segment ended with the wrapped invalid character.",80,N],[11,"parse","","Parses the string `string` into a `Uri`. Parsing will never allocate. Returns an `Error` if `string` is not a valid URI.",79,[[["str"]],["result",["uri","error"]]]],[11,"origin","","Returns the internal instance of `Origin` if `self` is a `Uri::Origin`. Otherwise, returns `None`.",79,[[["self"]],["option",["origin"]]]],[11,"authority","","Returns the internal instance of `Authority` if `self` is a `Uri::Authority`. Otherwise, returns `None`.",79,[[["self"]],["option",["authority"]]]],[11,"absolute","","Returns the internal instance of `Absolute` if `self` is a `Uri::Absolute`. Otherwise, returns `None`.",79,[[["self"]],["option",["absolute"]]]],[11,"percent_encode","","Returns a URL-encoded version of the string. Any characters outside of visible ASCII-range are encoded as well as ' ', '\"', '#', '<', '>', '`', '?', '{', '}', '%', and '/'.",79,[[["str"]],["cow",["str"]]]],[11,"percent_decode","","Returns a URL-decoded version of the string. If the percent encoded values are not valid UTF-8, an `Err` is returned.",79,N],[11,"percent_decode_lossy","","Returns a URL-decoded version of the path. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",79,N],[11,"write_raw","","Writes `string` to `self`.",81,[[["self"],["s"]],["result"]]],[11,"write_named_value","","Writes the named value `value` by prefixing `name` followed by `=` to the value. Any nested names are also prefixed as necessary.",81,[[["self"],["str"],["t"]],["result"]]],[11,"write_value","","Writes the unnamed value `value`. Any nested names are prefixed as necessary.",81,[[["self"],["t"]],["result"]]],[11,"refresh","","Refreshes the formatter.",81,[[["self"]]]],[11,"parse","","Parses the string `string` into an `Origin`. Parsing will never allocate. Returns an `Error` if `string` is not a valid origin URI.",82,[[["str"]],["result",["origin","error"]]]],[11,"parse_owned","","Parses the string `string` into an `Origin`. Parsing will never allocate. This method should be used instead of `Origin::parse()` when the source URI is already a `String`. Returns an `Error` if `string` is not a valid origin URI.",82,[[["string"]],["result",["origin","error"]]]],[11,"is_normalized","","Returns `true` if `self` is normalized. Otherwise, returns `false`.",82,[[["self"]],["bool"]]],[11,"to_normalized","","Normalizes `self`.",82,[[["self"]],["origin"]]],[11,"path","","Returns the path part of this URI.",82,[[["self"]],["str"]]],[11,"query","","Returns the query part of this URI without the question mark, if there is any.",82,[[["self"]],["option",["str"]]]],[11,"clear_query","","Removes the query part of this URI, if there is any.",82,[[["self"]]]],[11,"segments","","Returns an iterator over the segments of the path in this URI. Skips empty segments.",82,[[["self"]],["segments"]]],[11,"segment_count","","Returns the number of segments in the URI. Empty segments, which are invalid according to RFC#3986, are not counted.",82,[[["self"]],["usize"]]],[11,"parse","","Parses the string `string` into an `Authority`. Parsing will never allocate. Returns an `Error` if `string` is not a valid authority URI.",83,[[["str"]],["result",["authority","error"]]]],[11,"user_info","","Returns the user info part of the authority URI, if there is one.",83,[[["self"]],["option",["str"]]]],[11,"host","","Returns the host part of the authority URI.",83,[[["self"]],["str"]]],[11,"port","","Returns the port part of the authority URI, if there is one.",83,[[["self"]],["option",["u16"]]]],[11,"parse","","Parses the string `string` into an `Absolute`. Parsing will never allocate. Returns an `Error` if `string` is not a valid absolute URI.",84,[[["str"]],["result",["absolute","error"]]]],[11,"scheme","","Returns the scheme part of the absolute URI.",84,[[["self"]],["str"]]],[11,"authority","","Returns the authority part of the absolute URI, if there is one.",84,[[["self"]],["option",["authority"]]]],[11,"origin","","Returns the origin part of the absolute URI, if there is one.",84,[[["self"]],["option",["origin"]]]],[11,"into_path_buf","","Creates a `PathBuf` from a `Segments` iterator. The returned `PathBuf` is percent-decoded. If a segment is equal to \"..\", the previous segment (if any) is skipped.",78,[[["self"],["bool"]],["result",["pathbuf","segmenterror"]]]],[8,"UriDisplay","","Trait implemented by types that can be displayed as part of a URI in `uri!`.",N,N],[10,"fmt","","Formats `self` in a URI-safe manner using the given formatter.",85,[[["self"],["formatter"]],["result"]]],[8,"FromUriParam","","Conversion trait for parameters used in [`uri!`] invocations.",N,N],[16,"Target","","The resulting type of this conversion.",86,N],[10,"from_uri_param","","Converts a value of type `T` into a value of type `Self::Target`. The resulting value of type `Self::Target` will be rendered into a URI using its `UriDisplay` implementation.",86,N],[0,"ext","rocket_http","Extension traits implemented by several HTTP types.",N,N],[8,"IntoCollection","rocket_http::ext","Trait implemented by types that can be converted into a collection.",N,N],[10,"into_collection","","Converts `self` into a collection.",87,[[["self"]],["smallvec"]]],[8,"IntoOwned","","Trait implemented by types that can be converted into owned versions of themselves.",N,N],[16,"Owned","","The owned version of the type.",88,N],[10,"into_owned","","Converts `self` into an owned version of itself.",88,N],[8,"Normalize","","",N,N],[10,"normalized_str","","",89,[[["self"]],["cow",["str"]]]],[11,"get","rocket_http","Returns a reference to the `Cookie` inside this container with the name `name`. If no such cookie exists, returns `None`.",90,[[["self"],["str"]],["option",["cookie"]]]],[11,"get_private","","Returns a reference to the `Cookie` inside this collection with the name `name` and authenticates and decrypts the cookie's value, returning a `Cookie` with the decrypted value. If the cookie cannot be found, or the cookie fails to authenticate or decrypt, `None` is returned.",90,[[["self"],["str"]],["option",["cookie"]]]],[11,"add","","Adds `cookie` to this collection.",90,[[["self"],["cookie"]]]],[11,"add_private","","Adds `cookie` to the collection. The cookie's value is encrypted with authenticated encryption assuring confidentiality, integrity, and authenticity. The cookie can later be retrieved using `get_private` and removed using `remove_private`.",90,[[["self"],["cookie"]]]],[11,"remove","","Removes `cookie` from this collection and generates a \"removal\" cookies to send to the client on response. For correctness, `cookie` must contain the same `path` and `domain` as the cookie that was initially set. Failure to provide the initial `path` and `domain` will result in cookies that are not properly removed.",90,[[["self"],["cookie"]]]],[11,"remove_private","","Removes the private `cookie` from the collection.",90,[[["self"],["cookie"]]]],[11,"iter","","Returns an iterator over all of the cookies present in this collection.",90,N],[11,"supports_payload","","Returns `true` if an HTTP request with the method represented by `self` always supports a payload.",5,[[["self"]],["bool"]]],[11,"as_str","","Returns the string representation of `self`.",5,[[["self"]],["str"]]],[11,"new","","Creates a new `MediaType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",91,[[["t"],["s"]],["mediatype"]]],[11,"with_params","","Creates a new `MediaType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom media types. Use an associated constant for everything else.",91,[[["t"],["s"],["p"]],["mediatype"]]],[11,"parse_flexible","","Flexibly parses `name` into a `MediaType` . The parse is flexible because, in addition to stricly correct media types, it recognizes the following shorthands:  * \"any\" - `MediaType::Any`  * \"binary\" - `MediaType::Binary`  * \"html\" - `MediaType::HTML`  * \"plain\" - `MediaType::Plain`  * \"json\" - `MediaType::JSON`  * \"msgpack\" - `MediaType::MsgPack`  * \"form\" - `MediaType::Form`  * \"js\" - `MediaType::JavaScript`  * \"css\" - `MediaType::CSS`  * \"multipart\" - `MediaType::FormData`  * \"xml\" - `MediaType::XML` ",91,[[["str"]],["option",["mediatype"]]]],[11,"from_extension","","Returns the Media-Type associated with the extension `ext` . Not all extensions are recognized. If an extensions is not recognized, `None` is returned. The currently recognized extensions are:  * txt - `MediaType::Plain`  * html - `MediaType::HTML`  * htm - `MediaType::HTML`  * xml - `MediaType::XML`  * csv - `MediaType::CSV`  * js - `MediaType::JavaScript`  * css - `MediaType::CSS`  * json - `MediaType::JSON`  * png - `MediaType::PNG`  * gif - `MediaType::GIF`  * bmp - `MediaType::BMP`  * jpeg - `MediaType::JPEG`  * jpg - `MediaType::JPEG`  * webp - `MediaType::WEBP`  * svg - `MediaType::SVG`  * ico - `MediaType::Icon`  * flac - `MediaType::FLAC`  * wav - `MediaType::WAV`  * webm - `MediaType::WEBM`  * weba - `MediaType::WEBA`  * ogg - `MediaType::OGG`  * ogv - `MediaType::OGG`  * pdf - `MediaType::PDF`  * ttf - `MediaType::TTF`  * otf - `MediaType::OTF`  * woff - `MediaType::WOFF`  * woff2 - `MediaType::WOFF2`  * mp4 - `MediaType::MP4`  * mpeg4 - `MediaType::MP4`  * wasm - `MediaType::WASM`  * aac - `MediaType::AAC`  * ics - `MediaType::Calendar`  * bin - `MediaType::Binary`  * mpg - `MediaType::MPEG`  * mpeg - `MediaType::MPEG`  * tar - `MediaType::TAR`  * gz - `MediaType::GZIP`  * tif - `MediaType::TIFF`  * tiff - `MediaType::TIFF`  * mov - `MediaType::MOV` ",91,[[["str"]],["option",["mediatype"]]]],[11,"top","","Returns the top-level type for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",91,[[["self"]],["uncasedstr"]]],[11,"sub","","Returns the subtype for this media type. The return type, `UncasedStr`, has caseless equality comparison and hashing.",91,[[["self"]],["uncasedstr"]]],[11,"specificity","","Returns a `u8` representing how specific the top-level type and subtype of this media type are.",91,[[["self"]],["u8"]]],[11,"exact_eq","","Compares `self` with `other` and returns `true` if `self` and `other` are exactly equal to each other, including with respect to their parameters.",91,[[["self"],["mediatype"]],["bool"]]],[11,"params","","Returns an iterator over the (key, value) pairs of the media type's parameter list. The iterator will be empty if the media type has no parameters.",91,N],[18,"Any","","Media Type for any media type: `*/*`. ",91,N],[18,"Binary","","Media Type for binary data: `application/octet-stream`. ",91,N],[18,"HTML","","Media Type for HTML: `text/html; charset=utf-8`. ",91,N],[18,"Plain","","Media Type for plain text: `text/plain; charset=utf-8`. ",91,N],[18,"JSON","","Media Type for JSON: `application/json`. ",91,N],[18,"MsgPack","","Media Type for MsgPack: `application/msgpack`. ",91,N],[18,"Form","","Media Type for forms: `application/x-www-form-urlencoded`. ",91,N],[18,"JavaScript","","Media Type for JavaScript: `application/javascript`. ",91,N],[18,"CSS","","Media Type for CSS: `text/css; charset=utf-8`. ",91,N],[18,"FormData","","Media Type for multipart form data: `multipart/form-data`. ",91,N],[18,"XML","","Media Type for XML: `text/xml; charset=utf-8`. ",91,N],[18,"CSV","","Media Type for CSV: `text/csv; charset=utf-8`. ",91,N],[18,"PNG","","Media Type for PNG: `image/png`. ",91,N],[18,"GIF","","Media Type for GIF: `image/gif`. ",91,N],[18,"BMP","","Media Type for BMP: `image/bmp`. ",91,N],[18,"JPEG","","Media Type for JPEG: `image/jpeg`. ",91,N],[18,"WEBP","","Media Type for WEBP: `image/webp`. ",91,N],[18,"SVG","","Media Type for SVG: `image/svg+xml`. ",91,N],[18,"Icon","","Media Type for Icon: `image/x-icon`. ",91,N],[18,"WEBM","","Media Type for WEBM: `video/webm`. ",91,N],[18,"WEBA","","Media Type for WEBM Audio: `audio/webm`. ",91,N],[18,"OGG","","Media Type for OGG Video: `video/ogg`. ",91,N],[18,"FLAC","","Media Type for FLAC: `audio/flac`. ",91,N],[18,"WAV","","Media Type for WAV: `audio/wav`. ",91,N],[18,"PDF","","Media Type for PDF: `application/pdf`. ",91,N],[18,"TTF","","Media Type for TTF: `application/font-sfnt`. ",91,N],[18,"OTF","","Media Type for OTF: `application/font-sfnt`. ",91,N],[18,"WOFF","","Media Type for WOFF: `application/font-woff`. ",91,N],[18,"WOFF2","","Media Type for WOFF2: `font/woff2`. ",91,N],[18,"JsonApi","","Media Type for JSON API: `application/vnd.api+json`. ",91,N],[18,"WASM","","Media Type for WASM: `application/wasm`. ",91,N],[18,"TIFF","","Media Type for TIFF: `image/tiff`. ",91,N],[18,"AAC","","Media Type for AAC Audio: `audio/aac`. ",91,N],[18,"Calendar","","Media Type for iCalendar: `text/calendar`. ",91,N],[18,"MPEG","","Media Type for MPEG Video: `video/mpeg`. ",91,N],[18,"TAR","","Media Type for tape archive: `application/x-tar`. ",91,N],[18,"GZIP","","Media Type for gzipped binary: `application/gzip`. ",91,N],[18,"MOV","","Media Type for quicktime video: `video/quicktime`. ",91,N],[18,"MP4","","Media Type for MPEG4 Video: `video/mp4`. ",91,N],[11,"is_known","","Returns `true` if this MediaType is known to Rocket. In other words, returns `true` if there is an associated constant for `self`.",91,[[["self"]],["bool"]]],[11,"is_any","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Any`. ",91,[[["self"]],["bool"]]],[11,"is_binary","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Binary`. ",91,[[["self"]],["bool"]]],[11,"is_html","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::HTML`. ",91,[[["self"]],["bool"]]],[11,"is_plain","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Plain`. ",91,[[["self"]],["bool"]]],[11,"is_json","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JSON`. ",91,[[["self"]],["bool"]]],[11,"is_msgpack","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MsgPack`. ",91,[[["self"]],["bool"]]],[11,"is_form","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Form`. ",91,[[["self"]],["bool"]]],[11,"is_javascript","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JavaScript`. ",91,[[["self"]],["bool"]]],[11,"is_css","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::CSS`. ",91,[[["self"]],["bool"]]],[11,"is_form_data","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::FormData`. ",91,[[["self"]],["bool"]]],[11,"is_xml","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::XML`. ",91,[[["self"]],["bool"]]],[11,"is_csv","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::CSV`. ",91,[[["self"]],["bool"]]],[11,"is_png","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::PNG`. ",91,[[["self"]],["bool"]]],[11,"is_gif","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::GIF`. ",91,[[["self"]],["bool"]]],[11,"is_bmp","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::BMP`. ",91,[[["self"]],["bool"]]],[11,"is_jpeg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JPEG`. ",91,[[["self"]],["bool"]]],[11,"is_webp","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBP`. ",91,[[["self"]],["bool"]]],[11,"is_svg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::SVG`. ",91,[[["self"]],["bool"]]],[11,"is_icon","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Icon`. ",91,[[["self"]],["bool"]]],[11,"is_webm","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBM`. ",91,[[["self"]],["bool"]]],[11,"is_weba","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WEBA`. ",91,[[["self"]],["bool"]]],[11,"is_ogg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::OGG`. ",91,[[["self"]],["bool"]]],[11,"is_flac","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::FLAC`. ",91,[[["self"]],["bool"]]],[11,"is_wav","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WAV`. ",91,[[["self"]],["bool"]]],[11,"is_pdf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::PDF`. ",91,[[["self"]],["bool"]]],[11,"is_ttf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TTF`. ",91,[[["self"]],["bool"]]],[11,"is_otf","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::OTF`. ",91,[[["self"]],["bool"]]],[11,"is_woff","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WOFF`. ",91,[[["self"]],["bool"]]],[11,"is_woff2","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WOFF2`. ",91,[[["self"]],["bool"]]],[11,"is_json_api","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::JsonApi`. ",91,[[["self"]],["bool"]]],[11,"is_wasm","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::WASM`. ",91,[[["self"]],["bool"]]],[11,"is_tiff","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TIFF`. ",91,[[["self"]],["bool"]]],[11,"is_aac","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::AAC`. ",91,[[["self"]],["bool"]]],[11,"is_ical","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::Calendar`. ",91,[[["self"]],["bool"]]],[11,"is_mpeg","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MPEG`. ",91,[[["self"]],["bool"]]],[11,"is_tar","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::TAR`. ",91,[[["self"]],["bool"]]],[11,"is_gzip","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::GZIP`. ",91,[[["self"]],["bool"]]],[11,"is_mov","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MOV`. ",91,[[["self"]],["bool"]]],[11,"is_mp4","","Returns `true` if the top-level and sublevel types of `self` are the same as those of `MediaType::MP4`. ",91,[[["self"]],["bool"]]],[11,"new","","Creates a new `ContentType` with top-level type `top` and subtype `sub`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",1,[[["t"],["s"]],["contenttype"]]],[11,"parse_flexible","","Flexibly parses `name` into a `ContentType` . The parse is flexible because, in addition to stricly correct content types, it recognizes the following shorthands:  * \"any\" - `ContentType::Any`  * \"binary\" - `ContentType::Binary`  * \"html\" - `ContentType::HTML`  * \"plain\" - `ContentType::Plain`  * \"json\" - `ContentType::JSON`  * \"msgpack\" - `ContentType::MsgPack`  * \"form\" - `ContentType::Form`  * \"js\" - `ContentType::JavaScript`  * \"css\" - `ContentType::CSS`  * \"multipart\" - `ContentType::FormData`  * \"xml\" - `ContentType::XML` ",1,[[["str"]],["option",["contenttype"]]]],[11,"from_extension","","Returns the Content-Type associated with the extension `ext` . Not all extensions are recognized. If an extensions is not recognized, `None` is returned. The currently recognized extensions are:  * txt - `ContentType::Plain`  * html - `ContentType::HTML`  * htm - `ContentType::HTML`  * xml - `ContentType::XML`  * csv - `ContentType::CSV`  * js - `ContentType::JavaScript`  * css - `ContentType::CSS`  * json - `ContentType::JSON`  * png - `ContentType::PNG`  * gif - `ContentType::GIF`  * bmp - `ContentType::BMP`  * jpeg - `ContentType::JPEG`  * jpg - `ContentType::JPEG`  * webp - `ContentType::WEBP`  * svg - `ContentType::SVG`  * ico - `ContentType::Icon`  * flac - `ContentType::FLAC`  * wav - `ContentType::WAV`  * webm - `ContentType::WEBM`  * weba - `ContentType::WEBA`  * ogg - `ContentType::OGG`  * ogv - `ContentType::OGG`  * pdf - `ContentType::PDF`  * ttf - `ContentType::TTF`  * otf - `ContentType::OTF`  * woff - `ContentType::WOFF`  * woff2 - `ContentType::WOFF2`  * mp4 - `ContentType::MP4`  * mpeg4 - `ContentType::MP4`  * wasm - `ContentType::WASM`  * aac - `ContentType::AAC`  * ics - `ContentType::Calendar`  * bin - `ContentType::Binary`  * mpg - `ContentType::MPEG`  * mpeg - `ContentType::MPEG`  * tar - `ContentType::TAR`  * gz - `ContentType::GZIP`  * tif - `ContentType::TIFF`  * tiff - `ContentType::TIFF`  * mov - `ContentType::MOV` ",1,[[["str"]],["option",["contenttype"]]]],[11,"with_params","","Creates a new `ContentType` with top-level type `top`, subtype `sub`, and parameters `ps`. This should only be used to construct uncommon or custom content types. Use an associated constant for everything else.",1,[[["t"],["s"],["p"]],["contenttype"]]],[11,"media_type","","Borrows the inner `MediaType` of `self`.",1,[[["self"]],["mediatype"]]],[18,"Any","","Content Type for any media type: `*/*`. ",1,N],[18,"Binary","","Content Type for binary data: `application/octet-stream`. ",1,N],[18,"HTML","","Content Type for HTML: `text/html; charset=utf-8`. ",1,N],[18,"Plain","","Content Type for plain text: `text/plain; charset=utf-8`. ",1,N],[18,"JSON","","Content Type for JSON: `application/json`. ",1,N],[18,"MsgPack","","Content Type for MsgPack: `application/msgpack`. ",1,N],[18,"Form","","Content Type for forms: `application/x-www-form-urlencoded`. ",1,N],[18,"JavaScript","","Content Type for JavaScript: `application/javascript`. ",1,N],[18,"CSS","","Content Type for CSS: `text/css; charset=utf-8`. ",1,N],[18,"FormData","","Content Type for multipart form data: `multipart/form-data`. ",1,N],[18,"XML","","Content Type for XML: `text/xml; charset=utf-8`. ",1,N],[18,"CSV","","Content Type for CSV: `text/csv; charset=utf-8`. ",1,N],[18,"PNG","","Content Type for PNG: `image/png`. ",1,N],[18,"GIF","","Content Type for GIF: `image/gif`. ",1,N],[18,"BMP","","Content Type for BMP: `image/bmp`. ",1,N],[18,"JPEG","","Content Type for JPEG: `image/jpeg`. ",1,N],[18,"WEBP","","Content Type for WEBP: `image/webp`. ",1,N],[18,"SVG","","Content Type for SVG: `image/svg+xml`. ",1,N],[18,"Icon","","Content Type for Icon: `image/x-icon`. ",1,N],[18,"WEBM","","Content Type for WEBM: `video/webm`. ",1,N],[18,"WEBA","","Content Type for WEBM Audio: `audio/webm`. ",1,N],[18,"OGG","","Content Type for OGG Video: `video/ogg`. ",1,N],[18,"FLAC","","Content Type for FLAC: `audio/flac`. ",1,N],[18,"WAV","","Content Type for WAV: `audio/wav`. ",1,N],[18,"PDF","","Content Type for PDF: `application/pdf`. ",1,N],[18,"TTF","","Content Type for TTF: `application/font-sfnt`. ",1,N],[18,"OTF","","Content Type for OTF: `application/font-sfnt`. ",1,N],[18,"WOFF","","Content Type for WOFF: `application/font-woff`. ",1,N],[18,"WOFF2","","Content Type for WOFF2: `font/woff2`. ",1,N],[18,"JsonApi","","Content Type for JSON API: `application/vnd.api+json`. ",1,N],[18,"WASM","","Content Type for WASM: `application/wasm`. ",1,N],[18,"TIFF","","Content Type for TIFF: `image/tiff`. ",1,N],[18,"AAC","","Content Type for AAC Audio: `audio/aac`. ",1,N],[18,"Calendar","","Content Type for iCalendar: `text/calendar`. ",1,N],[18,"MPEG","","Content Type for MPEG Video: `video/mpeg`. ",1,N],[18,"TAR","","Content Type for tape archive: `application/x-tar`. ",1,N],[18,"GZIP","","Content Type for gzipped binary: `application/gzip`. ",1,N],[18,"MOV","","Content Type for quicktime video: `video/quicktime`. ",1,N],[18,"MP4","","Content Type for MPEG4 Video: `video/mp4`. ",1,N],[11,"is_informational","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"is_success","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"is_redirection","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"is_client_error","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"is_server_error","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"is_unknown","","Returns `true` if `self` is a `StatusClass` of",6,[[["self"]],["bool"]]],[11,"new","","Creates a new `Status` with `code` and `reason`. This should be used only to construct non-standard HTTP statuses. Use an associated constant for standard statuses.",3,[[["u16"],["str"]],["status"]]],[11,"class","","Returns the class of a given status.",3,[[["self"]],["statusclass"]]],[18,"Continue","","[`Status`] with code  100  and reason  Continue .",3,N],[18,"SwitchingProtocols","","[`Status`] with code  101  and reason  Switching Protocols .",3,N],[18,"Processing","","[`Status`] with code  102  and reason  Processing .",3,N],[18,"Ok","","[`Status`] with code  200  and reason  OK .",3,N],[18,"Created","","[`Status`] with code  201  and reason  Created .",3,N],[18,"Accepted","","[`Status`] with code  202  and reason  Accepted .",3,N],[18,"NonAuthoritativeInformation","","[`Status`] with code  203  and reason  Non-Authoritative Information .",3,N],[18,"NoContent","","[`Status`] with code  204  and reason  No Content .",3,N],[18,"ResetContent","","[`Status`] with code  205  and reason  Reset Content .",3,N],[18,"PartialContent","","[`Status`] with code  206  and reason  Partial Content .",3,N],[18,"MultiStatus","","[`Status`] with code  207  and reason  Multi-Status .",3,N],[18,"AlreadyReported","","[`Status`] with code  208  and reason  Already Reported .",3,N],[18,"ImUsed","","[`Status`] with code  226  and reason  IM Used .",3,N],[18,"MultipleChoices","","[`Status`] with code  300  and reason  Multiple Choices .",3,N],[18,"MovedPermanently","","[`Status`] with code  301  and reason  Moved Permanently .",3,N],[18,"Found","","[`Status`] with code  302  and reason  Found .",3,N],[18,"SeeOther","","[`Status`] with code  303  and reason  See Other .",3,N],[18,"NotModified","","[`Status`] with code  304  and reason  Not Modified .",3,N],[18,"UseProxy","","[`Status`] with code  305  and reason  Use Proxy .",3,N],[18,"TemporaryRedirect","","[`Status`] with code  307  and reason  Temporary Redirect .",3,N],[18,"PermanentRedirect","","[`Status`] with code  308  and reason  Permanent Redirect .",3,N],[18,"BadRequest","","[`Status`] with code  400  and reason  Bad Request .",3,N],[18,"Unauthorized","","[`Status`] with code  401  and reason  Unauthorized .",3,N],[18,"PaymentRequired","","[`Status`] with code  402  and reason  Payment Required .",3,N],[18,"Forbidden","","[`Status`] with code  403  and reason  Forbidden .",3,N],[18,"NotFound","","[`Status`] with code  404  and reason  Not Found .",3,N],[18,"MethodNotAllowed","","[`Status`] with code  405  and reason  Method Not Allowed .",3,N],[18,"NotAcceptable","","[`Status`] with code  406  and reason  Not Acceptable .",3,N],[18,"ProxyAuthenticationRequired","","[`Status`] with code  407  and reason  Proxy Authentication Required .",3,N],[18,"RequestTimeout","","[`Status`] with code  408  and reason  Request Timeout .",3,N],[18,"Conflict","","[`Status`] with code  409  and reason  Conflict .",3,N],[18,"Gone","","[`Status`] with code  410  and reason  Gone .",3,N],[18,"LengthRequired","","[`Status`] with code  411  and reason  Length Required .",3,N],[18,"PreconditionFailed","","[`Status`] with code  412  and reason  Precondition Failed .",3,N],[18,"PayloadTooLarge","","[`Status`] with code  413  and reason  Payload Too Large .",3,N],[18,"UriTooLong","","[`Status`] with code  414  and reason  URI Too Long .",3,N],[18,"UnsupportedMediaType","","[`Status`] with code  415  and reason  Unsupported Media Type .",3,N],[18,"RangeNotSatisfiable","","[`Status`] with code  416  and reason  Range Not Satisfiable .",3,N],[18,"ExpectationFailed","","[`Status`] with code  417  and reason  Expectation Failed .",3,N],[18,"ImATeapot","","[`Status`] with code  418  and reason  I'm a teapot .",3,N],[18,"MisdirectedRequest","","[`Status`] with code  421  and reason  Misdirected Request .",3,N],[18,"UnprocessableEntity","","[`Status`] with code  422  and reason  Unprocessable Entity .",3,N],[18,"Locked","","[`Status`] with code  423  and reason  Locked .",3,N],[18,"FailedDependency","","[`Status`] with code  424  and reason  Failed Dependency .",3,N],[18,"UpgradeRequired","","[`Status`] with code  426  and reason  Upgrade Required .",3,N],[18,"PreconditionRequired","","[`Status`] with code  428  and reason  Precondition Required .",3,N],[18,"TooManyRequests","","[`Status`] with code  429  and reason  Too Many Requests .",3,N],[18,"RequestHeaderFieldsTooLarge","","[`Status`] with code  431  and reason  Request Header Fields Too Large .",3,N],[18,"UnavailableForLegalReasons","","[`Status`] with code  451  and reason  Unavailable For Legal Reasons .",3,N],[18,"InternalServerError","","[`Status`] with code  500  and reason  Internal Server Error .",3,N],[18,"NotImplemented","","[`Status`] with code  501  and reason  Not Implemented .",3,N],[18,"BadGateway","","[`Status`] with code  502  and reason  Bad Gateway .",3,N],[18,"ServiceUnavailable","","[`Status`] with code  503  and reason  Service Unavailable .",3,N],[18,"GatewayTimeout","","[`Status`] with code  504  and reason  Gateway Timeout .",3,N],[18,"HttpVersionNotSupported","","[`Status`] with code  505  and reason  HTTP Version Not Supported .",3,N],[18,"VariantAlsoNegotiates","","[`Status`] with code  506  and reason  Variant Also Negotiates .",3,N],[18,"InsufficientStorage","","[`Status`] with code  507  and reason  Insufficient Storage .",3,N],[18,"LoopDetected","","[`Status`] with code  508  and reason  Loop Detected .",3,N],[18,"NotExtended","","[`Status`] with code  510  and reason  Not Extended .",3,N],[18,"NetworkAuthenticationRequired","","[`Status`] with code  511  and reason  Network Authentication Required .",3,N],[11,"from_code","","Returns a Status given a standard status code `code`. If `code` is not a known status code, `None` is returned.",3,[[["u16"]],["option",["status"]]]],[11,"new","","Constructs a new header. This method should be used rarely and only for non-standard headers. Instead, prefer to use the `Into<Header>` implementations of many types, including [`ContentType`] and all of the headers in `http::hyper::header`.",4,[[["n"],["v"]],["header"]]],[11,"name","","Returns the name of this header with casing preserved. To do a case-insensitive equality check, use `.name` directly.",4,[[["self"]],["str"]]],[11,"value","","Returns the value of this header.",4,[[["self"]],["str"]]],[11,"new","","Returns an empty header collection.",92,[[],["headermap"]]],[11,"contains","","Returns true if `self` contains a header with the name `name`.",92,[[["self"],["str"]],["bool"]]],[11,"len","","Returns the number of values stored in the map.",92,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are no headers stored in the map. Otherwise returns `false`.",92,[[["self"]],["bool"]]],[11,"get","","Returns an iterator over all of the values stored in `self` for the header with name `name`. The headers are returned in FIFO order.",92,N],[11,"get_one","","Returns the first value stored for the header with name `name` if there is one.",92,[[["self"],["str"]],["option",["str"]]]],[11,"replace","","Replace any header that matches the name of `header.name` with `header`. If there is no such header in `self`, add `header`. If the matching header had multiple values, all of the values are removed, and only the value in `header` will remain.",92,[[["self"],["h"]],["bool"]]],[11,"replace_raw","","A convenience method to replace a header using a raw name and value. Aliases `replace(Header::new(name, value))`. Should be used rarely.",92,[[["self"],["n"],["v"]],["bool"]]],[11,"replace_all","","Replaces all of the values for a header with name `name` with `values`. This a low-level method and should rarely be used.",92,[[["self"],["h"],["vec",["cow"]]]]],[11,"add","","Adds `header` into the map. If a header with `header.name` was previously added, that header will have one more value.",92,[[["self"],["h"]]]],[11,"add_raw","","A convenience method to add a header using a raw name and value. Aliases `add(Header::new(name, value))`. Should be used rarely.",92,[[["self"],["n"],["v"]]]],[11,"add_all","","Adds all of the values to a header with name `name`. This a low-level method and should rarely be used. `values` will be empty when this method returns.",92,[[["self"],["h"],["vec"]]]],[11,"remove","","Remove all of the values for header with name `name`.",92,[[["self"],["str"]]]],[11,"remove_all","","Removes all of the headers stored in this map and returns a vector containing them. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",92,[[["self"]],["vec",["header"]]]],[11,"iter","","Returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",92,N],[11,"into_iter","","Consumes `self` and returns an iterator over all of the `Header`s stored in the map. Header names are returned in no specific order, but all values for a given header name are grouped together, and values are in FIFO order.",92,N],[11,"weight","","Retrieve the weight of the media type, if there is any.",2,[[["self"]],["option",["f32"]]]],[11,"weight_or","","Retrieve the weight of the media type or a given default value.",2,[[["self"],["f32"]],["f32"]]],[11,"media_type","","Borrow the internal `MediaType`.",2,[[["self"]],["mediatype"]]],[11,"new","","Constructs a new `Accept` header from one or more media types.",93,[[["t"]],["accept"]]],[11,"preferred","","Retrieve the client's preferred media type. This method follows [RFC 7231 5.3.2]. If the list of media types is empty, this method returns a media type of any with no quality value: (`*/*`).",93,[[["self"]],["qmediatype"]]],[11,"first","","Retrieve the first media type in `self`, if any.",93,[[["self"]],["option",["qmediatype"]]]],[11,"iter","","Returns an iterator over all of the (quality) media types in `self`. Media types are returned in the order in which they appear in the header.",93,N],[11,"media_types","","Returns an iterator over all of the (bare) media types in `self`. Media types are returned in the order in which they appear in the header.",93,N],[18,"Any","","An `Accept` header with the single media type for  any media type :  * / * ",93,N],[18,"Binary","","An `Accept` header with the single media type for  binary data :  application / octet-stream ",93,N],[18,"HTML","","An `Accept` header with the single media type for  HTML :  text / html ",93,N],[18,"Plain","","An `Accept` header with the single media type for  plain text :  text / plain ",93,N],[18,"JSON","","An `Accept` header with the single media type for  JSON :  application / json ",93,N],[18,"MsgPack","","An `Accept` header with the single media type for  MsgPack :  application / msgpack ",93,N],[18,"Form","","An `Accept` header with the single media type for  forms :  application / x-www-form-urlencoded ",93,N],[18,"JavaScript","","An `Accept` header with the single media type for  JavaScript :  application / javascript ",93,N],[18,"CSS","","An `Accept` header with the single media type for  CSS :  text / css ",93,N],[18,"FormData","","An `Accept` header with the single media type for  multipart form data :  multipart / form-data ",93,N],[18,"XML","","An `Accept` header with the single media type for  XML :  text / xml ",93,N],[18,"CSV","","An `Accept` header with the single media type for  CSV :  text / csv ",93,N],[18,"PNG","","An `Accept` header with the single media type for  PNG :  image / png ",93,N],[18,"GIF","","An `Accept` header with the single media type for  GIF :  image / gif ",93,N],[18,"BMP","","An `Accept` header with the single media type for  BMP :  image / bmp ",93,N],[18,"JPEG","","An `Accept` header with the single media type for  JPEG :  image / jpeg ",93,N],[18,"WEBP","","An `Accept` header with the single media type for  WEBP :  image / webp ",93,N],[18,"SVG","","An `Accept` header with the single media type for  SVG :  image / svg+xml ",93,N],[18,"Icon","","An `Accept` header with the single media type for  Icon :  image / x-icon ",93,N],[18,"WEBM","","An `Accept` header with the single media type for  WEBM :  video / webm ",93,N],[18,"WEBA","","An `Accept` header with the single media type for  WEBM Audio :  audio / webm ",93,N],[18,"OGG","","An `Accept` header with the single media type for  OGG Video :  video / ogg ",93,N],[18,"FLAC","","An `Accept` header with the single media type for  FLAC :  audio / flac ",93,N],[18,"WAV","","An `Accept` header with the single media type for  WAV :  audio / wav ",93,N],[18,"PDF","","An `Accept` header with the single media type for  PDF :  application / pdf ",93,N],[18,"TTF","","An `Accept` header with the single media type for  TTF :  application / font-sfnt ",93,N],[18,"OTF","","An `Accept` header with the single media type for  OTF :  application / font-sfnt ",93,N],[18,"WOFF","","An `Accept` header with the single media type for  WOFF :  application / font-woff ",93,N],[18,"WOFF2","","An `Accept` header with the single media type for  WOFF2 :  font / woff2 ",93,N],[18,"JsonApi","","An `Accept` header with the single media type for  JSON API :  application / vnd.api+json ",93,N],[18,"WASM","","An `Accept` header with the single media type for  WASM :  application / wasm ",93,N],[18,"TIFF","","An `Accept` header with the single media type for  TIFF :  image / tiff ",93,N],[18,"AAC","","An `Accept` header with the single media type for  AAC Audio :  audio / aac ",93,N],[18,"Calendar","","An `Accept` header with the single media type for  iCalendar :  text / calendar ",93,N],[18,"MPEG","","An `Accept` header with the single media type for  MPEG Video :  video / mpeg ",93,N],[18,"TAR","","An `Accept` header with the single media type for  tape archive :  application / x-tar ",93,N],[18,"GZIP","","An `Accept` header with the single media type for  gzipped binary :  application / gzip ",93,N],[18,"MOV","","An `Accept` header with the single media type for  quicktime video :  video / quicktime ",93,N],[18,"MP4","","An `Accept` header with the single media type for  MPEG4 Video :  video / mp4 ",93,N],[11,"from_str","","Constructs an `&RawStr` from an `&str` at no cost.",94,[[["str"]],["rawstr"]]],[11,"percent_decode","","Returns a percent-decoded version of the string.",94,[[["self"]],["result",["cow","utf8error"]]]],[11,"percent_decode_lossy","","Returns a percent-decoded version of the string. Any invalid UTF-8 percent-encoded byte sequences will be replaced � U+FFFD, the replacement character.",94,[[["self"]],["cow",["str"]]]],[11,"url_decode","","Returns a URL-decoded version of the string. This is identical to percent decoding except that `+` characters are converted into spaces. This is the encoding used by form values.",94,[[["self"]],["result",["string","utf8error"]]]],[11,"url_decode_lossy","","Returns a URL-decoded version of the string.",94,[[["self"]],["string"]]],[11,"html_escape","","Returns an HTML escaped version of `self`. Allocates only when characters need to be escaped.",94,[[["self"]],["cow",["str"]]]],[11,"as_str","","Converts `self` into an `&str`.",94,[[["self"]],["str"]]],[11,"as_uncased_str","","Converts `self` into an `&UncasedStr`.",94,[[["self"]],["uncasedstr"]]],[11,"index","rocket_http::uri","Returns the byte index into the text where the error occurred if it is known.",95,[[["self"]],["option",["usize"]]]],[0,"uncased","rocket_http","Contains types that encapsulate uncased ASCII strings.",N,N],[3,"UncasedStr","rocket_http::uncased","A reference to an uncased (case-preserving) ASCII string. This is typically created from an `&str` as follows:",N,N],[3,"Uncased","","An uncased (case-preserving), owned or borrowed ASCII string.",N,N],[5,"uncased_eq","","Returns true if `s1` and `s2` are equal without considering case.",N,[[["s1"],["s2"]],["bool"]]],[11,"new","","Returns a reference to an `UncasedStr` from an `&str`.",96,[[["str"]],["uncasedstr"]]],[11,"as_str","","Returns `self` as an `&str`.",96,[[["self"]],["str"]]],[11,"into_uncased","","Converts a `Box<UncasedStr>` into an `Uncased` without copying or allocating.",96,[[["box",["uncasedstr"]]],["uncased"]]],[11,"new","","Creates a new `Uncased` string from `string` without allocating.",97,[[["s"]],["uncased"]]],[11,"into_string","","Converts `self` into an owned `String`, allocating if necessary.",97,[[["self"]],["string"]]],[11,"into_boxed_uncased","","Converts `self` into a `Box<UncasedStr>`.",97,[[["self"]],["box",["uncasedstr"]]]],[11,"into_collection","rocket_http","",98,[[["self"]],["smallvec"]]],[11,"mapped","","",98,[[["self"],["f"]],["smallvec"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_string","","",98,[[["self"]],["string"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"as_result","","",98,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",0,[[["self"]],["smallvec"]]],[11,"mapped","","",0,[[["self"],["f"]],["smallvec"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"as_result","","",0,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",0,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",1,[[["self"]],["smallvec"]]],[11,"mapped","","",1,[[["self"],["f"]],["smallvec"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"as_result","","",1,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",93,[[["self"]],["smallvec"]]],[11,"mapped","","",93,[[["self"],["f"]],["smallvec"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"as_result","","",93,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",2,[[["self"]],["smallvec"]]],[11,"mapped","","",2,[[["self"],["f"]],["smallvec"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"as_result","","",2,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",3,[[["self"]],["smallvec"]]],[11,"mapped","","",3,[[["self"],["f"]],["smallvec"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"as_result","","",3,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",4,[[["self"]],["smallvec"]]],[11,"mapped","","",4,[[["self"],["f"]],["smallvec"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"as_result","","",4,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",4,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",92,[[["self"]],["smallvec"]]],[11,"mapped","","",92,[[["self"],["f"]],["smallvec"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"as_result","","",92,[[["self"]],["result",["parseerr"]]]],[11,"to_string","","",94,[[["self"]],["string"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"equivalent","","",94,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",91,[[["self"]],["smallvec"]]],[11,"mapped","","",91,[[["self"],["f"]],["smallvec"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_string","","",91,[[["self"]],["string"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"as_result","","",91,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",5,[[["self"]],["smallvec"]]],[11,"mapped","","",5,[[["self"],["f"]],["smallvec"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"as_result","","",5,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",5,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",6,[[["self"]],["smallvec"]]],[11,"mapped","","",6,[[["self"],["f"]],["smallvec"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"as_result","","",6,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",6,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",90,[[["self"]],["smallvec"]]],[11,"mapped","","",90,[[["self"],["f"]],["smallvec"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"as_result","","",90,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","rocket_http::hyper::mime","",7,[[["self"]],["smallvec"]]],[11,"mapped","","",7,[[["self"],["f"]],["smallvec"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"as_result","","",7,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",7,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",8,[[["self"]],["smallvec"]]],[11,"mapped","","",8,[[["self"],["f"]],["smallvec"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"as_result","","",8,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",8,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",9,[[["self"]],["smallvec"]]],[11,"mapped","","",9,[[["self"],["f"]],["smallvec"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"as_result","","",9,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",9,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",10,[[["self"]],["smallvec"]]],[11,"mapped","","",10,[[["self"],["f"]],["smallvec"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"as_result","","",10,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",10,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",11,[[["self"]],["smallvec"]]],[11,"mapped","","",11,[[["self"],["f"]],["smallvec"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"as_result","","",11,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",11,[[["self"],["k"]],["bool"]]],[11,"into_collection","rocket_http::hyper::header","",12,[[["self"]],["smallvec"]]],[11,"mapped","","",12,[[["self"],["f"]],["smallvec"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"as_result","","",12,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",13,[[["self"]],["smallvec"]]],[11,"mapped","","",13,[[["self"],["f"]],["smallvec"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"as_result","","",13,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",14,[[["self"]],["smallvec"]]],[11,"mapped","","",14,[[["self"],["f"]],["smallvec"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"as_result","","",14,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",15,[[["self"]],["smallvec"]]],[11,"mapped","","",15,[[["self"],["f"]],["smallvec"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"as_result","","",15,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",16,[[["self"]],["smallvec"]]],[11,"mapped","","",16,[[["self"],["f"]],["smallvec"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"as_result","","",16,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",99,[[["self"]],["smallvec"]]],[11,"mapped","","",99,[[["self"],["f"]],["smallvec"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_string","","",99,[[["self"]],["string"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"as_result","","",99,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",17,[[["self"]],["smallvec"]]],[11,"mapped","","",17,[[["self"],["f"]],["smallvec"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"as_result","","",17,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",18,[[["self"]],["smallvec"]]],[11,"mapped","","",18,[[["self"],["f"]],["smallvec"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"as_result","","",18,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",19,[[["self"]],["smallvec"]]],[11,"mapped","","",19,[[["self"],["f"]],["smallvec"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"as_result","","",19,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",20,[[["self"]],["smallvec"]]],[11,"mapped","","",20,[[["self"],["f"]],["smallvec"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"as_result","","",20,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",21,[[["self"]],["smallvec"]]],[11,"mapped","","",21,[[["self"],["f"]],["smallvec"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"as_result","","",21,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",22,[[["self"]],["smallvec"]]],[11,"mapped","","",22,[[["self"],["f"]],["smallvec"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"as_result","","",22,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",23,[[["self"]],["smallvec"]]],[11,"mapped","","",23,[[["self"],["f"]],["smallvec"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"as_result","","",23,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",24,[[["self"]],["smallvec"]]],[11,"mapped","","",24,[[["self"],["f"]],["smallvec"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"as_result","","",24,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",25,[[["self"]],["smallvec"]]],[11,"mapped","","",25,[[["self"],["f"]],["smallvec"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"as_result","","",25,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",26,[[["self"]],["smallvec"]]],[11,"mapped","","",26,[[["self"],["f"]],["smallvec"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"as_result","","",26,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",27,[[["self"]],["smallvec"]]],[11,"mapped","","",27,[[["self"],["f"]],["smallvec"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"as_result","","",27,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",28,[[["self"]],["smallvec"]]],[11,"mapped","","",28,[[["self"],["f"]],["smallvec"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"as_result","","",28,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",29,[[["self"]],["smallvec"]]],[11,"mapped","","",29,[[["self"],["f"]],["smallvec"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"as_result","","",29,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",30,[[["self"]],["smallvec"]]],[11,"mapped","","",30,[[["self"],["f"]],["smallvec"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"as_result","","",30,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",31,[[["self"]],["smallvec"]]],[11,"mapped","","",31,[[["self"],["f"]],["smallvec"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"as_result","","",31,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",32,[[["self"]],["smallvec"]]],[11,"mapped","","",32,[[["self"],["f"]],["smallvec"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_string","","",32,[[["self"]],["string"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"as_result","","",32,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",33,[[["self"]],["smallvec"]]],[11,"mapped","","",33,[[["self"],["f"]],["smallvec"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"as_result","","",33,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",34,[[["self"]],["smallvec"]]],[11,"mapped","","",34,[[["self"],["f"]],["smallvec"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_string","","",34,[[["self"]],["string"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"as_result","","",34,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",35,[[["self"]],["smallvec"]]],[11,"mapped","","",35,[[["self"],["f"]],["smallvec"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"as_result","","",35,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",36,[[["self"]],["smallvec"]]],[11,"mapped","","",36,[[["self"],["f"]],["smallvec"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"as_result","","",36,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",37,[[["self"]],["smallvec"]]],[11,"mapped","","",37,[[["self"],["f"]],["smallvec"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"as_result","","",37,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",37,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",38,[[["self"]],["smallvec"]]],[11,"mapped","","",38,[[["self"],["f"]],["smallvec"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"as_result","","",38,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",39,[[["self"]],["smallvec"]]],[11,"mapped","","",39,[[["self"],["f"]],["smallvec"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"as_result","","",39,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",100,[[["self"]],["smallvec"]]],[11,"mapped","","",100,[[["self"],["f"]],["smallvec"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"as_result","","",100,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",40,[[["self"]],["smallvec"]]],[11,"mapped","","",40,[[["self"],["f"]],["smallvec"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"as_result","","",40,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",41,[[["self"]],["smallvec"]]],[11,"mapped","","",41,[[["self"],["f"]],["smallvec"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"as_result","","",41,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",41,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",42,[[["self"]],["smallvec"]]],[11,"mapped","","",42,[[["self"],["f"]],["smallvec"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_string","","",42,[[["self"]],["string"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"as_result","","",42,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",43,[[["self"]],["smallvec"]]],[11,"mapped","","",43,[[["self"],["f"]],["smallvec"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"as_result","","",43,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",44,[[["self"]],["smallvec"]]],[11,"mapped","","",44,[[["self"],["f"]],["smallvec"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"as_result","","",44,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",45,[[["self"]],["smallvec"]]],[11,"mapped","","",45,[[["self"],["f"]],["smallvec"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"as_result","","",45,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",46,[[["self"]],["smallvec"]]],[11,"mapped","","",46,[[["self"],["f"]],["smallvec"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"as_result","","",46,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",47,[[["self"]],["smallvec"]]],[11,"mapped","","",47,[[["self"],["f"]],["smallvec"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"as_result","","",47,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",48,[[["self"]],["smallvec"]]],[11,"mapped","","",48,[[["self"],["f"]],["smallvec"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"as_result","","",48,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",49,[[["self"]],["smallvec"]]],[11,"mapped","","",49,[[["self"],["f"]],["smallvec"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"as_result","","",49,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",49,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",50,[[["self"]],["smallvec"]]],[11,"mapped","","",50,[[["self"],["f"]],["smallvec"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"as_result","","",50,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",50,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",51,[[["self"]],["smallvec"]]],[11,"mapped","","",51,[[["self"],["f"]],["smallvec"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"as_result","","",51,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",52,[[["self"]],["smallvec"]]],[11,"mapped","","",52,[[["self"],["f"]],["smallvec"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"as_result","","",52,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",53,[[["self"]],["smallvec"]]],[11,"mapped","","",53,[[["self"],["f"]],["smallvec"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"as_result","","",53,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",54,[[["self"]],["smallvec"]]],[11,"mapped","","",54,[[["self"],["f"]],["smallvec"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"as_result","","",54,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",55,[[["self"]],["smallvec"]]],[11,"mapped","","",55,[[["self"],["f"]],["smallvec"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"as_result","","",55,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",56,[[["self"]],["smallvec"]]],[11,"mapped","","",56,[[["self"],["f"]],["smallvec"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"as_result","","",56,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",57,[[["self"]],["smallvec"]]],[11,"mapped","","",57,[[["self"],["f"]],["smallvec"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"as_result","","",57,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",58,[[["self"]],["smallvec"]]],[11,"mapped","","",58,[[["self"],["f"]],["smallvec"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"as_result","","",58,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",59,[[["self"]],["smallvec"]]],[11,"mapped","","",59,[[["self"],["f"]],["smallvec"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"as_result","","",59,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",60,[[["self"]],["smallvec"]]],[11,"mapped","","",60,[[["self"],["f"]],["smallvec"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"as_result","","",60,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",61,[[["self"]],["smallvec"]]],[11,"mapped","","",61,[[["self"],["f"]],["smallvec"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"as_result","","",61,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",62,[[["self"]],["smallvec"]]],[11,"mapped","","",62,[[["self"],["f"]],["smallvec"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"as_result","","",62,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",63,[[["self"]],["smallvec"]]],[11,"mapped","","",63,[[["self"],["f"]],["smallvec"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"as_result","","",63,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",64,[[["self"]],["smallvec"]]],[11,"mapped","","",64,[[["self"],["f"]],["smallvec"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"as_result","","",64,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",65,[[["self"]],["smallvec"]]],[11,"mapped","","",65,[[["self"],["f"]],["smallvec"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"as_result","","",65,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",66,[[["self"]],["smallvec"]]],[11,"mapped","","",66,[[["self"],["f"]],["smallvec"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"as_result","","",66,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",67,[[["self"]],["smallvec"]]],[11,"mapped","","",67,[[["self"],["f"]],["smallvec"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"as_result","","",67,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",68,[[["self"]],["smallvec"]]],[11,"mapped","","",68,[[["self"],["f"]],["smallvec"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"as_result","","",68,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",69,[[["self"]],["smallvec"]]],[11,"mapped","","",69,[[["self"],["f"]],["smallvec"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"as_result","","",69,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",70,[[["self"]],["smallvec"]]],[11,"mapped","","",70,[[["self"],["f"]],["smallvec"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"as_result","","",70,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",71,[[["self"]],["smallvec"]]],[11,"mapped","","",71,[[["self"],["f"]],["smallvec"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"as_result","","",71,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",72,[[["self"]],["smallvec"]]],[11,"mapped","","",72,[[["self"],["f"]],["smallvec"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"as_result","","",72,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",72,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",73,[[["self"]],["smallvec"]]],[11,"mapped","","",73,[[["self"],["f"]],["smallvec"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_string","","",73,[[["self"]],["string"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"as_result","","",73,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",74,[[["self"]],["smallvec"]]],[11,"mapped","","",74,[[["self"],["f"]],["smallvec"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"as_result","","",74,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",74,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",75,[[["self"]],["smallvec"]]],[11,"mapped","","",75,[[["self"],["f"]],["smallvec"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"as_result","","",75,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",75,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",76,[[["self"]],["smallvec"]]],[11,"mapped","","",76,[[["self"],["f"]],["smallvec"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"as_result","","",76,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","rocket_http::uri","",95,[[["self"]],["smallvec"]]],[11,"mapped","","",95,[[["self"],["f"]],["smallvec"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_string","","",95,[[["self"]],["string"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"as_result","","",95,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",83,[[["self"]],["smallvec"]]],[11,"mapped","","",83,[[["self"],["f"]],["smallvec"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"as_result","","",83,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",82,[[["self"]],["smallvec"]]],[11,"mapped","","",82,[[["self"],["f"]],["smallvec"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"as_result","","",82,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",84,[[["self"]],["smallvec"]]],[11,"mapped","","",84,[[["self"],["f"]],["smallvec"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"as_result","","",84,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",81,[[["self"]],["smallvec"]]],[11,"mapped","","",81,[[["self"],["f"]],["smallvec"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"as_result","","",81,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",78,[[["self"]],["smallvec"]]],[11,"mapped","","",78,[[["self"],["f"]],["smallvec"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"into_iter","","",78,[[["self"]],["i"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"as_result","","",78,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",79,[[["self"]],["smallvec"]]],[11,"mapped","","",79,[[["self"],["f"]],["smallvec"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"as_result","","",79,[[["self"]],["result",["parseerr"]]]],[11,"into_collection","","",80,[[["self"]],["smallvec"]]],[11,"mapped","","",80,[[["self"],["f"]],["smallvec"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"as_result","","",80,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",80,[[["self"],["k"]],["bool"]]],[11,"to_string","rocket_http::uncased","",96,[[["self"]],["string"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"equivalent","","",96,[[["self"],["k"]],["bool"]]],[11,"into_collection","","",97,[[["self"]],["smallvec"]]],[11,"mapped","","",97,[[["self"],["f"]],["smallvec"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_string","","",97,[[["self"]],["string"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"as_result","","",97,[[["self"]],["result",["parseerr"]]]],[11,"equivalent","","",97,[[["self"],["k"]],["bool"]]],[11,"clone","rocket_http","",98,[[["self"]],["cookie"]]],[11,"clone","","",0,[[["self"]],["samesite"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Formats the cookie `self` as a `Set-Cookie` header value.",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",98,[[["str"]],["result",["cookie","parseerror"]]]],[11,"eq","","",98,[[["self"],["cookie"]],["bool"]]],[11,"eq","","",0,[[["self"],["samesite"]],["bool"]]],[11,"hash","","",0,N],[11,"clone","rocket_http::hyper::header","",76,[[["self"]],["vary"]]],[11,"clone","","",12,[[["self"]],["accept"]]],[11,"clone","","",62,[[["self"]],["contentrangespec"]]],[11,"clone","","",32,[[["self"]],["contentlength"]]],[11,"clone","","",26,[[["self"]],["bearer"]]],[11,"clone","","",28,[[["self"]],["connection"]]],[11,"clone","","",69,[[["self"]],["ifrange"]]],[11,"clone","","",65,[[["self"]],["encoding"]]],[11,"clone","","",34,[[["self"]],["contenttype"]]],[11,"clone","","",52,[[["self"]],["referer"]]],[11,"clone","","",47,[[["self"]],["prefer"]]],[11,"clone","","",15,[[["self"]],["acceptlanguage"]]],[11,"clone","","",61,[[["self"]],["connectionoption"]]],[11,"clone","","",36,[[["self"]],["etag"]]],[11,"clone","","",54,[[["self"]],["transferencoding"]]],[11,"clone","","",66,[[["self"]],["expect"]]],[11,"clone","","",71,[[["self"]],["preference"]]],[11,"clone","","",43,[[["self"]],["ifunmodifiedsince"]]],[11,"clone","","",99,[[["self"]],["accesscontrolallowcredentials"]]],[11,"clone","","",35,[[["self"]],["date"]]],[11,"clone","","",20,[[["self"]],["accesscontrolmaxage"]]],[11,"clone","","",30,[[["self"]],["contentencoding"]]],[11,"clone","","",70,[[["self"]],["pragma"]]],[11,"clone","","",24,[[["self"]],["authorization"]]],[11,"clone","","",55,[[["self"]],["upgrade"]]],[11,"clone","","",38,[[["self"]],["expires"]]],[11,"clone","","",39,[[["self"]],["from"]]],[11,"clone","","",31,[[["self"]],["contentlanguage"]]],[11,"clone","","",51,[[["self"]],["qualityitem"]]],[11,"clone","","",67,[[["self"]],["ifmatch"]]],[11,"clone","","",75,[[["self"]],["referrerpolicy"]]],[11,"clone","","",40,[[["self"]],["host"]]],[11,"clone","","",29,[[["self"]],["contentdisposition"]]],[11,"clone","","",23,[[["self"]],["allow"]]],[11,"clone","","",73,[[["self"]],["range"]]],[11,"clone","","",21,[[["self"]],["accesscontrolrequestheaders"]]],[11,"clone","","",53,[[["self"]],["stricttransportsecurity"]]],[11,"clone","","",46,[[["self"]],["origin"]]],[11,"clone","","",16,[[["self"]],["acceptranges"]]],[11,"clone","","",68,[[["self"]],["ifnonematch"]]],[11,"clone","","",42,[[["self"]],["ifmodifiedsince"]]],[11,"clone","","",19,[[["self"]],["accesscontrolexposeheaders"]]],[11,"clone","","",33,[[["self"]],["contentrange"]]],[11,"clone","","",17,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",58,[[["self"]],["byterangespec"]]],[11,"clone","","",18,[[["self"]],["accesscontrolallowmethods"]]],[11,"clone","","",25,[[["self"]],["basic"]]],[11,"clone","","",100,[[["self"]],["headers"]]],[11,"clone","","",74,[[["self"]],["rangeunit"]]],[11,"clone","","",49,[[["self"]],["protocol"]]],[11,"clone","","",27,[[["self"]],["cachecontrol"]]],[11,"clone","","",13,[[["self"]],["acceptcharset"]]],[11,"clone","","",60,[[["self"]],["charset"]]],[11,"clone","","",48,[[["self"]],["preferenceapplied"]]],[11,"clone","","",14,[[["self"]],["acceptencoding"]]],[11,"clone","","",57,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",63,[[["self"]],["dispositionparam"]]],[11,"clone","","",50,[[["self"]],["quality"]]],[11,"clone","","",41,[[["self"]],["httpdate"]]],[11,"clone","","",72,[[["self"]],["protocolname"]]],[11,"clone","","",22,[[["self"]],["accesscontrolrequestmethod"]]],[11,"clone","","",37,[[["self"]],["entitytag"]]],[11,"clone","","",45,[[["self"]],["location"]]],[11,"clone","","",64,[[["self"]],["dispositiontype"]]],[11,"clone","","",56,[[["self"]],["useragent"]]],[11,"clone","","",44,[[["self"]],["lastmodified"]]],[11,"clone","","",59,[[["self"]],["cachedirective"]]],[11,"scheme","","",25,[[],["option",["str"]]]],[11,"fmt_scheme","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"scheme","","",26,[[],["option",["str"]]]],[11,"fmt_scheme","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","","",100,N],[11,"cmp","","",41,[[["self"],["httpdate"]],["ordering"]]],[11,"cmp","","",50,[[["self"],["quality"]],["ordering"]]],[11,"default","","",50,[[],["quality"]]],[11,"from_str","","",73,[[["str"]],["result",["range","error"]]]],[11,"from_str","","",60,[[["str"]],["result",["charset","error"]]]],[11,"from_str","","",37,[[["str"]],["result",["entitytag","error"]]]],[11,"from_str","","",49,[[["str"]],["result",["protocol"]]]],[11,"from_str","","",25,[[["str"]],["result",["basic","error"]]]],[11,"from_str","","",26,[[["str"]],["result",["bearer","error"]]]],[11,"from_str","","",65,[[["str"]],["result",["encoding","error"]]]],[11,"from_str","","",61,[[["str"]],["result",["connectionoption"]]]],[11,"from_str","","",59,[[["str"]],["result",["cachedirective","option"]]]],[11,"from_str","","",58,[[["str"]],["result",["byterangespec","error"]]]],[11,"from_str","","",51,[[["str"]],["result",["qualityitem","error"]]]],[11,"from_str","","",72,[[["str"]],["result",["protocolname"]]]],[11,"from_str","","",62,[[["str"]],["result",["contentrangespec","error"]]]],[11,"from_str","","",74,[[["str"]],["result",["rangeunit","error"]]]],[11,"from_str","","",71,[[["str"]],["result",["preference","option"]]]],[11,"from_str","","",46,[[["str"]],["result",["origin","error"]]]],[11,"from_str","","",41,[[["str"]],["result",["httpdate","error"]]]],[11,"from_str","","",53,[[["str"]],["result",["stricttransportsecurity","error"]]]],[11,"from_str","","",40,[[["str"]],["result",["host","error"]]]],[11,"deref","","",38,[[["self"]],["httpdate"]]],[11,"deref","","",27,[[["self"]],["vec"]]],[11,"deref","","",45,[[["self"]],["string"]]],[11,"deref","","",30,[[["self"]],["vec"]]],[11,"deref","","",18,[[["self"]],["vec"]]],[11,"deref","","",44,[[["self"]],["httpdate"]]],[11,"deref","","",52,[[["self"]],["string"]]],[11,"deref","","",22,[[["self"]],["method"]]],[11,"deref","","",28,[[["self"]],["vec"]]],[11,"deref","","",17,[[["self"]],["vec"]]],[11,"deref","","",31,[[["self"]],["vec"]]],[11,"deref","","",34,[[["self"]],["mime"]]],[11,"deref","","",20,[[["self"]],["u32"]]],[11,"deref","","",24,[[["self"]],["s"]]],[11,"deref","","",12,[[["self"]],["vec"]]],[11,"deref","","",36,[[["self"]],["entitytag"]]],[11,"deref","","",54,[[["self"]],["vec"]]],[11,"deref","","",47,[[["self"]],["vec"]]],[11,"deref","","",14,[[["self"]],["vec"]]],[11,"deref","","",19,[[["self"]],["vec"]]],[11,"deref","","",55,[[["self"]],["vec"]]],[11,"deref","","",13,[[["self"]],["vec"]]],[11,"deref","","",48,[[["self"]],["vec"]]],[11,"deref","","",21,[[["self"]],["vec"]]],[11,"deref","","",42,[[["self"]],["httpdate"]]],[11,"deref","","",35,[[["self"]],["httpdate"]]],[11,"deref","","",15,[[["self"]],["vec"]]],[11,"deref","","",23,[[["self"]],["vec"]]],[11,"deref","","",39,[[["self"]],["string"]]],[11,"deref","","",16,[[["self"]],["vec"]]],[11,"deref","","",32,[[["self"]],["u64"]]],[11,"deref","","",56,[[["self"]],["string"]]],[11,"deref","","",43,[[["self"]],["httpdate"]]],[11,"deref","","",33,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",48,[[["self"]],["vec"]]],[11,"deref_mut","","",28,[[["self"]],["vec"]]],[11,"deref_mut","","",45,[[["self"]],["string"]]],[11,"deref_mut","","",23,[[["self"]],["vec"]]],[11,"deref_mut","","",32,[[["self"]],["u64"]]],[11,"deref_mut","","",42,[[["self"]],["httpdate"]]],[11,"deref_mut","","",56,[[["self"]],["string"]]],[11,"deref_mut","","",44,[[["self"]],["httpdate"]]],[11,"deref_mut","","",39,[[["self"]],["string"]]],[11,"deref_mut","","",19,[[["self"]],["vec"]]],[11,"deref_mut","","",18,[[["self"]],["vec"]]],[11,"deref_mut","","",38,[[["self"]],["httpdate"]]],[11,"deref_mut","","",15,[[["self"]],["vec"]]],[11,"deref_mut","","",16,[[["self"]],["vec"]]],[11,"deref_mut","","",24,[[["self"]],["s"]]],[11,"deref_mut","","",13,[[["self"]],["vec"]]],[11,"deref_mut","","",36,[[["self"]],["entitytag"]]],[11,"deref_mut","","",43,[[["self"]],["httpdate"]]],[11,"deref_mut","","",52,[[["self"]],["string"]]],[11,"deref_mut","","",34,[[["self"]],["mime"]]],[11,"deref_mut","","",14,[[["self"]],["vec"]]],[11,"deref_mut","","",22,[[["self"]],["method"]]],[11,"deref_mut","","",47,[[["self"]],["vec"]]],[11,"deref_mut","","",31,[[["self"]],["vec"]]],[11,"deref_mut","","",33,[[["self"]],["contentrangespec"]]],[11,"deref_mut","","",17,[[["self"]],["vec"]]],[11,"deref_mut","","",54,[[["self"]],["vec"]]],[11,"deref_mut","","",21,[[["self"]],["vec"]]],[11,"deref_mut","","",27,[[["self"]],["vec"]]],[11,"deref_mut","","",20,[[["self"]],["u32"]]],[11,"deref_mut","","",12,[[["self"]],["vec"]]],[11,"deref_mut","","",35,[[["self"]],["httpdate"]]],[11,"deref_mut","","",55,[[["self"]],["vec"]]],[11,"deref_mut","","",30,[[["self"]],["vec"]]],[11,"partial_cmp","","",41,[[["self"],["httpdate"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"le","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"gt","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"ge","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"partial_cmp","","",50,[[["self"],["quality"]],["option",["ordering"]]]],[11,"lt","","",50,[[["self"],["quality"]],["bool"]]],[11,"le","","",50,[[["self"],["quality"]],["bool"]]],[11,"gt","","",50,[[["self"],["quality"]],["bool"]]],[11,"ge","","",50,[[["self"],["quality"]],["bool"]]],[11,"partial_cmp","","",51,[[["self"],["qualityitem"]],["option",["ordering"]]]],[11,"from_iter","","",100,[[["i"]],["headers"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt_header","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"header_name","","",34,[[],["str"]]],[11,"parse_header","","",34,N],[11,"header_name","","",44,[[],["str"]]],[11,"parse_header","","",44,N],[11,"header_name","","",67,[[],["str"]]],[11,"parse_header","","",67,N],[11,"header_name","","",18,[[],["str"]]],[11,"parse_header","","",18,N],[11,"header_name","","",46,[[],["str"]]],[11,"parse_header","","",46,N],[11,"header_name","","",57,[[],["str"]]],[11,"parse_header","","",57,N],[11,"header_name","","",48,[[],["str"]]],[11,"parse_header","","",48,N],[11,"header_name","","",23,[[],["str"]]],[11,"parse_header","","",23,N],[11,"header_name","","",22,[[],["str"]]],[11,"parse_header","","",22,N],[11,"header_name","","",24,[[],["str"]]],[11,"parse_header","","",24,N],[11,"header_name","","",17,[[],["str"]]],[11,"parse_header","","",17,N],[11,"header_name","","",21,[[],["str"]]],[11,"parse_header","","",21,N],[11,"header_name","","",35,[[],["str"]]],[11,"parse_header","","",35,N],[11,"header_name","","",14,[[],["str"]]],[11,"parse_header","","",14,N],[11,"header_name","","",45,[[],["str"]]],[11,"parse_header","","",45,N],[11,"header_name","","",31,[[],["str"]]],[11,"parse_header","","",31,N],[11,"header_name","","",30,[[],["str"]]],[11,"parse_header","","",30,N],[11,"header_name","","",27,[[],["str"]]],[11,"parse_header","","",27,N],[11,"header_name","","",66,[[],["str"]]],[11,"parse_header","","",66,N],[11,"header_name","","",38,[[],["str"]]],[11,"parse_header","","",38,N],[11,"header_name","","",68,[[],["str"]]],[11,"parse_header","","",68,N],[11,"header_name","","",33,[[],["str"]]],[11,"parse_header","","",33,N],[11,"header_name","","",55,[[],["str"]]],[11,"parse_header","","",55,N],[11,"header_name","","",39,[[],["str"]]],[11,"parse_header","","",39,N],[11,"header_name","","",76,[[],["str"]]],[11,"parse_header","","",76,N],[11,"header_name","","",20,[[],["str"]]],[11,"parse_header","","",20,N],[11,"header_name","","",19,[[],["str"]]],[11,"parse_header","","",19,N],[11,"header_name","","",99,[[],["str"]]],[11,"parse_header","","",99,N],[11,"header_name","","",32,[[],["str"]]],[11,"parse_header","","",32,N],[11,"header_name","","",43,[[],["str"]]],[11,"parse_header","","",43,N],[11,"header_name","","",70,[[],["str"]]],[11,"parse_header","","",70,N],[11,"header_name","","",12,[[],["str"]]],[11,"parse_header","","",12,N],[11,"header_name","","",73,[[],["str"]]],[11,"parse_header","","",73,N],[11,"header_name","","",53,[[],["str"]]],[11,"parse_header","","",53,N],[11,"header_name","","",42,[[],["str"]]],[11,"parse_header","","",42,N],[11,"header_name","","",13,[[],["str"]]],[11,"parse_header","","",13,N],[11,"header_name","","",16,[[],["str"]]],[11,"parse_header","","",16,N],[11,"header_name","","",36,[[],["str"]]],[11,"parse_header","","",36,N],[11,"header_name","","",52,[[],["str"]]],[11,"parse_header","","",52,N],[11,"header_name","","",28,[[],["str"]]],[11,"parse_header","","",28,N],[11,"header_name","","",47,[[],["str"]]],[11,"parse_header","","",47,N],[11,"header_name","","",54,[[],["str"]]],[11,"parse_header","","",54,N],[11,"header_name","","",56,[[],["str"]]],[11,"parse_header","","",56,N],[11,"header_name","","",69,[[],["str"]]],[11,"parse_header","","",69,N],[11,"header_name","","",15,[[],["str"]]],[11,"parse_header","","",15,N],[11,"header_name","","",29,[[],["str"]]],[11,"parse_header","","",29,N],[11,"header_name","","",40,[[],["str"]]],[11,"parse_header","","",40,N],[11,"header_name","","",75,[[],["str"]]],[11,"parse_header","","",75,N],[11,"eq","","",65,[[["self"],["encoding"]],["bool"]]],[11,"ne","","",65,[[["self"],["encoding"]],["bool"]]],[11,"eq","","",56,[[["self"],["useragent"]],["bool"]]],[11,"ne","","",56,[[["self"],["useragent"]],["bool"]]],[11,"eq","","",15,[[["self"],["acceptlanguage"]],["bool"]]],[11,"ne","","",15,[[["self"],["acceptlanguage"]],["bool"]]],[11,"eq","","",60,[[["self"],["charset"]],["bool"]]],[11,"ne","","",60,[[["self"],["charset"]],["bool"]]],[11,"eq","","",27,[[["self"],["cachecontrol"]],["bool"]]],[11,"ne","","",27,[[["self"],["cachecontrol"]],["bool"]]],[11,"eq","","",19,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"ne","","",19,[[["self"],["accesscontrolexposeheaders"]],["bool"]]],[11,"eq","","",46,[[["self"],["origin"]],["bool"]]],[11,"eq","","",31,[[["self"],["contentlanguage"]],["bool"]]],[11,"ne","","",31,[[["self"],["contentlanguage"]],["bool"]]],[11,"eq","","",67,[[["self"],["ifmatch"]],["bool"]]],[11,"ne","","",67,[[["self"],["ifmatch"]],["bool"]]],[11,"eq","","",57,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",57,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",48,[[["self"],["preferenceapplied"]],["bool"]]],[11,"ne","","",48,[[["self"],["preferenceapplied"]],["bool"]]],[11,"eq","","",50,[[["self"],["quality"]],["bool"]]],[11,"ne","","",50,[[["self"],["quality"]],["bool"]]],[11,"eq","","",16,[[["self"],["acceptranges"]],["bool"]]],[11,"ne","","",16,[[["self"],["acceptranges"]],["bool"]]],[11,"eq","","",55,[[["self"],["upgrade"]],["bool"]]],[11,"ne","","",55,[[["self"],["upgrade"]],["bool"]]],[11,"eq","","",17,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",17,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",38,[[["self"],["expires"]],["bool"]]],[11,"ne","","",38,[[["self"],["expires"]],["bool"]]],[11,"eq","","",47,[[["self"],["prefer"]],["bool"]]],[11,"ne","","",47,[[["self"],["prefer"]],["bool"]]],[11,"eq","","",72,[[["self"],["protocolname"]],["bool"]]],[11,"ne","","",72,[[["self"],["protocolname"]],["bool"]]],[11,"eq","","",24,[[["self"],["authorization"]],["bool"]]],[11,"ne","","",24,[[["self"],["authorization"]],["bool"]]],[11,"eq","","",33,[[["self"],["contentrange"]],["bool"]]],[11,"ne","","",33,[[["self"],["contentrange"]],["bool"]]],[11,"eq","","",52,[[["self"],["referer"]],["bool"]]],[11,"ne","","",52,[[["self"],["referer"]],["bool"]]],[11,"eq","","",53,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"ne","","",53,[[["self"],["stricttransportsecurity"]],["bool"]]],[11,"eq","","",23,[[["self"],["allow"]],["bool"]]],[11,"ne","","",23,[[["self"],["allow"]],["bool"]]],[11,"eq","","",69,[[["self"],["ifrange"]],["bool"]]],[11,"ne","","",69,[[["self"],["ifrange"]],["bool"]]],[11,"eq","","",99,[[["self"],["accesscontrolallowcredentials"]],["bool"]]],[11,"eq","","",13,[[["self"],["acceptcharset"]],["bool"]]],[11,"ne","","",13,[[["self"],["acceptcharset"]],["bool"]]],[11,"eq","","",42,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"ne","","",42,[[["self"],["ifmodifiedsince"]],["bool"]]],[11,"eq","","",36,[[["self"],["etag"]],["bool"]]],[11,"ne","","",36,[[["self"],["etag"]],["bool"]]],[11,"eq","","",74,[[["self"],["rangeunit"]],["bool"]]],[11,"ne","","",74,[[["self"],["rangeunit"]],["bool"]]],[11,"eq","","",40,[[["self"],["host"]],["bool"]]],[11,"ne","","",40,[[["self"],["host"]],["bool"]]],[11,"eq","","",35,[[["self"],["date"]],["bool"]]],[11,"ne","","",35,[[["self"],["date"]],["bool"]]],[11,"eq","","",59,[[["self"],["cachedirective"]],["bool"]]],[11,"ne","","",59,[[["self"],["cachedirective"]],["bool"]]],[11,"eq","","",12,[[["self"],["accept"]],["bool"]]],[11,"ne","","",12,[[["self"],["accept"]],["bool"]]],[11,"eq","","",32,[[["self"],["contentlength"]],["bool"]]],[11,"ne","","",32,[[["self"],["contentlength"]],["bool"]]],[11,"eq","","",29,[[["self"],["contentdisposition"]],["bool"]]],[11,"ne","","",29,[[["self"],["contentdisposition"]],["bool"]]],[11,"eq","","",37,[[["self"],["entitytag"]],["bool"]]],[11,"ne","","",37,[[["self"],["entitytag"]],["bool"]]],[11,"eq","","",66,[[["self"],["expect"]],["bool"]]],[11,"eq","","",76,[[["self"],["vary"]],["bool"]]],[11,"ne","","",76,[[["self"],["vary"]],["bool"]]],[11,"eq","","",30,[[["self"],["contentencoding"]],["bool"]]],[11,"ne","","",30,[[["self"],["contentencoding"]],["bool"]]],[11,"eq","","",43,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"ne","","",43,[[["self"],["ifunmodifiedsince"]],["bool"]]],[11,"eq","","",20,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"ne","","",20,[[["self"],["accesscontrolmaxage"]],["bool"]]],[11,"eq","","",22,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"ne","","",22,[[["self"],["accesscontrolrequestmethod"]],["bool"]]],[11,"eq","","",44,[[["self"],["lastmodified"]],["bool"]]],[11,"ne","","",44,[[["self"],["lastmodified"]],["bool"]]],[11,"eq","","",63,[[["self"],["dispositionparam"]],["bool"]]],[11,"ne","","",63,[[["self"],["dispositionparam"]],["bool"]]],[11,"eq","","",100,[[["self"],["headers"]],["bool"]]],[11,"eq","","",58,[[["self"],["byterangespec"]],["bool"]]],[11,"ne","","",58,[[["self"],["byterangespec"]],["bool"]]],[11,"eq","","",45,[[["self"],["location"]],["bool"]]],[11,"ne","","",45,[[["self"],["location"]],["bool"]]],[11,"eq","","",73,[[["self"],["range"]],["bool"]]],[11,"ne","","",73,[[["self"],["range"]],["bool"]]],[11,"eq","","",26,[[["self"],["bearer"]],["bool"]]],[11,"ne","","",26,[[["self"],["bearer"]],["bool"]]],[11,"eq","","",51,[[["self"],["qualityitem"]],["bool"]]],[11,"ne","","",51,[[["self"],["qualityitem"]],["bool"]]],[11,"eq","","",49,[[["self"],["protocol"]],["bool"]]],[11,"ne","","",49,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",71,[[["self"],["preference"]],["bool"]]],[11,"ne","","",71,[[["self"],["preference"]],["bool"]]],[11,"eq","","",28,[[["self"],["connection"]],["bool"]]],[11,"ne","","",28,[[["self"],["connection"]],["bool"]]],[11,"eq","","",64,[[["self"],["dispositiontype"]],["bool"]]],[11,"ne","","",64,[[["self"],["dispositiontype"]],["bool"]]],[11,"eq","","",14,[[["self"],["acceptencoding"]],["bool"]]],[11,"ne","","",14,[[["self"],["acceptencoding"]],["bool"]]],[11,"eq","","",25,[[["self"],["basic"]],["bool"]]],[11,"ne","","",25,[[["self"],["basic"]],["bool"]]],[11,"eq","","",70,[[["self"],["pragma"]],["bool"]]],[11,"ne","","",70,[[["self"],["pragma"]],["bool"]]],[11,"eq","","",18,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"ne","","",18,[[["self"],["accesscontrolallowmethods"]],["bool"]]],[11,"eq","","",61,[[["self"],["connectionoption"]],["bool"]]],[11,"ne","","",61,[[["self"],["connectionoption"]],["bool"]]],[11,"eq","","",54,[[["self"],["transferencoding"]],["bool"]]],[11,"ne","","",54,[[["self"],["transferencoding"]],["bool"]]],[11,"eq","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"ne","","",41,[[["self"],["httpdate"]],["bool"]]],[11,"eq","","",34,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",34,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",75,[[["self"],["referrerpolicy"]],["bool"]]],[11,"eq","","",39,[[["self"],["from"]],["bool"]]],[11,"ne","","",39,[[["self"],["from"]],["bool"]]],[11,"eq","","",62,[[["self"],["contentrangespec"]],["bool"]]],[11,"ne","","",62,[[["self"],["contentrangespec"]],["bool"]]],[11,"eq","","",21,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"ne","","",21,[[["self"],["accesscontrolrequestheaders"]],["bool"]]],[11,"eq","","",68,[[["self"],["ifnonematch"]],["bool"]]],[11,"ne","","",68,[[["self"],["ifnonematch"]],["bool"]]],[11,"clone","rocket_http::hyper::mime","",11,[[["self"]],["sublevel"]]],[11,"clone","","",10,[[["self"]],["attr"]]],[11,"clone","","",7,[[["self"]],["toplevel"]]],[11,"clone","","",9,[[["self"]],["mime"]]],[11,"clone","","",8,[[["self"]],["value"]]],[11,"partial_cmp","","",9,[[["self"],["mime"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["mime"]],["bool"]]],[11,"le","","",9,[[["self"],["mime"]],["bool"]]],[11,"gt","","",9,[[["self"],["mime"]],["bool"]]],[11,"ge","","",9,[[["self"],["mime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["sublevel"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["sublevel"]],["bool"]]],[11,"le","","",11,[[["self"],["sublevel"]],["bool"]]],[11,"gt","","",11,[[["self"],["sublevel"]],["bool"]]],[11,"ge","","",11,[[["self"],["sublevel"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["attr"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["attr"]],["bool"]]],[11,"le","","",10,[[["self"],["attr"]],["bool"]]],[11,"gt","","",10,[[["self"],["attr"]],["bool"]]],[11,"ge","","",10,[[["self"],["attr"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["value"]],["bool"]]],[11,"le","","",8,[[["self"],["value"]],["bool"]]],[11,"gt","","",8,[[["self"],["value"]],["bool"]]],[11,"ge","","",8,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["toplevel"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["toplevel"]],["bool"]]],[11,"le","","",7,[[["self"],["toplevel"]],["bool"]]],[11,"gt","","",7,[[["self"],["toplevel"]],["bool"]]],[11,"ge","","",7,[[["self"],["toplevel"]],["bool"]]],[11,"cmp","","",7,[[["self"],["toplevel"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["attr"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["mime"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["sublevel"]],["ordering"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",10,[[["str"]],["result",["attr"]]]],[11,"from_str","","",8,[[["str"]],["result",["value"]]]],[11,"from_str","","",11,[[["str"]],["result",["sublevel"]]]],[11,"from_str","","",7,[[["str"]],["result",["toplevel"]]]],[11,"from_str","","",9,[[["str"]],["result",["mime"]]]],[11,"deref","","",11,[[["self"]],["str"]]],[11,"deref","","",8,[[["self"]],["str"]]],[11,"deref","","",10,[[["self"]],["str"]]],[11,"deref","","",7,[[["self"]],["str"]]],[11,"eq","","",11,[[["self"],["string"]],["bool"]]],[11,"eq","","",11,[[["self"],["str"]],["bool"]]],[11,"eq","","",8,[[["self"],["str"]],["bool"]]],[11,"eq","","",7,[[["self"],["str"]],["bool"]]],[11,"eq","","",7,[[["self"],["string"]],["bool"]]],[11,"eq","","",10,[[["self"],["str"]],["bool"]]],[11,"eq","","",10,[[["self"],["string"]],["bool"]]],[11,"eq","","",7,[[["self"],["toplevel"]],["bool"]]],[11,"eq","","",10,[[["self"],["str"]],["bool"]]],[11,"eq","","",8,[[["self"],["value"]],["bool"]]],[11,"eq","","",7,[[["self"],["str"]],["bool"]]],[11,"eq","","",9,[[["self"],["mime"]],["bool"]]],[11,"eq","","",11,[[["self"],["str"]],["bool"]]],[11,"eq","","",11,[[["self"],["sublevel"]],["bool"]]],[11,"eq","","",8,[[["self"],["str"]],["bool"]]],[11,"eq","","",8,[[["self"],["string"]],["bool"]]],[11,"eq","","",10,[[["self"],["attr"]],["bool"]]],[11,"hash","","",9,N],[11,"hash","","",10,N],[11,"hash","","",8,N],[11,"hash","","",7,N],[11,"hash","","",11,N],[11,"fmt","rocket_http","",94,[[["self"],["formatter"]],["result"]]],[11,"into_owned","rocket_http::uri","",79,[[["self"]],["uri"]]],[11,"into_owned","","",82,[[["self"]],["origin"]]],[11,"into_owned","","",83,[[["self"]],["authority"]]],[11,"into_owned","","",84,N],[11,"into_owned","","",95,N],[11,"next","","",78,[[["self"]],["option"]]],[11,"into","rocket_http","",1,[[["self"]],["header"]]],[11,"into","","",93,[[["self"]],["header"]]],[11,"to_string","","",94,[[["self"]],["string"]]],[11,"partial_cmp","","",94,[[["self"],["rawstr"]],["option",["ordering"]]]],[11,"lt","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"le","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"gt","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"ge","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"partial_cmp","","",94,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","rocket_http::uncased","",96,[[["self"],["uncasedstr"]],["option",["ordering"]]]],[11,"partial_cmp","","",97,[[["self"],["uncased"]],["option",["ordering"]]]],[11,"default","rocket_http","Returns a ContentType of `Any`, or `*/*`.",1,[[],["contenttype"]]],[11,"default","","",92,[[],["headermap"]]],[11,"cmp","","",94,[[["self"],["rawstr"]],["ordering"]]],[11,"cmp","rocket_http::uncased","",96,[[["self"],["self"]],["ordering"]]],[11,"cmp","","",97,[[["self"],["self"]],["ordering"]]],[11,"eq","rocket_http::uri","",79,[[["self"],["uri"]],["bool"]]],[11,"ne","","",79,[[["self"],["uri"]],["bool"]]],[11,"eq","","",82,[[["self"],["origin"]],["bool"]]],[11,"eq","","",83,[[["self"],["authority"]],["bool"]]],[11,"eq","","",84,[[["self"],["absolute"]],["bool"]]],[11,"eq","","",80,[[["self"],["segmenterror"]],["bool"]]],[11,"ne","","",80,[[["self"],["segmenterror"]],["bool"]]],[11,"eq","rocket_http","",5,[[["self"],["method"]],["bool"]]],[11,"eq","","",91,[[["self"],["mediatype"]],["bool"]]],[11,"eq","","",1,[[["self"],["contenttype"]],["bool"]]],[11,"ne","","",1,[[["self"],["contenttype"]],["bool"]]],[11,"eq","","",6,[[["self"],["statusclass"]],["bool"]]],[11,"eq","","",3,[[["self"],["status"]],["bool"]]],[11,"ne","","",3,[[["self"],["status"]],["bool"]]],[11,"eq","","",4,[[["self"],["header"]],["bool"]]],[11,"ne","","",4,[[["self"],["header"]],["bool"]]],[11,"eq","","",92,[[["self"],["headermap"]],["bool"]]],[11,"ne","","",92,[[["self"],["headermap"]],["bool"]]],[11,"eq","","",2,[[["self"],["qmediatype"]],["bool"]]],[11,"ne","","",2,[[["self"],["qmediatype"]],["bool"]]],[11,"eq","","",93,[[["self"],["accept"]],["bool"]]],[11,"ne","","",93,[[["self"],["accept"]],["bool"]]],[11,"eq","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"ne","","",94,[[["self"],["rawstr"]],["bool"]]],[11,"eq","","",94,[[["self"],["str"]],["bool"]]],[11,"eq","","",94,[[["self"],["string"]],["bool"]]],[11,"eq","rocket_http::uncased","",96,[[["self"],["uncasedstr"]],["bool"]]],[11,"eq","","",96,[[["self"],["str"]],["bool"]]],[11,"eq","","",96,[[["self"],["str"]],["bool"]]],[11,"eq","","",97,[[["self"],["uncased"]],["bool"]]],[11,"eq","","",97,[[["self"],["str"]],["bool"]]],[11,"eq","","",97,[[["self"],["str"]],["bool"]]],[11,"from","rocket_http","",4,[[["accept"]],["header"]]],[11,"from","","",4,[[["accesscontrolallowcredentials"]],["header"]]],[11,"from","","",4,[[["accesscontrolallowheaders"]],["header"]]],[11,"from","","",4,[[["accesscontrolallowmethods"]],["header"]]],[11,"from","","",4,[[["accesscontrolalloworigin"]],["header"]]],[11,"from","","",4,[[["accesscontrolexposeheaders"]],["header"]]],[11,"from","","",4,[[["accesscontrolmaxage"]],["header"]]],[11,"from","","",4,[[["accesscontrolrequestheaders"]],["header"]]],[11,"from","","",4,[[["accesscontrolrequestmethod"]],["header"]]],[11,"from","","",4,[[["acceptcharset"]],["header"]]],[11,"from","","",4,[[["acceptencoding"]],["header"]]],[11,"from","","",4,[[["acceptlanguage"]],["header"]]],[11,"from","","",4,[[["acceptranges"]],["header"]]],[11,"from","","",4,[[["allow"]],["header"]]],[11,"from","","",4,[[["cachecontrol"]],["header"]]],[11,"from","","",4,[[["connection"]],["header"]]],[11,"from","","",4,[[["contentdisposition"]],["header"]]],[11,"from","","",4,[[["contentencoding"]],["header"]]],[11,"from","","",4,[[["contentlanguage"]],["header"]]],[11,"from","","",4,[[["contentlength"]],["header"]]],[11,"from","","",4,[[["contentrange"]],["header"]]],[11,"from","","",4,[[["date"]],["header"]]],[11,"from","","",4,[[["etag"]],["header"]]],[11,"from","","",4,[[["expect"]],["header"]]],[11,"from","","",4,[[["expires"]],["header"]]],[11,"from","","",4,[[["host"]],["header"]]],[11,"from","","",4,[[["ifmatch"]],["header"]]],[11,"from","","",4,[[["ifmodifiedsince"]],["header"]]],[11,"from","","",4,[[["ifnonematch"]],["header"]]],[11,"from","","",4,[[["ifrange"]],["header"]]],[11,"from","","",4,[[["ifunmodifiedsince"]],["header"]]],[11,"from","","",4,[[["lastmodified"]],["header"]]],[11,"from","","",4,[[["location"]],["header"]]],[11,"from","","",4,[[["origin"]],["header"]]],[11,"from","","",4,[[["pragma"]],["header"]]],[11,"from","","",4,[[["prefer"]],["header"]]],[11,"from","","",4,[[["preferenceapplied"]],["header"]]],[11,"from","","",4,[[["range"]],["header"]]],[11,"from","","",4,[[["referer"]],["header"]]],[11,"from","","",4,[[["referrerpolicy"]],["header"]]],[11,"from","","",4,[[["stricttransportsecurity"]],["header"]]],[11,"from","","",4,[[["transferencoding"]],["header"]]],[11,"from","","",4,[[["upgrade"]],["header"]]],[11,"from","","",4,[[["useragent"]],["header"]]],[11,"from","","",4,[[["vary"]],["header"]]],[11,"from","rocket_http::uri","",79,[[["origin"]],["uri"]]],[11,"from","","",79,[[["authority"]],["uri"]]],[11,"from","","",79,[[["absolute"]],["uri"]]],[11,"from","rocket_http","",4,[[["cookie"]],["header"]]],[11,"from","","",4,[[["cookie"]],["header"]]],[11,"from","","",2,[[["mediatype"]],["qmediatype"]]],[11,"from","","",93,[[["t"]],["accept"]]],[11,"from","rocket_http::uncased","",97,[[["str"]],["self"]]],[11,"from","","",97,[[["string"]],["self"]]],[11,"from","","",97,[[["cow",["str"]]],["self"]]],[11,"from","","",97,[[["t"]],["self"]]],[11,"as_ref","rocket_http","",94,[[["self"]],["str"]]],[11,"as_ref","","",94,N],[11,"as_ref","rocket_http::uncased","",97,[[["self"]],["uncasedstr"]]],[11,"clone","rocket_http::uri","",79,[[["self"]],["uri"]]],[11,"clone","","",82,[[["self"]],["origin"]]],[11,"clone","","",83,[[["self"]],["authority"]]],[11,"clone","","",84,[[["self"]],["absolute"]]],[11,"clone","","",78,[[["self"]],["segments"]]],[11,"clone","","",80,[[["self"]],["segmenterror"]]],[11,"clone","rocket_http","",5,[[["self"]],["method"]]],[11,"clone","","",91,[[["self"]],["mediatype"]]],[11,"clone","","",1,[[["self"]],["contenttype"]]],[11,"clone","","",6,[[["self"]],["statusclass"]]],[11,"clone","","",3,[[["self"]],["status"]]],[11,"clone","","",4,[[["self"]],["header"]]],[11,"clone","","",92,[[["self"]],["headermap"]]],[11,"clone","","",2,[[["self"]],["qmediatype"]]],[11,"clone","","",93,[[["self"]],["accept"]]],[11,"clone","rocket_http::uncased","",97,[[["self"]],["uncased"]]],[11,"deref_mut","rocket_http","",94,[[["self"]],["str"]]],[11,"deref","","",1,[[["self"]],["mediatype"]]],[11,"deref","","",2,[[["self"]],["mediatype"]]],[11,"deref","","",94,[[["self"]],["str"]]],[11,"deref","rocket_http::uncased","",97,[[["self"]],["uncasedstr"]]],[11,"fmt","rocket_http::uri","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http::uri","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http::uncased","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http::uri","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Formats the ContentType as an HTTP Content-Type value.",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http::uri","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","rocket_http::uncased","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"hash","rocket_http","",5,N],[11,"hash","","",91,[[["self"],["h"]]]],[11,"hash","","",1,N],[11,"hash","","",6,N],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"hash","","",94,N],[11,"hash","rocket_http::uncased","",96,[[["self"],["h"]]]],[11,"hash","","",97,[[["self"],["h"]]]],[11,"write_str","rocket_http::uri","",81,[[["self"],["str"]],["result"]]],[11,"try_from","","",79,[[["str"]],["result",["uri"]]]],[11,"try_from","","",79,[[["string"]],["result",["uri"]]]],[11,"from_str","rocket_http","",5,[[["str"]],["result",["method"]]]],[11,"from_str","","",91,[[["str"]],["result",["mediatype","string"]]]],[11,"from_str","","Parses a `ContentType` from a given Content-Type header value.",1,[[["str"]],["result",["contenttype","string"]]]],[11,"from_str","","",93,[[["str"]],["result",["accept","string"]]]],[11,"borrow","rocket_http::uncased","",97,[[["self"]],["uncasedstr"]]],[11,"new","rocket_http","Creates a new `Cookie` with the given name and value.",98,[[["n"],["v"]],["cookie"]]],[11,"named","","Creates a new `Cookie` with the given name and an empty value.",98,[[["n"]],["cookie"]]],[11,"build","","Creates a new `CookieBuilder` instance from the given key and value strings.",98,[[["n"],["v"]],["cookiebuilder"]]],[11,"parse","","Parses a `Cookie` from the given HTTP cookie header value string. Does not perform any percent-decoding.",98,[[["s"]],["result",["cookie","parseerror"]]]],[11,"parse_encoded","","Parses a `Cookie` from the given HTTP cookie header value string where the name and value fields are percent-encoded. Percent-decodes the name/value fields.",98,[[["s"]],["result",["cookie","parseerror"]]]],[11,"encoded","","Wraps `self` in an `EncodedCookie`: a cost-free wrapper around `Cookie` whose `Display` implementation percent-encodes the name and value of the wrapped `Cookie`.",98,[[["self"]],["encodedcookie"]]],[11,"into_owned","","Converts `self` into a `Cookie` with a static lifetime. This method results in at most one allocation.",98,[[["self"]],["cookie"]]],[11,"name","","Returns the name of `self`.",98,[[["self"]],["str"]]],[11,"value","","Returns the value of `self`.",98,[[["self"]],["str"]]],[11,"name_value","","Returns the name and value of `self` as a tuple of `(name, value)`.",98,N],[11,"http_only","","Returns whether this cookie was marked `HttpOnly` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `HttpOnly`, `Some(false)` when `http_only` was manually set to `false`, and `None` otherwise.",98,[[["self"]],["option",["bool"]]]],[11,"secure","","Returns whether this cookie was marked `Secure` or not. Returns `Some(true)` when the cookie was explicitly set (manually or parsed) as `Secure`, `Some(false)` when `secure` was manually set to `false`, and `None` otherwise.",98,[[["self"]],["option",["bool"]]]],[11,"same_site","","Returns the `SameSite` attribute of this cookie if one was specified.",98,[[["self"]],["option",["samesite"]]]],[11,"max_age","","Returns the specified max-age of the cookie if one was specified.",98,[[["self"]],["option",["duration"]]]],[11,"path","","Returns the `Path` of the cookie if one was specified.",98,[[["self"]],["option",["str"]]]],[11,"domain","","Returns the `Domain` of the cookie if one was specified.",98,[[["self"]],["option",["str"]]]],[11,"expires","","Returns the `Expires` time of the cookie if one was specified.",98,[[["self"]],["option",["tm"]]]],[11,"set_name","","Sets the name of `self` to `name`.",98,N],[11,"set_value","","Sets the value of `self` to `value`.",98,N],[11,"set_http_only","","Sets the value of `http_only` in `self` to `value`.",98,N],[11,"set_secure","","Sets the value of `secure` in `self` to `value`.",98,N],[11,"set_same_site","","Sets the value of `same_site` in `self` to `value`.",98,N],[11,"set_max_age","","Sets the value of `max_age` in `self` to `value`.",98,N],[11,"set_path","","Sets the `path` of `self` to `path`.",98,N],[11,"set_domain","","Sets the `domain` of `self` to `domain`.",98,N],[11,"set_expires","","Sets the expires field of `self` to `time`.",98,N],[11,"make_permanent","","Makes `self` a \"permanent\" cookie by extending its expiration and max age 20 years into the future.",98,N],[11,"name_raw","","Returns the name of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",98,[[["self"]],["option",["str"]]]],[11,"value_raw","","Returns the value of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, returns `None`.",98,[[["self"]],["option",["str"]]]],[11,"path_raw","","Returns the `Path` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Path`, or if the `Path` has changed since parsing, returns `None`.",98,[[["self"]],["option",["str"]]]],[11,"domain_raw","","Returns the `Domain` of `self` as a string slice of the raw string `self` was originally parsed from. If `self` was not originally parsed from a raw string, or if `self` doesn't contain a `Domain`, or if the `Domain` has changed since parsing, returns `None`.",98,[[["self"]],["option",["str"]]]],[11,"is_strict","","Returns `true` if `self` is `SameSite::Strict` and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"is_lax","","Returns `true` if `self` is `SameSite::Lax` and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if `self` is `SameSite::None` and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","rocket_http::hyper::mime","",7,[[["self"]],["str"]]],[11,"as_str","","",8,[[["self"]],["str"]]],[11,"get_param","","",9,[[["self"],["a"]],["option",["value"]]]],[11,"as_str","","",10,[[["self"]],["str"]]],[11,"as_str","","",11,[[["self"]],["str"]]],[11,"star","rocket_http::hyper::header","A constructor to easily create `Accept: */*`.",12,[[],["accept"]]],[11,"json","","A constructor to easily create `Accept: application/json`.",12,[[],["accept"]]],[11,"text","","A constructor to easily create `Accept: text/*`.",12,[[],["accept"]]],[11,"image","","A constructor to easily create `Accept: image/*`.",12,[[],["accept"]]],[11,"close","","A constructor to easily create a `Connection: close` header.",28,[[],["connection"]]],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",28,[[],["connection"]]],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",34,[[],["contenttype"]]],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",34,[[],["contenttype"]]],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",34,[[],["contenttype"]]],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",34,[[],["contenttype"]]],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",34,[[],["contenttype"]]],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",34,[[],["contenttype"]]],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",37,[[["bool"],["string"]],["entitytag"]]],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",37,[[["string"]],["entitytag"]]],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",37,[[["string"]],["entitytag"]]],[11,"tag","","Get the tag.",37,[[["self"]],["str"]]],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",37,N],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",37,[[["self"],["entitytag"]],["bool"]]],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",37,[[["self"],["entitytag"]],["bool"]]],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",37,[[["self"],["entitytag"]],["bool"]]],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",37,[[["self"],["entitytag"]],["bool"]]],[11,"new","","Creates a new, empty headers map.",100,[[],["headers"]]],[11,"set","","Set a header field to the corresponding value.",100,N],[11,"get_raw","","Access the raw value of a header.",100,[[["self"],["str"]],["option"]]],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",100,N],[11,"append_raw","","Append a value to raw value of this header.",100,N],[11,"remove_raw","","Remove a header set by set_raw",100,N],[11,"get","","Get a reference to the header field's value, if it exists.",100,[[["self"]],["option"]]],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",100,[[["self"]],["option"]]],[11,"has","","Returns a boolean of whether a certain header is in the map.",100,[[["self"]],["bool"]]],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",100,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the header fields.",100,[[["self"]],["headersitems"]]],[11,"len","","Returns the number of headers in the map.",100,[[["self"]],["usize"]]],[11,"clear","","Remove all headers from the map.",100,N],[11,"new","","Creates a new `Origin` header.",46,[[["s"],["h"],["option",["u16"]]],["origin"]]],[11,"new","","Creates a new Protocol with the given name and version",49,[[["protocolname"],["option",["string"]]],["protocol"]]],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",51,[[["t"],["quality"]],["qualityitem"]]],[11,"including_subdomains","","Create an STS header that includes subdomains",53,[[["u64"]],["stricttransportsecurity"]]],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",53,[[["u64"]],["stricttransportsecurity"]]],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",73,[[["u64"],["u64"]],["range"]]],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",73,[[["vec"]],["range"]]]],"paths":[[4,"SameSite"],[3,"ContentType"],[3,"QMediaType"],[3,"Status"],[3,"Header"],[4,"Method"],[4,"StatusClass"],[4,"TopLevel"],[4,"Value"],[3,"Mime"],[4,"Attr"],[4,"SubLevel"],[3,"Accept"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"EntityTag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"HttpDate"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Protocol"],[3,"Quality"],[3,"QualityItem"],[3,"Referer"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[4,"AccessControlAllowOrigin"],[4,"ByteRangeSpec"],[4,"CacheDirective"],[4,"Charset"],[4,"ConnectionOption"],[4,"ContentRangeSpec"],[4,"DispositionParam"],[4,"DispositionType"],[4,"Encoding"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"ProtocolName"],[4,"Range"],[4,"RangeUnit"],[4,"ReferrerPolicy"],[4,"Vary"],[8,"Scheme"],[3,"Segments"],[4,"Uri"],[4,"SegmentError"],[3,"Formatter"],[3,"Origin"],[3,"Authority"],[3,"Absolute"],[8,"UriDisplay"],[8,"FromUriParam"],[8,"IntoCollection"],[8,"IntoOwned"],[8,"Normalize"],[4,"Cookies"],[3,"MediaType"],[3,"HeaderMap"],[3,"Accept"],[3,"RawStr"],[3,"Error"],[3,"UncasedStr"],[3,"Uncased"],[3,"Cookie"],[3,"AccessControlAllowCredentials"],[3,"Headers"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"as_str","","Returns the underlying string that's being demangled.",0,[[["self"]],["str"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["trydemangleerror"]]]],"paths":[[3,"Demangle"],[3,"TryDemangleError"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"default","","",0,[[],["self"]]]],"paths":[[3,"Buffer"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["same_file"]={"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",N,N],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",N,[[["p"],["q"]],["result",["bool"]]]],[11,"from_path","","Construct a handle from a path.",0,[[["p"]],["result",["handle"]]]],[11,"from_file","","Construct a handle from a file.",0,[[["file"]],["result",["handle"]]]],[11,"stdin","","Construct a handle from stdin.",0,[[],["result",["handle"]]]],[11,"stdout","","Construct a handle from stdout.",0,[[],["result",["handle"]]]],[11,"stderr","","Construct a handle from stderr.",0,[[],["result",["handle"]]]],[11,"as_file","","Return a reference to the underlying file.",0,[[["self"]],["file"]]],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,[[["self"]],["file"]]],[11,"dev","","Return the underlying device number of this handle.",0,[[["self"]],["u64"]]],[11,"ino","","Return the underlying inode number of this handle.",0,[[["self"]],["u64"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"eq","","",0,[[["self"],["handle"]],["bool"]]],[11,"ne","","",0,[[["self"],["handle"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",0,[[["self"]],["rawfd"]]]],"paths":[[3,"Handle"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",1,[[["t"],["f"]],["scopeguard"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"should_run","","",2,[[],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]]],"paths":[[8,"Strategy"],[3,"ScopeGuard"],[4,"Always"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"new","","Create a new borrowed deserializer from the given string.",1,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",2,N],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",3,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",3,[[["self"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",4,[[["a"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",5,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",5,[[["self"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",6,[[["a"]],["self"]]],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",7,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",7,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",7,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",7,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",7,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",7,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",8,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",10,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",10,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",11,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",11,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",11,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",11,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",11,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",11,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",12,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",12,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",12,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",12,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",12,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",12,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",12,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",12,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",12,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",12,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",12,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",12,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",12,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",12,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",12,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",12,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",12,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",12,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",12,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",12,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",12,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",12,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",12,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",12,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",12,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",12,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",12,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",12,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",12,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",13,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",13,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",13,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",13,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",14,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",14,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",14,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",14,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",14,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",14,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",15,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",15,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",15,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",15,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",16,N],[10,"unit_variant","","Called when deserializing a variant with no values.",16,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",16,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",16,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",16,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",16,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",17,N],[10,"into_deserializer","","Convert this value into a deserializer.",17,N],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",18,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",20,N],[16,"Error","","The error type when some error occurs during serialization.",20,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",20,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",20,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",20,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",20,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",20,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",20,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",20,N],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,N],[10,"serialize_none","","Serialize a [`None`] value.",20,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",20,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",20,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",20,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,N],[10,"serialize_element","","Serialize a sequence element.",21,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",21,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,N],[10,"serialize_element","","Serialize a tuple element.",22,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",22,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",23,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",23,N],[10,"serialize_field","","Serialize a tuple struct field.",23,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",23,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",24,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",24,N],[10,"serialize_field","","Serialize a tuple variant field.",24,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",24,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",25,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",25,N],[10,"serialize_key","","Serialize a map key.",25,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",25,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",25,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",25,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",26,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",26,N],[10,"serialize_field","","Serialize a struct field.",26,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",26,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",26,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",27,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",27,N],[10,"serialize_field","","Serialize a struct variant field.",27,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",27,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",27,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",11,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",11,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",11,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",11,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",11,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",11,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",11,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",11,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",20,N],[16,"Error","","The error type when some error occurs during serialization.",20,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",20,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",20,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",20,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",20,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",20,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",20,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",20,N],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,N],[10,"serialize_none","","Serialize a [`None`] value.",20,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",20,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",20,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",20,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",20,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",20,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",20,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",20,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","serde::de::value","",29,[[["self"]],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","serde::ser","",50,[[["self"]],["u"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"deserialize","serde::de","",28,[[["d"]],["result",["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",30,N],[11,"deserialize_enum","","",30,N],[11,"deserialize_identifier","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",31,N],[11,"deserialize_enum","","",31,N],[11,"deserialize_identifier","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",32,N],[11,"deserialize_enum","","",32,N],[11,"deserialize_identifier","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",33,N],[11,"deserialize_enum","","",33,N],[11,"deserialize_identifier","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",34,N],[11,"deserialize_enum","","",34,N],[11,"deserialize_identifier","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",35,N],[11,"deserialize_enum","","",35,N],[11,"deserialize_identifier","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",35,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",36,N],[11,"deserialize_enum","","",36,N],[11,"deserialize_identifier","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",36,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",37,N],[11,"deserialize_enum","","",37,N],[11,"deserialize_identifier","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",37,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",38,N],[11,"deserialize_enum","","",38,N],[11,"deserialize_identifier","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",38,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",39,N],[11,"deserialize_enum","","",39,N],[11,"deserialize_identifier","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",39,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",40,N],[11,"deserialize_enum","","",40,N],[11,"deserialize_identifier","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",40,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",41,N],[11,"deserialize_enum","","",41,N],[11,"deserialize_identifier","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",41,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",42,N],[11,"deserialize_enum","","",42,N],[11,"deserialize_identifier","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",42,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",43,N],[11,"deserialize_enum","","",43,N],[11,"deserialize_identifier","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",43,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",44,N],[11,"deserialize_enum","","",44,N],[11,"deserialize_identifier","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",44,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",45,N],[11,"deserialize_enum","","",45,N],[11,"deserialize_identifier","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",45,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",46,N],[11,"deserialize_identifier","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",46,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",46,N],[11,"deserialize_any","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",47,N],[11,"deserialize_bool","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",47,N],[11,"deserialize_identifier","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",1,N],[11,"deserialize_bool","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",1,N],[11,"deserialize_identifier","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",48,N],[11,"deserialize_bool","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",48,N],[11,"deserialize_identifier","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",49,N],[11,"deserialize_bool","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",49,N],[11,"deserialize_identifier","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",2,N],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"expecting","serde::de","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"next_element_seed","serde::de::value","",3,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",3,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",5,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",5,[[["self"]],["option",["usize"]]]],[11,"next_key_seed","","",5,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",5,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",5,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",5,[[["self"]],["option",["usize"]]]],[11,"variant_seed","","",46,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",47,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",1,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",48,[[["self"],["t"]],["result"]]],[11,"variant_seed","","",49,[[["self"],["t"]],["result"]]],[11,"serialize_element","serde::ser","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_element","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_key","","",50,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[["self"]],["result"]]],[11,"custom","serde::de::value","",29,[[["t"]],["self"]]],[11,"custom","","",29,[[["t"]],["self"]]],[11,"default","serde::de","",28,[[],["ignoredany"]]],[11,"eq","serde::de::value","",29,[[["self"],["error"]],["bool"]]],[11,"ne","","",29,[[["self"],["error"]],["bool"]]],[11,"eq","serde::de","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"clone","serde::de::value","",29,[[["self"]],["error"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["self"]]],[11,"clone","","",49,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["seqdeserializer"]]],[11,"clone","","",4,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"fmt","serde::de::value","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde::de::value","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde::de","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","serde::de::value","",29,[[["self"]],["str"]]]],"paths":[[4,"Unexpected"],[3,"BorrowedStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"IgnoredAny"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"Impossible"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[24,"Serialize","serde_derive","",N,N],[24,"Deserialize","","",N,N]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,[[["self"]],["usize"]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",4,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,[[["self"]],["bool"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",5,N],[13,"Occupied","","An occupied Entry.",5,N],[11,"new","","Makes a new empty Map.",6,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",6,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",6,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",6,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",6,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",6,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",6,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",6,[[["self"]],["valuesmut"]]],[11,"key","","Returns a reference to this entry's key.",5,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",8,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,[[["self"]],["value"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",9,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",9,N],[13,"Solidus","","An escaped solidus `/`",9,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",9,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",9,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",9,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",9,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",9,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",9,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",10,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",10,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",10,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",10,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",10,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",10,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",10,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",10,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",10,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",10,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",10,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",10,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",10,[[["self"],["w"]],["result"]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn't need any escaping to the specified writer.",10,[[["self"],["w"],["str"]],["result"]]],[11,"new","","Creates a new JSON serializer.",11,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",11,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",11,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",11,[[["self"]],["w"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",12,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",12,N],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"is_i64","serde_json","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",13,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",13,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",13,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",13,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",13,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",13,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",13,[[["f64"]],["option",["number"]]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",14,[[["r"]],["self"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",15,N],[11,"new","","Create a JSON input source to read from a UTF-8 string.",16,[[["str"]],["self"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N],[11,"into","serde_json::de","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","serde_json::error","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","serde_json::ser","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","serde_json::map","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","serde_json","",13,[[["self"]],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","serde_json::value","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","serde_json::de","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","serde_json::error","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","serde_json::map","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","serde_json::ser","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"begin_array","","",12,[[["self"],["w"]],["result"]]],[11,"end_array","","",12,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",12,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",12,[[["self"],["w"]],["result"]]],[11,"begin_object","","",12,[[["self"],["w"]],["result"]]],[11,"end_object","","",12,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",12,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",12,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",12,[[["self"],["w"]],["result"]]],[11,"next","serde_json::de","",14,[[["self"]],["result",["option"]]]],[11,"peek","","",14,[[["self"]],["result",["option"]]]],[11,"discard","","",14,[[["self"]]]],[11,"position","","",14,[[["self"]],["position"]]],[11,"peek_position","","",14,[[["self"]],["position"]]],[11,"byte_offset","","",14,[[["self"]],["usize"]]],[11,"parse_str","","",14,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",14,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",14,[[["self"]],["result"]]],[11,"decode_hex_escape","","",14,[[["self"]],["result",["u16"]]]],[11,"next","","",15,[[["self"]],["result",["option"]]]],[11,"peek","","",15,[[["self"]],["result",["option"]]]],[11,"discard","","",15,[[["self"]]]],[11,"position","","",15,[[["self"]],["position"]]],[11,"peek_position","","",15,[[["self"]],["position"]]],[11,"byte_offset","","",15,[[["self"]],["usize"]]],[11,"parse_str","","",15,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",15,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",15,[[["self"]],["result"]]],[11,"decode_hex_escape","","",15,[[["self"]],["result",["u16"]]]],[11,"next","","",16,[[["self"]],["result",["option"]]]],[11,"peek","","",16,[[["self"]],["result",["option"]]]],[11,"discard","","",16,[[["self"]]]],[11,"position","","",16,[[["self"]],["position"]]],[11,"peek_position","","",16,[[["self"]],["position"]]],[11,"byte_offset","","",16,[[["self"]],["usize"]]],[11,"parse_str","","",16,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",16,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",16,[[["self"]],["result"]]],[11,"decode_hex_escape","","",16,[[["self"]],["result",["u16"]]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"next","serde_json::map","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"len","","",17,[[["self"]],["usize"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"len","","",20,[[["self"]],["usize"]]],[11,"len","","",21,[[["self"]],["usize"]]],[11,"len","","",22,[[["self"]],["usize"]]],[11,"default","","",6,[[],["self"]]],[11,"default","serde_json::ser","",12,[[],["self"]]],[11,"default","serde_json::value","",0,[[],["value"]]],[11,"next_back","serde_json::map","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"next_back","","",21,[[["self"]],["option"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"eq","serde_json::error","",3,[[["self"],["category"]],["bool"]]],[11,"eq","serde_json::map","",6,[[["self"],["self"]],["bool"]]],[11,"eq","serde_json::value","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","serde_json","",13,[[["self"],["number"]],["bool"]]],[11,"ne","","",13,[[["self"],["number"]],["bool"]]],[11,"from","serde_json::value","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","serde_json","",13,[[["u8"]],["self"]]],[11,"from","","",13,[[["u16"]],["self"]]],[11,"from","","",13,[[["u32"]],["self"]]],[11,"from","","",13,[[["u64"]],["self"]]],[11,"from","","",13,[[["usize"]],["self"]]],[11,"from","","",13,[[["i8"]],["self"]]],[11,"from","","",13,[[["i16"]],["self"]]],[11,"from","","",13,[[["i32"]],["self"]]],[11,"from","","",13,[[["i64"]],["self"]]],[11,"from","","",13,[[["isize"]],["self"]]],[11,"clone","serde_json::error","",3,[[["self"]],["category"]]],[11,"clone","serde_json::map","",6,[[["self"]],["self"]]],[11,"clone","serde_json::ser","",23,[[["self"]],["compactformatter"]]],[11,"clone","","",12,[[["self"]],["prettyformatter"]]],[11,"clone","serde_json::value","",0,[[["self"]],["value"]]],[11,"clone","serde_json","",13,[[["self"]],["number"]]],[11,"into_iter","serde_json::map","",6,N],[11,"extend","","",6,[[["self"],["t"]]]],[11,"fmt","serde_json::error","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::map","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","serde_json::ser","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json::value","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","serde_json","",13,[[["self"],["formatter"]],["result"]]],[11,"index","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index","serde_json::value","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index_mut","serde_json::value","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"from_iter","serde_json::map","",6,[[["t"]],["self"]]],[11,"from_iter","serde_json::value","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"from_str","serde_json","",13,[[["str"]],["result"]]],[11,"from_str","serde_json::value","",0,[[["str"]],["result",["value","error"]]]],[11,"description","serde_json::error","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"serialize","serde_json::map","",6,[[["self"],["s"]],["result"]]],[11,"serialize","serde_json::value","",0,[[["self"],["s"]],["result"]]],[11,"serialize","serde_json","",13,[[["self"],["s"]],["result"]]],[11,"custom","serde_json::error","",4,[[["t"]],["error"]]],[11,"deserialize_any","serde_json::value","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_any","serde_json","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize","serde_json::map","",6,[[["d"]],["result"]]],[11,"deserialize","serde_json::value","",0,[[["d"]],["result",["value"]]]],[11,"deserialize","serde_json","",13,[[["d"]],["result",["number"]]]],[11,"custom","serde_json::error","",4,[[["t"]],["error"]]],[11,"invalid_type","","",4,[[["unexpected"],["expected"]],["self"]]]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"]]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to a vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Return the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values.",0,[[["self"]]]],[11,"len","","Return the number of stored values.",0,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there are no values stored in the slab.",0,[[["self"]],["bool"]]],[11,"iter","","Return an iterator over the slab.",0,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Return a reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Return a mutable reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Return a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Return a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value.",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Return a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Remove and return the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Return `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"new","","Construct an empty vector",3,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",3,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",3,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",3,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",3,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",3,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",3,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",3,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",3,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",3,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",3,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",3,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",3,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",3,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",3,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",3,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",3,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",3,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",3,N],[11,"clear","","Remove all elements from the vector.",3,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",3,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",3,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",3,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",3,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",3,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",3,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",3,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",3,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",3,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",3,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",3,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",3,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",3,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",3,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"push","","",3,N],[11,"extend_from_slice","","",3,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"as_mut","","",3,N],[11,"partial_cmp","","",3,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"default","","",3,[[],["smallvec"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"cmp","","",3,[[["self"],["smallvec"]],["ordering"]]],[11,"eq","","",3,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",3,[[["self"],["smallvec"]],["bool"]]],[11,"from","","",3,N],[11,"from","","",3,[[["vec"]],["smallvec"]]],[11,"from","","",3,[[["a"]],["smallvec"]]],[11,"as_ref","","",3,N],[11,"clone","","",3,[[["self"]],["smallvec"]]],[11,"into_iter","","",3,N],[11,"extend","","",3,[[["self"],["i"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"deref_mut","","",3,N],[11,"deref","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"hash","","",3,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["i"]],["smallvec"]]],[11,"borrow","","",3,N],[11,"write","","",3,N],[11,"write_all","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"SmallVec"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N]],"paths":[]};
searchIndex["state"]={"doc":"state - safe and effortless state management","items":[[3,"Container","state","A container for global type-based state.",N,N],[3,"Storage","","A single storage location for global access to a value.",N,N],[11,"new","","Creates a new container with no stored values.",0,[[],["container"]]],[11,"freeze","","Freezes the container. A frozen container disallows writes allowing for synchronization-free reads.",0,[[["self"]]]],[11,"is_frozen","","Returns `true` if the container is frozen and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"set","","Sets the global state for type `T` if it has not been set before and `self` is not frozen.",0,[[["self"],["t"]],["bool"]]],[11,"try_get","","Attempts to retrieve the global state for type `T`.",0,[[["self"]],["option"]]],[11,"get","","Retrieves the global state for type `T`.",0,[[["self"]],["t"]]],[11,"new","","Create a new, uninitialized storage location.",1,[[],["storage"]]],[11,"set","","Sets the value for this storage unit to `value` if it has not already been set before.",1,[[["self"],["t"]],["bool"]]],[11,"try_get","","Attempts to borrow the value in this storage location.",1,[[["self"]],["option"]]],[11,"get","","Borrows the value in this storage location.",1,[[["self"]],["t"]]],[11,"get_or_set","","If the storage location has not yet been set, it is set to the return value of `from`. Returns a borrow to the value in this storage location.",1,[[["self"],["f"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"from","","",1,[[["t"]],["storage"]]],[11,"clone","","",1,[[["self"]],["storage"]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[3,"Container"],[3,"Storage"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[12,"attrs","","",10,N],[12,"bracket_token","","",10,N],[12,"elems","","",10,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[12,"attrs","","",11,N],[12,"left","","",11,N],[12,"eq_token","","",11,N],[12,"right","","",11,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[12,"attrs","","",12,N],[12,"left","","",12,N],[12,"op","","",12,N],[12,"right","","",12,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[12,"attrs","","",13,N],[12,"async_token","","",13,N],[12,"capture","","",13,N],[12,"block","","",13,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",14,N],[12,"left","","",14,N],[12,"op","","",14,N],[12,"right","","",14,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[12,"attrs","","",15,N],[12,"label","","",15,N],[12,"block","","",15,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[12,"attrs","","",16,N],[12,"box_token","","",16,N],[12,"expr","","",16,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[12,"attrs","","",17,N],[12,"break_token","","",17,N],[12,"label","","",17,N],[12,"expr","","",17,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",18,N],[12,"func","","",18,N],[12,"paren_token","","",18,N],[12,"args","","",18,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",19,N],[12,"expr","","",19,N],[12,"as_token","","",19,N],[12,"ty","","",19,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[12,"attrs","","",20,N],[12,"asyncness","","",20,N],[12,"movability","","",20,N],[12,"capture","","",20,N],[12,"or1_token","","",20,N],[12,"inputs","","",20,N],[12,"or2_token","","",20,N],[12,"output","","",20,N],[12,"body","","",20,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[12,"attrs","","",21,N],[12,"continue_token","","",21,N],[12,"label","","",21,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",22,N],[12,"base","","",22,N],[12,"dot_token","","",22,N],[12,"member","","",22,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[12,"attrs","","",23,N],[12,"label","","",23,N],[12,"for_token","","",23,N],[12,"pat","","",23,N],[12,"in_token","","",23,N],[12,"expr","","",23,N],[12,"body","","",23,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[12,"attrs","","",24,N],[12,"group_token","","",24,N],[12,"expr","","",24,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[12,"attrs","","",25,N],[12,"if_token","","",25,N],[12,"cond","","",25,N],[12,"then_branch","","",25,N],[12,"else_branch","","",25,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[12,"attrs","","",26,N],[12,"place","","",26,N],[12,"arrow_token","","",26,N],[12,"value","","",26,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",27,N],[12,"expr","","",27,N],[12,"bracket_token","","",27,N],[12,"index","","",27,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[12,"attrs","","",28,N],[12,"let_token","","",28,N],[12,"pats","","",28,N],[12,"eq_token","","",28,N],[12,"expr","","",28,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",29,N],[12,"lit","","",29,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[12,"attrs","","",30,N],[12,"label","","",30,N],[12,"loop_token","","",30,N],[12,"body","","",30,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[12,"attrs","","",31,N],[12,"mac","","",31,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[12,"attrs","","",32,N],[12,"match_token","","",32,N],[12,"expr","","",32,N],[12,"brace_token","","",32,N],[12,"arms","","",32,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[12,"attrs","","",33,N],[12,"receiver","","",33,N],[12,"dot_token","","",33,N],[12,"method","","",33,N],[12,"turbofish","","",33,N],[12,"paren_token","","",33,N],[12,"args","","",33,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",34,N],[12,"paren_token","","",34,N],[12,"expr","","",34,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",35,N],[12,"qself","","",35,N],[12,"path","","",35,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[12,"attrs","","",36,N],[12,"from","","",36,N],[12,"limits","","",36,N],[12,"to","","",36,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[12,"attrs","","",37,N],[12,"and_token","","",37,N],[12,"mutability","","",37,N],[12,"expr","","",37,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[12,"attrs","","",38,N],[12,"bracket_token","","",38,N],[12,"expr","","",38,N],[12,"semi_token","","",38,N],[12,"len","","",38,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[12,"attrs","","",39,N],[12,"return_token","","",39,N],[12,"expr","","",39,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[12,"attrs","","",40,N],[12,"path","","",40,N],[12,"brace_token","","",40,N],[12,"fields","","",40,N],[12,"dot2_token","","",40,N],[12,"rest","","",40,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[12,"attrs","","",41,N],[12,"expr","","",41,N],[12,"question_token","","",41,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[12,"attrs","","",42,N],[12,"try_token","","",42,N],[12,"block","","",42,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[12,"attrs","","",43,N],[12,"paren_token","","",43,N],[12,"elems","","",43,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[12,"attrs","","",44,N],[12,"expr","","",44,N],[12,"colon_token","","",44,N],[12,"ty","","",44,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",45,N],[12,"op","","",45,N],[12,"expr","","",45,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[12,"attrs","","",46,N],[12,"unsafe_token","","",46,N],[12,"block","","",46,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",47,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[12,"attrs","","",48,N],[12,"label","","",48,N],[12,"while_token","","",48,N],[12,"cond","","",48,N],[12,"body","","",48,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[12,"attrs","","",49,N],[12,"yield_token","","",49,N],[12,"expr","","",49,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",50,N],[12,"span","","",50,N],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",N,N],[12,"attrs","","",51,N],[12,"leading_vert","","",51,N],[12,"pats","","",51,N],[12,"guard","","",51,N],[12,"fat_arrow_token","","",51,N],[12,"body","","",51,N],[12,"comma","","",51,N],[3,"Block","","A braced block containing Rust statements.",N,N],[12,"brace_token","","",52,N],[12,"stmts","","Statements in a block",52,N],[3,"FieldPat","","A single field in a struct pattern.",N,N],[12,"attrs","","",53,N],[12,"member","","",53,N],[12,"colon_token","","",53,N],[12,"pat","","",53,N],[3,"FieldValue","","A field-value pair in a struct literal.",N,N],[12,"attrs","","Attributes tagged on the field.",54,N],[12,"member","","Name or index of the field.",54,N],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,N],[12,"expr","","Value of the field.",54,N],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",N,N],[12,"name","","",55,N],[12,"colon_token","","",55,N],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",N,N],[12,"attrs","","",56,N],[12,"let_token","","",56,N],[12,"pats","","",56,N],[12,"ty","","",56,N],[12,"init","","",56,N],[12,"semi_token","","",56,N],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"PatBox","","A box pattern: `box v`.",N,N],[12,"box_token","","",58,N],[12,"pat","","",58,N],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",N,N],[12,"by_ref","","",59,N],[12,"mutability","","",59,N],[12,"ident","","",59,N],[12,"subpat","","",59,N],[3,"PatLit","","A literal pattern: `0`.",N,N],[12,"expr","","",60,N],[3,"PatMacro","","A macro in expression position.",N,N],[12,"mac","","",61,N],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",N,N],[12,"qself","","",62,N],[12,"path","","",62,N],[3,"PatRange","","A range pattern: `1..=2`.",N,N],[12,"lo","","",63,N],[12,"limits","","",63,N],[12,"hi","","",63,N],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",N,N],[12,"and_token","","",64,N],[12,"mutability","","",64,N],[12,"pat","","",64,N],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",N,N],[12,"bracket_token","","",65,N],[12,"front","","",65,N],[12,"middle","","",65,N],[12,"dot2_token","","",65,N],[12,"comma_token","","",65,N],[12,"back","","",65,N],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",N,N],[12,"path","","",66,N],[12,"brace_token","","",66,N],[12,"fields","","",66,N],[12,"dot2_token","","",66,N],[3,"PatTuple","","A tuple pattern: `(a, b)`.",N,N],[12,"paren_token","","",67,N],[12,"front","","",67,N],[12,"dot2_token","","",67,N],[12,"comma_token","","",67,N],[12,"back","","",67,N],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",N,N],[12,"path","","",68,N],[12,"pat","","",68,N],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",N,N],[12,"tts","","",69,N],[3,"PatWild","","A pattern that matches any value: `_`.",N,N],[12,"underscore_token","","",70,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",71,N],[12,"lt_token","","",71,N],[12,"lifetimes","","",71,N],[12,"gt_token","","",71,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",72,N],[12,"const_token","","",72,N],[12,"ident","","",72,N],[12,"colon_token","","",72,N],[12,"ty","","",72,N],[12,"eq_token","","",72,N],[12,"default","","",72,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",73,N],[12,"params","","",73,N],[12,"gt_token","","",73,N],[12,"where_clause","","",73,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",74,N],[12,"lifetime","","",74,N],[12,"colon_token","","",74,N],[12,"bounds","","",74,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",75,N],[12,"eq_token","","",75,N],[12,"rhs_ty","","",75,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",76,N],[12,"colon_token","","",76,N],[12,"bounds","","",76,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",77,N],[12,"bounded_ty","","The type being bounded",77,N],[12,"colon_token","","",77,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",78,N],[12,"modifier","","",78,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",79,N],[12,"ident","","",79,N],[12,"colon_token","","",79,N],[12,"bounds","","",79,N],[12,"eq_token","","",79,N],[12,"default","","",79,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",80,N],[12,"predicates","","",80,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",N,N],[12,"pat","","",81,N],[12,"colon_token","","",81,N],[12,"ty","","",81,N],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",N,N],[12,"mutability","","",82,N],[12,"self_token","","",82,N],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",N,N],[12,"and_token","","",83,N],[12,"lifetime","","",83,N],[12,"mutability","","",83,N],[12,"self_token","","",83,N],[3,"FnDecl","","Header of a function declaration, without including the body.",N,N],[12,"fn_token","","",84,N],[12,"generics","","",84,N],[12,"paren_token","","",84,N],[12,"inputs","","",84,N],[12,"variadic","","",84,N],[12,"output","","",84,N],[3,"ForeignItemFn","","A foreign function in an `extern` block.",N,N],[12,"attrs","","",85,N],[12,"vis","","",85,N],[12,"ident","","",85,N],[12,"decl","","",85,N],[12,"semi_token","","",85,N],[3,"ForeignItemMacro","","A macro invocation within an extern block.",N,N],[12,"attrs","","",86,N],[12,"mac","","",86,N],[12,"semi_token","","",86,N],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",N,N],[12,"attrs","","",87,N],[12,"vis","","",87,N],[12,"static_token","","",87,N],[12,"mutability","","",87,N],[12,"ident","","",87,N],[12,"colon_token","","",87,N],[12,"ty","","",87,N],[12,"semi_token","","",87,N],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",N,N],[12,"attrs","","",88,N],[12,"vis","","",88,N],[12,"type_token","","",88,N],[12,"ident","","",88,N],[12,"semi_token","","",88,N],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",N,N],[12,"tts","","",89,N],[3,"ImplItemConst","","An associated constant within an impl block.",N,N],[12,"attrs","","",90,N],[12,"vis","","",90,N],[12,"defaultness","","",90,N],[12,"const_token","","",90,N],[12,"ident","","",90,N],[12,"colon_token","","",90,N],[12,"ty","","",90,N],[12,"eq_token","","",90,N],[12,"expr","","",90,N],[12,"semi_token","","",90,N],[3,"ImplItemExistential","","An existential type within an impl block.",N,N],[12,"attrs","","",91,N],[12,"existential_token","","",91,N],[12,"type_token","","",91,N],[12,"ident","","",91,N],[12,"generics","","",91,N],[12,"colon_token","","",91,N],[12,"bounds","","",91,N],[12,"semi_token","","",91,N],[3,"ImplItemMacro","","A macro invocation within an impl block.",N,N],[12,"attrs","","",92,N],[12,"mac","","",92,N],[12,"semi_token","","",92,N],[3,"ImplItemMethod","","A method within an impl block.",N,N],[12,"attrs","","",93,N],[12,"vis","","",93,N],[12,"defaultness","","",93,N],[12,"sig","","",93,N],[12,"block","","",93,N],[3,"ImplItemType","","An associated type within an impl block.",N,N],[12,"attrs","","",94,N],[12,"vis","","",94,N],[12,"defaultness","","",94,N],[12,"type_token","","",94,N],[12,"ident","","",94,N],[12,"generics","","",94,N],[12,"eq_token","","",94,N],[12,"ty","","",94,N],[12,"semi_token","","",94,N],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",N,N],[12,"tts","","",95,N],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",N,N],[12,"attrs","","",96,N],[12,"vis","","",96,N],[12,"const_token","","",96,N],[12,"ident","","",96,N],[12,"colon_token","","",96,N],[12,"ty","","",96,N],[12,"eq_token","","",96,N],[12,"expr","","",96,N],[12,"semi_token","","",96,N],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",N,N],[12,"attrs","","",97,N],[12,"vis","","",97,N],[12,"enum_token","","",97,N],[12,"ident","","",97,N],[12,"generics","","",97,N],[12,"brace_token","","",97,N],[12,"variants","","",97,N],[3,"ItemExistential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",N,N],[12,"attrs","","",98,N],[12,"vis","","",98,N],[12,"existential_token","","",98,N],[12,"type_token","","",98,N],[12,"ident","","",98,N],[12,"generics","","",98,N],[12,"colon_token","","",98,N],[12,"bounds","","",98,N],[12,"semi_token","","",98,N],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",N,N],[12,"attrs","","",99,N],[12,"vis","","",99,N],[12,"extern_token","","",99,N],[12,"crate_token","","",99,N],[12,"ident","","",99,N],[12,"rename","","",99,N],[12,"semi_token","","",99,N],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",N,N],[12,"attrs","","",100,N],[12,"vis","","",100,N],[12,"constness","","",100,N],[12,"unsafety","","",100,N],[12,"asyncness","","",100,N],[12,"abi","","",100,N],[12,"ident","","",100,N],[12,"decl","","",100,N],[12,"block","","",100,N],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",N,N],[12,"attrs","","",101,N],[12,"abi","","",101,N],[12,"brace_token","","",101,N],[12,"items","","",101,N],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",N,N],[12,"attrs","","",102,N],[12,"defaultness","","",102,N],[12,"unsafety","","",102,N],[12,"impl_token","","",102,N],[12,"generics","","",102,N],[12,"trait_","","Trait this impl implements.",102,N],[12,"self_ty","","The Self type of the impl.",102,N],[12,"brace_token","","",102,N],[12,"items","","",102,N],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",N,N],[12,"attrs","","",103,N],[12,"ident","","The `example` in `macro_rules! example { ... }`.",103,N],[12,"mac","","",103,N],[12,"semi_token","","",103,N],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",N,N],[12,"attrs","","",104,N],[12,"vis","","",104,N],[12,"macro_token","","",104,N],[12,"ident","","",104,N],[12,"paren_token","","",104,N],[12,"args","","",104,N],[12,"brace_token","","",104,N],[12,"body","","",104,N],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs","","",105,N],[12,"vis","","",105,N],[12,"mod_token","","",105,N],[12,"ident","","",105,N],[12,"content","","",105,N],[12,"semi","","",105,N],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",N,N],[12,"attrs","","",106,N],[12,"vis","","",106,N],[12,"static_token","","",106,N],[12,"mutability","","",106,N],[12,"ident","","",106,N],[12,"colon_token","","",106,N],[12,"ty","","",106,N],[12,"eq_token","","",106,N],[12,"expr","","",106,N],[12,"semi_token","","",106,N],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",N,N],[12,"attrs","","",107,N],[12,"vis","","",107,N],[12,"struct_token","","",107,N],[12,"ident","","",107,N],[12,"generics","","",107,N],[12,"fields","","",107,N],[12,"semi_token","","",107,N],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",N,N],[12,"attrs","","",108,N],[12,"vis","","",108,N],[12,"unsafety","","",108,N],[12,"auto_token","","",108,N],[12,"trait_token","","",108,N],[12,"ident","","",108,N],[12,"generics","","",108,N],[12,"colon_token","","",108,N],[12,"supertraits","","",108,N],[12,"brace_token","","",108,N],[12,"items","","",108,N],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",N,N],[12,"attrs","","",109,N],[12,"vis","","",109,N],[12,"trait_token","","",109,N],[12,"ident","","",109,N],[12,"generics","","",109,N],[12,"eq_token","","",109,N],[12,"bounds","","",109,N],[12,"semi_token","","",109,N],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",N,N],[12,"attrs","","",110,N],[12,"vis","","",110,N],[12,"type_token","","",110,N],[12,"ident","","",110,N],[12,"generics","","",110,N],[12,"eq_token","","",110,N],[12,"ty","","",110,N],[12,"semi_token","","",110,N],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",N,N],[12,"attrs","","",111,N],[12,"vis","","",111,N],[12,"union_token","","",111,N],[12,"ident","","",111,N],[12,"generics","","",111,N],[12,"fields","","",111,N],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",N,N],[12,"attrs","","",112,N],[12,"vis","","",112,N],[12,"use_token","","",112,N],[12,"leading_colon","","",112,N],[12,"tree","","",112,N],[12,"semi_token","","",112,N],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",N,N],[12,"tts","","",113,N],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",N,N],[12,"constness","","",114,N],[12,"unsafety","","",114,N],[12,"asyncness","","",114,N],[12,"abi","","",114,N],[12,"ident","","",114,N],[12,"decl","","",114,N],[3,"TraitItemConst","","An associated constant within the definition of a trait.",N,N],[12,"attrs","","",115,N],[12,"const_token","","",115,N],[12,"ident","","",115,N],[12,"colon_token","","",115,N],[12,"ty","","",115,N],[12,"default","","",115,N],[12,"semi_token","","",115,N],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",N,N],[12,"attrs","","",116,N],[12,"mac","","",116,N],[12,"semi_token","","",116,N],[3,"TraitItemMethod","","A trait method within the definition of a trait.",N,N],[12,"attrs","","",117,N],[12,"sig","","",117,N],[12,"default","","",117,N],[12,"semi_token","","",117,N],[3,"TraitItemType","","An associated type within the definition of a trait.",N,N],[12,"attrs","","",118,N],[12,"type_token","","",118,N],[12,"ident","","",118,N],[12,"generics","","",118,N],[12,"colon_token","","",118,N],[12,"bounds","","",118,N],[12,"default","","",118,N],[12,"semi_token","","",118,N],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",N,N],[12,"tts","","",119,N],[3,"UseGlob","","A glob import in a `use` item: `*`.",N,N],[12,"star_token","","",120,N],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",N,N],[12,"brace_token","","",121,N],[12,"items","","",121,N],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",N,N],[12,"ident","","",122,N],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",N,N],[12,"ident","","",123,N],[12,"colon2_token","","",123,N],[12,"tree","","",123,N],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",N,N],[12,"ident","","",124,N],[12,"as_token","","",124,N],[12,"rename","","",124,N],[3,"File","","A complete file of Rust source code.",N,N],[12,"shebang","","",125,N],[12,"attrs","","",125,N],[12,"items","","",125,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",126,N],[12,"ident","","",126,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",127,N],[12,"span","","",127,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",128,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",129,N],[12,"bang_token","","",129,N],[12,"delimiter","","",129,N],[12,"tts","","",129,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",130,N],[12,"brace_token","","",130,N],[12,"variants","","",130,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",131,N],[12,"fields","","",131,N],[12,"semi_token","","",131,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",132,N],[12,"fields","","",132,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",133,N],[12,"vis","","Visibility of the struct or enum.",133,N],[12,"ident","","Name of the struct or enum.",133,N],[12,"generics","","Generics required to complete the definition.",133,N],[12,"data","","Data within the struct or enum.",133,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",134,N],[12,"name","","",134,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",135,N],[12,"ty","","",135,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",136,N],[12,"elem","","",136,N],[12,"semi_token","","",136,N],[12,"len","","",136,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",137,N],[12,"unsafety","","",137,N],[12,"abi","","",137,N],[12,"fn_token","","",137,N],[12,"paren_token","","",137,N],[12,"inputs","","",137,N],[12,"variadic","","",137,N],[12,"output","","",137,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",138,N],[12,"elem","","",138,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",139,N],[12,"bounds","","",139,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",140,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",141,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",142,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",143,N],[12,"elem","","",143,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",144,N],[12,"path","","",144,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",145,N],[12,"const_token","","",145,N],[12,"mutability","","",145,N],[12,"elem","","",145,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",146,N],[12,"lifetime","","",146,N],[12,"mutability","","",146,N],[12,"elem","","",146,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",147,N],[12,"elem","","",147,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",148,N],[12,"bounds","","",148,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",149,N],[12,"elems","","",149,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",150,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",151,N],[12,"lt_token","","",151,N],[12,"args","","",151,N],[12,"gt_token","","",151,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",152,N],[12,"eq_token","","",152,N],[12,"ty","","",152,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",153,N],[12,"colon_token","","",153,N],[12,"bounds","","",153,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",154,N],[12,"inputs","","`(A, B)`",154,N],[12,"output","","`C`",154,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",155,N],[12,"segments","","",155,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",156,N],[12,"arguments","","",156,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",157,N],[12,"ty","","",157,N],[12,"position","","",157,N],[12,"as_token","","",157,N],[12,"gt_token","","",157,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",158,N],[13,"Inner","","",158,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",159,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",159,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",159,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",160,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",160,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",161,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",161,N],[13,"Unit","","Unit struct or unit variant such as `None`.",161,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",162,N],[13,"Crate","","A crate-level visibility: `crate`.",162,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",162,N],[13,"Inherited","","An inherited visibility, which usually means private.",162,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",163,N],[13,"InPlace","","A placement expression: `place <- value`.",163,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",163,N],[13,"Call","","A function call expression: `invoke(a, b)`.",163,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",163,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",163,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",163,N],[13,"Unary","","A unary operation: `!x`, `*x`.",163,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",163,N],[13,"Cast","","A cast expression: `foo as f64`.",163,N],[13,"Type","","A type ascription expression: `foo: f64`.",163,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",163,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",163,N],[13,"While","","A while loop: `while expr { ... }`.",163,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",163,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",163,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",163,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",163,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",163,N],[13,"Block","","A blocked scope: `{ ... }`.",163,N],[13,"Assign","","An assignment expression: `a = compute()`.",163,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",163,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",163,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",163,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",163,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",163,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",163,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",163,N],[13,"Continue","","A `continue`, with an optional label.",163,N],[13,"Return","","A `return`, with an optional value to be returned.",163,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",163,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",163,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",163,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",163,N],[13,"Group","","An expression contained within invisible delimiters.",163,N],[13,"Try","","A try-expression: `expr?`.",163,N],[13,"Async","","An async block: `async { ... }`.",163,N],[13,"TryBlock","","A try block: `try { ... }`.",163,N],[13,"Yield","","A yield expression: `yield expr`.",163,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",163,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",164,N],[13,"Unnamed","","An unnamed field like `self.0`.",164,N],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",N,N],[13,"Type","","A type argument.",165,N],[13,"Const","","A const expression. Must be inside of a block.",165,N],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",N,N],[13,"Wild","","A pattern that matches any value: `_`.",166,N],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",166,N],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",166,N],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",166,N],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",166,N],[13,"Tuple","","A tuple pattern: `(a, b)`.",166,N],[13,"Box","","A box pattern: `box v`.",166,N],[13,"Ref","","A reference pattern: `&mut (first, second)`.",166,N],[13,"Lit","","A literal pattern: `0`.",166,N],[13,"Range","","A range pattern: `1..=2`.",166,N],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",166,N],[13,"Macro","","A macro in expression position.",166,N],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",166,N],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",N,N],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",167,N],[13,"Closed","","Inclusive at the beginning and end.",167,N],[4,"Stmt","","A statement, usually ending in a semicolon.",N,N],[13,"Local","","A local (let) binding.",168,N],[13,"Item","","An item definition.",168,N],[13,"Expr","","Expr without trailing semicolon.",168,N],[13,"Semi","","Expression with trailing semicolon.",168,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",169,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",169,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",169,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",170,N],[13,"Maybe","","",170,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",171,N],[13,"Lifetime","","",171,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",172,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",172,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",172,N],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",N,N],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",173,N],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",173,N],[13,"Captured","","An explicitly typed pattern captured by a function signature.",173,N],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",173,N],[13,"Ignored","","A type not bound to any pattern in a function signature.",173,N],[4,"ForeignItem","","An item within an `extern` block.",N,N],[13,"Fn","","A foreign function in an `extern` block.",174,N],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",174,N],[13,"Type","","A foreign type in an `extern` block: `type void`.",174,N],[13,"Macro","","A macro invocation within an extern block.",174,N],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",174,N],[4,"ImplItem","","An item within an impl block.",N,N],[13,"Const","","An associated constant within an impl block.",175,N],[13,"Method","","A method within an impl block.",175,N],[13,"Type","","An associated type within an impl block.",175,N],[13,"Existential","","An existential type within an impl block.",175,N],[13,"Macro","","A macro invocation within an impl block.",175,N],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",175,N],[4,"Item","","Things that can appear directly inside of a module or scope.",N,N],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",176,N],[13,"Use","","A use declaration: `use std::collections::HashMap`.",176,N],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",176,N],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",176,N],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",176,N],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",176,N],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",176,N],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",176,N],[13,"Existential","","An existential type: `existential type Iter: Iterator<Item = u8>`.",176,N],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",176,N],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",176,N],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",176,N],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",176,N],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator + Sync`.",176,N],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",176,N],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",176,N],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",176,N],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",176,N],[4,"TraitItem","","An item declaration within the definition of a trait.",N,N],[13,"Const","","An associated constant within the definition of a trait.",177,N],[13,"Method","","A trait method within the definition of a trait.",177,N],[13,"Type","","An associated type within the definition of a trait.",177,N],[13,"Macro","","A macro invocation within the definition of a trait.",177,N],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",177,N],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",N,N],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",178,N],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",178,N],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",178,N],[13,"Glob","","A glob import in a `use` item: `*`.",178,N],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",178,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",179,N],[13,"F64","","",179,N],[13,"None","","",179,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",180,N],[13,"I16","","",180,N],[13,"I32","","",180,N],[13,"I64","","",180,N],[13,"I128","","",180,N],[13,"Isize","","",180,N],[13,"U8","","",180,N],[13,"U16","","",180,N],[13,"U32","","",180,N],[13,"U64","","",180,N],[13,"U128","","",180,N],[13,"Usize","","",180,N],[13,"None","","",180,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",181,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",181,N],[13,"Byte","","A byte literal: `b'f'`.",181,N],[13,"Char","","A character literal: `'a'`.",181,N],[13,"Int","","An integer literal: `1` or `1u16`.",181,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",181,N],[13,"Bool","","A boolean literal: `true` or `false`.",181,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",181,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",182,N],[13,"Raw","","A raw string like `r##\"data\"##`.",182,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",183,N],[13,"Brace","","",183,N],[13,"Bracket","","",183,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",184,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",184,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",184,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",185,N],[13,"Sub","","The `-` operator (subtraction)",185,N],[13,"Mul","","The `*` operator (multiplication)",185,N],[13,"Div","","The `/` operator (division)",185,N],[13,"Rem","","The `%` operator (modulus)",185,N],[13,"And","","The `&&` operator (logical and)",185,N],[13,"Or","","The `||` operator (logical or)",185,N],[13,"BitXor","","The `^` operator (bitwise xor)",185,N],[13,"BitAnd","","The `&` operator (bitwise and)",185,N],[13,"BitOr","","The `|` operator (bitwise or)",185,N],[13,"Shl","","The `<<` operator (shift left)",185,N],[13,"Shr","","The `>>` operator (shift right)",185,N],[13,"Eq","","The `==` operator (equality)",185,N],[13,"Lt","","The `<` operator (less than)",185,N],[13,"Le","","The `<=` operator (less than or equal to)",185,N],[13,"Ne","","The `!=` operator (not equal to)",185,N],[13,"Ge","","The `>=` operator (greater than or equal to)",185,N],[13,"Gt","","The `>` operator (greater than)",185,N],[13,"AddEq","","The `+=` operator",185,N],[13,"SubEq","","The `-=` operator",185,N],[13,"MulEq","","The `*=` operator",185,N],[13,"DivEq","","The `/=` operator",185,N],[13,"RemEq","","The `%=` operator",185,N],[13,"BitXorEq","","The `^=` operator",185,N],[13,"BitAndEq","","The `&=` operator",185,N],[13,"BitOrEq","","The `|=` operator",185,N],[13,"ShlEq","","The `<<=` operator",185,N],[13,"ShrEq","","The `>>=` operator",185,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",186,N],[13,"Not","","The `!` operator for logical inversion",186,N],[13,"Neg","","The `-` operator for negation",186,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",187,N],[13,"Wild","","Argument not given a name, matched with `_`.",187,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",188,N],[13,"Type","","A particular type is returned.",188,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",189,N],[13,"Array","","A fixed size array type: `[T; n]`.",189,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",189,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",189,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",189,N],[13,"Never","","The never type: `!`.",189,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",189,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",189,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",189,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",189,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",189,N],[13,"Group","","A type contained within invisible delimiters.",189,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",189,N],[13,"Macro","","A macro in the type position.",189,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",189,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",190,N],[13,"Type","","A type argument.",190,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",190,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",190,N],[13,"Const","","A const expression. Must be inside of a block.",190,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",191,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",191,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",191,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",N,[[["str"]],["result",["file","error"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"spans","","",192,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",193,N],[3,"As","","`as`",N,N],[12,"span","","",194,N],[3,"Async","","`async`",N,N],[12,"span","","",195,N],[3,"Auto","","`auto`",N,N],[12,"span","","",196,N],[3,"Become","","`become`",N,N],[12,"span","","",197,N],[3,"Box","","`box`",N,N],[12,"span","","",198,N],[3,"Break","","`break`",N,N],[12,"span","","",199,N],[3,"Const","","`const`",N,N],[12,"span","","",200,N],[3,"Continue","","`continue`",N,N],[12,"span","","",201,N],[3,"Crate","","`crate`",N,N],[12,"span","","",202,N],[3,"Default","","`default`",N,N],[12,"span","","",203,N],[3,"Do","","`do`",N,N],[12,"span","","",204,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",205,N],[3,"Else","","`else`",N,N],[12,"span","","",206,N],[3,"Enum","","`enum`",N,N],[12,"span","","",207,N],[3,"Existential","","`existential`",N,N],[12,"span","","",208,N],[3,"Extern","","`extern`",N,N],[12,"span","","",209,N],[3,"Final","","`final`",N,N],[12,"span","","",210,N],[3,"Fn","","`fn`",N,N],[12,"span","","",211,N],[3,"For","","`for`",N,N],[12,"span","","",212,N],[3,"If","","`if`",N,N],[12,"span","","",213,N],[3,"Impl","","`impl`",N,N],[12,"span","","",214,N],[3,"In","","`in`",N,N],[12,"span","","",215,N],[3,"Let","","`let`",N,N],[12,"span","","",216,N],[3,"Loop","","`loop`",N,N],[12,"span","","",217,N],[3,"Macro","","`macro`",N,N],[12,"span","","",218,N],[3,"Match","","`match`",N,N],[12,"span","","",219,N],[3,"Mod","","`mod`",N,N],[12,"span","","",220,N],[3,"Move","","`move`",N,N],[12,"span","","",221,N],[3,"Mut","","`mut`",N,N],[12,"span","","",222,N],[3,"Override","","`override`",N,N],[12,"span","","",223,N],[3,"Priv","","`priv`",N,N],[12,"span","","",224,N],[3,"Pub","","`pub`",N,N],[12,"span","","",225,N],[3,"Ref","","`ref`",N,N],[12,"span","","",226,N],[3,"Return","","`return`",N,N],[12,"span","","",227,N],[3,"SelfType","","`Self`",N,N],[12,"span","","",228,N],[3,"SelfValue","","`self`",N,N],[12,"span","","",229,N],[3,"Static","","`static`",N,N],[12,"span","","",230,N],[3,"Struct","","`struct`",N,N],[12,"span","","",231,N],[3,"Super","","`super`",N,N],[12,"span","","",232,N],[3,"Trait","","`trait`",N,N],[12,"span","","",233,N],[3,"Try","","`try`",N,N],[12,"span","","",234,N],[3,"Type","","`type`",N,N],[12,"span","","",235,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",236,N],[3,"Union","","`union`",N,N],[12,"span","","",237,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",238,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",239,N],[3,"Use","","`use`",N,N],[12,"span","","",240,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",241,N],[3,"Where","","`where`",N,N],[12,"span","","",242,N],[3,"While","","`while`",N,N],[12,"span","","",243,N],[3,"Yield","","`yield`",N,N],[12,"span","","",244,N],[3,"Add","","`+`",N,N],[12,"spans","","",245,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",246,N],[3,"And","","`&`",N,N],[12,"spans","","",247,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",248,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",249,N],[3,"At","","`@`",N,N],[12,"spans","","",250,N],[3,"Bang","","`!`",N,N],[12,"spans","","",251,N],[3,"Caret","","`^`",N,N],[12,"spans","","",252,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",253,N],[3,"Colon","","`:`",N,N],[12,"spans","","",254,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",255,N],[3,"Comma","","`,`",N,N],[12,"spans","","",256,N],[3,"Div","","`/`",N,N],[12,"spans","","",257,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",258,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",259,N],[3,"Dot","","`.`",N,N],[12,"spans","","",260,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",261,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",262,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",263,N],[3,"Eq","","`=`",N,N],[12,"spans","","",264,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",265,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",266,N],[3,"Gt","","`>`",N,N],[12,"spans","","",267,N],[3,"Le","","`<=`",N,N],[12,"spans","","",268,N],[3,"Lt","","`<`",N,N],[12,"spans","","",269,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",270,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",271,N],[3,"Or","","`|`",N,N],[12,"spans","","",272,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",273,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",274,N],[3,"Pound","","`#`",N,N],[12,"spans","","",275,N],[3,"Question","","`?`",N,N],[12,"spans","","",276,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",277,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",278,N],[3,"Rem","","`%`",N,N],[12,"spans","","",279,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",280,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",281,N],[3,"Semi","","`;`",N,N],[12,"spans","","",282,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",283,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",284,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",285,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",286,N],[3,"Star","","`*`",N,N],[12,"spans","","",287,N],[3,"Sub","","`-`",N,N],[12,"spans","","",288,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",289,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",290,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",291,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",292,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",293,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",294,N],[8,"Token","","Marker trait for types that represent single tokens.",N,N],[11,"surround","","",291,[[["self"],["tokenstream"],["f"]]]],[11,"surround","","",292,[[["self"],["tokenstream"],["f"]]]],[11,"surround","","",293,[[["self"],["tokenstream"],["f"]]]],[11,"surround","","",294,[[["self"],["tokenstream"],["f"]]]],[11,"parse_meta","syn","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["result",["meta"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",159,[[["self"]],["ident"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",161,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",161,[[["self"]],["itermut",["field"]]]],[11,"parse_within","","Parse the body of a block as zero or more statements, possibly including one trailing expression.",52,[[["parsestream"]],["result",["vec"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",295,[[["self"]],["turbofish"]]],[11,"new","","",74,[[["lifetime"]],["self"]]],[11,"new","","Panics",126,[[["str"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",181,[[["literal"]],["self"]]],[11,"new","","",296,[[["str"],["span"]],["self"]]],[11,"value","","",296,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",296,[[["self"]],["result",["error"]]]],[11,"span","","",296,[[["self"]],["span"]]],[11,"set_span","","",296,[[["self"],["span"]]]],[11,"new","","",297,N],[11,"value","","",297,[[["self"]],["vec",["u8"]]]],[11,"span","","",297,[[["self"]],["span"]]],[11,"set_span","","",297,[[["self"],["span"]]]],[11,"new","","",298,[[["u8"],["span"]],["self"]]],[11,"value","","",298,[[["self"]],["u8"]]],[11,"span","","",298,[[["self"]],["span"]]],[11,"set_span","","",298,[[["self"],["span"]]]],[11,"new","","",299,[[["char"],["span"]],["self"]]],[11,"value","","",299,[[["self"]],["char"]]],[11,"span","","",299,[[["self"]],["span"]]],[11,"set_span","","",299,[[["self"],["span"]]]],[11,"new","","",300,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",300,[[["self"]],["u64"]]],[11,"suffix","","",300,[[["self"]],["intsuffix"]]],[11,"span","","",300,[[["self"]],["span"]]],[11,"set_span","","",300,[[["self"],["span"]]]],[11,"new","","",301,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",301,[[["self"]],["f64"]]],[11,"suffix","","",301,[[["self"]],["floatsuffix"]]],[11,"span","","",301,[[["self"]],["span"]]],[11,"set_span","","",301,[[["self"],["span"]]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"set_span","","",128,[[["self"],["span"]]]],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",189,[[["parsestream"]],["result"]]],[11,"without_plus","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"],["bool"]],["result"]]],[11,"without_plus","","",148,[[["parsestream"]],["result"]]],[11,"parse","","",148,[[["parsestream"],["bool"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",155,[[["parsestream"]],["result"]]],[11,"is_empty","","",191,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",302,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",302,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",302,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",303,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",303,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",303,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",303,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",303,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",303,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",303,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",303,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",303,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",303,[[["self"]],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",304,[[["parsestream"]],["result"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",305,N],[13,"End","","",305,N],[11,"new","","Creates an empty punctuated sequence.",306,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",306,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",306,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",306,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",306,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",306,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",306,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",306,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",306,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",306,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",306,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",306,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",306,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",306,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",306,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",306,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",306,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",306,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",306,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",306,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",306,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",306,N],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",305,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",305,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",305,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",305,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",305,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",305,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",307,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arg_captured","","",N,[[["v"],["argcaptured"]]]],[5,"visit_arg_self","","",N,[[["v"],["argself"]]]],[5,"visit_arg_self_ref","","",N,[[["v"],["argselfref"]]]],[5,"visit_arm","","",N,[[["v"],["arm"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_block","","",N,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_constraint","","",N,[[["v"],["constraint"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_array","","",N,[[["v"],["exprarray"]]]],[5,"visit_expr_assign","","",N,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op","","",N,[[["v"],["exprassignop"]]]],[5,"visit_expr_async","","",N,[[["v"],["exprasync"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_block","","",N,[[["v"],["exprblock"]]]],[5,"visit_expr_box","","",N,[[["v"],["exprbox"]]]],[5,"visit_expr_break","","",N,[[["v"],["exprbreak"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_closure","","",N,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue","","",N,[[["v"],["exprcontinue"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_for_loop","","",N,[[["v"],["exprforloop"]]]],[5,"visit_expr_group","","",N,[[["v"],["exprgroup"]]]],[5,"visit_expr_if","","",N,[[["v"],["exprif"]]]],[5,"visit_expr_in_place","","",N,[[["v"],["exprinplace"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_let","","",N,[[["v"],["exprlet"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_loop","","",N,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",N,[[["v"],["exprmacro"]]]],[5,"visit_expr_match","","",N,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call","","",N,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_range","","",N,[[["v"],["exprrange"]]]],[5,"visit_expr_reference","","",N,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat","","",N,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return","","",N,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct","","",N,[[["v"],["exprstruct"]]]],[5,"visit_expr_try","","",N,[[["v"],["exprtry"]]]],[5,"visit_expr_try_block","","",N,[[["v"],["exprtryblock"]]]],[5,"visit_expr_tuple","","",N,[[["v"],["exprtuple"]]]],[5,"visit_expr_type","","",N,[[["v"],["exprtype"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",N,[[["v"],["exprunsafe"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_expr_while","","",N,[[["v"],["exprwhile"]]]],[5,"visit_expr_yield","","",N,[[["v"],["expryield"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_field_pat","","",N,[[["v"],["fieldpat"]]]],[5,"visit_field_value","","",N,[[["v"],["fieldvalue"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_file","","",N,[[["v"],["file"]]]],[5,"visit_fn_arg","","",N,[[["v"],["fnarg"]]]],[5,"visit_fn_decl","","",N,[[["v"],["fndecl"]]]],[5,"visit_foreign_item","","",N,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn","","",N,[[["v"],["foreignitemfn"]]]],[5,"visit_foreign_item_macro","","",N,[[["v"],["foreignitemmacro"]]]],[5,"visit_foreign_item_static","","",N,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type","","",N,[[["v"],["foreignitemtype"]]]],[5,"visit_foreign_item_verbatim","","",N,[[["v"],["foreignitemverbatim"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_method_argument","","",N,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_impl_item","","",N,[[["v"],["implitem"]]]],[5,"visit_impl_item_const","","",N,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_existential","","",N,[[["v"],["implitemexistential"]]]],[5,"visit_impl_item_macro","","",N,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method","","",N,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type","","",N,[[["v"],["implitemtype"]]]],[5,"visit_impl_item_verbatim","","",N,[[["v"],["implitemverbatim"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_item","","",N,[[["v"],["item"]]]],[5,"visit_item_const","","",N,[[["v"],["itemconst"]]]],[5,"visit_item_enum","","",N,[[["v"],["itemenum"]]]],[5,"visit_item_existential","","",N,[[["v"],["itemexistential"]]]],[5,"visit_item_extern_crate","","",N,[[["v"],["itemexterncrate"]]]],[5,"visit_item_fn","","",N,[[["v"],["itemfn"]]]],[5,"visit_item_foreign_mod","","",N,[[["v"],["itemforeignmod"]]]],[5,"visit_item_impl","","",N,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",N,[[["v"],["itemmacro"]]]],[5,"visit_item_macro2","","",N,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod","","",N,[[["v"],["itemmod"]]]],[5,"visit_item_static","","",N,[[["v"],["itemstatic"]]]],[5,"visit_item_struct","","",N,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",N,[[["v"],["itemtrait"]]]],[5,"visit_item_trait_alias","","",N,[[["v"],["itemtraitalias"]]]],[5,"visit_item_type","","",N,[[["v"],["itemtype"]]]],[5,"visit_item_union","","",N,[[["v"],["itemunion"]]]],[5,"visit_item_use","","",N,[[["v"],["itemuse"]]]],[5,"visit_item_verbatim","","",N,[[["v"],["itemverbatim"]]]],[5,"visit_label","","",N,[[["v"],["label"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_local","","",N,[[["v"],["local"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_method_sig","","",N,[[["v"],["methodsig"]]]],[5,"visit_method_turbofish","","",N,[[["v"],["methodturbofish"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat","","",N,[[["v"],["pat"]]]],[5,"visit_pat_box","","",N,[[["v"],["patbox"]]]],[5,"visit_pat_ident","","",N,[[["v"],["patident"]]]],[5,"visit_pat_lit","","",N,[[["v"],["patlit"]]]],[5,"visit_pat_macro","","",N,[[["v"],["patmacro"]]]],[5,"visit_pat_path","","",N,[[["v"],["patpath"]]]],[5,"visit_pat_range","","",N,[[["v"],["patrange"]]]],[5,"visit_pat_ref","","",N,[[["v"],["patref"]]]],[5,"visit_pat_slice","","",N,[[["v"],["patslice"]]]],[5,"visit_pat_struct","","",N,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple","","",N,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",N,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_verbatim","","",N,[[["v"],["patverbatim"]]]],[5,"visit_pat_wild","","",N,[[["v"],["patwild"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_range_limits","","",N,[[["v"],["rangelimits"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_stmt","","",N,[[["v"],["stmt"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item","","",N,[[["v"],["traititem"]]]],[5,"visit_trait_item_const","","",N,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",N,[[["v"],["traititemmacro"]]]],[5,"visit_trait_item_method","","",N,[[["v"],["traititemmethod"]]]],[5,"visit_trait_item_type","","",N,[[["v"],["traititemtype"]]]],[5,"visit_trait_item_verbatim","","",N,[[["v"],["traititemverbatim"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_use_glob","","",N,[[["v"],["useglob"]]]],[5,"visit_use_group","","",N,[[["v"],["usegroup"]]]],[5,"visit_use_name","","",N,[[["v"],["usename"]]]],[5,"visit_use_path","","",N,[[["v"],["usepath"]]]],[5,"visit_use_rename","","",N,[[["v"],["userename"]]]],[5,"visit_use_tree","","",N,[[["v"],["usetree"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",308,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",308,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",308,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",308,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",308,[[["self"],["argselfref"]]]],[11,"visit_arm","","",308,[[["self"],["arm"]]]],[11,"visit_attr_style","","",308,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",308,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",308,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",308,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",308,[[["self"],["binop"]]]],[11,"visit_binding","","",308,[[["self"],["binding"]]]],[11,"visit_block","","",308,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",308,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",308,[[["self"],["constparam"]]]],[11,"visit_constraint","","",308,[[["self"],["constraint"]]]],[11,"visit_data","","",308,[[["self"],["data"]]]],[11,"visit_data_enum","","",308,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",308,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",308,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",308,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",308,[[["self"],["expr"]]]],[11,"visit_expr_array","","",308,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",308,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",308,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",308,[[["self"],["exprasync"]]]],[11,"visit_expr_binary","","",308,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",308,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",308,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",308,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",308,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",308,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",308,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",308,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",308,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",308,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",308,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",308,[[["self"],["exprif"]]]],[11,"visit_expr_in_place","","",308,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",308,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",308,[[["self"],["exprlet"]]]],[11,"visit_expr_lit","","",308,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",308,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",308,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",308,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",308,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",308,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",308,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",308,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",308,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",308,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",308,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",308,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",308,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block","","",308,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple","","",308,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",308,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",308,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",308,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",308,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",308,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",308,[[["self"],["expryield"]]]],[11,"visit_field","","",308,[[["self"],["field"]]]],[11,"visit_field_pat","","",308,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",308,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",308,[[["self"],["fields"]]]],[11,"visit_fields_named","","",308,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",308,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",308,[[["self"],["file"]]]],[11,"visit_fn_arg","","",308,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",308,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",308,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",308,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",308,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",308,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",308,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",308,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",308,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",308,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",308,[[["self"],["genericparam"]]]],[11,"visit_generics","","",308,[[["self"],["generics"]]]],[11,"visit_ident","","",308,[[["self"],["ident"]]]],[11,"visit_impl_item","","",308,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",308,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_existential","","",308,[[["self"],["implitemexistential"]]]],[11,"visit_impl_item_macro","","",308,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",308,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",308,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",308,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",308,[[["self"],["index"]]]],[11,"visit_item","","",308,[[["self"],["item"]]]],[11,"visit_item_const","","",308,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",308,[[["self"],["itemenum"]]]],[11,"visit_item_existential","","",308,[[["self"],["itemexistential"]]]],[11,"visit_item_extern_crate","","",308,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",308,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",308,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",308,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",308,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",308,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",308,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",308,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",308,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",308,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",308,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",308,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",308,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",308,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",308,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",308,[[["self"],["label"]]]],[11,"visit_lifetime","","",308,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",308,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",308,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",308,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",308,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",308,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",308,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",308,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",308,[[["self"],["litint"]]]],[11,"visit_lit_str","","",308,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",308,[[["self"],["litverbatim"]]]],[11,"visit_local","","",308,[[["self"],["local"]]]],[11,"visit_macro","","",308,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",308,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",308,[[["self"],["member"]]]],[11,"visit_meta","","",308,[[["self"],["meta"]]]],[11,"visit_meta_list","","",308,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",308,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",308,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",308,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",308,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",308,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",308,[[["self"],["pat"]]]],[11,"visit_pat_box","","",308,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",308,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",308,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",308,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",308,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",308,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",308,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",308,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",308,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",308,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",308,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",308,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",308,[[["self"],["patwild"]]]],[11,"visit_path","","",308,[[["self"],["path"]]]],[11,"visit_path_arguments","","",308,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",308,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",308,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",308,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",308,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",308,[[["self"],["qself"]]]],[11,"visit_range_limits","","",308,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",308,[[["self"],["returntype"]]]],[11,"visit_span","","",308,[[["self"],["span"]]]],[11,"visit_stmt","","",308,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",308,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",308,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",308,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",308,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",308,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",308,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",308,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",308,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",308,[[["self"],["type"]]]],[11,"visit_type_array","","",308,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",308,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",308,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",308,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",308,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",308,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",308,[[["self"],["typenever"]]]],[11,"visit_type_param","","",308,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",308,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",308,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",308,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",308,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",308,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",308,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",308,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",308,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",308,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",308,[[["self"],["unop"]]]],[11,"visit_use_glob","","",308,[[["self"],["useglob"]]]],[11,"visit_use_group","","",308,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",308,[[["self"],["usename"]]]],[11,"visit_use_path","","",308,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",308,[[["self"],["userename"]]]],[11,"visit_use_tree","","",308,[[["self"],["usetree"]]]],[11,"visit_variant","","",308,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",308,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",308,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",308,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",308,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",308,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",308,[[["self"],["wherepredicate"]]]],[0,"visit_mut","syn","Syntax tree traversal to mutate an exclusive borrow of a syntax tree in place.",N,N],[5,"visit_abi_mut","syn::visit_mut","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments_mut","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arg_captured_mut","","",N,[[["v"],["argcaptured"]]]],[5,"visit_arg_self_mut","","",N,[[["v"],["argself"]]]],[5,"visit_arg_self_ref_mut","","",N,[[["v"],["argselfref"]]]],[5,"visit_arm_mut","","",N,[[["v"],["arm"]]]],[5,"visit_attr_style_mut","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute_mut","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg_mut","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name_mut","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op_mut","","",N,[[["v"],["binop"]]]],[5,"visit_binding_mut","","",N,[[["v"],["binding"]]]],[5,"visit_block_mut","","",N,[[["v"],["block"]]]],[5,"visit_bound_lifetimes_mut","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param_mut","","",N,[[["v"],["constparam"]]]],[5,"visit_constraint_mut","","",N,[[["v"],["constraint"]]]],[5,"visit_data_mut","","",N,[[["v"],["data"]]]],[5,"visit_data_enum_mut","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct_mut","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union_mut","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input_mut","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr_mut","","",N,[[["v"],["expr"]]]],[5,"visit_expr_array_mut","","",N,[[["v"],["exprarray"]]]],[5,"visit_expr_assign_mut","","",N,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op_mut","","",N,[[["v"],["exprassignop"]]]],[5,"visit_expr_async_mut","","",N,[[["v"],["exprasync"]]]],[5,"visit_expr_binary_mut","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_block_mut","","",N,[[["v"],["exprblock"]]]],[5,"visit_expr_box_mut","","",N,[[["v"],["exprbox"]]]],[5,"visit_expr_break_mut","","",N,[[["v"],["exprbreak"]]]],[5,"visit_expr_call_mut","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast_mut","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_closure_mut","","",N,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue_mut","","",N,[[["v"],["exprcontinue"]]]],[5,"visit_expr_field_mut","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_for_loop_mut","","",N,[[["v"],["exprforloop"]]]],[5,"visit_expr_group_mut","","",N,[[["v"],["exprgroup"]]]],[5,"visit_expr_if_mut","","",N,[[["v"],["exprif"]]]],[5,"visit_expr_in_place_mut","","",N,[[["v"],["exprinplace"]]]],[5,"visit_expr_index_mut","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_let_mut","","",N,[[["v"],["exprlet"]]]],[5,"visit_expr_lit_mut","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_loop_mut","","",N,[[["v"],["exprloop"]]]],[5,"visit_expr_macro_mut","","",N,[[["v"],["exprmacro"]]]],[5,"visit_expr_match_mut","","",N,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call_mut","","",N,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren_mut","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path_mut","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_range_mut","","",N,[[["v"],["exprrange"]]]],[5,"visit_expr_reference_mut","","",N,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat_mut","","",N,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return_mut","","",N,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct_mut","","",N,[[["v"],["exprstruct"]]]],[5,"visit_expr_try_mut","","",N,[[["v"],["exprtry"]]]],[5,"visit_expr_try_block_mut","","",N,[[["v"],["exprtryblock"]]]],[5,"visit_expr_tuple_mut","","",N,[[["v"],["exprtuple"]]]],[5,"visit_expr_type_mut","","",N,[[["v"],["exprtype"]]]],[5,"visit_expr_unary_mut","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe_mut","","",N,[[["v"],["exprunsafe"]]]],[5,"visit_expr_verbatim_mut","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_expr_while_mut","","",N,[[["v"],["exprwhile"]]]],[5,"visit_expr_yield_mut","","",N,[[["v"],["expryield"]]]],[5,"visit_field_mut","","",N,[[["v"],["field"]]]],[5,"visit_field_pat_mut","","",N,[[["v"],["fieldpat"]]]],[5,"visit_field_value_mut","","",N,[[["v"],["fieldvalue"]]]],[5,"visit_fields_mut","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named_mut","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed_mut","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_file_mut","","",N,[[["v"],["file"]]]],[5,"visit_fn_arg_mut","","",N,[[["v"],["fnarg"]]]],[5,"visit_fn_decl_mut","","",N,[[["v"],["fndecl"]]]],[5,"visit_foreign_item_mut","","",N,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn_mut","","",N,[[["v"],["foreignitemfn"]]]],[5,"visit_foreign_item_macro_mut","","",N,[[["v"],["foreignitemmacro"]]]],[5,"visit_foreign_item_static_mut","","",N,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type_mut","","",N,[[["v"],["foreignitemtype"]]]],[5,"visit_foreign_item_verbatim_mut","","",N,[[["v"],["foreignitemverbatim"]]]],[5,"visit_generic_argument_mut","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_method_argument_mut","","",N,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param_mut","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics_mut","","",N,[[["v"],["generics"]]]],[5,"visit_ident_mut","","",N,[[["v"],["ident"]]]],[5,"visit_impl_item_mut","","",N,[[["v"],["implitem"]]]],[5,"visit_impl_item_const_mut","","",N,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_existential_mut","","",N,[[["v"],["implitemexistential"]]]],[5,"visit_impl_item_macro_mut","","",N,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method_mut","","",N,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type_mut","","",N,[[["v"],["implitemtype"]]]],[5,"visit_impl_item_verbatim_mut","","",N,[[["v"],["implitemverbatim"]]]],[5,"visit_index_mut","","",N,[[["v"],["index"]]]],[5,"visit_item_mut","","",N,[[["v"],["item"]]]],[5,"visit_item_const_mut","","",N,[[["v"],["itemconst"]]]],[5,"visit_item_enum_mut","","",N,[[["v"],["itemenum"]]]],[5,"visit_item_existential_mut","","",N,[[["v"],["itemexistential"]]]],[5,"visit_item_extern_crate_mut","","",N,[[["v"],["itemexterncrate"]]]],[5,"visit_item_fn_mut","","",N,[[["v"],["itemfn"]]]],[5,"visit_item_foreign_mod_mut","","",N,[[["v"],["itemforeignmod"]]]],[5,"visit_item_impl_mut","","",N,[[["v"],["itemimpl"]]]],[5,"visit_item_macro_mut","","",N,[[["v"],["itemmacro"]]]],[5,"visit_item_macro2_mut","","",N,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod_mut","","",N,[[["v"],["itemmod"]]]],[5,"visit_item_static_mut","","",N,[[["v"],["itemstatic"]]]],[5,"visit_item_struct_mut","","",N,[[["v"],["itemstruct"]]]],[5,"visit_item_trait_mut","","",N,[[["v"],["itemtrait"]]]],[5,"visit_item_trait_alias_mut","","",N,[[["v"],["itemtraitalias"]]]],[5,"visit_item_type_mut","","",N,[[["v"],["itemtype"]]]],[5,"visit_item_union_mut","","",N,[[["v"],["itemunion"]]]],[5,"visit_item_use_mut","","",N,[[["v"],["itemuse"]]]],[5,"visit_item_verbatim_mut","","",N,[[["v"],["itemverbatim"]]]],[5,"visit_label_mut","","",N,[[["v"],["label"]]]],[5,"visit_lifetime_mut","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def_mut","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit_mut","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool_mut","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte_mut","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str_mut","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char_mut","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float_mut","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int_mut","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str_mut","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim_mut","","",N,[[["v"],["litverbatim"]]]],[5,"visit_local_mut","","",N,[[["v"],["local"]]]],[5,"visit_macro_mut","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter_mut","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member_mut","","",N,[[["v"],["member"]]]],[5,"visit_meta_mut","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list_mut","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value_mut","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_method_sig_mut","","",N,[[["v"],["methodsig"]]]],[5,"visit_method_turbofish_mut","","",N,[[["v"],["methodturbofish"]]]],[5,"visit_nested_meta_mut","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments_mut","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat_mut","","",N,[[["v"],["pat"]]]],[5,"visit_pat_box_mut","","",N,[[["v"],["patbox"]]]],[5,"visit_pat_ident_mut","","",N,[[["v"],["patident"]]]],[5,"visit_pat_lit_mut","","",N,[[["v"],["patlit"]]]],[5,"visit_pat_macro_mut","","",N,[[["v"],["patmacro"]]]],[5,"visit_pat_path_mut","","",N,[[["v"],["patpath"]]]],[5,"visit_pat_range_mut","","",N,[[["v"],["patrange"]]]],[5,"visit_pat_ref_mut","","",N,[[["v"],["patref"]]]],[5,"visit_pat_slice_mut","","",N,[[["v"],["patslice"]]]],[5,"visit_pat_struct_mut","","",N,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple_mut","","",N,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct_mut","","",N,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_verbatim_mut","","",N,[[["v"],["patverbatim"]]]],[5,"visit_pat_wild_mut","","",N,[[["v"],["patwild"]]]],[5,"visit_path_mut","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments_mut","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment_mut","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq_mut","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime_mut","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type_mut","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself_mut","","",N,[[["v"],["qself"]]]],[5,"visit_range_limits_mut","","",N,[[["v"],["rangelimits"]]]],[5,"visit_return_type_mut","","",N,[[["v"],["returntype"]]]],[5,"visit_span_mut","","",N,[[["v"],["span"]]]],[5,"visit_stmt_mut","","",N,[[["v"],["stmt"]]]],[5,"visit_trait_bound_mut","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier_mut","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item_mut","","",N,[[["v"],["traititem"]]]],[5,"visit_trait_item_const_mut","","",N,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro_mut","","",N,[[["v"],["traititemmacro"]]]],[5,"visit_trait_item_method_mut","","",N,[[["v"],["traititemmethod"]]]],[5,"visit_trait_item_type_mut","","",N,[[["v"],["traititemtype"]]]],[5,"visit_trait_item_verbatim_mut","","",N,[[["v"],["traititemverbatim"]]]],[5,"visit_type_mut","","",N,[[["v"],["type"]]]],[5,"visit_type_array_mut","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn_mut","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group_mut","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait_mut","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer_mut","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro_mut","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never_mut","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param_mut","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound_mut","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren_mut","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path_mut","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr_mut","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference_mut","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice_mut","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object_mut","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple_mut","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim_mut","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op_mut","","",N,[[["v"],["unop"]]]],[5,"visit_use_glob_mut","","",N,[[["v"],["useglob"]]]],[5,"visit_use_group_mut","","",N,[[["v"],["usegroup"]]]],[5,"visit_use_name_mut","","",N,[[["v"],["usename"]]]],[5,"visit_use_path_mut","","",N,[[["v"],["usepath"]]]],[5,"visit_use_rename_mut","","",N,[[["v"],["userename"]]]],[5,"visit_use_tree_mut","","",N,[[["v"],["usetree"]]]],[5,"visit_variant_mut","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate_mut","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public_mut","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted_mut","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility_mut","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause_mut","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate_mut","","",N,[[["v"],["wherepredicate"]]]],[8,"VisitMut","","Syntax tree traversal to mutate an exclusive borrow of a syntax tree in place.",N,N],[11,"visit_abi_mut","","",309,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",309,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured_mut","","",309,[[["self"],["argcaptured"]]]],[11,"visit_arg_self_mut","","",309,[[["self"],["argself"]]]],[11,"visit_arg_self_ref_mut","","",309,[[["self"],["argselfref"]]]],[11,"visit_arm_mut","","",309,[[["self"],["arm"]]]],[11,"visit_attr_style_mut","","",309,[[["self"],["attrstyle"]]]],[11,"visit_attribute_mut","","",309,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg_mut","","",309,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name_mut","","",309,[[["self"],["barefnargname"]]]],[11,"visit_bin_op_mut","","",309,[[["self"],["binop"]]]],[11,"visit_binding_mut","","",309,[[["self"],["binding"]]]],[11,"visit_block_mut","","",309,[[["self"],["block"]]]],[11,"visit_bound_lifetimes_mut","","",309,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param_mut","","",309,[[["self"],["constparam"]]]],[11,"visit_constraint_mut","","",309,[[["self"],["constraint"]]]],[11,"visit_data_mut","","",309,[[["self"],["data"]]]],[11,"visit_data_enum_mut","","",309,[[["self"],["dataenum"]]]],[11,"visit_data_struct_mut","","",309,[[["self"],["datastruct"]]]],[11,"visit_data_union_mut","","",309,[[["self"],["dataunion"]]]],[11,"visit_derive_input_mut","","",309,[[["self"],["deriveinput"]]]],[11,"visit_expr_mut","","",309,[[["self"],["expr"]]]],[11,"visit_expr_array_mut","","",309,[[["self"],["exprarray"]]]],[11,"visit_expr_assign_mut","","",309,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op_mut","","",309,[[["self"],["exprassignop"]]]],[11,"visit_expr_async_mut","","",309,[[["self"],["exprasync"]]]],[11,"visit_expr_binary_mut","","",309,[[["self"],["exprbinary"]]]],[11,"visit_expr_block_mut","","",309,[[["self"],["exprblock"]]]],[11,"visit_expr_box_mut","","",309,[[["self"],["exprbox"]]]],[11,"visit_expr_break_mut","","",309,[[["self"],["exprbreak"]]]],[11,"visit_expr_call_mut","","",309,[[["self"],["exprcall"]]]],[11,"visit_expr_cast_mut","","",309,[[["self"],["exprcast"]]]],[11,"visit_expr_closure_mut","","",309,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue_mut","","",309,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field_mut","","",309,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop_mut","","",309,[[["self"],["exprforloop"]]]],[11,"visit_expr_group_mut","","",309,[[["self"],["exprgroup"]]]],[11,"visit_expr_if_mut","","",309,[[["self"],["exprif"]]]],[11,"visit_expr_in_place_mut","","",309,[[["self"],["exprinplace"]]]],[11,"visit_expr_index_mut","","",309,[[["self"],["exprindex"]]]],[11,"visit_expr_let_mut","","",309,[[["self"],["exprlet"]]]],[11,"visit_expr_lit_mut","","",309,[[["self"],["exprlit"]]]],[11,"visit_expr_loop_mut","","",309,[[["self"],["exprloop"]]]],[11,"visit_expr_macro_mut","","",309,[[["self"],["exprmacro"]]]],[11,"visit_expr_match_mut","","",309,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call_mut","","",309,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren_mut","","",309,[[["self"],["exprparen"]]]],[11,"visit_expr_path_mut","","",309,[[["self"],["exprpath"]]]],[11,"visit_expr_range_mut","","",309,[[["self"],["exprrange"]]]],[11,"visit_expr_reference_mut","","",309,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat_mut","","",309,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return_mut","","",309,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct_mut","","",309,[[["self"],["exprstruct"]]]],[11,"visit_expr_try_mut","","",309,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block_mut","","",309,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple_mut","","",309,[[["self"],["exprtuple"]]]],[11,"visit_expr_type_mut","","",309,[[["self"],["exprtype"]]]],[11,"visit_expr_unary_mut","","",309,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe_mut","","",309,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim_mut","","",309,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while_mut","","",309,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield_mut","","",309,[[["self"],["expryield"]]]],[11,"visit_field_mut","","",309,[[["self"],["field"]]]],[11,"visit_field_pat_mut","","",309,[[["self"],["fieldpat"]]]],[11,"visit_field_value_mut","","",309,[[["self"],["fieldvalue"]]]],[11,"visit_fields_mut","","",309,[[["self"],["fields"]]]],[11,"visit_fields_named_mut","","",309,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed_mut","","",309,[[["self"],["fieldsunnamed"]]]],[11,"visit_file_mut","","",309,[[["self"],["file"]]]],[11,"visit_fn_arg_mut","","",309,[[["self"],["fnarg"]]]],[11,"visit_fn_decl_mut","","",309,[[["self"],["fndecl"]]]],[11,"visit_foreign_item_mut","","",309,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn_mut","","",309,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro_mut","","",309,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static_mut","","",309,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type_mut","","",309,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim_mut","","",309,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument_mut","","",309,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument_mut","","",309,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param_mut","","",309,[[["self"],["genericparam"]]]],[11,"visit_generics_mut","","",309,[[["self"],["generics"]]]],[11,"visit_ident_mut","","",309,[[["self"],["ident"]]]],[11,"visit_impl_item_mut","","",309,[[["self"],["implitem"]]]],[11,"visit_impl_item_const_mut","","",309,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_existential_mut","","",309,[[["self"],["implitemexistential"]]]],[11,"visit_impl_item_macro_mut","","",309,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method_mut","","",309,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type_mut","","",309,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim_mut","","",309,[[["self"],["implitemverbatim"]]]],[11,"visit_index_mut","","",309,[[["self"],["index"]]]],[11,"visit_item_mut","","",309,[[["self"],["item"]]]],[11,"visit_item_const_mut","","",309,[[["self"],["itemconst"]]]],[11,"visit_item_enum_mut","","",309,[[["self"],["itemenum"]]]],[11,"visit_item_existential_mut","","",309,[[["self"],["itemexistential"]]]],[11,"visit_item_extern_crate_mut","","",309,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn_mut","","",309,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod_mut","","",309,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl_mut","","",309,[[["self"],["itemimpl"]]]],[11,"visit_item_macro_mut","","",309,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2_mut","","",309,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod_mut","","",309,[[["self"],["itemmod"]]]],[11,"visit_item_static_mut","","",309,[[["self"],["itemstatic"]]]],[11,"visit_item_struct_mut","","",309,[[["self"],["itemstruct"]]]],[11,"visit_item_trait_mut","","",309,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias_mut","","",309,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type_mut","","",309,[[["self"],["itemtype"]]]],[11,"visit_item_union_mut","","",309,[[["self"],["itemunion"]]]],[11,"visit_item_use_mut","","",309,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim_mut","","",309,[[["self"],["itemverbatim"]]]],[11,"visit_label_mut","","",309,[[["self"],["label"]]]],[11,"visit_lifetime_mut","","",309,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def_mut","","",309,[[["self"],["lifetimedef"]]]],[11,"visit_lit_mut","","",309,[[["self"],["lit"]]]],[11,"visit_lit_bool_mut","","",309,[[["self"],["litbool"]]]],[11,"visit_lit_byte_mut","","",309,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str_mut","","",309,[[["self"],["litbytestr"]]]],[11,"visit_lit_char_mut","","",309,[[["self"],["litchar"]]]],[11,"visit_lit_float_mut","","",309,[[["self"],["litfloat"]]]],[11,"visit_lit_int_mut","","",309,[[["self"],["litint"]]]],[11,"visit_lit_str_mut","","",309,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim_mut","","",309,[[["self"],["litverbatim"]]]],[11,"visit_local_mut","","",309,[[["self"],["local"]]]],[11,"visit_macro_mut","","",309,[[["self"],["macro"]]]],[11,"visit_macro_delimiter_mut","","",309,[[["self"],["macrodelimiter"]]]],[11,"visit_member_mut","","",309,[[["self"],["member"]]]],[11,"visit_meta_mut","","",309,[[["self"],["meta"]]]],[11,"visit_meta_list_mut","","",309,[[["self"],["metalist"]]]],[11,"visit_meta_name_value_mut","","",309,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig_mut","","",309,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish_mut","","",309,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta_mut","","",309,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments_mut","","",309,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat_mut","","",309,[[["self"],["pat"]]]],[11,"visit_pat_box_mut","","",309,[[["self"],["patbox"]]]],[11,"visit_pat_ident_mut","","",309,[[["self"],["patident"]]]],[11,"visit_pat_lit_mut","","",309,[[["self"],["patlit"]]]],[11,"visit_pat_macro_mut","","",309,[[["self"],["patmacro"]]]],[11,"visit_pat_path_mut","","",309,[[["self"],["patpath"]]]],[11,"visit_pat_range_mut","","",309,[[["self"],["patrange"]]]],[11,"visit_pat_ref_mut","","",309,[[["self"],["patref"]]]],[11,"visit_pat_slice_mut","","",309,[[["self"],["patslice"]]]],[11,"visit_pat_struct_mut","","",309,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple_mut","","",309,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct_mut","","",309,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim_mut","","",309,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild_mut","","",309,[[["self"],["patwild"]]]],[11,"visit_path_mut","","",309,[[["self"],["path"]]]],[11,"visit_path_arguments_mut","","",309,[[["self"],["patharguments"]]]],[11,"visit_path_segment_mut","","",309,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq_mut","","",309,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime_mut","","",309,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type_mut","","",309,[[["self"],["predicatetype"]]]],[11,"visit_qself_mut","","",309,[[["self"],["qself"]]]],[11,"visit_range_limits_mut","","",309,[[["self"],["rangelimits"]]]],[11,"visit_return_type_mut","","",309,[[["self"],["returntype"]]]],[11,"visit_span_mut","","",309,[[["self"],["span"]]]],[11,"visit_stmt_mut","","",309,[[["self"],["stmt"]]]],[11,"visit_trait_bound_mut","","",309,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier_mut","","",309,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item_mut","","",309,[[["self"],["traititem"]]]],[11,"visit_trait_item_const_mut","","",309,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro_mut","","",309,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method_mut","","",309,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type_mut","","",309,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim_mut","","",309,[[["self"],["traititemverbatim"]]]],[11,"visit_type_mut","","",309,[[["self"],["type"]]]],[11,"visit_type_array_mut","","",309,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn_mut","","",309,[[["self"],["typebarefn"]]]],[11,"visit_type_group_mut","","",309,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait_mut","","",309,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer_mut","","",309,[[["self"],["typeinfer"]]]],[11,"visit_type_macro_mut","","",309,[[["self"],["typemacro"]]]],[11,"visit_type_never_mut","","",309,[[["self"],["typenever"]]]],[11,"visit_type_param_mut","","",309,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound_mut","","",309,[[["self"],["typeparambound"]]]],[11,"visit_type_paren_mut","","",309,[[["self"],["typeparen"]]]],[11,"visit_type_path_mut","","",309,[[["self"],["typepath"]]]],[11,"visit_type_ptr_mut","","",309,[[["self"],["typeptr"]]]],[11,"visit_type_reference_mut","","",309,[[["self"],["typereference"]]]],[11,"visit_type_slice_mut","","",309,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object_mut","","",309,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple_mut","","",309,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim_mut","","",309,[[["self"],["typeverbatim"]]]],[11,"visit_un_op_mut","","",309,[[["self"],["unop"]]]],[11,"visit_use_glob_mut","","",309,[[["self"],["useglob"]]]],[11,"visit_use_group_mut","","",309,[[["self"],["usegroup"]]]],[11,"visit_use_name_mut","","",309,[[["self"],["usename"]]]],[11,"visit_use_path_mut","","",309,[[["self"],["usepath"]]]],[11,"visit_use_rename_mut","","",309,[[["self"],["userename"]]]],[11,"visit_use_tree_mut","","",309,[[["self"],["usetree"]]]],[11,"visit_variant_mut","","",309,[[["self"],["variant"]]]],[11,"visit_vis_crate_mut","","",309,[[["self"],["viscrate"]]]],[11,"visit_vis_public_mut","","",309,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted_mut","","",309,[[["self"],["visrestricted"]]]],[11,"visit_visibility_mut","","",309,[[["self"],["visibility"]]]],[11,"visit_where_clause_mut","","",309,[[["self"],["whereclause"]]]],[11,"visit_where_predicate_mut","","",309,[[["self"],["wherepredicate"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input tokens.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[6,"ParseStream","","Input to a Syn parser function.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[8,"Parse","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",310,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",311,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",311,[[["self"],["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",311,[[["self"],["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",311,[[["self"],["str"]],["result"]]],[11,"error","","Triggers an error at the current position of the parse stream.",312,[[["self"],["t"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",313,[[["self"]],["result"]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",313,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",313,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",313,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",313,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",313,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",313,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",313,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",313,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse stream.",313,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",313,[[["self"],["f"]],["result"]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",313,[[["self"]],["cursor"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",314,[[["span"],["t"]],["self"]]],[11,"span","","",314,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",314,[[["self"]],["tokenstream"]]],[6,"AttributeArgs","syn","Conventional argument type associated with an invocation of an attribute macro.",N,N],[14,"parenthesized","","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[11,"peek","","",315,[[["cursor"]],["bool"]]],[11,"display","","",315,[[],["str"]]],[11,"span","","",315,[[["self"]],["span"]]],[11,"into","","",315,[[["self"]],["u"]]],[11,"to_string","","",315,[[["self"]],["string"]]],[11,"to_owned","","",315,[[["self"]],["t"]]],[11,"clone_into","","",315,N],[11,"from","","",315,[[["t"]],["t"]]],[11,"try_from","","",315,[[["u"]],["result"]]],[11,"borrow","","",315,[[["self"]],["t"]]],[11,"get_type_id","","",315,[[["self"]],["typeid"]]],[11,"borrow_mut","","",315,[[["self"]],["t"]]],[11,"try_into","","",315,[[["self"]],["result"]]],[11,"not_found","","",315,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"not_found","","",11,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"span","","",316,[[["self"]],["span"]]],[11,"into","","",316,[[["self"]],["u"]]],[11,"to_owned","","",316,[[["self"]],["t"]]],[11,"clone_into","","",316,N],[11,"from","","",316,[[["t"]],["t"]]],[11,"try_from","","",316,[[["u"]],["result"]]],[11,"borrow","","",316,[[["self"]],["t"]]],[11,"get_type_id","","",316,[[["self"]],["typeid"]]],[11,"borrow_mut","","",316,[[["self"]],["t"]]],[11,"try_into","","",316,[[["self"]],["result"]]],[11,"not_found","","",316,[[["str"],["str"]],["e"]]],[11,"span","","",317,[[["self"]],["span"]]],[11,"into","","",317,[[["self"]],["u"]]],[11,"to_owned","","",317,[[["self"]],["t"]]],[11,"clone_into","","",317,N],[11,"from","","",317,[[["t"]],["t"]]],[11,"try_from","","",317,[[["u"]],["result"]]],[11,"borrow","","",317,[[["self"]],["t"]]],[11,"get_type_id","","",317,[[["self"]],["typeid"]]],[11,"borrow_mut","","",317,[[["self"]],["t"]]],[11,"try_into","","",317,[[["self"]],["result"]]],[11,"not_found","","",317,[[["str"],["str"]],["e"]]],[11,"span","","",295,[[["self"]],["span"]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,N],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"not_found","","",295,[[["str"],["str"]],["e"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"not_found","","",115,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"not_found","","",117,[[["str"],["str"]],["e"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"not_found","","",118,[[["str"],["str"]],["e"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"not_found","","",119,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"peek","","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_string","","",126,[[["self"]],["string"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"peek","","",298,[[["cursor"]],["bool"]]],[11,"display","","",298,[[],["str"]]],[11,"span","","",298,[[["self"]],["span"]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"to_owned","","",298,[[["self"]],["t"]]],[11,"clone_into","","",298,N],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"not_found","","",298,[[["str"],["str"]],["e"]]],[11,"peek","","",297,[[["cursor"]],["bool"]]],[11,"display","","",297,[[],["str"]]],[11,"span","","",297,[[["self"]],["span"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"to_owned","","",297,[[["self"]],["t"]]],[11,"clone_into","","",297,N],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"not_found","","",297,[[["str"],["str"]],["e"]]],[11,"peek","","",299,[[["cursor"]],["bool"]]],[11,"display","","",299,[[],["str"]]],[11,"span","","",299,[[["self"]],["span"]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"to_owned","","",299,[[["self"]],["t"]]],[11,"clone_into","","",299,N],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"not_found","","",299,[[["str"],["str"]],["e"]]],[11,"peek","","",301,[[["cursor"]],["bool"]]],[11,"display","","",301,[[],["str"]]],[11,"span","","",301,[[["self"]],["span"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,N],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"not_found","","",301,[[["str"],["str"]],["e"]]],[11,"peek","","",300,[[["cursor"]],["bool"]]],[11,"display","","",300,[[],["str"]]],[11,"span","","",300,[[["self"]],["span"]]],[11,"into","","",300,[[["self"]],["u"]]],[11,"to_owned","","",300,[[["self"]],["t"]]],[11,"clone_into","","",300,N],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"not_found","","",300,[[["str"],["str"]],["e"]]],[11,"peek","","",296,[[["cursor"]],["bool"]]],[11,"display","","",296,[[],["str"]]],[11,"span","","",296,[[["self"]],["span"]]],[11,"into","","",296,[[["self"]],["u"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,N],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"not_found","","",296,[[["str"],["str"]],["e"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"not_found","","",166,[[["str"],["str"]],["e"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"not_found","","",187,[[["str"],["str"]],["e"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"peek","syn::token","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,N],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"not_found","","",232,[[["str"],["str"]],["e"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"not_found","","",233,[[["str"],["str"]],["e"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"not_found","","",234,[[["str"],["str"]],["e"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"span","","",235,[[["self"]],["span"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"not_found","","",235,[[["str"],["str"]],["e"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"not_found","","",237,[[["str"],["str"]],["e"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"span","","",238,[[["self"]],["span"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"not_found","","",238,[[["str"],["str"]],["e"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"not_found","","",239,[[["str"],["str"]],["e"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"not_found","","",240,[[["str"],["str"]],["e"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"not_found","","",241,[[["str"],["str"]],["e"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,N],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"not_found","","",242,[[["str"],["str"]],["e"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"not_found","","",243,[[["str"],["str"]],["e"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,N],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"not_found","","",244,[[["str"],["str"]],["e"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"not_found","","",245,[[["str"],["str"]],["e"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"not_found","","",246,[[["str"],["str"]],["e"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,N],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"not_found","","",247,[[["str"],["str"]],["e"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"not_found","","",248,[[["str"],["str"]],["e"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"not_found","","",249,[[["str"],["str"]],["e"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,N],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"not_found","","",250,[[["str"],["str"]],["e"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"not_found","","",251,[[["str"],["str"]],["e"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"not_found","","",252,[[["str"],["str"]],["e"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"not_found","","",253,[[["str"],["str"]],["e"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"not_found","","",254,[[["str"],["str"]],["e"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,N],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"not_found","","",255,[[["str"],["str"]],["e"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"not_found","","",256,[[["str"],["str"]],["e"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,N],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"not_found","","",257,[[["str"],["str"]],["e"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"not_found","","",258,[[["str"],["str"]],["e"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,N],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"not_found","","",259,[[["str"],["str"]],["e"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"not_found","","",260,[[["str"],["str"]],["e"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"not_found","","",261,[[["str"],["str"]],["e"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"not_found","","",262,[[["str"],["str"]],["e"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"not_found","","",263,[[["str"],["str"]],["e"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,N],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"not_found","","",264,[[["str"],["str"]],["e"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,N],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"not_found","","",265,[[["str"],["str"]],["e"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"into","","",266,[[["self"]],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"not_found","","",266,[[["str"],["str"]],["e"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"not_found","","",267,[[["str"],["str"]],["e"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"not_found","","",268,[[["str"],["str"]],["e"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"not_found","","",269,[[["str"],["str"]],["e"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"not_found","","",270,[[["str"],["str"]],["e"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"not_found","","",271,[[["str"],["str"]],["e"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"not_found","","",272,[[["str"],["str"]],["e"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"not_found","","",273,[[["str"],["str"]],["e"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"not_found","","",274,[[["str"],["str"]],["e"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"not_found","","",275,[[["str"],["str"]],["e"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"into","","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"not_found","","",276,[[["str"],["str"]],["e"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"not_found","","",277,[[["str"],["str"]],["e"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"not_found","","",278,[[["str"],["str"]],["e"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"span","","",279,[[["self"]],["span"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,N],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"not_found","","",279,[[["str"],["str"]],["e"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"span","","",280,[[["self"]],["span"]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"not_found","","",280,[[["str"],["str"]],["e"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"span","","",281,[[["self"]],["span"]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,N],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"not_found","","",281,[[["str"],["str"]],["e"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"span","","",282,[[["self"]],["span"]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,N],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"not_found","","",282,[[["str"],["str"]],["e"]]],[11,"peek","","",283,[[["cursor"]],["bool"]]],[11,"display","","",283,[[],["str"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"into","","",283,[[["self"]],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,N],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"get_type_id","","",283,[[["self"]],["typeid"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"try_into","","",283,[[["self"]],["result"]]],[11,"not_found","","",283,[[["str"],["str"]],["e"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"into","","",284,[[["self"]],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,N],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"get_type_id","","",284,[[["self"]],["typeid"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"try_into","","",284,[[["self"]],["result"]]],[11,"not_found","","",284,[[["str"],["str"]],["e"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"into","","",285,[[["self"]],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,N],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"get_type_id","","",285,[[["self"]],["typeid"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"try_into","","",285,[[["self"]],["result"]]],[11,"not_found","","",285,[[["str"],["str"]],["e"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"into","","",286,[[["self"]],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,N],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"get_type_id","","",286,[[["self"]],["typeid"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"try_into","","",286,[[["self"]],["result"]]],[11,"not_found","","",286,[[["str"],["str"]],["e"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"into","","",287,[[["self"]],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,N],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"get_type_id","","",287,[[["self"]],["typeid"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"try_into","","",287,[[["self"]],["result"]]],[11,"not_found","","",287,[[["str"],["str"]],["e"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"into","","",288,[[["self"]],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,N],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"get_type_id","","",288,[[["self"]],["typeid"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"try_into","","",288,[[["self"]],["result"]]],[11,"not_found","","",288,[[["str"],["str"]],["e"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"into","","",289,[[["self"]],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,N],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"get_type_id","","",289,[[["self"]],["typeid"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"try_into","","",289,[[["self"]],["result"]]],[11,"not_found","","",289,[[["str"],["str"]],["e"]]],[11,"peek","","",290,[[["cursor"]],["bool"]]],[11,"display","","",290,[[],["str"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"into","","",290,[[["self"]],["u"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,N],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"get_type_id","","",290,[[["self"]],["typeid"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"try_into","","",290,[[["self"]],["result"]]],[11,"not_found","","",290,[[["str"],["str"]],["e"]]],[11,"peek","","",291,[[["cursor"]],["bool"]]],[11,"display","","",291,[[],["str"]]],[11,"into","","",291,[[["self"]],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,N],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"get_type_id","","",291,[[["self"]],["typeid"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"try_into","","",291,[[["self"]],["result"]]],[11,"not_found","","",291,[[["str"],["str"]],["e"]]],[11,"peek","","",292,[[["cursor"]],["bool"]]],[11,"display","","",292,[[],["str"]]],[11,"into","","",292,[[["self"]],["u"]]],[11,"to_owned","","",292,[[["self"]],["t"]]],[11,"clone_into","","",292,N],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"not_found","","",292,[[["str"],["str"]],["e"]]],[11,"peek","","",293,[[["cursor"]],["bool"]]],[11,"display","","",293,[[],["str"]]],[11,"into","","",293,[[["self"]],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,N],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"not_found","","",293,[[["str"],["str"]],["e"]]],[11,"peek","","",294,[[["cursor"]],["bool"]]],[11,"display","","",294,[[],["str"]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,N],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"not_found","","",294,[[["str"],["str"]],["e"]]],[11,"into","syn::buffer","",302,[[["self"]],["u"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"get_type_id","","",302,[[["self"]],["typeid"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"try_into","","",302,[[["self"]],["result"]]],[11,"not_found","","",302,[[["str"],["str"]],["e"]]],[11,"into","","",303,[[["self"]],["u"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,N],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"get_type_id","","",303,[[["self"]],["typeid"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"try_into","","",303,[[["self"]],["result"]]],[11,"not_found","","",303,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",306,[[["self"]],["span"]]],[11,"into","","",306,[[["self"]],["u"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,N],[11,"from","","",306,[[["t"]],["t"]]],[11,"into_iter","","",306,[[["self"]],["i"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"get_type_id","","",306,[[["self"]],["typeid"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"try_into","","",306,[[["self"]],["result"]]],[11,"not_found","","",306,[[["str"],["str"]],["e"]]],[11,"into","","",318,[[["self"]],["u"]]],[11,"from","","",318,[[["t"]],["t"]]],[11,"into_iter","","",318,[[["self"]],["i"]]],[11,"try_from","","",318,[[["u"]],["result"]]],[11,"borrow","","",318,[[["self"]],["t"]]],[11,"get_type_id","","",318,[[["self"]],["typeid"]]],[11,"borrow_mut","","",318,[[["self"]],["t"]]],[11,"try_into","","",318,[[["self"]],["result"]]],[11,"not_found","","",318,[[["str"],["str"]],["e"]]],[11,"into","","",319,[[["self"]],["u"]]],[11,"from","","",319,[[["t"]],["t"]]],[11,"into_iter","","",319,[[["self"]],["i"]]],[11,"try_from","","",319,[[["u"]],["result"]]],[11,"borrow","","",319,[[["self"]],["t"]]],[11,"get_type_id","","",319,[[["self"]],["typeid"]]],[11,"borrow_mut","","",319,[[["self"]],["t"]]],[11,"try_into","","",319,[[["self"]],["result"]]],[11,"not_found","","",319,[[["str"],["str"]],["e"]]],[11,"into","","",320,[[["self"]],["u"]]],[11,"from","","",320,[[["t"]],["t"]]],[11,"into_iter","","",320,[[["self"]],["i"]]],[11,"try_from","","",320,[[["u"]],["result"]]],[11,"borrow","","",320,[[["self"]],["t"]]],[11,"get_type_id","","",320,[[["self"]],["typeid"]]],[11,"borrow_mut","","",320,[[["self"]],["t"]]],[11,"try_into","","",320,[[["self"]],["result"]]],[11,"not_found","","",320,[[["str"],["str"]],["e"]]],[11,"into","","",321,[[["self"]],["u"]]],[11,"from","","",321,[[["t"]],["t"]]],[11,"into_iter","","",321,[[["self"]],["i"]]],[11,"try_from","","",321,[[["u"]],["result"]]],[11,"borrow","","",321,[[["self"]],["t"]]],[11,"get_type_id","","",321,[[["self"]],["typeid"]]],[11,"borrow_mut","","",321,[[["self"]],["t"]]],[11,"try_into","","",321,[[["self"]],["result"]]],[11,"not_found","","",321,[[["str"],["str"]],["e"]]],[11,"into","","",322,[[["self"]],["u"]]],[11,"from","","",322,[[["t"]],["t"]]],[11,"into_iter","","",322,[[["self"]],["i"]]],[11,"try_from","","",322,[[["u"]],["result"]]],[11,"borrow","","",322,[[["self"]],["t"]]],[11,"get_type_id","","",322,[[["self"]],["typeid"]]],[11,"borrow_mut","","",322,[[["self"]],["t"]]],[11,"try_into","","",322,[[["self"]],["result"]]],[11,"not_found","","",322,[[["str"],["str"]],["e"]]],[11,"into","","",323,[[["self"]],["u"]]],[11,"from","","",323,[[["t"]],["t"]]],[11,"into_iter","","",323,[[["self"]],["i"]]],[11,"try_from","","",323,[[["u"]],["result"]]],[11,"borrow","","",323,[[["self"]],["t"]]],[11,"get_type_id","","",323,[[["self"]],["typeid"]]],[11,"borrow_mut","","",323,[[["self"]],["t"]]],[11,"try_into","","",323,[[["self"]],["result"]]],[11,"not_found","","",323,[[["str"],["str"]],["e"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"into","","",305,[[["self"]],["u"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"get_type_id","","",305,[[["self"]],["typeid"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"try_into","","",305,[[["self"]],["result"]]],[11,"not_found","","",305,[[["str"],["str"]],["e"]]],[11,"into","syn::parse","",324,[[["self"]],["u"]]],[11,"from","","",324,[[["t"]],["t"]]],[11,"try_from","","",324,[[["u"]],["result"]]],[11,"borrow","","",324,[[["self"]],["t"]]],[11,"get_type_id","","",324,[[["self"]],["typeid"]]],[11,"borrow_mut","","",324,[[["self"]],["t"]]],[11,"try_into","","",324,[[["self"]],["result"]]],[11,"not_found","","",324,[[["str"],["str"]],["e"]]],[11,"into","","",314,[[["self"]],["u"]]],[11,"to_string","","",314,[[["self"]],["string"]]],[11,"to_owned","","",314,[[["self"]],["t"]]],[11,"clone_into","","",314,N],[11,"from","","",314,[[["t"]],["t"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"get_type_id","","",314,[[["self"]],["typeid"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"try_into","","",314,[[["self"]],["result"]]],[11,"not_found","","",314,[[["str"],["str"]],["e"]]],[11,"into","","",313,[[["self"]],["u"]]],[11,"to_string","","",313,[[["self"]],["string"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"get_type_id","","",313,[[["self"]],["typeid"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"try_into","","",313,[[["self"]],["result"]]],[11,"not_found","","",313,[[["str"],["str"]],["e"]]],[11,"into","","",312,[[["self"]],["u"]]],[11,"to_owned","","",312,[[["self"]],["t"]]],[11,"clone_into","","",312,N],[11,"from","","",312,[[["t"]],["t"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"get_type_id","","",312,[[["self"]],["typeid"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"try_into","","",312,[[["self"]],["result"]]],[11,"not_found","","",312,[[["str"],["str"]],["e"]]],[11,"clone","syn","",315,[[["self"]],["ident"]]],[11,"partial_cmp","","",315,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",315,[[["self"],["ident"]],["ordering"]]],[11,"fmt","","",315,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",315,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",315,[[["self"],["ident"]],["bool"]]],[11,"eq","","",315,[[["self"],["t"]],["bool"]]],[11,"hash","","",315,N],[11,"to_tokens","","",315,N],[11,"peek","","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"peek","","",296,[[["cursor"]],["bool"]]],[11,"display","","",296,[[],["str"]]],[11,"peek","","",297,[[["cursor"]],["bool"]]],[11,"display","","",297,[[],["str"]]],[11,"peek","","",298,[[["cursor"]],["bool"]]],[11,"display","","",298,[[],["str"]]],[11,"peek","","",299,[[["cursor"]],["bool"]]],[11,"display","","",299,[[],["str"]]],[11,"peek","","",300,[[["cursor"]],["bool"]]],[11,"display","","",300,[[],["str"]]],[11,"peek","","",301,[[["cursor"]],["bool"]]],[11,"display","","",301,[[],["str"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"peek","syn::token","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",293,[[["cursor"]],["bool"]]],[11,"display","","",293,[[],["str"]]],[11,"peek","","",291,[[["cursor"]],["bool"]]],[11,"display","","",291,[[],["str"]]],[11,"peek","","",292,[[["cursor"]],["bool"]]],[11,"display","","",292,[[],["str"]]],[11,"peek","","",294,[[["cursor"]],["bool"]]],[11,"display","","",294,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"peek","","",283,[[["cursor"]],["bool"]]],[11,"display","","",283,[[],["str"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"peek","","",290,[[["cursor"]],["bool"]]],[11,"display","","",290,[[],["str"]]],[11,"peek","syn","",315,[[["cursor"]],["bool"]]],[11,"display","","",315,[[],["str"]]],[11,"parse_any","","",315,[[["parsestream"]],["result"]]],[11,"parse","syn::token","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",196,[[["parsestream"]],["result"]]],[11,"parse","","",197,[[["parsestream"]],["result"]]],[11,"parse","","",198,[[["parsestream"]],["result"]]],[11,"parse","","",199,[[["parsestream"]],["result"]]],[11,"parse","","",200,[[["parsestream"]],["result"]]],[11,"parse","","",201,[[["parsestream"]],["result"]]],[11,"parse","","",202,[[["parsestream"]],["result"]]],[11,"parse","","",203,[[["parsestream"]],["result"]]],[11,"parse","","",204,[[["parsestream"]],["result"]]],[11,"parse","","",205,[[["parsestream"]],["result"]]],[11,"parse","","",206,[[["parsestream"]],["result"]]],[11,"parse","","",207,[[["parsestream"]],["result"]]],[11,"parse","","",208,[[["parsestream"]],["result"]]],[11,"parse","","",209,[[["parsestream"]],["result"]]],[11,"parse","","",210,[[["parsestream"]],["result"]]],[11,"parse","","",211,[[["parsestream"]],["result"]]],[11,"parse","","",212,[[["parsestream"]],["result"]]],[11,"parse","","",213,[[["parsestream"]],["result"]]],[11,"parse","","",214,[[["parsestream"]],["result"]]],[11,"parse","","",215,[[["parsestream"]],["result"]]],[11,"parse","","",216,[[["parsestream"]],["result"]]],[11,"parse","","",217,[[["parsestream"]],["result"]]],[11,"parse","","",218,[[["parsestream"]],["result"]]],[11,"parse","","",219,[[["parsestream"]],["result"]]],[11,"parse","","",220,[[["parsestream"]],["result"]]],[11,"parse","","",221,[[["parsestream"]],["result"]]],[11,"parse","","",222,[[["parsestream"]],["result"]]],[11,"parse","","",223,[[["parsestream"]],["result"]]],[11,"parse","","",224,[[["parsestream"]],["result"]]],[11,"parse","","",225,[[["parsestream"]],["result"]]],[11,"parse","","",226,[[["parsestream"]],["result"]]],[11,"parse","","",227,[[["parsestream"]],["result"]]],[11,"parse","","",228,[[["parsestream"]],["result"]]],[11,"parse","","",229,[[["parsestream"]],["result"]]],[11,"parse","","",230,[[["parsestream"]],["result"]]],[11,"parse","","",231,[[["parsestream"]],["result"]]],[11,"parse","","",232,[[["parsestream"]],["result"]]],[11,"parse","","",233,[[["parsestream"]],["result"]]],[11,"parse","","",234,[[["parsestream"]],["result"]]],[11,"parse","","",235,[[["parsestream"]],["result"]]],[11,"parse","","",236,[[["parsestream"]],["result"]]],[11,"parse","","",237,[[["parsestream"]],["result"]]],[11,"parse","","",238,[[["parsestream"]],["result"]]],[11,"parse","","",239,[[["parsestream"]],["result"]]],[11,"parse","","",240,[[["parsestream"]],["result"]]],[11,"parse","","",241,[[["parsestream"]],["result"]]],[11,"parse","","",242,[[["parsestream"]],["result"]]],[11,"parse","","",243,[[["parsestream"]],["result"]]],[11,"parse","","",244,[[["parsestream"]],["result"]]],[11,"parse","","",245,[[["parsestream"]],["result"]]],[11,"parse","","",246,[[["parsestream"]],["result"]]],[11,"parse","","",247,[[["parsestream"]],["result"]]],[11,"parse","","",248,[[["parsestream"]],["result"]]],[11,"parse","","",249,[[["parsestream"]],["result"]]],[11,"parse","","",250,[[["parsestream"]],["result"]]],[11,"parse","","",251,[[["parsestream"]],["result"]]],[11,"parse","","",252,[[["parsestream"]],["result"]]],[11,"parse","","",253,[[["parsestream"]],["result"]]],[11,"parse","","",254,[[["parsestream"]],["result"]]],[11,"parse","","",255,[[["parsestream"]],["result"]]],[11,"parse","","",256,[[["parsestream"]],["result"]]],[11,"parse","","",257,[[["parsestream"]],["result"]]],[11,"parse","","",258,[[["parsestream"]],["result"]]],[11,"parse","","",259,[[["parsestream"]],["result"]]],[11,"parse","","",260,[[["parsestream"]],["result"]]],[11,"parse","","",261,[[["parsestream"]],["result"]]],[11,"parse","","",262,[[["parsestream"]],["result"]]],[11,"parse","","",263,[[["parsestream"]],["result"]]],[11,"parse","","",264,[[["parsestream"]],["result"]]],[11,"parse","","",265,[[["parsestream"]],["result"]]],[11,"parse","","",266,[[["parsestream"]],["result"]]],[11,"parse","","",267,[[["parsestream"]],["result"]]],[11,"parse","","",268,[[["parsestream"]],["result"]]],[11,"parse","","",269,[[["parsestream"]],["result"]]],[11,"parse","","",270,[[["parsestream"]],["result"]]],[11,"parse","","",271,[[["parsestream"]],["result"]]],[11,"parse","","",272,[[["parsestream"]],["result"]]],[11,"parse","","",273,[[["parsestream"]],["result"]]],[11,"parse","","",274,[[["parsestream"]],["result"]]],[11,"parse","","",275,[[["parsestream"]],["result"]]],[11,"parse","","",276,[[["parsestream"]],["result"]]],[11,"parse","","",277,[[["parsestream"]],["result"]]],[11,"parse","","",278,[[["parsestream"]],["result"]]],[11,"parse","","",279,[[["parsestream"]],["result"]]],[11,"parse","","",280,[[["parsestream"]],["result"]]],[11,"parse","","",281,[[["parsestream"]],["result"]]],[11,"parse","","",282,[[["parsestream"]],["result"]]],[11,"parse","","",283,[[["parsestream"]],["result"]]],[11,"parse","","",284,[[["parsestream"]],["result"]]],[11,"parse","","",285,[[["parsestream"]],["result"]]],[11,"parse","","",286,[[["parsestream"]],["result"]]],[11,"parse","","",287,[[["parsestream"]],["result"]]],[11,"parse","","",288,[[["parsestream"]],["result"]]],[11,"parse","","",289,[[["parsestream"]],["result"]]],[11,"parse","","",290,[[["parsestream"]],["result"]]],[11,"parse","syn","",315,[[["parsestream"]],["result"]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"parse","","",55,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",167,[[["parsestream"]],["result"]]],[11,"parse","","",35,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result",["arm"]]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"parse","","",169,[[["parsestream"]],["result"]]],[11,"parse","","",74,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",79,[[["parsestream"]],["result"]]],[11,"parse","","",171,[[["parsestream"]],["result"]]],[11,"parse","","",78,[[["parsestream"]],["result"]]],[11,"parse","","",170,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"parse","","",103,[[["parsestream"]],["result"]]],[11,"parse","","",104,[[["parsestream"]],["result"]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"parse","","",96,[[["parsestream"]],["result"]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"parse","","",105,[[["parsestream"]],["result"]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"parse","","",86,[[["parsestream"]],["result"]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"parse","","",98,[[["parsestream"]],["result"]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"parse","","",97,[[["parsestream"]],["result"]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"parse","","",108,[[["parsestream"]],["result"]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"parse","","",94,[[["parsestream"]],["result"]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"parse","","",125,[[["parsestream"]],["result"]]],[11,"parse","","",126,[[["parsestream"]],["result"]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"parse","","",296,[[["parsestream"]],["result"]]],[11,"parse","","",297,[[["parsestream"]],["result"]]],[11,"parse","","",298,[[["parsestream"]],["result"]]],[11,"parse","","",299,[[["parsestream"]],["result"]]],[11,"parse","","",300,[[["parsestream"]],["result"]]],[11,"parse","","",301,[[["parsestream"]],["result"]]],[11,"parse","","",127,[[["parsestream"]],["result"]]],[11,"parse","","",129,[[["parsestream"]],["result"]]],[11,"parse","","",133,[[["parsestream"]],["result"]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"parse","","",186,[[["parsestream"]],["result"]]],[11,"parse","","",189,[[["parsestream"]],["result"]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"parse","","",136,[[["parsestream"]],["result"]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"parse","","",137,[[["parsestream"]],["result"]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"parse","","",140,[[["parsestream"]],["result"]]],[11,"parse","","",149,[[["parsestream"]],["result"]]],[11,"parse","","",141,[[["parsestream"]],["result"]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",148,[[["parsestream"]],["result"]]],[11,"parse","","",139,[[["parsestream"]],["result"]]],[11,"parse","","",138,[[["parsestream"]],["result"]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"parse","","",135,[[["parsestream"]],["result"]]],[11,"parse","","",187,[[["parsestream"]],["result"]]],[11,"parse","","",134,[[["parsestream"]],["result"]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"parse","","",154,[[["parsestream"]],["result"]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"parse","","",152,[[["parsestream"]],["result"]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"next","syn::punctuated","",318,[[["self"]],["option"]]],[11,"next","","",319,[[["self"]],["option"]]],[11,"next","","",320,[[["self"]],["option"]]],[11,"next","","",321,[[["self"]],["option"]]],[11,"next","","",322,[[["self"]],["option"]]],[11,"next","","",323,[[["self"]],["option"]]],[11,"len","","",318,[[["self"]],["usize"]]],[11,"len","","",319,[[["self"]],["usize"]]],[11,"len","","",320,[[["self"]],["usize"]]],[11,"len","","",321,[[["self"]],["usize"]]],[11,"len","","",322,[[["self"]],["usize"]]],[11,"len","","",323,[[["self"]],["usize"]]],[11,"partial_cmp","syn","",126,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"default","syn::token","",192,[[],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"default","","",235,[[],["self"]]],[11,"default","","",236,[[],["self"]]],[11,"default","","",237,[[],["self"]]],[11,"default","","",238,[[],["self"]]],[11,"default","","",239,[[],["self"]]],[11,"default","","",240,[[],["self"]]],[11,"default","","",241,[[],["self"]]],[11,"default","","",242,[[],["self"]]],[11,"default","","",243,[[],["self"]]],[11,"default","","",244,[[],["self"]]],[11,"default","","",245,[[],["self"]]],[11,"default","","",246,[[],["self"]]],[11,"default","","",247,[[],["self"]]],[11,"default","","",248,[[],["self"]]],[11,"default","","",249,[[],["self"]]],[11,"default","","",250,[[],["self"]]],[11,"default","","",251,[[],["self"]]],[11,"default","","",252,[[],["self"]]],[11,"default","","",253,[[],["self"]]],[11,"default","","",254,[[],["self"]]],[11,"default","","",255,[[],["self"]]],[11,"default","","",256,[[],["self"]]],[11,"default","","",257,[[],["self"]]],[11,"default","","",258,[[],["self"]]],[11,"default","","",259,[[],["self"]]],[11,"default","","",260,[[],["self"]]],[11,"default","","",261,[[],["self"]]],[11,"default","","",262,[[],["self"]]],[11,"default","","",263,[[],["self"]]],[11,"default","","",264,[[],["self"]]],[11,"default","","",265,[[],["self"]]],[11,"default","","",266,[[],["self"]]],[11,"default","","",267,[[],["self"]]],[11,"default","","",268,[[],["self"]]],[11,"default","","",269,[[],["self"]]],[11,"default","","",270,[[],["self"]]],[11,"default","","",271,[[],["self"]]],[11,"default","","",272,[[],["self"]]],[11,"default","","",273,[[],["self"]]],[11,"default","","",274,[[],["self"]]],[11,"default","","",275,[[],["self"]]],[11,"default","","",276,[[],["self"]]],[11,"default","","",277,[[],["self"]]],[11,"default","","",278,[[],["self"]]],[11,"default","","",279,[[],["self"]]],[11,"default","","",280,[[],["self"]]],[11,"default","","",281,[[],["self"]]],[11,"default","","",282,[[],["self"]]],[11,"default","","",283,[[],["self"]]],[11,"default","","",284,[[],["self"]]],[11,"default","","",285,[[],["self"]]],[11,"default","","",286,[[],["self"]]],[11,"default","","",287,[[],["self"]]],[11,"default","","",288,[[],["self"]]],[11,"default","","",289,[[],["self"]]],[11,"default","","",290,[[],["self"]]],[11,"default","","",291,[[],["self"]]],[11,"default","","",292,[[],["self"]]],[11,"default","","",293,[[],["self"]]],[11,"default","","",294,[[],["self"]]],[11,"default","syn","",73,[[],["generics"]]],[11,"default","","",71,[[],["boundlifetimes"]]],[11,"default","","",191,[[],["self"]]],[11,"default","syn::punctuated","",306,[[],["self"]]],[11,"cmp","syn","",126,[[["self"],["lifetime"]],["ordering"]]],[11,"eq","syn::token","",192,[[["self"],["underscore"]],["bool"]]],[11,"eq","","",193,[[["self"],["abstract"]],["bool"]]],[11,"eq","","",194,[[["self"],["as"]],["bool"]]],[11,"eq","","",195,[[["self"],["async"]],["bool"]]],[11,"eq","","",196,[[["self"],["auto"]],["bool"]]],[11,"eq","","",197,[[["self"],["become"]],["bool"]]],[11,"eq","","",198,[[["self"],["box"]],["bool"]]],[11,"eq","","",199,[[["self"],["break"]],["bool"]]],[11,"eq","","",200,[[["self"],["const"]],["bool"]]],[11,"eq","","",201,[[["self"],["continue"]],["bool"]]],[11,"eq","","",202,[[["self"],["crate"]],["bool"]]],[11,"eq","","",203,[[["self"],["default"]],["bool"]]],[11,"eq","","",204,[[["self"],["do"]],["bool"]]],[11,"eq","","",205,[[["self"],["dyn"]],["bool"]]],[11,"eq","","",206,[[["self"],["else"]],["bool"]]],[11,"eq","","",207,[[["self"],["enum"]],["bool"]]],[11,"eq","","",208,[[["self"],["existential"]],["bool"]]],[11,"eq","","",209,[[["self"],["extern"]],["bool"]]],[11,"eq","","",210,[[["self"],["final"]],["bool"]]],[11,"eq","","",211,[[["self"],["fn"]],["bool"]]],[11,"eq","","",212,[[["self"],["for"]],["bool"]]],[11,"eq","","",213,[[["self"],["if"]],["bool"]]],[11,"eq","","",214,[[["self"],["impl"]],["bool"]]],[11,"eq","","",215,[[["self"],["in"]],["bool"]]],[11,"eq","","",216,[[["self"],["let"]],["bool"]]],[11,"eq","","",217,[[["self"],["loop"]],["bool"]]],[11,"eq","","",218,[[["self"],["macro"]],["bool"]]],[11,"eq","","",219,[[["self"],["match"]],["bool"]]],[11,"eq","","",220,[[["self"],["mod"]],["bool"]]],[11,"eq","","",221,[[["self"],["move"]],["bool"]]],[11,"eq","","",222,[[["self"],["mut"]],["bool"]]],[11,"eq","","",223,[[["self"],["override"]],["bool"]]],[11,"eq","","",224,[[["self"],["priv"]],["bool"]]],[11,"eq","","",225,[[["self"],["pub"]],["bool"]]],[11,"eq","","",226,[[["self"],["ref"]],["bool"]]],[11,"eq","","",227,[[["self"],["return"]],["bool"]]],[11,"eq","","",228,[[["self"],["selftype"]],["bool"]]],[11,"eq","","",229,[[["self"],["selfvalue"]],["bool"]]],[11,"eq","","",230,[[["self"],["static"]],["bool"]]],[11,"eq","","",231,[[["self"],["struct"]],["bool"]]],[11,"eq","","",232,[[["self"],["super"]],["bool"]]],[11,"eq","","",233,[[["self"],["trait"]],["bool"]]],[11,"eq","","",234,[[["self"],["try"]],["bool"]]],[11,"eq","","",235,[[["self"],["type"]],["bool"]]],[11,"eq","","",236,[[["self"],["typeof"]],["bool"]]],[11,"eq","","",237,[[["self"],["union"]],["bool"]]],[11,"eq","","",238,[[["self"],["unsafe"]],["bool"]]],[11,"eq","","",239,[[["self"],["unsized"]],["bool"]]],[11,"eq","","",240,[[["self"],["use"]],["bool"]]],[11,"eq","","",241,[[["self"],["virtual"]],["bool"]]],[11,"eq","","",242,[[["self"],["where"]],["bool"]]],[11,"eq","","",243,[[["self"],["while"]],["bool"]]],[11,"eq","","",244,[[["self"],["yield"]],["bool"]]],[11,"eq","","",245,[[["self"],["add"]],["bool"]]],[11,"eq","","",246,[[["self"],["addeq"]],["bool"]]],[11,"eq","","",247,[[["self"],["and"]],["bool"]]],[11,"eq","","",248,[[["self"],["andand"]],["bool"]]],[11,"eq","","",249,[[["self"],["andeq"]],["bool"]]],[11,"eq","","",250,[[["self"],["at"]],["bool"]]],[11,"eq","","",251,[[["self"],["bang"]],["bool"]]],[11,"eq","","",252,[[["self"],["caret"]],["bool"]]],[11,"eq","","",253,[[["self"],["careteq"]],["bool"]]],[11,"eq","","",254,[[["self"],["colon"]],["bool"]]],[11,"eq","","",255,[[["self"],["colon2"]],["bool"]]],[11,"eq","","",256,[[["self"],["comma"]],["bool"]]],[11,"eq","","",257,[[["self"],["div"]],["bool"]]],[11,"eq","","",258,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",259,[[["self"],["dollar"]],["bool"]]],[11,"eq","","",260,[[["self"],["dot"]],["bool"]]],[11,"eq","","",261,[[["self"],["dot2"]],["bool"]]],[11,"eq","","",262,[[["self"],["dot3"]],["bool"]]],[11,"eq","","",263,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","","",264,[[["self"],["eq"]],["bool"]]],[11,"eq","","",265,[[["self"],["eqeq"]],["bool"]]],[11,"eq","","",266,[[["self"],["ge"]],["bool"]]],[11,"eq","","",267,[[["self"],["gt"]],["bool"]]],[11,"eq","","",268,[[["self"],["le"]],["bool"]]],[11,"eq","","",269,[[["self"],["lt"]],["bool"]]],[11,"eq","","",270,[[["self"],["muleq"]],["bool"]]],[11,"eq","","",271,[[["self"],["ne"]],["bool"]]],[11,"eq","","",272,[[["self"],["or"]],["bool"]]],[11,"eq","","",273,[[["self"],["oreq"]],["bool"]]],[11,"eq","","",274,[[["self"],["oror"]],["bool"]]],[11,"eq","","",275,[[["self"],["pound"]],["bool"]]],[11,"eq","","",276,[[["self"],["question"]],["bool"]]],[11,"eq","","",277,[[["self"],["rarrow"]],["bool"]]],[11,"eq","","",278,[[["self"],["larrow"]],["bool"]]],[11,"eq","","",279,[[["self"],["rem"]],["bool"]]],[11,"eq","","",280,[[["self"],["remeq"]],["bool"]]],[11,"eq","","",281,[[["self"],["fatarrow"]],["bool"]]],[11,"eq","","",282,[[["self"],["semi"]],["bool"]]],[11,"eq","","",283,[[["self"],["shl"]],["bool"]]],[11,"eq","","",284,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",285,[[["self"],["shr"]],["bool"]]],[11,"eq","","",286,[[["self"],["shreq"]],["bool"]]],[11,"eq","","",287,[[["self"],["star"]],["bool"]]],[11,"eq","","",288,[[["self"],["sub"]],["bool"]]],[11,"eq","","",289,[[["self"],["subeq"]],["bool"]]],[11,"eq","","",290,[[["self"],["tilde"]],["bool"]]],[11,"eq","","",291,[[["self"],["brace"]],["bool"]]],[11,"eq","","",292,[[["self"],["bracket"]],["bool"]]],[11,"eq","","",293,[[["self"],["paren"]],["bool"]]],[11,"eq","","",294,[[["self"],["group"]],["bool"]]],[11,"eq","syn","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",158,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",158,[[["self"],["attrstyle"]],["bool"]]],[11,"eq","","",159,[[["self"],["meta"]],["bool"]]],[11,"ne","","",159,[[["self"],["meta"]],["bool"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"eq","","",160,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",160,[[["self"],["nestedmeta"]],["bool"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"eq","","",161,[[["self"],["fields"]],["bool"]]],[11,"ne","","",161,[[["self"],["fields"]],["bool"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"eq","","",162,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",162,[[["self"],["visibility"]],["bool"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"eq","","",163,[[["self"],["expr"]],["bool"]]],[11,"ne","","",163,[[["self"],["expr"]],["bool"]]],[11,"eq","","",16,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprbox"]],["bool"]]],[11,"eq","","",26,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",26,[[["self"],["exprinplace"]],["bool"]]],[11,"eq","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"eq","","",18,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprcall"]],["bool"]]],[11,"eq","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"eq","","",43,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",43,[[["self"],["exprtuple"]],["bool"]]],[11,"eq","","",14,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprbinary"]],["bool"]]],[11,"eq","","",45,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",45,[[["self"],["exprunary"]],["bool"]]],[11,"eq","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"eq","","",19,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",19,[[["self"],["exprcast"]],["bool"]]],[11,"eq","","",44,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",44,[[["self"],["exprtype"]],["bool"]]],[11,"eq","","",28,[[["self"],["exprlet"]],["bool"]]],[11,"ne","","",28,[[["self"],["exprlet"]],["bool"]]],[11,"eq","","",25,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprif"]],["bool"]]],[11,"eq","","",48,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",48,[[["self"],["exprwhile"]],["bool"]]],[11,"eq","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"eq","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"eq","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"eq","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",46,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",46,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","","",15,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprblock"]],["bool"]]],[11,"eq","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"eq","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"eq","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"eq","","",27,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",27,[[["self"],["exprindex"]],["bool"]]],[11,"eq","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"eq","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"eq","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"eq","","",17,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"eq","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"eq","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"eq","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"eq","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"eq","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"eq","","",13,[[["self"],["exprasync"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprasync"]],["bool"]]],[11,"eq","","",42,[[["self"],["exprtryblock"]],["bool"]]],[11,"ne","","",42,[[["self"],["exprtryblock"]],["bool"]]],[11,"eq","","",49,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",49,[[["self"],["expryield"]],["bool"]]],[11,"eq","","",47,[[["self"],["self"]],["bool"]]],[11,"eq","","",164,[[["self"],["member"]],["bool"]]],[11,"ne","","",164,[[["self"],["member"]],["bool"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"eq","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"eq","","",165,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",165,[[["self"],["genericmethodargument"]],["bool"]]],[11,"eq","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"eq","","",55,[[["self"],["label"]],["bool"]]],[11,"ne","","",55,[[["self"],["label"]],["bool"]]],[11,"eq","","",52,[[["self"],["block"]],["bool"]]],[11,"ne","","",52,[[["self"],["block"]],["bool"]]],[11,"eq","","",168,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",168,[[["self"],["stmt"]],["bool"]]],[11,"eq","","",56,[[["self"],["local"]],["bool"]]],[11,"ne","","",56,[[["self"],["local"]],["bool"]]],[11,"eq","","",166,[[["self"],["pat"]],["bool"]]],[11,"ne","","",166,[[["self"],["pat"]],["bool"]]],[11,"eq","","",70,[[["self"],["patwild"]],["bool"]]],[11,"ne","","",70,[[["self"],["patwild"]],["bool"]]],[11,"eq","","",59,[[["self"],["patident"]],["bool"]]],[11,"ne","","",59,[[["self"],["patident"]],["bool"]]],[11,"eq","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"eq","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"eq","","",62,[[["self"],["patpath"]],["bool"]]],[11,"ne","","",62,[[["self"],["patpath"]],["bool"]]],[11,"eq","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"eq","","",58,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",58,[[["self"],["patbox"]],["bool"]]],[11,"eq","","",64,[[["self"],["patref"]],["bool"]]],[11,"ne","","",64,[[["self"],["patref"]],["bool"]]],[11,"eq","","",60,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",60,[[["self"],["patlit"]],["bool"]]],[11,"eq","","",63,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",63,[[["self"],["patrange"]],["bool"]]],[11,"eq","","",65,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",65,[[["self"],["patslice"]],["bool"]]],[11,"eq","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"ne","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"eq","","",51,[[["self"],["arm"]],["bool"]]],[11,"ne","","",51,[[["self"],["arm"]],["bool"]]],[11,"eq","","",167,[[["self"],["rangelimits"]],["bool"]]],[11,"ne","","",167,[[["self"],["rangelimits"]],["bool"]]],[11,"eq","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"eq","","",73,[[["self"],["generics"]],["bool"]]],[11,"ne","","",73,[[["self"],["generics"]],["bool"]]],[11,"eq","","",169,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",169,[[["self"],["genericparam"]],["bool"]]],[11,"eq","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"eq","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"eq","","",72,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["constparam"]],["bool"]]],[11,"eq","","",316,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",316,[[["self"],["implgenerics"]],["bool"]]],[11,"eq","","",295,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",295,[[["self"],["typegenerics"]],["bool"]]],[11,"eq","","",317,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",317,[[["self"],["turbofish"]],["bool"]]],[11,"eq","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"eq","","",171,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",171,[[["self"],["typeparambound"]],["bool"]]],[11,"eq","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"eq","","",170,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",170,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"eq","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"eq","","",172,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",172,[[["self"],["wherepredicate"]],["bool"]]],[11,"eq","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"eq","","",176,[[["self"],["item"]],["bool"]]],[11,"ne","","",176,[[["self"],["item"]],["bool"]]],[11,"eq","","",99,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",99,[[["self"],["itemexterncrate"]],["bool"]]],[11,"eq","","",112,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",112,[[["self"],["itemuse"]],["bool"]]],[11,"eq","","",106,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",106,[[["self"],["itemstatic"]],["bool"]]],[11,"eq","","",96,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",96,[[["self"],["itemconst"]],["bool"]]],[11,"eq","","",100,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",100,[[["self"],["itemfn"]],["bool"]]],[11,"eq","","",105,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",105,[[["self"],["itemmod"]],["bool"]]],[11,"eq","","",101,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",101,[[["self"],["itemforeignmod"]],["bool"]]],[11,"eq","","",110,[[["self"],["itemtype"]],["bool"]]],[11,"ne","","",110,[[["self"],["itemtype"]],["bool"]]],[11,"eq","","",98,[[["self"],["itemexistential"]],["bool"]]],[11,"ne","","",98,[[["self"],["itemexistential"]],["bool"]]],[11,"eq","","",107,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",107,[[["self"],["itemstruct"]],["bool"]]],[11,"eq","","",97,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",97,[[["self"],["itemenum"]],["bool"]]],[11,"eq","","",111,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",111,[[["self"],["itemunion"]],["bool"]]],[11,"eq","","",108,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",108,[[["self"],["itemtrait"]],["bool"]]],[11,"eq","","",109,[[["self"],["itemtraitalias"]],["bool"]]],[11,"ne","","",109,[[["self"],["itemtraitalias"]],["bool"]]],[11,"eq","","",102,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",102,[[["self"],["itemimpl"]],["bool"]]],[11,"eq","","",103,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",103,[[["self"],["itemmacro"]],["bool"]]],[11,"eq","","",104,[[["self"],["self"]],["bool"]]],[11,"eq","","",113,[[["self"],["self"]],["bool"]]],[11,"eq","","",178,[[["self"],["usetree"]],["bool"]]],[11,"ne","","",178,[[["self"],["usetree"]],["bool"]]],[11,"eq","","",123,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",123,[[["self"],["usepath"]],["bool"]]],[11,"eq","","",122,[[["self"],["usename"]],["bool"]]],[11,"ne","","",122,[[["self"],["usename"]],["bool"]]],[11,"eq","","",124,[[["self"],["userename"]],["bool"]]],[11,"ne","","",124,[[["self"],["userename"]],["bool"]]],[11,"eq","","",120,[[["self"],["useglob"]],["bool"]]],[11,"ne","","",120,[[["self"],["useglob"]],["bool"]]],[11,"eq","","",121,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",121,[[["self"],["usegroup"]],["bool"]]],[11,"eq","","",174,[[["self"],["foreignitem"]],["bool"]]],[11,"ne","","",174,[[["self"],["foreignitem"]],["bool"]]],[11,"eq","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"eq","","",87,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",87,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"eq","","",88,[[["self"],["foreignitemtype"]],["bool"]]],[11,"ne","","",88,[[["self"],["foreignitemtype"]],["bool"]]],[11,"eq","","",86,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"ne","","",86,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"eq","","",89,[[["self"],["self"]],["bool"]]],[11,"eq","","",177,[[["self"],["traititem"]],["bool"]]],[11,"ne","","",177,[[["self"],["traititem"]],["bool"]]],[11,"eq","","",115,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",115,[[["self"],["traititemconst"]],["bool"]]],[11,"eq","","",117,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",117,[[["self"],["traititemmethod"]],["bool"]]],[11,"eq","","",118,[[["self"],["traititemtype"]],["bool"]]],[11,"ne","","",118,[[["self"],["traititemtype"]],["bool"]]],[11,"eq","","",116,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",116,[[["self"],["traititemmacro"]],["bool"]]],[11,"eq","","",119,[[["self"],["self"]],["bool"]]],[11,"eq","","",175,[[["self"],["implitem"]],["bool"]]],[11,"ne","","",175,[[["self"],["implitem"]],["bool"]]],[11,"eq","","",90,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",90,[[["self"],["implitemconst"]],["bool"]]],[11,"eq","","",93,[[["self"],["implitemmethod"]],["bool"]]],[11,"ne","","",93,[[["self"],["implitemmethod"]],["bool"]]],[11,"eq","","",94,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",94,[[["self"],["implitemtype"]],["bool"]]],[11,"eq","","",91,[[["self"],["implitemexistential"]],["bool"]]],[11,"ne","","",91,[[["self"],["implitemexistential"]],["bool"]]],[11,"eq","","",92,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",92,[[["self"],["implitemmacro"]],["bool"]]],[11,"eq","","",95,[[["self"],["self"]],["bool"]]],[11,"eq","","",114,[[["self"],["methodsig"]],["bool"]]],[11,"ne","","",114,[[["self"],["methodsig"]],["bool"]]],[11,"eq","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"ne","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"eq","","",173,[[["self"],["fnarg"]],["bool"]]],[11,"ne","","",173,[[["self"],["fnarg"]],["bool"]]],[11,"eq","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"ne","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"eq","","",82,[[["self"],["argself"]],["bool"]]],[11,"ne","","",82,[[["self"],["argself"]],["bool"]]],[11,"eq","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"ne","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"eq","","",125,[[["self"],["file"]],["bool"]]],[11,"ne","","",125,[[["self"],["file"]],["bool"]]],[11,"eq","","",126,[[["self"],["lifetime"]],["bool"]]],[11,"eq","","",181,[[["self"],["lit"]],["bool"]]],[11,"ne","","",181,[[["self"],["lit"]],["bool"]]],[11,"eq","","",296,[[["self"],["self"]],["bool"]]],[11,"eq","","",297,[[["self"],["self"]],["bool"]]],[11,"eq","","",298,[[["self"],["self"]],["bool"]]],[11,"eq","","",299,[[["self"],["self"]],["bool"]]],[11,"eq","","",300,[[["self"],["self"]],["bool"]]],[11,"eq","","",301,[[["self"],["self"]],["bool"]]],[11,"eq","","",127,[[["self"],["self"]],["bool"]]],[11,"eq","","",128,[[["self"],["self"]],["bool"]]],[11,"eq","","",182,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",182,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",180,[[["self"],["intsuffix"]],["bool"]]],[11,"eq","","",179,[[["self"],["floatsuffix"]],["bool"]]],[11,"eq","","",183,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",183,[[["self"],["macrodelimiter"]],["bool"]]],[11,"eq","","",129,[[["self"],["self"]],["bool"]]],[11,"eq","","",133,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",133,[[["self"],["deriveinput"]],["bool"]]],[11,"eq","","",184,[[["self"],["data"]],["bool"]]],[11,"ne","","",184,[[["self"],["data"]],["bool"]]],[11,"eq","","",131,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",131,[[["self"],["datastruct"]],["bool"]]],[11,"eq","","",130,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",130,[[["self"],["dataenum"]],["bool"]]],[11,"eq","","",132,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",132,[[["self"],["dataunion"]],["bool"]]],[11,"eq","","",185,[[["self"],["binop"]],["bool"]]],[11,"ne","","",185,[[["self"],["binop"]],["bool"]]],[11,"eq","","",186,[[["self"],["unop"]],["bool"]]],[11,"ne","","",186,[[["self"],["unop"]],["bool"]]],[11,"eq","","",189,[[["self"],["type"]],["bool"]]],[11,"ne","","",189,[[["self"],["type"]],["bool"]]],[11,"eq","","",147,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",147,[[["self"],["typeslice"]],["bool"]]],[11,"eq","","",136,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",136,[[["self"],["typearray"]],["bool"]]],[11,"eq","","",145,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",145,[[["self"],["typeptr"]],["bool"]]],[11,"eq","","",146,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",146,[[["self"],["typereference"]],["bool"]]],[11,"eq","","",137,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",137,[[["self"],["typebarefn"]],["bool"]]],[11,"eq","","",142,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",142,[[["self"],["typenever"]],["bool"]]],[11,"eq","","",149,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",149,[[["self"],["typetuple"]],["bool"]]],[11,"eq","","",144,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",144,[[["self"],["typepath"]],["bool"]]],[11,"eq","","",148,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",148,[[["self"],["typetraitobject"]],["bool"]]],[11,"eq","","",139,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",139,[[["self"],["typeimpltrait"]],["bool"]]],[11,"eq","","",143,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",143,[[["self"],["typeparen"]],["bool"]]],[11,"eq","","",138,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",138,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",140,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",140,[[["self"],["typeinfer"]],["bool"]]],[11,"eq","","",141,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",141,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",150,[[["self"],["self"]],["bool"]]],[11,"eq","","",134,[[["self"],["abi"]],["bool"]]],[11,"ne","","",134,[[["self"],["abi"]],["bool"]]],[11,"eq","","",135,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",135,[[["self"],["barefnarg"]],["bool"]]],[11,"eq","","",187,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",187,[[["self"],["barefnargname"]],["bool"]]],[11,"eq","","",188,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",188,[[["self"],["returntype"]],["bool"]]],[11,"eq","","",155,[[["self"],["path"]],["bool"]]],[11,"ne","","",155,[[["self"],["path"]],["bool"]]],[11,"eq","","",156,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",156,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",191,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",191,[[["self"],["patharguments"]],["bool"]]],[11,"eq","","",190,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",190,[[["self"],["genericargument"]],["bool"]]],[11,"eq","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",151,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"eq","","",152,[[["self"],["binding"]],["bool"]]],[11,"ne","","",152,[[["self"],["binding"]],["bool"]]],[11,"eq","","",153,[[["self"],["constraint"]],["bool"]]],[11,"ne","","",153,[[["self"],["constraint"]],["bool"]]],[11,"eq","","",154,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",154,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","","",157,[[["self"],["qself"]],["bool"]]],[11,"ne","","",157,[[["self"],["qself"]],["bool"]]],[11,"eq","syn::buffer","",303,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",303,[[["self"],["cursor"]],["bool"]]],[11,"eq","syn::punctuated","",306,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",306,[[["self"],["punctuated"]],["bool"]]],[11,"from","syn","",315,[[["selfvalue"]],["ident"]]],[11,"from","","",315,[[["selftype"]],["ident"]]],[11,"from","","",315,[[["super"]],["ident"]]],[11,"from","","",315,[[["crate"]],["ident"]]],[11,"from","","",315,[[["extern"]],["ident"]]],[11,"from","","",315,[[["underscore"]],["ident"]]],[11,"from","","",159,[[["ident"]],["meta"]]],[11,"from","","",159,[[["metalist"]],["meta"]]],[11,"from","","",159,[[["metanamevalue"]],["meta"]]],[11,"from","","",160,[[["meta"]],["nestedmeta"]]],[11,"from","","",160,[[["lit"]],["nestedmeta"]]],[11,"from","","",161,[[["fieldsnamed"]],["fields"]]],[11,"from","","",161,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",162,[[["vispublic"]],["visibility"]]],[11,"from","","",162,[[["viscrate"]],["visibility"]]],[11,"from","","",162,[[["visrestricted"]],["visibility"]]],[11,"from","","",163,[[["exprbox"]],["expr"]]],[11,"from","","",163,[[["exprinplace"]],["expr"]]],[11,"from","","",163,[[["exprarray"]],["expr"]]],[11,"from","","",163,[[["exprcall"]],["expr"]]],[11,"from","","",163,[[["exprmethodcall"]],["expr"]]],[11,"from","","",163,[[["exprtuple"]],["expr"]]],[11,"from","","",163,[[["exprbinary"]],["expr"]]],[11,"from","","",163,[[["exprunary"]],["expr"]]],[11,"from","","",163,[[["exprlit"]],["expr"]]],[11,"from","","",163,[[["exprcast"]],["expr"]]],[11,"from","","",163,[[["exprtype"]],["expr"]]],[11,"from","","",163,[[["exprlet"]],["expr"]]],[11,"from","","",163,[[["exprif"]],["expr"]]],[11,"from","","",163,[[["exprwhile"]],["expr"]]],[11,"from","","",163,[[["exprforloop"]],["expr"]]],[11,"from","","",163,[[["exprloop"]],["expr"]]],[11,"from","","",163,[[["exprmatch"]],["expr"]]],[11,"from","","",163,[[["exprclosure"]],["expr"]]],[11,"from","","",163,[[["exprunsafe"]],["expr"]]],[11,"from","","",163,[[["exprblock"]],["expr"]]],[11,"from","","",163,[[["exprassign"]],["expr"]]],[11,"from","","",163,[[["exprassignop"]],["expr"]]],[11,"from","","",163,[[["exprfield"]],["expr"]]],[11,"from","","",163,[[["exprindex"]],["expr"]]],[11,"from","","",163,[[["exprrange"]],["expr"]]],[11,"from","","",163,[[["exprpath"]],["expr"]]],[11,"from","","",163,[[["exprreference"]],["expr"]]],[11,"from","","",163,[[["exprbreak"]],["expr"]]],[11,"from","","",163,[[["exprcontinue"]],["expr"]]],[11,"from","","",163,[[["exprreturn"]],["expr"]]],[11,"from","","",163,[[["exprmacro"]],["expr"]]],[11,"from","","",163,[[["exprstruct"]],["expr"]]],[11,"from","","",163,[[["exprrepeat"]],["expr"]]],[11,"from","","",163,[[["exprparen"]],["expr"]]],[11,"from","","",163,[[["exprgroup"]],["expr"]]],[11,"from","","",163,[[["exprtry"]],["expr"]]],[11,"from","","",163,[[["exprasync"]],["expr"]]],[11,"from","","",163,[[["exprtryblock"]],["expr"]]],[11,"from","","",163,[[["expryield"]],["expr"]]],[11,"from","","",163,[[["exprverbatim"]],["expr"]]],[11,"from","","",50,[[["usize"]],["index"]]],[11,"from","","",166,[[["patwild"]],["pat"]]],[11,"from","","",166,[[["patident"]],["pat"]]],[11,"from","","",166,[[["patstruct"]],["pat"]]],[11,"from","","",166,[[["pattuplestruct"]],["pat"]]],[11,"from","","",166,[[["patpath"]],["pat"]]],[11,"from","","",166,[[["pattuple"]],["pat"]]],[11,"from","","",166,[[["patbox"]],["pat"]]],[11,"from","","",166,[[["patref"]],["pat"]]],[11,"from","","",166,[[["patlit"]],["pat"]]],[11,"from","","",166,[[["patrange"]],["pat"]]],[11,"from","","",166,[[["patslice"]],["pat"]]],[11,"from","","",166,[[["patmacro"]],["pat"]]],[11,"from","","",166,[[["patverbatim"]],["pat"]]],[11,"from","","",169,[[["typeparam"]],["genericparam"]]],[11,"from","","",169,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",169,[[["constparam"]],["genericparam"]]],[11,"from","","",79,[[["ident"]],["self"]]],[11,"from","","",171,[[["traitbound"]],["typeparambound"]]],[11,"from","","",171,[[["lifetime"]],["typeparambound"]]],[11,"from","","",172,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",172,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",172,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",176,[[["itemexterncrate"]],["item"]]],[11,"from","","",176,[[["itemuse"]],["item"]]],[11,"from","","",176,[[["itemstatic"]],["item"]]],[11,"from","","",176,[[["itemconst"]],["item"]]],[11,"from","","",176,[[["itemfn"]],["item"]]],[11,"from","","",176,[[["itemmod"]],["item"]]],[11,"from","","",176,[[["itemforeignmod"]],["item"]]],[11,"from","","",176,[[["itemtype"]],["item"]]],[11,"from","","",176,[[["itemexistential"]],["item"]]],[11,"from","","",176,[[["itemstruct"]],["item"]]],[11,"from","","",176,[[["itemenum"]],["item"]]],[11,"from","","",176,[[["itemunion"]],["item"]]],[11,"from","","",176,[[["itemtrait"]],["item"]]],[11,"from","","",176,[[["itemtraitalias"]],["item"]]],[11,"from","","",176,[[["itemimpl"]],["item"]]],[11,"from","","",176,[[["itemmacro"]],["item"]]],[11,"from","","",176,[[["itemmacro2"]],["item"]]],[11,"from","","",176,[[["itemverbatim"]],["item"]]],[11,"from","","",176,[[["deriveinput"]],["item"]]],[11,"from","","",178,[[["usepath"]],["usetree"]]],[11,"from","","",178,[[["usename"]],["usetree"]]],[11,"from","","",178,[[["userename"]],["usetree"]]],[11,"from","","",178,[[["useglob"]],["usetree"]]],[11,"from","","",178,[[["usegroup"]],["usetree"]]],[11,"from","","",174,[[["foreignitemfn"]],["foreignitem"]]],[11,"from","","",174,[[["foreignitemstatic"]],["foreignitem"]]],[11,"from","","",174,[[["foreignitemtype"]],["foreignitem"]]],[11,"from","","",174,[[["foreignitemmacro"]],["foreignitem"]]],[11,"from","","",174,[[["foreignitemverbatim"]],["foreignitem"]]],[11,"from","","",177,[[["traititemconst"]],["traititem"]]],[11,"from","","",177,[[["traititemmethod"]],["traititem"]]],[11,"from","","",177,[[["traititemtype"]],["traititem"]]],[11,"from","","",177,[[["traititemmacro"]],["traititem"]]],[11,"from","","",177,[[["traititemverbatim"]],["traititem"]]],[11,"from","","",175,[[["implitemconst"]],["implitem"]]],[11,"from","","",175,[[["implitemmethod"]],["implitem"]]],[11,"from","","",175,[[["implitemtype"]],["implitem"]]],[11,"from","","",175,[[["implitemexistential"]],["implitem"]]],[11,"from","","",175,[[["implitemmacro"]],["implitem"]]],[11,"from","","",175,[[["implitemverbatim"]],["implitem"]]],[11,"from","","",173,[[["argselfref"]],["fnarg"]]],[11,"from","","",173,[[["argself"]],["fnarg"]]],[11,"from","","",173,[[["argcaptured"]],["fnarg"]]],[11,"from","","",173,[[["pat"]],["fnarg"]]],[11,"from","","",173,[[["type"]],["fnarg"]]],[11,"from","","",181,[[["litstr"]],["lit"]]],[11,"from","","",181,[[["litbytestr"]],["lit"]]],[11,"from","","",181,[[["litbyte"]],["lit"]]],[11,"from","","",181,[[["litchar"]],["lit"]]],[11,"from","","",181,[[["litint"]],["lit"]]],[11,"from","","",181,[[["litfloat"]],["lit"]]],[11,"from","","",181,[[["litbool"]],["lit"]]],[11,"from","","",181,[[["litverbatim"]],["lit"]]],[11,"from","","",184,[[["datastruct"]],["data"]]],[11,"from","","",184,[[["dataenum"]],["data"]]],[11,"from","","",184,[[["dataunion"]],["data"]]],[11,"from","","",189,[[["typeslice"]],["type"]]],[11,"from","","",189,[[["typearray"]],["type"]]],[11,"from","","",189,[[["typeptr"]],["type"]]],[11,"from","","",189,[[["typereference"]],["type"]]],[11,"from","","",189,[[["typebarefn"]],["type"]]],[11,"from","","",189,[[["typenever"]],["type"]]],[11,"from","","",189,[[["typetuple"]],["type"]]],[11,"from","","",189,[[["typepath"]],["type"]]],[11,"from","","",189,[[["typetraitobject"]],["type"]]],[11,"from","","",189,[[["typeimpltrait"]],["type"]]],[11,"from","","",189,[[["typeparen"]],["type"]]],[11,"from","","",189,[[["typegroup"]],["type"]]],[11,"from","","",189,[[["typeinfer"]],["type"]]],[11,"from","","",189,[[["typemacro"]],["type"]]],[11,"from","","",189,[[["typeverbatim"]],["type"]]],[11,"from","","",155,[[["t"]],["self"]]],[11,"from","","",156,[[["t"]],["self"]]],[11,"from","syn::parse","",314,[[["lexerror"]],["self"]]],[11,"clone","syn::token","",192,[[["self"]],["underscore"]]],[11,"clone","","",193,[[["self"]],["abstract"]]],[11,"clone","","",194,[[["self"]],["as"]]],[11,"clone","","",195,[[["self"]],["async"]]],[11,"clone","","",196,[[["self"]],["auto"]]],[11,"clone","","",197,[[["self"]],["become"]]],[11,"clone","","",198,[[["self"]],["box"]]],[11,"clone","","",199,[[["self"]],["break"]]],[11,"clone","","",200,[[["self"]],["const"]]],[11,"clone","","",201,[[["self"]],["continue"]]],[11,"clone","","",202,[[["self"]],["crate"]]],[11,"clone","","",203,[[["self"]],["default"]]],[11,"clone","","",204,[[["self"]],["do"]]],[11,"clone","","",205,[[["self"]],["dyn"]]],[11,"clone","","",206,[[["self"]],["else"]]],[11,"clone","","",207,[[["self"]],["enum"]]],[11,"clone","","",208,[[["self"]],["existential"]]],[11,"clone","","",209,[[["self"]],["extern"]]],[11,"clone","","",210,[[["self"]],["final"]]],[11,"clone","","",211,[[["self"]],["fn"]]],[11,"clone","","",212,[[["self"]],["for"]]],[11,"clone","","",213,[[["self"]],["if"]]],[11,"clone","","",214,[[["self"]],["impl"]]],[11,"clone","","",215,[[["self"]],["in"]]],[11,"clone","","",216,[[["self"]],["let"]]],[11,"clone","","",217,[[["self"]],["loop"]]],[11,"clone","","",218,[[["self"]],["macro"]]],[11,"clone","","",219,[[["self"]],["match"]]],[11,"clone","","",220,[[["self"]],["mod"]]],[11,"clone","","",221,[[["self"]],["move"]]],[11,"clone","","",222,[[["self"]],["mut"]]],[11,"clone","","",223,[[["self"]],["override"]]],[11,"clone","","",224,[[["self"]],["priv"]]],[11,"clone","","",225,[[["self"]],["pub"]]],[11,"clone","","",226,[[["self"]],["ref"]]],[11,"clone","","",227,[[["self"]],["return"]]],[11,"clone","","",228,[[["self"]],["selftype"]]],[11,"clone","","",229,[[["self"]],["selfvalue"]]],[11,"clone","","",230,[[["self"]],["static"]]],[11,"clone","","",231,[[["self"]],["struct"]]],[11,"clone","","",232,[[["self"]],["super"]]],[11,"clone","","",233,[[["self"]],["trait"]]],[11,"clone","","",234,[[["self"]],["try"]]],[11,"clone","","",235,[[["self"]],["type"]]],[11,"clone","","",236,[[["self"]],["typeof"]]],[11,"clone","","",237,[[["self"]],["union"]]],[11,"clone","","",238,[[["self"]],["unsafe"]]],[11,"clone","","",239,[[["self"]],["unsized"]]],[11,"clone","","",240,[[["self"]],["use"]]],[11,"clone","","",241,[[["self"]],["virtual"]]],[11,"clone","","",242,[[["self"]],["where"]]],[11,"clone","","",243,[[["self"]],["while"]]],[11,"clone","","",244,[[["self"]],["yield"]]],[11,"clone","","",245,[[["self"]],["add"]]],[11,"clone","","",246,[[["self"]],["addeq"]]],[11,"clone","","",247,[[["self"]],["and"]]],[11,"clone","","",248,[[["self"]],["andand"]]],[11,"clone","","",249,[[["self"]],["andeq"]]],[11,"clone","","",250,[[["self"]],["at"]]],[11,"clone","","",251,[[["self"]],["bang"]]],[11,"clone","","",252,[[["self"]],["caret"]]],[11,"clone","","",253,[[["self"]],["careteq"]]],[11,"clone","","",254,[[["self"]],["colon"]]],[11,"clone","","",255,[[["self"]],["colon2"]]],[11,"clone","","",256,[[["self"]],["comma"]]],[11,"clone","","",257,[[["self"]],["div"]]],[11,"clone","","",258,[[["self"]],["diveq"]]],[11,"clone","","",259,[[["self"]],["dollar"]]],[11,"clone","","",260,[[["self"]],["dot"]]],[11,"clone","","",261,[[["self"]],["dot2"]]],[11,"clone","","",262,[[["self"]],["dot3"]]],[11,"clone","","",263,[[["self"]],["dotdoteq"]]],[11,"clone","","",264,[[["self"]],["eq"]]],[11,"clone","","",265,[[["self"]],["eqeq"]]],[11,"clone","","",266,[[["self"]],["ge"]]],[11,"clone","","",267,[[["self"]],["gt"]]],[11,"clone","","",268,[[["self"]],["le"]]],[11,"clone","","",269,[[["self"]],["lt"]]],[11,"clone","","",270,[[["self"]],["muleq"]]],[11,"clone","","",271,[[["self"]],["ne"]]],[11,"clone","","",272,[[["self"]],["or"]]],[11,"clone","","",273,[[["self"]],["oreq"]]],[11,"clone","","",274,[[["self"]],["oror"]]],[11,"clone","","",275,[[["self"]],["pound"]]],[11,"clone","","",276,[[["self"]],["question"]]],[11,"clone","","",277,[[["self"]],["rarrow"]]],[11,"clone","","",278,[[["self"]],["larrow"]]],[11,"clone","","",279,[[["self"]],["rem"]]],[11,"clone","","",280,[[["self"]],["remeq"]]],[11,"clone","","",281,[[["self"]],["fatarrow"]]],[11,"clone","","",282,[[["self"]],["semi"]]],[11,"clone","","",283,[[["self"]],["shl"]]],[11,"clone","","",284,[[["self"]],["shleq"]]],[11,"clone","","",285,[[["self"]],["shr"]]],[11,"clone","","",286,[[["self"]],["shreq"]]],[11,"clone","","",287,[[["self"]],["star"]]],[11,"clone","","",288,[[["self"]],["sub"]]],[11,"clone","","",289,[[["self"]],["subeq"]]],[11,"clone","","",290,[[["self"]],["tilde"]]],[11,"clone","","",291,[[["self"]],["brace"]]],[11,"clone","","",292,[[["self"]],["bracket"]]],[11,"clone","","",293,[[["self"]],["paren"]]],[11,"clone","","",294,[[["self"]],["group"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",158,[[["self"]],["attrstyle"]]],[11,"clone","","",159,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",160,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",161,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",162,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",163,[[["self"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprbox"]]],[11,"clone","","",26,[[["self"]],["exprinplace"]]],[11,"clone","","",10,[[["self"]],["exprarray"]]],[11,"clone","","",18,[[["self"]],["exprcall"]]],[11,"clone","","",33,[[["self"]],["exprmethodcall"]]],[11,"clone","","",43,[[["self"]],["exprtuple"]]],[11,"clone","","",14,[[["self"]],["exprbinary"]]],[11,"clone","","",45,[[["self"]],["exprunary"]]],[11,"clone","","",29,[[["self"]],["exprlit"]]],[11,"clone","","",19,[[["self"]],["exprcast"]]],[11,"clone","","",44,[[["self"]],["exprtype"]]],[11,"clone","","",28,[[["self"]],["exprlet"]]],[11,"clone","","",25,[[["self"]],["exprif"]]],[11,"clone","","",48,[[["self"]],["exprwhile"]]],[11,"clone","","",23,[[["self"]],["exprforloop"]]],[11,"clone","","",30,[[["self"]],["exprloop"]]],[11,"clone","","",32,[[["self"]],["exprmatch"]]],[11,"clone","","",20,[[["self"]],["exprclosure"]]],[11,"clone","","",46,[[["self"]],["exprunsafe"]]],[11,"clone","","",15,[[["self"]],["exprblock"]]],[11,"clone","","",11,[[["self"]],["exprassign"]]],[11,"clone","","",12,[[["self"]],["exprassignop"]]],[11,"clone","","",22,[[["self"]],["exprfield"]]],[11,"clone","","",27,[[["self"]],["exprindex"]]],[11,"clone","","",36,[[["self"]],["exprrange"]]],[11,"clone","","",35,[[["self"]],["exprpath"]]],[11,"clone","","",37,[[["self"]],["exprreference"]]],[11,"clone","","",17,[[["self"]],["exprbreak"]]],[11,"clone","","",21,[[["self"]],["exprcontinue"]]],[11,"clone","","",39,[[["self"]],["exprreturn"]]],[11,"clone","","",31,[[["self"]],["exprmacro"]]],[11,"clone","","",40,[[["self"]],["exprstruct"]]],[11,"clone","","",38,[[["self"]],["exprrepeat"]]],[11,"clone","","",34,[[["self"]],["exprparen"]]],[11,"clone","","",24,[[["self"]],["exprgroup"]]],[11,"clone","","",41,[[["self"]],["exprtry"]]],[11,"clone","","",13,[[["self"]],["exprasync"]]],[11,"clone","","",42,[[["self"]],["exprtryblock"]]],[11,"clone","","",49,[[["self"]],["expryield"]]],[11,"clone","","",47,[[["self"]],["exprverbatim"]]],[11,"clone","","",164,[[["self"]],["member"]]],[11,"clone","","",50,[[["self"]],["index"]]],[11,"clone","","",57,[[["self"]],["methodturbofish"]]],[11,"clone","","",165,[[["self"]],["genericmethodargument"]]],[11,"clone","","",54,[[["self"]],["fieldvalue"]]],[11,"clone","","",55,[[["self"]],["label"]]],[11,"clone","","",52,[[["self"]],["block"]]],[11,"clone","","",168,[[["self"]],["stmt"]]],[11,"clone","","",56,[[["self"]],["local"]]],[11,"clone","","",166,[[["self"]],["pat"]]],[11,"clone","","",70,[[["self"]],["patwild"]]],[11,"clone","","",59,[[["self"]],["patident"]]],[11,"clone","","",66,[[["self"]],["patstruct"]]],[11,"clone","","",68,[[["self"]],["pattuplestruct"]]],[11,"clone","","",62,[[["self"]],["patpath"]]],[11,"clone","","",67,[[["self"]],["pattuple"]]],[11,"clone","","",58,[[["self"]],["patbox"]]],[11,"clone","","",64,[[["self"]],["patref"]]],[11,"clone","","",60,[[["self"]],["patlit"]]],[11,"clone","","",63,[[["self"]],["patrange"]]],[11,"clone","","",65,[[["self"]],["patslice"]]],[11,"clone","","",61,[[["self"]],["patmacro"]]],[11,"clone","","",69,[[["self"]],["patverbatim"]]],[11,"clone","","",51,[[["self"]],["arm"]]],[11,"clone","","",167,[[["self"]],["rangelimits"]]],[11,"clone","","",53,[[["self"]],["fieldpat"]]],[11,"clone","","",73,[[["self"]],["generics"]]],[11,"clone","","",169,[[["self"]],["genericparam"]]],[11,"clone","","",79,[[["self"]],["typeparam"]]],[11,"clone","","",74,[[["self"]],["lifetimedef"]]],[11,"clone","","",72,[[["self"]],["constparam"]]],[11,"clone","","",316,[[["self"]],["implgenerics"]]],[11,"clone","","",295,[[["self"]],["typegenerics"]]],[11,"clone","","",317,[[["self"]],["turbofish"]]],[11,"clone","","",71,[[["self"]],["boundlifetimes"]]],[11,"clone","","",171,[[["self"]],["typeparambound"]]],[11,"clone","","",78,[[["self"]],["traitbound"]]],[11,"clone","","",170,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",80,[[["self"]],["whereclause"]]],[11,"clone","","",172,[[["self"]],["wherepredicate"]]],[11,"clone","","",77,[[["self"]],["predicatetype"]]],[11,"clone","","",76,[[["self"]],["predicatelifetime"]]],[11,"clone","","",75,[[["self"]],["predicateeq"]]],[11,"clone","","",176,[[["self"]],["item"]]],[11,"clone","","",99,[[["self"]],["itemexterncrate"]]],[11,"clone","","",112,[[["self"]],["itemuse"]]],[11,"clone","","",106,[[["self"]],["itemstatic"]]],[11,"clone","","",96,[[["self"]],["itemconst"]]],[11,"clone","","",100,[[["self"]],["itemfn"]]],[11,"clone","","",105,[[["self"]],["itemmod"]]],[11,"clone","","",101,[[["self"]],["itemforeignmod"]]],[11,"clone","","",110,[[["self"]],["itemtype"]]],[11,"clone","","",98,[[["self"]],["itemexistential"]]],[11,"clone","","",107,[[["self"]],["itemstruct"]]],[11,"clone","","",97,[[["self"]],["itemenum"]]],[11,"clone","","",111,[[["self"]],["itemunion"]]],[11,"clone","","",108,[[["self"]],["itemtrait"]]],[11,"clone","","",109,[[["self"]],["itemtraitalias"]]],[11,"clone","","",102,[[["self"]],["itemimpl"]]],[11,"clone","","",103,[[["self"]],["itemmacro"]]],[11,"clone","","",104,[[["self"]],["itemmacro2"]]],[11,"clone","","",113,[[["self"]],["itemverbatim"]]],[11,"clone","","",178,[[["self"]],["usetree"]]],[11,"clone","","",123,[[["self"]],["usepath"]]],[11,"clone","","",122,[[["self"]],["usename"]]],[11,"clone","","",124,[[["self"]],["userename"]]],[11,"clone","","",120,[[["self"]],["useglob"]]],[11,"clone","","",121,[[["self"]],["usegroup"]]],[11,"clone","","",174,[[["self"]],["foreignitem"]]],[11,"clone","","",85,[[["self"]],["foreignitemfn"]]],[11,"clone","","",87,[[["self"]],["foreignitemstatic"]]],[11,"clone","","",88,[[["self"]],["foreignitemtype"]]],[11,"clone","","",86,[[["self"]],["foreignitemmacro"]]],[11,"clone","","",89,[[["self"]],["foreignitemverbatim"]]],[11,"clone","","",177,[[["self"]],["traititem"]]],[11,"clone","","",115,[[["self"]],["traititemconst"]]],[11,"clone","","",117,[[["self"]],["traititemmethod"]]],[11,"clone","","",118,[[["self"]],["traititemtype"]]],[11,"clone","","",116,[[["self"]],["traititemmacro"]]],[11,"clone","","",119,[[["self"]],["traititemverbatim"]]],[11,"clone","","",175,[[["self"]],["implitem"]]],[11,"clone","","",90,[[["self"]],["implitemconst"]]],[11,"clone","","",93,[[["self"]],["implitemmethod"]]],[11,"clone","","",94,[[["self"]],["implitemtype"]]],[11,"clone","","",91,[[["self"]],["implitemexistential"]]],[11,"clone","","",92,[[["self"]],["implitemmacro"]]],[11,"clone","","",95,[[["self"]],["implitemverbatim"]]],[11,"clone","","",114,[[["self"]],["methodsig"]]],[11,"clone","","",84,[[["self"]],["fndecl"]]],[11,"clone","","",173,[[["self"]],["fnarg"]]],[11,"clone","","",83,[[["self"]],["argselfref"]]],[11,"clone","","",82,[[["self"]],["argself"]]],[11,"clone","","",81,[[["self"]],["argcaptured"]]],[11,"clone","","",125,[[["self"]],["file"]]],[11,"clone","","",126,[[["self"]],["lifetime"]]],[11,"clone","","",181,[[["self"]],["lit"]]],[11,"clone","","",296,[[["self"]],["litstr"]]],[11,"clone","","",297,[[["self"]],["litbytestr"]]],[11,"clone","","",298,[[["self"]],["litbyte"]]],[11,"clone","","",299,[[["self"]],["litchar"]]],[11,"clone","","",300,[[["self"]],["litint"]]],[11,"clone","","",301,[[["self"]],["litfloat"]]],[11,"clone","","",127,[[["self"]],["litbool"]]],[11,"clone","","",128,[[["self"]],["litverbatim"]]],[11,"clone","","",182,[[["self"]],["strstyle"]]],[11,"clone","","",180,[[["self"]],["intsuffix"]]],[11,"clone","","",179,[[["self"]],["floatsuffix"]]],[11,"clone","","",129,[[["self"]],["macro"]]],[11,"clone","","",183,[[["self"]],["macrodelimiter"]]],[11,"clone","","",133,[[["self"]],["deriveinput"]]],[11,"clone","","",184,[[["self"]],["data"]]],[11,"clone","","",131,[[["self"]],["datastruct"]]],[11,"clone","","",130,[[["self"]],["dataenum"]]],[11,"clone","","",132,[[["self"]],["dataunion"]]],[11,"clone","","",185,[[["self"]],["binop"]]],[11,"clone","","",186,[[["self"]],["unop"]]],[11,"clone","","",189,[[["self"]],["type"]]],[11,"clone","","",147,[[["self"]],["typeslice"]]],[11,"clone","","",136,[[["self"]],["typearray"]]],[11,"clone","","",145,[[["self"]],["typeptr"]]],[11,"clone","","",146,[[["self"]],["typereference"]]],[11,"clone","","",137,[[["self"]],["typebarefn"]]],[11,"clone","","",142,[[["self"]],["typenever"]]],[11,"clone","","",149,[[["self"]],["typetuple"]]],[11,"clone","","",144,[[["self"]],["typepath"]]],[11,"clone","","",148,[[["self"]],["typetraitobject"]]],[11,"clone","","",139,[[["self"]],["typeimpltrait"]]],[11,"clone","","",143,[[["self"]],["typeparen"]]],[11,"clone","","",138,[[["self"]],["typegroup"]]],[11,"clone","","",140,[[["self"]],["typeinfer"]]],[11,"clone","","",141,[[["self"]],["typemacro"]]],[11,"clone","","",150,[[["self"]],["typeverbatim"]]],[11,"clone","","",134,[[["self"]],["abi"]]],[11,"clone","","",135,[[["self"]],["barefnarg"]]],[11,"clone","","",187,[[["self"]],["barefnargname"]]],[11,"clone","","",188,[[["self"]],["returntype"]]],[11,"clone","","",155,[[["self"]],["path"]]],[11,"clone","","",156,[[["self"]],["pathsegment"]]],[11,"clone","","",191,[[["self"]],["patharguments"]]],[11,"clone","","",190,[[["self"]],["genericargument"]]],[11,"clone","","",151,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",152,[[["self"]],["binding"]]],[11,"clone","","",153,[[["self"]],["constraint"]]],[11,"clone","","",154,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",157,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",303,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",306,[[["self"]],["punctuated"]]],[11,"clone","syn::parse","",312,[[["self"]],["stepcursor"]]],[11,"clone","","",314,[[["self"]],["error"]]],[11,"into_iter","syn::punctuated","",306,N],[11,"extend","","",306,[[["self"],["i"]]]],[11,"extend","","",306,[[["self"],["i"]]]],[11,"drop","syn::parse","",313,[[["self"]]]],[11,"deref","","",312,N],[11,"fmt","syn::token","",192,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",244,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",249,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",282,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",283,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",284,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",290,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",291,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",292,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",293,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",294,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",316,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",295,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",317,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",296,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",297,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",298,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::punctuated","",306,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::parse","",313,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",314,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::parse","",313,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",314,[[["self"],["formatter"]],["result"]]],[11,"index","syn::punctuated","",306,N],[11,"index_mut","","",306,N],[11,"hash","syn::token","",192,[[["self"],["h"]]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"hash","","",282,[[["self"],["h"]]]],[11,"hash","","",283,[[["self"],["h"]]]],[11,"hash","","",284,[[["self"],["h"]]]],[11,"hash","","",285,[[["self"],["h"]]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"hash","","",290,[[["self"],["h"]]]],[11,"hash","","",291,[[["self"],["h"]]]],[11,"hash","","",292,[[["self"],["h"]]]],[11,"hash","","",293,[[["self"],["h"]]]],[11,"hash","","",294,[[["self"],["h"]]]],[11,"hash","syn","",0,[[["self"],["h"]]]],[11,"hash","","",158,N],[11,"hash","","",159,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",160,N],[11,"hash","","",6,N],[11,"hash","","",161,N],[11,"hash","","",4,N],[11,"hash","","",5,N],[11,"hash","","",3,N],[11,"hash","","",162,N],[11,"hash","","",8,N],[11,"hash","","",7,N],[11,"hash","","",9,N],[11,"hash","","",163,N],[11,"hash","","",16,N],[11,"hash","","",26,N],[11,"hash","","",10,N],[11,"hash","","",18,N],[11,"hash","","",33,N],[11,"hash","","",43,N],[11,"hash","","",14,N],[11,"hash","","",45,N],[11,"hash","","",29,N],[11,"hash","","",19,N],[11,"hash","","",44,N],[11,"hash","","",28,N],[11,"hash","","",25,N],[11,"hash","","",48,N],[11,"hash","","",23,N],[11,"hash","","",30,N],[11,"hash","","",32,N],[11,"hash","","",20,N],[11,"hash","","",46,N],[11,"hash","","",15,N],[11,"hash","","",11,N],[11,"hash","","",12,N],[11,"hash","","",22,N],[11,"hash","","",27,N],[11,"hash","","",36,N],[11,"hash","","",35,N],[11,"hash","","",37,N],[11,"hash","","",17,N],[11,"hash","","",21,N],[11,"hash","","",39,N],[11,"hash","","",31,N],[11,"hash","","",40,N],[11,"hash","","",38,N],[11,"hash","","",34,N],[11,"hash","","",24,N],[11,"hash","","",41,N],[11,"hash","","",13,N],[11,"hash","","",42,N],[11,"hash","","",49,N],[11,"hash","","",47,[[["self"],["h"]]]],[11,"hash","","",164,N],[11,"hash","","",50,[[["self"],["h"]]]],[11,"hash","","",57,N],[11,"hash","","",165,N],[11,"hash","","",54,N],[11,"hash","","",55,N],[11,"hash","","",52,N],[11,"hash","","",168,N],[11,"hash","","",56,N],[11,"hash","","",166,N],[11,"hash","","",70,N],[11,"hash","","",59,N],[11,"hash","","",66,N],[11,"hash","","",68,N],[11,"hash","","",62,N],[11,"hash","","",67,N],[11,"hash","","",58,N],[11,"hash","","",64,N],[11,"hash","","",60,N],[11,"hash","","",63,N],[11,"hash","","",65,N],[11,"hash","","",61,N],[11,"hash","","",69,[[["self"],["h"]]]],[11,"hash","","",51,N],[11,"hash","","",167,N],[11,"hash","","",53,N],[11,"hash","","",73,N],[11,"hash","","",169,N],[11,"hash","","",79,N],[11,"hash","","",74,N],[11,"hash","","",72,N],[11,"hash","","",316,N],[11,"hash","","",295,N],[11,"hash","","",317,N],[11,"hash","","",71,N],[11,"hash","","",171,N],[11,"hash","","",78,N],[11,"hash","","",170,N],[11,"hash","","",80,N],[11,"hash","","",172,N],[11,"hash","","",77,N],[11,"hash","","",76,N],[11,"hash","","",75,N],[11,"hash","","",176,N],[11,"hash","","",99,N],[11,"hash","","",112,N],[11,"hash","","",106,N],[11,"hash","","",96,N],[11,"hash","","",100,N],[11,"hash","","",105,N],[11,"hash","","",101,N],[11,"hash","","",110,N],[11,"hash","","",98,N],[11,"hash","","",107,N],[11,"hash","","",97,N],[11,"hash","","",111,N],[11,"hash","","",108,N],[11,"hash","","",109,N],[11,"hash","","",102,N],[11,"hash","","",103,N],[11,"hash","","",104,[[["self"],["h"]]]],[11,"hash","","",113,[[["self"],["h"]]]],[11,"hash","","",178,N],[11,"hash","","",123,N],[11,"hash","","",122,N],[11,"hash","","",124,N],[11,"hash","","",120,N],[11,"hash","","",121,N],[11,"hash","","",174,N],[11,"hash","","",85,N],[11,"hash","","",87,N],[11,"hash","","",88,N],[11,"hash","","",86,N],[11,"hash","","",89,[[["self"],["h"]]]],[11,"hash","","",177,N],[11,"hash","","",115,N],[11,"hash","","",117,N],[11,"hash","","",118,N],[11,"hash","","",116,N],[11,"hash","","",119,[[["self"],["h"]]]],[11,"hash","","",175,N],[11,"hash","","",90,N],[11,"hash","","",93,N],[11,"hash","","",94,N],[11,"hash","","",91,N],[11,"hash","","",92,N],[11,"hash","","",95,[[["self"],["h"]]]],[11,"hash","","",114,N],[11,"hash","","",84,N],[11,"hash","","",173,N],[11,"hash","","",83,N],[11,"hash","","",82,N],[11,"hash","","",81,N],[11,"hash","","",125,N],[11,"hash","","",126,[[["self"],["h"]]]],[11,"hash","","",181,N],[11,"hash","","",296,[[["self"],["h"]]]],[11,"hash","","",297,[[["self"],["h"]]]],[11,"hash","","",298,[[["self"],["h"]]]],[11,"hash","","",299,[[["self"],["h"]]]],[11,"hash","","",300,[[["self"],["h"]]]],[11,"hash","","",301,[[["self"],["h"]]]],[11,"hash","","",127,[[["self"],["h"]]]],[11,"hash","","",128,[[["self"],["h"]]]],[11,"hash","","",182,N],[11,"hash","","",180,N],[11,"hash","","",179,N],[11,"hash","","",183,N],[11,"hash","","",129,[[["self"],["h"]]]],[11,"hash","","",133,N],[11,"hash","","",184,N],[11,"hash","","",131,N],[11,"hash","","",130,N],[11,"hash","","",132,N],[11,"hash","","",185,N],[11,"hash","","",186,N],[11,"hash","","",189,N],[11,"hash","","",147,N],[11,"hash","","",136,N],[11,"hash","","",145,N],[11,"hash","","",146,N],[11,"hash","","",137,N],[11,"hash","","",142,N],[11,"hash","","",149,N],[11,"hash","","",144,N],[11,"hash","","",148,N],[11,"hash","","",139,N],[11,"hash","","",143,N],[11,"hash","","",138,N],[11,"hash","","",140,N],[11,"hash","","",141,N],[11,"hash","","",150,[[["self"],["h"]]]],[11,"hash","","",134,N],[11,"hash","","",135,N],[11,"hash","","",187,N],[11,"hash","","",188,N],[11,"hash","","",155,N],[11,"hash","","",156,N],[11,"hash","","",191,N],[11,"hash","","",190,N],[11,"hash","","",151,N],[11,"hash","","",152,N],[11,"hash","","",153,N],[11,"hash","","",154,N],[11,"hash","","",157,N],[11,"hash","syn::punctuated","",306,N],[11,"from_iter","","",306,[[["i"]],["self"]]],[11,"from_iter","","",306,[[["i"]],["self"]]],[11,"description","syn::parse","",314,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",192,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",196,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",197,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",198,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",199,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",200,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",201,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",202,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",203,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",204,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",205,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",206,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",207,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",208,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",209,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",210,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",221,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",225,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",226,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",230,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",231,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",232,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",235,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",236,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",237,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",238,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",239,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",240,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",241,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",242,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",243,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",244,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",245,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",246,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",247,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",248,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",249,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",250,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",251,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",252,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",253,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",254,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",255,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",256,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",257,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",258,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",259,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",260,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",261,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",262,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",263,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",264,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",265,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",266,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",267,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",268,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",269,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",270,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",271,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",272,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",273,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",274,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",275,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",276,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",277,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",278,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",279,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",280,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",281,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",282,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",283,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",284,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",285,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",286,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",287,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",288,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",289,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",290,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn","",159,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",36,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",35,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",37,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",62,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",63,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",316,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",295,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",317,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",74,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",79,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",78,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",77,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",75,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",296,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",297,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",298,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",299,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",300,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",301,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",189,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",188,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn::punctuated","",306,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",305,[[["self"],["tokenstream"]]]],[11,"new","syn","Creates a new `Ident` with the given `string` as well as the specified `span`.",315,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",315,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",315,N],[11,"visit_abi","syn::visit","",308,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",308,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",308,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",308,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",308,[[["self"],["argselfref"]]]],[11,"visit_arm","","",308,[[["self"],["arm"]]]],[11,"visit_attr_style","","",308,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",308,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",308,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",308,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",308,[[["self"],["binop"]]]],[11,"visit_binding","","",308,[[["self"],["binding"]]]],[11,"visit_block","","",308,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",308,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",308,[[["self"],["constparam"]]]],[11,"visit_constraint","","",308,[[["self"],["constraint"]]]],[11,"visit_data","","",308,[[["self"],["data"]]]],[11,"visit_data_enum","","",308,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",308,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",308,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",308,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",308,[[["self"],["expr"]]]],[11,"visit_expr_array","","",308,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",308,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",308,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",308,[[["self"],["exprasync"]]]],[11,"visit_expr_binary","","",308,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",308,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",308,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",308,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",308,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",308,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",308,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",308,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",308,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",308,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",308,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",308,[[["self"],["exprif"]]]],[11,"visit_expr_in_place","","",308,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",308,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",308,[[["self"],["exprlet"]]]],[11,"visit_expr_lit","","",308,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",308,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",308,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",308,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",308,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",308,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",308,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",308,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",308,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",308,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",308,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",308,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",308,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block","","",308,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple","","",308,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",308,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",308,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",308,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",308,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",308,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",308,[[["self"],["expryield"]]]],[11,"visit_field","","",308,[[["self"],["field"]]]],[11,"visit_field_pat","","",308,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",308,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",308,[[["self"],["fields"]]]],[11,"visit_fields_named","","",308,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",308,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",308,[[["self"],["file"]]]],[11,"visit_fn_arg","","",308,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",308,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",308,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",308,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",308,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",308,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",308,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",308,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",308,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",308,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",308,[[["self"],["genericparam"]]]],[11,"visit_generics","","",308,[[["self"],["generics"]]]],[11,"visit_ident","","",308,[[["self"],["ident"]]]],[11,"visit_impl_item","","",308,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",308,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_existential","","",308,[[["self"],["implitemexistential"]]]],[11,"visit_impl_item_macro","","",308,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",308,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",308,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",308,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",308,[[["self"],["index"]]]],[11,"visit_item","","",308,[[["self"],["item"]]]],[11,"visit_item_const","","",308,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",308,[[["self"],["itemenum"]]]],[11,"visit_item_existential","","",308,[[["self"],["itemexistential"]]]],[11,"visit_item_extern_crate","","",308,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",308,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",308,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",308,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",308,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",308,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",308,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",308,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",308,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",308,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",308,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",308,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",308,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",308,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",308,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",308,[[["self"],["label"]]]],[11,"visit_lifetime","","",308,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",308,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",308,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",308,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",308,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",308,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",308,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",308,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",308,[[["self"],["litint"]]]],[11,"visit_lit_str","","",308,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",308,[[["self"],["litverbatim"]]]],[11,"visit_local","","",308,[[["self"],["local"]]]],[11,"visit_macro","","",308,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",308,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",308,[[["self"],["member"]]]],[11,"visit_meta","","",308,[[["self"],["meta"]]]],[11,"visit_meta_list","","",308,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",308,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",308,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",308,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",308,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",308,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",308,[[["self"],["pat"]]]],[11,"visit_pat_box","","",308,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",308,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",308,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",308,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",308,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",308,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",308,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",308,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",308,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",308,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",308,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",308,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",308,[[["self"],["patwild"]]]],[11,"visit_path","","",308,[[["self"],["path"]]]],[11,"visit_path_arguments","","",308,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",308,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",308,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",308,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",308,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",308,[[["self"],["qself"]]]],[11,"visit_range_limits","","",308,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",308,[[["self"],["returntype"]]]],[11,"visit_span","","",308,[[["self"],["span"]]]],[11,"visit_stmt","","",308,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",308,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",308,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",308,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",308,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",308,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",308,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",308,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",308,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",308,[[["self"],["type"]]]],[11,"visit_type_array","","",308,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",308,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",308,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",308,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",308,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",308,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",308,[[["self"],["typenever"]]]],[11,"visit_type_param","","",308,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",308,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",308,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",308,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",308,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",308,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",308,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",308,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",308,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",308,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",308,[[["self"],["unop"]]]],[11,"visit_use_glob","","",308,[[["self"],["useglob"]]]],[11,"visit_use_group","","",308,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",308,[[["self"],["usename"]]]],[11,"visit_use_path","","",308,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",308,[[["self"],["userename"]]]],[11,"visit_use_tree","","",308,[[["self"],["usetree"]]]],[11,"visit_variant","","",308,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",308,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",308,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",308,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",308,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",308,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",308,[[["self"],["wherepredicate"]]]],[11,"visit_abi_mut","syn::visit_mut","",309,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",309,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured_mut","","",309,[[["self"],["argcaptured"]]]],[11,"visit_arg_self_mut","","",309,[[["self"],["argself"]]]],[11,"visit_arg_self_ref_mut","","",309,[[["self"],["argselfref"]]]],[11,"visit_arm_mut","","",309,[[["self"],["arm"]]]],[11,"visit_attr_style_mut","","",309,[[["self"],["attrstyle"]]]],[11,"visit_attribute_mut","","",309,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg_mut","","",309,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name_mut","","",309,[[["self"],["barefnargname"]]]],[11,"visit_bin_op_mut","","",309,[[["self"],["binop"]]]],[11,"visit_binding_mut","","",309,[[["self"],["binding"]]]],[11,"visit_block_mut","","",309,[[["self"],["block"]]]],[11,"visit_bound_lifetimes_mut","","",309,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param_mut","","",309,[[["self"],["constparam"]]]],[11,"visit_constraint_mut","","",309,[[["self"],["constraint"]]]],[11,"visit_data_mut","","",309,[[["self"],["data"]]]],[11,"visit_data_enum_mut","","",309,[[["self"],["dataenum"]]]],[11,"visit_data_struct_mut","","",309,[[["self"],["datastruct"]]]],[11,"visit_data_union_mut","","",309,[[["self"],["dataunion"]]]],[11,"visit_derive_input_mut","","",309,[[["self"],["deriveinput"]]]],[11,"visit_expr_mut","","",309,[[["self"],["expr"]]]],[11,"visit_expr_array_mut","","",309,[[["self"],["exprarray"]]]],[11,"visit_expr_assign_mut","","",309,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op_mut","","",309,[[["self"],["exprassignop"]]]],[11,"visit_expr_async_mut","","",309,[[["self"],["exprasync"]]]],[11,"visit_expr_binary_mut","","",309,[[["self"],["exprbinary"]]]],[11,"visit_expr_block_mut","","",309,[[["self"],["exprblock"]]]],[11,"visit_expr_box_mut","","",309,[[["self"],["exprbox"]]]],[11,"visit_expr_break_mut","","",309,[[["self"],["exprbreak"]]]],[11,"visit_expr_call_mut","","",309,[[["self"],["exprcall"]]]],[11,"visit_expr_cast_mut","","",309,[[["self"],["exprcast"]]]],[11,"visit_expr_closure_mut","","",309,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue_mut","","",309,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field_mut","","",309,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop_mut","","",309,[[["self"],["exprforloop"]]]],[11,"visit_expr_group_mut","","",309,[[["self"],["exprgroup"]]]],[11,"visit_expr_if_mut","","",309,[[["self"],["exprif"]]]],[11,"visit_expr_in_place_mut","","",309,[[["self"],["exprinplace"]]]],[11,"visit_expr_index_mut","","",309,[[["self"],["exprindex"]]]],[11,"visit_expr_let_mut","","",309,[[["self"],["exprlet"]]]],[11,"visit_expr_lit_mut","","",309,[[["self"],["exprlit"]]]],[11,"visit_expr_loop_mut","","",309,[[["self"],["exprloop"]]]],[11,"visit_expr_macro_mut","","",309,[[["self"],["exprmacro"]]]],[11,"visit_expr_match_mut","","",309,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call_mut","","",309,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren_mut","","",309,[[["self"],["exprparen"]]]],[11,"visit_expr_path_mut","","",309,[[["self"],["exprpath"]]]],[11,"visit_expr_range_mut","","",309,[[["self"],["exprrange"]]]],[11,"visit_expr_reference_mut","","",309,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat_mut","","",309,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return_mut","","",309,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct_mut","","",309,[[["self"],["exprstruct"]]]],[11,"visit_expr_try_mut","","",309,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block_mut","","",309,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple_mut","","",309,[[["self"],["exprtuple"]]]],[11,"visit_expr_type_mut","","",309,[[["self"],["exprtype"]]]],[11,"visit_expr_unary_mut","","",309,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe_mut","","",309,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim_mut","","",309,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while_mut","","",309,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield_mut","","",309,[[["self"],["expryield"]]]],[11,"visit_field_mut","","",309,[[["self"],["field"]]]],[11,"visit_field_pat_mut","","",309,[[["self"],["fieldpat"]]]],[11,"visit_field_value_mut","","",309,[[["self"],["fieldvalue"]]]],[11,"visit_fields_mut","","",309,[[["self"],["fields"]]]],[11,"visit_fields_named_mut","","",309,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed_mut","","",309,[[["self"],["fieldsunnamed"]]]],[11,"visit_file_mut","","",309,[[["self"],["file"]]]],[11,"visit_fn_arg_mut","","",309,[[["self"],["fnarg"]]]],[11,"visit_fn_decl_mut","","",309,[[["self"],["fndecl"]]]],[11,"visit_foreign_item_mut","","",309,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn_mut","","",309,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro_mut","","",309,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static_mut","","",309,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type_mut","","",309,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim_mut","","",309,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument_mut","","",309,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument_mut","","",309,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param_mut","","",309,[[["self"],["genericparam"]]]],[11,"visit_generics_mut","","",309,[[["self"],["generics"]]]],[11,"visit_ident_mut","","",309,[[["self"],["ident"]]]],[11,"visit_impl_item_mut","","",309,[[["self"],["implitem"]]]],[11,"visit_impl_item_const_mut","","",309,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_existential_mut","","",309,[[["self"],["implitemexistential"]]]],[11,"visit_impl_item_macro_mut","","",309,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method_mut","","",309,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type_mut","","",309,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim_mut","","",309,[[["self"],["implitemverbatim"]]]],[11,"visit_index_mut","","",309,[[["self"],["index"]]]],[11,"visit_item_mut","","",309,[[["self"],["item"]]]],[11,"visit_item_const_mut","","",309,[[["self"],["itemconst"]]]],[11,"visit_item_enum_mut","","",309,[[["self"],["itemenum"]]]],[11,"visit_item_existential_mut","","",309,[[["self"],["itemexistential"]]]],[11,"visit_item_extern_crate_mut","","",309,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn_mut","","",309,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod_mut","","",309,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl_mut","","",309,[[["self"],["itemimpl"]]]],[11,"visit_item_macro_mut","","",309,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2_mut","","",309,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod_mut","","",309,[[["self"],["itemmod"]]]],[11,"visit_item_static_mut","","",309,[[["self"],["itemstatic"]]]],[11,"visit_item_struct_mut","","",309,[[["self"],["itemstruct"]]]],[11,"visit_item_trait_mut","","",309,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias_mut","","",309,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type_mut","","",309,[[["self"],["itemtype"]]]],[11,"visit_item_union_mut","","",309,[[["self"],["itemunion"]]]],[11,"visit_item_use_mut","","",309,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim_mut","","",309,[[["self"],["itemverbatim"]]]],[11,"visit_label_mut","","",309,[[["self"],["label"]]]],[11,"visit_lifetime_mut","","",309,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def_mut","","",309,[[["self"],["lifetimedef"]]]],[11,"visit_lit_mut","","",309,[[["self"],["lit"]]]],[11,"visit_lit_bool_mut","","",309,[[["self"],["litbool"]]]],[11,"visit_lit_byte_mut","","",309,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str_mut","","",309,[[["self"],["litbytestr"]]]],[11,"visit_lit_char_mut","","",309,[[["self"],["litchar"]]]],[11,"visit_lit_float_mut","","",309,[[["self"],["litfloat"]]]],[11,"visit_lit_int_mut","","",309,[[["self"],["litint"]]]],[11,"visit_lit_str_mut","","",309,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim_mut","","",309,[[["self"],["litverbatim"]]]],[11,"visit_local_mut","","",309,[[["self"],["local"]]]],[11,"visit_macro_mut","","",309,[[["self"],["macro"]]]],[11,"visit_macro_delimiter_mut","","",309,[[["self"],["macrodelimiter"]]]],[11,"visit_member_mut","","",309,[[["self"],["member"]]]],[11,"visit_meta_mut","","",309,[[["self"],["meta"]]]],[11,"visit_meta_list_mut","","",309,[[["self"],["metalist"]]]],[11,"visit_meta_name_value_mut","","",309,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig_mut","","",309,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish_mut","","",309,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta_mut","","",309,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments_mut","","",309,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat_mut","","",309,[[["self"],["pat"]]]],[11,"visit_pat_box_mut","","",309,[[["self"],["patbox"]]]],[11,"visit_pat_ident_mut","","",309,[[["self"],["patident"]]]],[11,"visit_pat_lit_mut","","",309,[[["self"],["patlit"]]]],[11,"visit_pat_macro_mut","","",309,[[["self"],["patmacro"]]]],[11,"visit_pat_path_mut","","",309,[[["self"],["patpath"]]]],[11,"visit_pat_range_mut","","",309,[[["self"],["patrange"]]]],[11,"visit_pat_ref_mut","","",309,[[["self"],["patref"]]]],[11,"visit_pat_slice_mut","","",309,[[["self"],["patslice"]]]],[11,"visit_pat_struct_mut","","",309,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple_mut","","",309,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct_mut","","",309,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim_mut","","",309,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild_mut","","",309,[[["self"],["patwild"]]]],[11,"visit_path_mut","","",309,[[["self"],["path"]]]],[11,"visit_path_arguments_mut","","",309,[[["self"],["patharguments"]]]],[11,"visit_path_segment_mut","","",309,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq_mut","","",309,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime_mut","","",309,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type_mut","","",309,[[["self"],["predicatetype"]]]],[11,"visit_qself_mut","","",309,[[["self"],["qself"]]]],[11,"visit_range_limits_mut","","",309,[[["self"],["rangelimits"]]]],[11,"visit_return_type_mut","","",309,[[["self"],["returntype"]]]],[11,"visit_span_mut","","",309,[[["self"],["span"]]]],[11,"visit_stmt_mut","","",309,[[["self"],["stmt"]]]],[11,"visit_trait_bound_mut","","",309,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier_mut","","",309,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item_mut","","",309,[[["self"],["traititem"]]]],[11,"visit_trait_item_const_mut","","",309,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro_mut","","",309,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method_mut","","",309,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type_mut","","",309,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim_mut","","",309,[[["self"],["traititemverbatim"]]]],[11,"visit_type_mut","","",309,[[["self"],["type"]]]],[11,"visit_type_array_mut","","",309,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn_mut","","",309,[[["self"],["typebarefn"]]]],[11,"visit_type_group_mut","","",309,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait_mut","","",309,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer_mut","","",309,[[["self"],["typeinfer"]]]],[11,"visit_type_macro_mut","","",309,[[["self"],["typemacro"]]]],[11,"visit_type_never_mut","","",309,[[["self"],["typenever"]]]],[11,"visit_type_param_mut","","",309,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound_mut","","",309,[[["self"],["typeparambound"]]]],[11,"visit_type_paren_mut","","",309,[[["self"],["typeparen"]]]],[11,"visit_type_path_mut","","",309,[[["self"],["typepath"]]]],[11,"visit_type_ptr_mut","","",309,[[["self"],["typeptr"]]]],[11,"visit_type_reference_mut","","",309,[[["self"],["typereference"]]]],[11,"visit_type_slice_mut","","",309,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object_mut","","",309,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple_mut","","",309,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim_mut","","",309,[[["self"],["typeverbatim"]]]],[11,"visit_un_op_mut","","",309,[[["self"],["unop"]]]],[11,"visit_use_glob_mut","","",309,[[["self"],["useglob"]]]],[11,"visit_use_group_mut","","",309,[[["self"],["usegroup"]]]],[11,"visit_use_name_mut","","",309,[[["self"],["usename"]]]],[11,"visit_use_path_mut","","",309,[[["self"],["usepath"]]]],[11,"visit_use_rename_mut","","",309,[[["self"],["userename"]]]],[11,"visit_use_tree_mut","","",309,[[["self"],["usetree"]]]],[11,"visit_variant_mut","","",309,[[["self"],["variant"]]]],[11,"visit_vis_crate_mut","","",309,[[["self"],["viscrate"]]]],[11,"visit_vis_public_mut","","",309,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted_mut","","",309,[[["self"],["visrestricted"]]]],[11,"visit_visibility_mut","","",309,[[["self"],["visibility"]]]],[11,"visit_where_clause_mut","","",309,[[["self"],["whereclause"]]]],[11,"visit_where_predicate_mut","","",309,[[["self"],["wherepredicate"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",324,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",324,[[["self"]],["error"]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemExistential"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExistential"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[8,"Visit"],[8,"VisitMut"],[8,"Parse"],[8,"Parser"],[3,"StepCursor"],[3,"ParseBuffer"],[3,"Error"],[3,"Ident"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"]]};
searchIndex["synstructure"]={"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",N,N],[12,"binding","","The name which this BindingInfo will bind to.",0,N],[12,"style","","The type of binding which this BindingInfo will create.",0,N],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",N,N],[12,"attrs","","",1,N],[12,"ident","","",1,N],[12,"fields","","",1,N],[12,"discriminant","","",1,N],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",N,N],[12,"prefix","","",2,N],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",N,N],[4,"AddBounds","","Changes how bounds are added",N,N],[13,"Both","","Add for fields and generics",3,N],[13,"Fields","","Fields only",3,N],[13,"Generics","","Generics only",3,N],[13,"None","","None",3,N],[4,"BindStyle","","The type of binding to use when generating a pattern.",N,N],[13,"Move","","`x`",4,N],[13,"MoveMut","","`mut x`",4,N],[13,"Ref","","`ref x`",4,N],[13,"RefMut","","`ref mut x`",4,N],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",N,[[["t"]],["string"]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,[[["self"]],["vec",["ident"]]]],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,N],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,N],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the current variant.",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,[[["self"]],["vec",["ident"]]]],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",5,[[["deriveinput"]],["self"]]],[11,"variants","","Returns a slice of the variants in this Structure.",5,N],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",5,N],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",5,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",5,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",5,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",5,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",5,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",5,[[["self"],["f"]],["self"]]],[11,"add_bounds","","Specify which bounds should be generated by impl-generating functions such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.",5,[[["self"],["addbounds"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",5,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",5,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",5,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",5,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",5,[[["self"]],["vec",["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",5,[[["self"],["genericparam"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",5,[[["self"],["traitbound"],["option"],["addbounds"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",5,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",5,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",5,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",5,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",5,[[["self"],["tokenstream"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",N,N],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"eq","","",3,[[["self"],["addbounds"]],["bool"]]],[11,"eq","","",4,[[["self"],["bindstyle"]],["bool"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["variantast"]],["bool"]]],[11,"ne","","",1,[[["self"],["variantast"]],["bool"]]],[11,"eq","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"eq","","",5,[[["self"],["structure"]],["bool"]]],[11,"ne","","",5,[[["self"],["structure"]],["bool"]]],[11,"clone","","",3,[[["self"]],["addbounds"]]],[11,"clone","","",4,[[["self"]],["bindstyle"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"clone","","",5,[[["self"]],["structure"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",5,N],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"AddBounds"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["termcolor"]={"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",N,N],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",N,N],[3,"BufferedStandardStream","","Like `StandardStream`, but does buffered writing.",N,N],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",N,N],[3,"Buffer","","Write colored text to memory.",N,N],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",N,N],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",N,N],[3,"ColorSpec","","A color specification.",N,N],[3,"ParseColorError","","An error from parsing an invalid color specification.",N,N],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",N,N],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,N],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,N],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,N],[13,"Never","","Never emit colors.",0,N],[4,"Color","","The set of available colors for the terminal foreground/background.",N,N],[13,"Black","","",1,N],[13,"Blue","","",1,N],[13,"Green","","",1,N],[13,"Red","","",1,N],[13,"Cyan","","",1,N],[13,"Magenta","","",1,N],[13,"Yellow","","",1,N],[13,"White","","",1,N],[13,"Ansi256","","",1,N],[13,"Rgb","","",1,N],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",N,N],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,[[["self"]],["bool"]]],[10,"set_color","","Set the color settings of the writer.",2,[[["self"],["colorspec"]],["result"]]],[10,"reset","","Reset the current color settings to their original settings.",2,[[["self"]],["result"]]],[11,"is_synchronous","","Returns true if and only if the underlying writer must synchronously interact with an end user's device in order to control colors. By default, this always returns `false`.",2,[[["self"]],["bool"]]],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,[[["colorchoice"]],["standardstream"]]],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,[[["colorchoice"]],["standardstream"]]],[11,"lock","","Lock the underlying writer.",3,[[["self"]],["standardstreamlock"]]],[11,"stdout","","Create a new `BufferedStandardStream` with the given color preferences that writes to standard output via a buffered writer.",4,[[["colorchoice"]],["bufferedstandardstream"]]],[11,"stderr","","Create a new `BufferedStandardStream` with the given color preferences that writes to standard error via a buffered writer.",4,[[["colorchoice"]],["bufferedstandardstream"]]],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,[[["colorchoice"]],["bufferwriter"]]],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,[[["self"],["option",["vec"]]]]],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,[[["self"]],["buffer"]]],[11,"print","","Prints the contents of the given buffer.",5,[[["self"],["buffer"]],["result"]]],[11,"no_color","","Create a buffer that drops all color information.",6,[[],["buffer"]]],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,[[],["buffer"]]],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,[[["self"]],["bool"]]],[11,"len","","Returns the length of this buffer in bytes.",6,[[["self"]],["usize"]]],[11,"clear","","Clears this buffer.",6,[[["self"]]]],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,[[["self"]],["vec",["u8"]]]],[11,"as_slice","","Return the underlying data of the buffer.",6,N],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,N],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,[[["w"]],["nocolor"]]],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",7,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",7,[[["self"]],["w"]]],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,[[["w"]],["ansi"]]],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,[[["self"]],["w"]]],[11,"get_ref","","Return a reference to the inner writer.",8,[[["self"]],["w"]]],[11,"get_mut","","Return a mutable reference to the inner writer.",8,[[["self"]],["w"]]],[11,"new","","Create a new color specification that has no colors or styles.",9,[[],["colorspec"]]],[11,"fg","","Get the foreground color.",9,[[["self"]],["option",["color"]]]],[11,"set_fg","","Set the foreground color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bg","","Get the background color.",9,[[["self"]],["option",["color"]]]],[11,"set_bg","","Set the background color.",9,[[["self"],["option",["color"]]],["colorspec"]]],[11,"bold","","Get whether this is bold or not.",9,[[["self"]],["bool"]]],[11,"set_bold","","Set whether the text is bolded or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"underline","","Get whether this is underline or not.",9,[[["self"]],["bool"]]],[11,"set_underline","","Set whether the text is underlined or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"intense","","Get whether this is intense or not.",9,[[["self"]],["bool"]]],[11,"set_intense","","Set whether the text is intense or not.",9,[[["self"],["bool"]],["colorspec"]]],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,[[["self"]],["bool"]]],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,[[["self"]]]],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,[[["self"]],["str"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"supports_color","","",3,[[["self"]],["bool"]]],[11,"set_color","","",3,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",3,[[["self"]],["result"]]],[11,"is_synchronous","","",3,[[["self"]],["bool"]]],[11,"supports_color","","",11,[[["self"]],["bool"]]],[11,"set_color","","",11,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",11,[[["self"]],["result"]]],[11,"is_synchronous","","",11,[[["self"]],["bool"]]],[11,"supports_color","","",4,[[["self"]],["bool"]]],[11,"set_color","","",4,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",4,[[["self"]],["result"]]],[11,"is_synchronous","","",4,[[["self"]],["bool"]]],[11,"supports_color","","",6,[[["self"]],["bool"]]],[11,"set_color","","",6,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",6,[[["self"]],["result"]]],[11,"is_synchronous","","",6,[[["self"]],["bool"]]],[11,"supports_color","","",7,[[["self"]],["bool"]]],[11,"set_color","","",7,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",7,[[["self"]],["result"]]],[11,"is_synchronous","","",7,[[["self"]],["bool"]]],[11,"supports_color","","",8,[[["self"]],["bool"]]],[11,"set_color","","",8,[[["self"],["colorspec"]],["result"]]],[11,"reset","","",8,[[["self"]],["result"]]],[11,"is_synchronous","","",8,[[["self"]],["bool"]]],[11,"default","","",9,[[],["colorspec"]]],[11,"eq","","",0,[[["self"],["colorchoice"]],["bool"]]],[11,"eq","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"ne","","",9,[[["self"],["colorspec"]],["bool"]]],[11,"eq","","",1,[[["self"],["color"]],["bool"]]],[11,"ne","","",1,[[["self"],["color"]],["bool"]]],[11,"eq","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"ne","","",10,[[["self"],["parsecolorerror"]],["bool"]]],[11,"clone","","",0,[[["self"]],["colorchoice"]]],[11,"clone","","",9,[[["self"]],["colorspec"]]],[11,"clone","","",1,[[["self"]],["color"]]],[11,"clone","","",10,[[["self"]],["parsecolorerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["color","parsecolorerror"]]]],[11,"write","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"description","","",10,[[["self"]],["str"]]]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"BufferedStandardStream"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"],[3,"StandardStreamLock"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",1,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",1,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",1,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",1,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",1,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["box"]]]],[11,"size_hint","","",3,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"default","","",1,[[],["cachedthreadlocal"]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"into_iter","","",1,[[["self"]],["cachedintoiter"]]],[11,"drop","","",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",3,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",3,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",3,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",3,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",3,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",3,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",3,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",3,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",3,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",3,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",3,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",3,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",3,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",3,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",3,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",3,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",3,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",3,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",3,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",3,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",4,[[["self"],["precisetime"]],["duration"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,[[],["steadytime"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"partial_cmp","","",3,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["duration"]],["bool"]]],[11,"le","","",3,[[["self"],["duration"]],["bool"]]],[11,"gt","","",3,[[["self"],["duration"]],["bool"]]],[11,"ge","","",3,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["duration"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["steadytime"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"eq","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",6,[[["self"],["outofrangeerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"eq","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",5,[[["self"],["steadytime"]],["bool"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"clone","","",6,[[["self"]],["outofrangeerror"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["precisetime"]]],[11,"clone","","",5,[[["self"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"sub","","",3,[[["self"],["duration"]],["duration"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"sub","","",5,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"add","","",3,[[["self"],["duration"]],["duration"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"add","","",5,[[["self"],["duration"]],["steadytime"]]],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"mul","","",3,[[["self"],["i32"]],["duration"]]],[11,"div","","",3,[[["self"],["i32"]],["duration"]]],[11,"neg","","",3,[[["self"]],["duration"]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"description","","",6,[[["self"]],["str"]]],[11,"description","","",2,[[["self"]],["str"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"OutOfRangeError"],[3,"TmFmt"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",0,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",0,[[["self"]]]],[11,"block_on","","Blocks the thread on the specified future, returning the value with which that future completes.",0,[[["self"],["f"]],["result"]]],[11,"current","","Returns a handle to the default executor for the current context.",1,[[],["defaultexecutor"]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",2,N],[16,"Error","","Error returned by `park`",2,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",2,N],[10,"park","","Block the current thread unless or until the token is available.",2,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",2,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",3,[[["self"]]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",4,[[],["parkthread"]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",5,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",5,[[["self"]],["result",["spawnerror"]]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",6,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",6,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",6,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",6,[[["self"]],["bool"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","tokio_executor::park","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"unpark","","",4,N],[11,"park","","",4,[[["self"]],["result"]]],[11,"park_timeout","","",4,[[["self"],["duration"]],["result"]]],[11,"unpark","","",9,[[["self"]]]],[11,"spawn","tokio_executor","",1,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",1,[[["self"]],["result",["spawnerror"]]]],[11,"clone","","",1,[[["self"]],["defaultexecutor"]]],[11,"clone","tokio_executor::park","",9,[[["self"]],["unparkthread"]]],[11,"drop","tokio_executor","",0,[[["self"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_executor::park","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_executor","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"execute","","",1,[[["self"],["t"]],["result",["executeerror"]]]]],"paths":[[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[8,"Executor"],[3,"SpawnError"],[3,"EnterError"],[3,"ParkError"],[3,"UnparkThread"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",0,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",0,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",0,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",0,[[["self"]],["t"]]],[11,"into_inner","","Returns the underlying I/O object.",1,[[["self"]],["a"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",2,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",2,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",2,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",2,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",2,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",2,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",2,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",2,[[["self"],["usize"]],["window"]]],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",3,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",3,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",3,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",3,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",3,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",4,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",4,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",4,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",4,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"into","tokio_io::io","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into_future","","",10,[[["self"]],["f"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into_future","","",11,[[["self"]],["f"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into_future","","",14,[[["self"]],["f"]]],[11,"read_buf","","",12,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",0,[[["self"]],["poll",["error"]]]],[11,"shutdown","","",13,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"as_mut","","",2,N],[11,"partial_cmp","","",0,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",0,[[["self"],["allowstdio"]],["ordering"]]],[11,"eq","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"as_ref","","",2,N],[11,"clone","","",0,[[["self"]],["allowstdio"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",0,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",0,N],[11,"read","","",12,N],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"write_all","","",0,N],[11,"write_fmt","","",0,[[["self"],["arguments"]],["result"]]],[11,"write","","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"poll","","",8,[[["self"]],["poll",["error"]]]],[11,"poll","","",9,[[["self"]],["poll",["error"]]]],[11,"poll","","",10,[[["self"]],["poll",["error"]]]],[11,"poll","","",11,[[["self"]],["poll",["error"]]]],[11,"poll","","",14,[[["self"]],["poll",["error"]]]],[11,"poll","","",1,[[["self"]],["poll",["option","error"]]]],[11,"prepare_uninitialized_buffer","tokio_io","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",3,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",3,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",3,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",3,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",3,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",4,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",4,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",4,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"AllowStdIo"],[3,"Lines"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"WriteAll"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",1,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,[[["self"]],["result"]]],[11,"new","","Create a new `Registration`.",2,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",2,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",2,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",2,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",2,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",2,[[["self"]],["result",["option"]]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",3,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",3,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",3,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",3,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",3,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",3,[[["self"]],["result",["background"]]]],[11,"current","","Returns a handle to the current reactor.",4,[[],["handle"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,[[],["handle"]]],[11,"clone","","",4,[[["self"]],["handle"]]],[11,"clone","","",7,[[["self"]],["setfallbackerror"]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"read","","",1,N],[11,"write","","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"unpark","","",3,N],[11,"park","","",3,[[["self"]],["result"]]],[11,"park_timeout","","",3,[[["self"],["duration"]],["result"]]],[11,"unpark","","",4,[[["self"]]]],[11,"shutdown","","",1,[[["self"]],["poll",["error"]]]]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Reactor"],[3,"Handle"],[3,"Shutdown"],[3,"Turn"],[3,"SetFallbackError"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",1,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",1,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",1,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",1,N],[13,"DateInvalid","","A serialized date was invalid.",1,N],[13,"NumberInvalid","","A serialized number was invalid.",1,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",1,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",1,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",2,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",2,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",2,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",2,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",2,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",2,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",2,[[["self"],["bool"]],["self"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",3,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",3,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",3,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",4,[[["self"]],["option"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N],[11,"into","toml::value","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","toml::ser","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","toml::de","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"eq","toml::value","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",5,[[["self"],["datetime"]],["bool"]]],[11,"eq","toml::ser","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"from","toml::value","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"clone","","",6,[[["self"]],["datetimeparseerror"]]],[11,"clone","toml::ser","",1,[[["self"]],["error"]]],[11,"clone","toml::de","",4,[[["self"]],["error"]]],[11,"fmt","toml::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::de","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::value","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::de","",4,[[["self"],["formatter"]],["result"]]],[11,"index","toml::value","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"from_str","","",5,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"description","toml::ser","",1,[[["self"]],["str"]]],[11,"description","toml::de","",4,[[["self"]],["str"]]],[11,"serialize","toml::value","",0,[[["self"],["s"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"custom","toml::ser","",1,[[["t"]],["error"]]],[11,"into_deserializer","toml::value","",0,[[["self"]],["self"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize","","",5,[[["d"]],["result",["datetime"]]]],[11,"custom","toml::de","",4,[[["t"]],["error"]]]],"paths":[[4,"Value"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"],[3,"Error"],[3,"Datetime"],[3,"DatetimeParseError"]]};
searchIndex["traitobject"]={"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",N,N],[5,"data_mut","","Get the data pointer from this trait object, mutably.",N,N],[8,"Trait","","A trait implemented for all trait objects.",N,N]],"paths":[]};
searchIndex["typeable"]={"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",N,N],[11,"get_type","","Get the `TypeId` of this object.",0,[[["self"]],["typeid"]]]],"paths":[[8,"Typeable"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicase"]={"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",N,N],[12,"0","","",0,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["str"]]],[11,"into","","",0,[[["self"]],["string"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["s2"]],["bool"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["unicase"]]],[11,"deref_mut","","",0,[[["self"]],["s"]]],[11,"deref","","",0,[[["self"]],["s"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from_str","","",0,[[["str"]],["result",["unicase"]]]]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","unicode_bidi::level","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"cmp","","",5,[[["self"],["level"]],["ordering"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"eq","unicode_bidi","",3,[[["self"],["bidiclass"]],["bool"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"from","unicode_bidi::level","Create level by number",5,[[["u8"]],["level"]]],[11,"clone","","",5,[[["self"]],["level"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"fmt","unicode_bidi::level","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","unicode_bidi","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",1,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",1,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",1,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",1,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",1,[[["self"]],["streamsafe"]]],[11,"nfd","","",2,[[["self"]],["decompositions"]]],[11,"nfkd","","",2,[[["self"]],["decompositions"]]],[11,"nfc","","",2,[[["self"]],["recompositions"]]],[11,"nfkc","","",2,[[["self"]],["recompositions"]]],[11,"stream_safe","","",2,[[["self"]],["streamsafe"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"nfd","","",3,[[["self"]],["decompositions"]]],[11,"nfkd","","",3,[[["self"]],["decompositions"]]],[11,"nfc","","",3,[[["self"]],["recompositions"]]],[11,"nfkc","","",3,[[["self"]],["recompositions"]]],[11,"stream_safe","","",3,[[["self"]],["streamsafe"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"nfd","","",4,[[["self"]],["decompositions"]]],[11,"nfkd","","",4,[[["self"]],["decompositions"]]],[11,"nfc","","",4,[[["self"]],["recompositions"]]],[11,"nfkc","","",4,[[["self"]],["recompositions"]]],[11,"stream_safe","","",4,[[["self"]],["streamsafe"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["char"]]]],[11,"next","","",4,[[["self"]],["option",["char"]]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"clone","","",2,[[["self"]],["decompositions"]]],[11,"clone","","",3,[[["self"]],["recompositions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"IsNormalized"],[8,"UnicodeNormalization"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["untrusted"]={"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.","items":[[3,"Input","untrusted","A wrapper around `&'a [u8]` that helps in writing panic-free code.",N,N],[3,"Reader","","A read-only, forward-only* cursor into the data in an `Input`.",N,N],[3,"Mark","","An index into the already-parsed input of a `Reader`.",N,N],[3,"EndOfInput","","The error type used to indicate the end of the input was reached before the operation could be completed.",N,N],[5,"read_all_optional","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. When `input` is `None`, `read` will be called with `None`.",N,[[["option",["input"]],["e"],["f"]],["result"]]],[11,"from","","Construct a new `Input` for the given input `bytes`.",0,N],[11,"is_empty","","Returns `true` if the input is empty and false otherwise.",0,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the input.",0,N],[11,"len","","Returns the length of the `Input`.",0,[[["self"]],["usize"]]],[11,"read_all","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. If `read` does not consume the entire input, `incomplete_read` is returned.",0,[[["self"],["e"],["f"]],["result"]]],[11,"read_all_mut","","Like `read_all`, except taking an `FnMut`.",0,[[["self"],["e"],["f"]],["result"]]],[11,"as_slice_less_safe","","Access the input as a slice so it can be processed by functions that are not written using the Input/Reader framework.",0,N],[11,"new","","Construct a new Reader for the given input. Use `read_all`, `read_all_mut`, or `read_all_optional` instead of `Reader::new` whenever possible.",1,[[["input"]],["reader"]]],[11,"at_end","","Returns `true` if the reader is at the end of the input, and `false` otherwise.",1,[[["self"]],["bool"]]],[11,"get_input_between_marks","","Returns an `Input` for already-parsed input that has had its boundaries marked using `mark`.",1,[[["self"],["mark"],["mark"]],["result",["input","endofinput"]]]],[11,"mark","","Return the current position of the `Reader` for future use in a call to `get_input_between_marks`.",1,[[["self"]],["mark"]]],[11,"peek","","Returns `true` if there is at least one more byte in the input and that byte is equal to `b`, and false otherwise.",1,[[["self"],["u8"]],["bool"]]],[11,"read_byte","","Reads the next input byte.",1,[[["self"]],["result",["u8","endofinput"]]]],[11,"skip","","Skips `num_bytes` of the input.",1,[[["self"],["usize"]],["result",["endofinput"]]]],[11,"skip_and_get_input","","Skips `num_bytes` of the input, returning the skipped input as an `Input`.",1,[[["self"],["usize"]],["result",["input","endofinput"]]]],[11,"skip_to_end","","Skips the reader to the end of the input, returning the skipped input as an `Input`.",1,[[["self"]],["input"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["input"]],["bool"]]],[11,"eq","","",0,N],[11,"eq","","",3,[[["self"],["endofinput"]],["bool"]]],[11,"clone","","",0,[[["self"]],["input"]]],[11,"clone","","",3,[[["self"]],["endofinput"]]]],"paths":[[3,"Input"],[3,"Reader"],[3,"Mark"],[3,"EndOfInput"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",6,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",6,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",6,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",6,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",6,[[["self"],["i"]],["self"]]],[11,"description","","",4,[[["self"]],["str"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",7,[[["self"]],["string"]]],[10,"finish","","",7,N],[16,"Finished","","",7,N],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",8,[[["self"]],["parseintoowned"]]],[11,"new","","Create a new `application/x-www-form-urlencoded` serializer for the given target.",9,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",9,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",9,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",9,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",9,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",9,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",9,N],[11,"base_url","url","Change the base URL",10,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",10,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",10,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",10,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"parse","","Parse an absolute URL from a string.",11,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",11,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",11,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",11,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",11,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",11,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",11,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",11,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",11,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",11,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",11,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",11,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,[[["self"]],["result",["pathbuf"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","url::form_urlencoded","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"as_mut_string","url","",14,[[["self"]],["string"]]],[11,"finish","","",14,[[["self"]],["url"]]],[11,"next","","",13,[[["self"]],["option",["socketaddr"]]]],[11,"next","url::form_urlencoded","",8,[[["self"]],["option"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"next","","",16,[[["self"]],["option",["str"]]]],[11,"size_hint","","",16,N],[11,"partial_cmp","url","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"eq","","",12,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",12,[[["self"],["opaqueorigin"]],["bool"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"as_ref","","",11,[[["self"]],["str"]]],[11,"clone","","",2,[[["self"]],["host"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"clone","","",12,[[["self"]],["opaqueorigin"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"clone","url::form_urlencoded","",8,[[["self"]],["parse"]]],[11,"clone","url","",11,[[["self"]],["url"]]],[11,"clone","","",10,[[["self"]],["parseoptions"]]],[11,"drop","","",6,[[["self"]]]],[11,"drop","","",14,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","url::form_urlencoded","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","url","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"index","","",11,[[["self"],["rangefull"]],["str"]]],[11,"index","","",11,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",11,[[["self"],["range",["position"]]],["str"]]],[11,"hash","","",2,N],[11,"hash","","",1,N],[11,"hash","","",12,N],[11,"hash","","",11,[[["self"],["h"]]]],[11,"from_str","","",11,[[["str"]],["result",["url","parseerror"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"to_socket_addrs","","",11,[[["self"]],["result"]]]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"PathSegmentsMut"],[8,"Target"],[3,"Parse"],[3,"Serializer"],[3,"ParseOptions"],[3,"Url"],[3,"OpaqueOrigin"],[3,"SocketAddrs"],[3,"UrlQuery"],[3,"ParseIntoOwned"],[3,"ByteSerialize"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"]={"doc":"Generate and parse UUIDs.","items":[[3,"BytesError","uuid","The error that can occur when creating a [`Uuid`].",N,N],[3,"Uuid","","A Universally Unique Identifier (UUID).",N,N],[4,"Version","","The version of the UUID, denoting the generating algorithm.",N,N],[13,"Nil","","Special case for `nil` [`Uuid`].",0,N],[13,"Mac","","Version 1: MAC address",0,N],[13,"Dce","","Version 2: DCE Security",0,N],[13,"Md5","","Version 3: MD5 hash",0,N],[13,"Random","","Version 4: Random",0,N],[13,"Sha1","","Version 5: SHA-1 hash",0,N],[4,"Variant","","The reserved variants of UUIDs.",N,N],[13,"NCS","","Reserved by the NCS for backward compatibility",1,N],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,N],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,N],[13,"Future","","Reserved for future expansion",1,N],[0,"adapter","","Adapters for various formats for [`Uuid`]s",N,N],[3,"Hyphenated","uuid::adapter","An adaptor for formatting an [`Uuid`] as a hyphenated string.",N,N],[3,"HyphenatedRef","","An adaptor for formatting an [`Uuid`] as a hyphenated string.",N,N],[3,"Simple","","An adaptor for formatting an [`Uuid`] as a simple string.",N,N],[3,"SimpleRef","","An adaptor for formatting an [`Uuid`] as a simple string.",N,N],[3,"Urn","","An adaptor for formatting an [`Uuid`] as a URN string.",N,N],[3,"UrnRef","","An adaptor for formatting an [`Uuid`] as a URN string.",N,N],[11,"to_hyphenated","uuid","Creates a [`Hyphenated`] instance from a [`Uuid`].",2,[[["self"]],["hyphenated"]]],[11,"to_hyphenated_ref","","Creates a [`HyphenatedRef`] instance from a [`Uuid`] reference.",2,[[["self"]],["hyphenatedref"]]],[11,"to_simple","","Creates a [`Simple`] instance from a [`Uuid`].",2,[[["self"]],["simple"]]],[11,"to_simple_ref","","Creates a [`SimpleRef`] instance from a [`Uuid`] reference.",2,[[["self"]],["simpleref"]]],[11,"to_urn","","Creates a [`Urn`] instance from a [`Uuid`].",2,[[["self"]],["urn"]]],[11,"to_urn_ref","","Creates a [`UrnRef`] instance from a [`Uuid`] reference.",2,[[["self"]],["urnref"]]],[18,"LENGTH","uuid::adapter","The length of a hyphenated [`Uuid`] string.",3,N],[11,"from_uuid","","Creates a [`Hyphenated`] from a [`Uuid`].",3,[[["uuid"]],["self"]]],[18,"LENGTH","","The length of a hyphenated [`Uuid`] string.",4,N],[11,"from_uuid_ref","","Creates a [`HyphenatedRef`] from a [`Uuid`] reference.",4,[[["uuid"]],["self"]]],[18,"LENGTH","","The length of a simple [`Uuid`] string.",5,N],[11,"from_uuid","","Creates a [`Simple`] from a [`Uuid`].",5,[[["uuid"]],["self"]]],[18,"LENGTH","","The length of a simple [`Uuid`] string.",6,N],[11,"from_uuid_ref","","Creates a [`SimpleRef`] from a [`Uuid`] reference.",6,[[["uuid"]],["self"]]],[18,"LENGTH","","The length of a URN [`Uuid`] string.",7,N],[11,"from_uuid","","Creates a [`Urn`] from a [`Uuid`].",7,[[["uuid"]],["self"]]],[18,"LENGTH","","The length of a URN [`Uuid`] string.",8,N],[11,"from_uuid_ref","","Creates a [`UrnRef`] from a [`Uuid`] reference.",8,[[["uuid"]],["self"]]],[0,"parser","uuid","[`Uuid`] parsing constructs and utilities.",N,N],[4,"Expected","uuid::parser","The expected value.",N,N],[13,"Any","","Expected any one of the given values.",9,N],[13,"Exact","","Expected the given value.",9,N],[13,"Range","","Expected any values in the given range.",9,N],[12,"min","uuid::parser::Expected","The minimum expected value.",9,N],[12,"max","","The maximum expected value.",9,N],[4,"ParseError","uuid::parser","An error that can occur while parsing a [`Uuid`] string.",N,N],[13,"InvalidCharacter","","Invalid character in the [`Uuid`] string.",10,N],[12,"expected","uuid::parser::ParseError","The expected characters.",10,N],[12,"found","","The invalid character found.",10,N],[12,"index","","The invalid character position.",10,N],[13,"InvalidGroupCount","uuid::parser","Invalid number of segments in the [`Uuid`] string.",10,N],[12,"expected","uuid::parser::ParseError","The expected number of segments.",10,N],[12,"found","","The number of segments found.",10,N],[13,"InvalidGroupLength","uuid::parser","Invalid length of a segment in a [`Uuid`] string.",10,N],[12,"expected","uuid::parser::ParseError","The expected length of the segment.",10,N],[12,"found","","The length of segment found.",10,N],[12,"group","","The segment with invalid length.",10,N],[13,"InvalidLength","uuid::parser","Invalid length of the [`Uuid`] string.",10,N],[12,"expected","uuid::parser::ParseError","The expected length(s).",10,N],[12,"found","","The invalid length found.",10,N],[0,"prelude","uuid","The [`uuid`] prelude.",N,N],[11,"new_v4","","Creates a random [`Uuid`].",2,[[],["self"]]],[6,"Bytes","","A 128-bit (16 byte) buffer containing the ID.",N,N],[11,"expected","","The expected number of bytes.",11,[[["self"]],["usize"]]],[11,"found","","The number of bytes found.",11,[[["self"]],["usize"]]],[11,"new","","Create a new [`UuidError`].",11,[[["usize"],["usize"]],["self"]]],[18,"NAMESPACE_DNS","","[`Uuid`] namespace for Domain Name System (DNS).",2,N],[18,"NAMESPACE_OID","","[`Uuid`] namespace for ISO Object Identifiers (OIDs).",2,N],[18,"NAMESPACE_URL","","[`Uuid`] namespace for Uniform Resource Locators (URLs).",2,N],[18,"NAMESPACE_X500","","[`Uuid`] namespace for X.500 Distinguished Names (DNs).",2,N],[11,"nil","","The 'nil UUID'.",2,[[],["uuid"]]],[11,"from_fields","","Creates a `Uuid` from four field values.",2,N],[11,"from_slice","","Creates a `Uuid` using the supplied bytes.",2,N],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",2,[[["bytes"]],["uuid"]]],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",2,[[["bytes"]],["uuid"]]],[11,"get_variant","","Returns the variant of the `Uuid` structure.",2,[[["self"]],["option",["variant"]]]],[11,"get_version_num","","Returns the version number of the `Uuid`.",2,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the `Uuid`.",2,[[["self"]],["option",["version"]]]],[11,"as_fields","","Returns the four field values of the UUID.",2,N],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",2,[[["self"]],["bytes"]]],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",2,[[["self"]],["option"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",2,[[["str"]],["result",["uuid","parseerror"]]]],[11,"is_nil","","Tests if the UUID is nil",2,[[["self"]],["bool"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","uuid::adapter","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","uuid::parser","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"partial_cmp","uuid::adapter","",3,[[["self"],["hyphenated"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"le","","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"gt","","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"ge","","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["hyphenatedref"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"le","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"gt","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"ge","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["simple"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["simple"]],["bool"]]],[11,"le","","",5,[[["self"],["simple"]],["bool"]]],[11,"gt","","",5,[[["self"],["simple"]],["bool"]]],[11,"ge","","",5,[[["self"],["simple"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["simpleref"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"le","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"gt","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"ge","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["urn"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["urn"]],["bool"]]],[11,"le","","",7,[[["self"],["urn"]],["bool"]]],[11,"gt","","",7,[[["self"],["urn"]],["bool"]]],[11,"ge","","",7,[[["self"],["urn"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["urnref"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["urnref"]],["bool"]]],[11,"le","","",8,[[["self"],["urnref"]],["bool"]]],[11,"gt","","",8,[[["self"],["urnref"]],["bool"]]],[11,"ge","","",8,[[["self"],["urnref"]],["bool"]]],[11,"partial_cmp","uuid::parser","",9,[[["self"],["expected"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["expected"]],["bool"]]],[11,"le","","",9,[[["self"],["expected"]],["bool"]]],[11,"gt","","",9,[[["self"],["expected"]],["bool"]]],[11,"ge","","",9,[[["self"],["expected"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["parseerror"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"le","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"gt","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"ge","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"partial_cmp","uuid","",11,[[["self"],["byteserror"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["byteserror"]],["bool"]]],[11,"le","","",11,[[["self"],["byteserror"]],["bool"]]],[11,"gt","","",11,[[["self"],["byteserror"]],["bool"]]],[11,"ge","","",11,[[["self"],["byteserror"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["uuid"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["uuid"]],["bool"]]],[11,"le","","",2,[[["self"],["uuid"]],["bool"]]],[11,"gt","","",2,[[["self"],["uuid"]],["bool"]]],[11,"ge","","",2,[[["self"],["uuid"]],["bool"]]],[11,"default","uuid::adapter","",3,[[],["hyphenated"]]],[11,"default","","",5,[[],["simple"]]],[11,"default","","",7,[[],["urn"]]],[11,"default","uuid","",2,[[],["self"]]],[11,"cmp","uuid::adapter","",3,[[["self"],["hyphenated"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["hyphenatedref"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["simple"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["simpleref"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["urn"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["urnref"]],["ordering"]]],[11,"cmp","uuid::parser","",9,[[["self"],["expected"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["parseerror"]],["ordering"]]],[11,"cmp","uuid","",11,[[["self"],["byteserror"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["uuid"]],["ordering"]]],[11,"eq","uuid::adapter","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"ne","","",3,[[["self"],["hyphenated"]],["bool"]]],[11,"eq","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"ne","","",4,[[["self"],["hyphenatedref"]],["bool"]]],[11,"eq","","",5,[[["self"],["simple"]],["bool"]]],[11,"ne","","",5,[[["self"],["simple"]],["bool"]]],[11,"eq","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"ne","","",6,[[["self"],["simpleref"]],["bool"]]],[11,"eq","","",7,[[["self"],["urn"]],["bool"]]],[11,"ne","","",7,[[["self"],["urn"]],["bool"]]],[11,"eq","","",8,[[["self"],["urnref"]],["bool"]]],[11,"ne","","",8,[[["self"],["urnref"]],["bool"]]],[11,"eq","uuid::parser","",9,[[["self"],["expected"]],["bool"]]],[11,"ne","","",9,[[["self"],["expected"]],["bool"]]],[11,"eq","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",10,[[["self"],["parseerror"]],["bool"]]],[11,"eq","uuid","",11,[[["self"],["byteserror"]],["bool"]]],[11,"ne","","",11,[[["self"],["byteserror"]],["bool"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"eq","","",1,[[["self"],["variant"]],["bool"]]],[11,"eq","","",2,[[["self"],["uuid"]],["bool"]]],[11,"ne","","",2,[[["self"],["uuid"]],["bool"]]],[11,"from","uuid::adapter","",3,[[["uuid"]],["self"]]],[11,"from","","",4,[[["uuid"]],["self"]]],[11,"from","","",5,[[["uuid"]],["self"]]],[11,"from","","",6,[[["uuid"]],["self"]]],[11,"from","","",7,[[["uuid"]],["self"]]],[11,"from","","",8,[[["uuid"]],["self"]]],[11,"clone","","",3,[[["self"]],["hyphenated"]]],[11,"clone","","",4,[[["self"]],["hyphenatedref"]]],[11,"clone","","",5,[[["self"]],["simple"]]],[11,"clone","","",6,[[["self"]],["simpleref"]]],[11,"clone","","",7,[[["self"]],["urn"]]],[11,"clone","","",8,[[["self"]],["urnref"]]],[11,"clone","uuid::parser","",9,[[["self"]],["expected"]]],[11,"clone","","",10,[[["self"]],["parseerror"]]],[11,"clone","uuid","",11,[[["self"]],["byteserror"]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"clone","","",1,[[["self"]],["variant"]]],[11,"clone","","",2,[[["self"]],["uuid"]]],[11,"fmt","uuid::adapter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::parser","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::adapter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::parser","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","uuid::adapter","",3,N],[11,"hash","","",4,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","uuid::parser","",9,N],[11,"hash","","",10,N],[11,"hash","uuid","",11,N],[11,"hash","","",2,N],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"fmt","uuid::adapter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid::adapter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","uuid","",2,[[["self"],["formatter"]],["result"]]],[11,"description","uuid::parser","",10,[[["self"]],["str"]]],[11,"description","uuid","",11,[[["self"]],["str"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]]],"paths":[[4,"Version"],[4,"Variant"],[3,"Uuid"],[3,"Hyphenated"],[3,"HyphenatedRef"],[3,"Simple"],[3,"SimpleRef"],[3,"Urn"],[3,"UrnRef"],[4,"Expected"],[4,"ParseError"],[3,"BytesError"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["void"]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["walkdir"]={"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",N,N],[3,"IntoIter","","An iterator for recursively descending into a directory.",N,N],[3,"DirEntry","","A directory entry.",N,N],[3,"FilterEntry","","A recursive directory iterator that skips entries.",N,N],[3,"Error","","An error produced by recursively walking a directory.",N,N],[6,"Result","","A result type for walkdir operations.",N,N],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",N,N],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",0,[[["self"]],["u64"]]],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",1,[[["p"]],["self"]]],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",1,[[["self"],["bool"]],["self"]]],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",1,[[["self"],["usize"]],["self"]]],[11,"sort_by","","Set a function for sorting directory entries.",1,[[["self"],["f"]],["self"]]],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",1,[[["self"],["bool"]],["self"]]],[11,"same_file_system","","Do not cross file system boundaries.",1,[[["self"],["bool"]],["self"]]],[11,"skip_current_dir","","Skips the current directory.",2,[[["self"]]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",2,[[["self"],["p"]],["filterentry"]]],[11,"path","","The full path that this entry represents.",3,[[["self"]],["path"]]],[11,"into_path","","The full path that this entry represents.",3,[[["self"]],["pathbuf"]]],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",3,[[["self"]],["bool"]]],[11,"metadata","","Return the metadata for the file that this entry points to.",3,[[["self"]],["result",["metadata"]]]],[11,"file_type","","Return the file type for the file that this entry points to.",3,[[["self"]],["filetype"]]],[11,"file_name","","Return the file name of this entry.",3,[[["self"]],["osstr"]]],[11,"depth","","Returns the depth at which this entry was created relative to the root.",3,[[["self"]],["usize"]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",4,[[["self"],["p"]],["filterentry"]]],[11,"skip_current_dir","","Skips the current directory.",4,[[["self"]]]],[11,"path","","Returns the path associated with this error if one exists.",5,[[["self"]],["option",["path"]]]],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,[[["self"]],["option",["path"]]]],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,[[["self"]],["usize"]]],[11,"io_error","","Inspect the original [`io::Error`] if there is one.",5,[[["self"]],["option",["error"]]]],[11,"into_io_error","","Similar to [`io_error`] except consumes self to convert to the original [`io::Error`] if one exists.",5,[[["self"]],["option",["error"]]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",3,[[["self"]],["u64"]]],[11,"next","","Advances the iterator and returns the next value.",2,[[["self"]],["option",["result"]]]],[11,"next","","Advances the iterator and returns the next value.",4,[[["self"]],["option",["result"]]]],[11,"clone","","",3,[[["self"]],["direntry"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]]],"paths":[[8,"DirEntryExt"],[3,"WalkDir"],[3,"IntoIter"],[3,"DirEntry"],[3,"FilterEntry"],[3,"Error"]]};
searchIndex["yansi"]={"doc":"A dead simple ANSI terminal color painting library.","items":[[3,"Style","yansi","Represents a set of styling options.",N,N],[3,"Paint","","A structure encapsulating an item and styling.",N,N],[4,"Color","","An enum representing an ANSI color code.",N,N],[13,"Unset","","No color has been set. Nothing is changed when applied.",0,N],[13,"Black","","Black #0 (foreground code `30`, background code `40`).",0,N],[13,"Red","","Red: #1 (foreground code `31`, background code `41`).",0,N],[13,"Green","","Green: #2 (foreground code `32`, background code `42`).",0,N],[13,"Yellow","","Yellow: #3 (foreground code `33`, background code `43`).",0,N],[13,"Blue","","Blue: #4 (foreground code `34`, background code `44`).",0,N],[13,"Purple","","Purple: #5 (foreground code `35`, background code `45`).",0,N],[13,"Cyan","","Cyan: #6 (foreground code `36`, background code `46`).",0,N],[13,"White","","White: #7 (foreground code `37`, background code `47`).",0,N],[13,"Fixed","","A color number from 0 to 255, for use in 256-color terminals.",0,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",0,N],[11,"new","","Constructs a new `Paint` structure encapsulating `item` with no styling.",1,[[["t"]],["paint"]]],[11,"masked","","Constructs a new masked `Paint` structure encapsulating `item`.",1,[[["t"]],["paint"]]],[11,"rgb","","Constructs a new `Paint` structure encapsulating `item` with the foreground color set to the RGB color `r`, `g`, `b`.",1,[[["u8"],["u8"],["u8"],["t"]],["paint"]]],[11,"fixed","","Constructs a new `Paint` structure encapsulating `item` with the foreground color set to the fixed 256-bit color `color`.",1,[[["u8"],["t"]],["paint"]]],[11,"black","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to black. ",1,[[["t"]],["paint"]]],[11,"red","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to red. ",1,[[["t"]],["paint"]]],[11,"green","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to green. ",1,[[["t"]],["paint"]]],[11,"yellow","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to yellow. ",1,[[["t"]],["paint"]]],[11,"blue","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to blue. ",1,[[["t"]],["paint"]]],[11,"purple","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to purple. ",1,[[["t"]],["paint"]]],[11,"cyan","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to cyan. ",1,[[["t"]],["paint"]]],[11,"white","","Constructs a new `Paint`structure encapsulating `item`with the foreground color set to white. ",1,[[["t"]],["paint"]]],[11,"style","","Retrieves the style currently set on `self`.",1,[[["self"]],["style"]]],[11,"with_style","","Sets the style of `self` to `style`.",1,[[["self"],["style"]],["paint"]]],[11,"mask","","Masks `self`.",1,[[["self"]],["paint"]]],[11,"fg","","Sets the foreground to `color`.",1,[[["self"],["color"]],["paint"]]],[11,"bg","","Sets the background to `color`.",1,[[["self"],["color"]],["paint"]]],[11,"bold","","Enables the bold style on `self`. ",1,[[["self"]],["paint"]]],[11,"dimmed","","Enables the dimmed style on `self`. ",1,[[["self"]],["paint"]]],[11,"italic","","Enables the italic style on `self`. ",1,[[["self"]],["paint"]]],[11,"underline","","Enables the underline style on `self`. ",1,[[["self"]],["paint"]]],[11,"blink","","Enables the blink style on `self`. ",1,[[["self"]],["paint"]]],[11,"invert","","Enables the invert style on `self`. ",1,[[["self"]],["paint"]]],[11,"hidden","","Enables the hidden style on `self`. ",1,[[["self"]],["paint"]]],[11,"strikethrough","","Enables the strikethrough style on `self`. ",1,[[["self"]],["paint"]]],[11,"disable","","Disables coloring globally.",1,[[]]],[11,"enable","","Enables coloring globally. Coloring is enabled by default, so this method should only be called to re enable coloring.",1,[[]]],[11,"is_enabled","","Returns `true` if coloring is enabled and `false` otherwise. Coloring is enabled by default but can be enabled and disabled on-the-fly with the [`Paint::enable()`] and [`Paint::disable()`] methods.",1,[[],["bool"]]],[11,"enable_windows_ascii","","Enables ASCII terminal escape sequences on Windows consoles when possible. Returns `true` if escape sequence support was successfully enabled and `false` otherwise. On non-Windows targets, this method always returns `true`.",1,[[],["bool"]]],[11,"new","","Default, unstylized `Style`. This is identical to `Style::default()`.",2,[[],["style"]]],[11,"masked","","Default, unstylized but masked `Style`. Aside from masking, this is identical to `Style::default()`.",2,[[],["style"]]],[11,"black","","Constructs a new `Style`structure with the foreground color set to black. ",2,[[],["style"]]],[11,"red","","Constructs a new `Style`structure with the foreground color set to red. ",2,[[],["style"]]],[11,"green","","Constructs a new `Style`structure with the foreground color set to green. ",2,[[],["style"]]],[11,"yellow","","Constructs a new `Style`structure with the foreground color set to yellow. ",2,[[],["style"]]],[11,"blue","","Constructs a new `Style`structure with the foreground color set to blue. ",2,[[],["style"]]],[11,"purple","","Constructs a new `Style`structure with the foreground color set to purple. ",2,[[],["style"]]],[11,"cyan","","Constructs a new `Style`structure with the foreground color set to cyan. ",2,[[],["style"]]],[11,"white","","Constructs a new `Style`structure with the foreground color set to white. ",2,[[],["style"]]],[11,"fg_color","","Returns the foreground color of `self`.",2,[[["self"]],["color"]]],[11,"bg_color","","Returns the foreground color of `self`.",2,[[["self"]],["color"]]],[11,"is_masked","","Returns `true` if `self` is masked.",2,[[["self"]],["bool"]]],[11,"is_bold","","Returns `true`if the bold property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_dimmed","","Returns `true`if the dimmed property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_italic","","Returns `true`if the italic property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_underline","","Returns `true`if the underline property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_blink","","Returns `true`if the blink property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_invert","","Returns `true`if the invert property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_hidden","","Returns `true`if the hidden property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"is_strikethrough","","Returns `true`if the strikethrough property is set on `self`. ",2,[[["self"]],["bool"]]],[11,"fg","","Sets the foreground to `color`.",2,[[["self"],["color"]],["style"]]],[11,"bg","","Sets the background to `color`.",2,[[["self"],["color"]],["style"]]],[11,"mask","","Sets `self` to be masked.",2,[[["self"]],["style"]]],[11,"bold","","Enables the bold style on `self`. ",2,[[["self"]],["style"]]],[11,"dimmed","","Enables the dimmed style on `self`. ",2,[[["self"]],["style"]]],[11,"italic","","Enables the italic style on `self`. ",2,[[["self"]],["style"]]],[11,"underline","","Enables the underline style on `self`. ",2,[[["self"]],["style"]]],[11,"blink","","Enables the blink style on `self`. ",2,[[["self"]],["style"]]],[11,"invert","","Enables the invert style on `self`. ",2,[[["self"]],["style"]]],[11,"hidden","","Enables the hidden style on `self`. ",2,[[["self"]],["style"]]],[11,"strikethrough","","Enables the strikethrough style on `self`. ",2,[[["self"]],["style"]]],[11,"paint","","Constructs a new `Paint` structure that encapsulates `item` with the style set to `self`.",2,[[["self"],["t"]],["paint"]]],[11,"fmt_prefix","","Writes the ANSI code prefix for the currently set styles.",2,[[["self"],["formatter"]],["result"]]],[11,"fmt_suffix","","Writes the ANSI code suffix for the currently set styles.",2,[[["self"],["formatter"]],["result"]]],[11,"paint","","Constructs a new `Paint` structure that encapsulates `item` with the foreground color set to the color `self`.",0,[[["self"],["t"]],["paint"]]],[11,"style","","Constructs a new `Style` structure with the foreground color set to the color `self`.",0,[[["self"]],["style"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"partial_cmp","","",1,[[["self"],["paint"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["paint"]],["bool"]]],[11,"le","","",1,[[["self"],["paint"]],["bool"]]],[11,"gt","","",1,[[["self"],["paint"]],["bool"]]],[11,"ge","","",1,[[["self"],["paint"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["style"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["style"]],["bool"]]],[11,"le","","",2,[[["self"],["style"]],["bool"]]],[11,"gt","","",2,[[["self"],["style"]],["bool"]]],[11,"ge","","",2,[[["self"],["style"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["color"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["color"]],["bool"]]],[11,"le","","",0,[[["self"],["color"]],["bool"]]],[11,"gt","","",0,[[["self"],["color"]],["bool"]]],[11,"ge","","",0,[[["self"],["color"]],["bool"]]],[11,"default","","",1,[[],["paint"]]],[11,"default","","",2,[[],["style"]]],[11,"default","","",0,[[],["self"]]],[11,"cmp","","",1,[[["self"],["paint"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["style"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["color"]],["ordering"]]],[11,"eq","","",1,[[["self"],["paint"]],["bool"]]],[11,"ne","","",1,[[["self"],["paint"]],["bool"]]],[11,"eq","","",2,[[["self"],["style"]],["bool"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"ne","","",0,[[["self"],["color"]],["bool"]]],[11,"clone","","",1,[[["self"]],["paint"]]],[11,"clone","","",2,[[["self"]],["style"]]],[11,"clone","","",0,[[["self"]],["color"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",0,N]],"paths":[[4,"Color"],[3,"Paint"],[3,"Style"]]};
initSearch(searchIndex);
