var ALIASES = {};
ALIASES['aho_corasick'] = {};
ALIASES['atty'] = {};
ALIASES['auto_impl'] = {};
ALIASES['backtrace'] = {};
ALIASES['backtrace_sys'] = {};
ALIASES['base64'] = {};
ALIASES['bitflags'] = {};
ALIASES['byteorder'] = {};
ALIASES['bytes'] = {};
ALIASES['cfg_if'] = {};
ALIASES['cookie'] = {};
ALIASES['crossbeam_utils'] = {};
ALIASES['devise'] = {};
ALIASES['devise_codegen'] = {};
ALIASES['devise_core'] = {};
ALIASES['env_logger'] = {};
ALIASES['failure'] = {};
ALIASES['failure_derive'] = {};
ALIASES['filetime'] = {};
ALIASES['futures'] = {};
ALIASES['httparse'] = {};
ALIASES['humantime'] = {};
ALIASES['hyper'] = {};
ALIASES['idna'] = {};
ALIASES['indexmap'] = {};
ALIASES['inotify'] = {};
ALIASES['inotify_sys'] = {};
ALIASES['iovec'] = {};
ALIASES['isatty'] = {};
ALIASES['itoa'] = {};
ALIASES['language_tags'] = {};
ALIASES['lazy_static'] = {};
ALIASES['lazycell'] = {};
ALIASES['libc'] = {};
ALIASES['lock_api'] = {};
ALIASES['log'] = {};
ALIASES['log'] = {};
ALIASES['matches'] = {};
ALIASES['memchr'] = {};
ALIASES['mime'] = {};
ALIASES['mio'] = {};
ALIASES['mio_extras'] = {};
ALIASES['net2'] = {};
ALIASES['notify'] = {};
ALIASES['num_cpus'] = {};
ALIASES['owning_ref'] = {};
ALIASES['parking_lot'] = {};
ALIASES['parking_lot_core'] = {};
ALIASES['pear'] = {};
ALIASES['pear_codegen'] = {};
ALIASES['percent_encoding'] = {};
ALIASES['proc_macro2'] = {};
ALIASES['quick_error'] = {};
ALIASES['quote'] = {};
ALIASES['rand'] = {};
ALIASES['rand_core'] = {};
ALIASES['rand_core'] = {};
ALIASES['regex'] = {};
ALIASES['regex_syntax'] = {};
ALIASES['ring'] = {};
ALIASES['rocket'] = {};
ALIASES['rocket_app'] = {"/=":[{'crate':'rocket_app','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"..=":[{'crate':'rocket_app','ty':3,'name':'RangeInclusive','desc':'An range bounded inclusively below and above (`start..=end`).','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'rocket_app::domain::error::err_msg::_core::ops'}],"*":[{'crate':'rocket_app','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v = 1;`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],">=":[{'crate':'rocket_app','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"^=":[{'crate':'rocket_app','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],">":[{'crate':'rocket_app','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"<=":[{'crate':'rocket_app','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"&=":[{'crate':'rocket_app','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"^":[{'crate':'rocket_app','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"[]":[{'crate':'rocket_app','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in immutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in mutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"+":[{'crate':'rocket_app','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],">>=":[{'crate':'rocket_app','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"%":[{'crate':'rocket_app','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"/":[{'crate':'rocket_app','ty':8,'name':'Div','desc':'The division operator `/`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"[":[{'crate':'rocket_app','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in immutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in mutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"..":[{'crate':'rocket_app','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and exclusively above (`start..end`).','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'rocket_app::domain::error::err_msg::_core::ops'}],"<<":[{'crate':'rocket_app','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust\'s type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"{}":[{'crate':'rocket_app','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'rocket_app::domain::error::err_msg::_core::fmt'}],"<":[{'crate':'rocket_app','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"*=":[{'crate':'rocket_app','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"&":[{'crate':'rocket_app','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"|=":[{'crate':'rocket_app','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"|":[{'crate':'rocket_app','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"&*":[{'crate':'rocket_app','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],">>":[{'crate':'rocket_app','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust\'s type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"?":[{'crate':'rocket_app','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':14,'name':'try','desc':'Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.','p':'rocket_app::domain::error::err_msg::_core'}],"-=":[{'crate':'rocket_app','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"==":[{'crate':'rocket_app','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial equivalence relations.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence relations.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"!=":[{'crate':'rocket_app','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial equivalence relations.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'},{'crate':'rocket_app','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence relations.','p':'rocket_app::domain::error::err_msg::_core::prelude::v1'}],"-":[{'crate':'rocket_app','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"+=":[{'crate':'rocket_app','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"%=":[{'crate':'rocket_app','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"<<=":[{'crate':'rocket_app','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'rocket_app::domain::error::err_msg::_core::ops'}],"{:?}":[{'crate':'rocket_app','ty':8,'name':'Debug','desc':'`?` formatting.','p':'rocket_app::domain::error::err_msg::_core::fmt'}],"]":[{'crate':'rocket_app','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in immutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'},{'crate':'rocket_app','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in mutable contexts.','p':'rocket_app::domain::error::err_msg::_core::ops'}],};
ALIASES['rocket_codegen'] = {};
ALIASES['rocket_contrib'] = {};
ALIASES['rocket_http'] = {};
ALIASES['rustc_demangle'] = {};
ALIASES['ryu'] = {};
ALIASES['safemem'] = {};
ALIASES['same_file'] = {};
ALIASES['scopeguard'] = {};
ALIASES['serde'] = {};
ALIASES['serde_derive'] = {};
ALIASES['serde_json'] = {};
ALIASES['slab'] = {};
ALIASES['smallvec'] = {};
ALIASES['stable_deref_trait'] = {};
ALIASES['state'] = {};
ALIASES['syn'] = {};
ALIASES['synstructure'] = {};
ALIASES['termcolor'] = {};
ALIASES['thread_local'] = {};
ALIASES['time'] = {};
ALIASES['tokio_executor'] = {};
ALIASES['tokio_io'] = {};
ALIASES['tokio_reactor'] = {};
ALIASES['toml'] = {};
ALIASES['traitobject'] = {};
ALIASES['typeable'] = {};
ALIASES['ucd_util'] = {};
ALIASES['unicase'] = {};
ALIASES['unicode_bidi'] = {};
ALIASES['unicode_normalization'] = {};
ALIASES['unicode_xid'] = {};
ALIASES['unreachable'] = {};
ALIASES['untrusted'] = {};
ALIASES['url'] = {};
ALIASES['utf8_ranges'] = {};
ALIASES['uuid'] = {};
ALIASES['void'] = {};
ALIASES['walkdir'] = {};
ALIASES['yansi'] = {};
